
Elisa3-avr-studio.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000002e  00800200  0000a506  0000a59a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000a506  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00001334  0080022e  0080022e  0000a5c8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000a5c8  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000a5f8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000005b8  00000000  00000000  0000a638  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000096a8  00000000  00000000  0000abf0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000023ed  00000000  00000000  00014298  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00006bfd  00000000  00000000  00016685  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000110c  00000000  00000000  0001d284  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000025d2  00000000  00000000  0001e390  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00006581  00000000  00000000  00020962  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000838  00000000  00000000  00026ee3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 7a 01 	jmp	0x2f4	; 0x2f4 <__ctors_end>
       4:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
       8:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
       c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      10:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      14:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      18:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      1c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      20:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      24:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      28:	0c 94 53 1d 	jmp	0x3aa6	; 0x3aa6 <__vector_10>
      2c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      30:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      34:	0c 94 87 1d 	jmp	0x3b0e	; 0x3b0e <__vector_13>
      38:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      3c:	0c 94 4a 25 	jmp	0x4a94	; 0x4a94 <__vector_15>
      40:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      44:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      48:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      4c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      50:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      54:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      58:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      5c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      60:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      64:	0c 94 26 24 	jmp	0x484c	; 0x484c <__vector_25>
      68:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      6c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      70:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      74:	0c 94 d5 25 	jmp	0x4baa	; 0x4baa <__vector_29>
      78:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      7c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      80:	0c 94 b3 43 	jmp	0x8766	; 0x8766 <__vector_32>
      84:	0c 94 c9 43 	jmp	0x8792	; 0x8792 <__vector_33>
      88:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      8c:	0c 94 28 43 	jmp	0x8650	; 0x8650 <__vector_35>
      90:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      94:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      98:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      9c:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      a0:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      a4:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      a8:	0c 94 fc 42 	jmp	0x85f8	; 0x85f8 <__vector_42>
      ac:	0c 94 12 43 	jmp	0x8624	; 0x8624 <__vector_43>
      b0:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      b4:	0c 94 67 42 	jmp	0x84ce	; 0x84ce <__vector_45>
      b8:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      bc:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      c0:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      c4:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      c8:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      cc:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      d0:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      d4:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      d8:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      dc:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      e0:	0c 94 9b 01 	jmp	0x336	; 0x336 <__bad_interrupt>
      e4:	f8 09       	sbc	r31, r8
      e6:	13 0a       	sbc	r1, r19
      e8:	08 0a       	sbc	r0, r24
      ea:	e4 09       	sbc	r30, r4
      ec:	2e 06       	cpc	r2, r30
      ee:	2e 06       	cpc	r2, r30
      f0:	2e 06       	cpc	r2, r30
      f2:	2e 06       	cpc	r2, r30
      f4:	2e 06       	cpc	r2, r30
      f6:	2e 06       	cpc	r2, r30
      f8:	2e 06       	cpc	r2, r30
      fa:	2e 06       	cpc	r2, r30
      fc:	b0 06       	cpc	r11, r16
      fe:	77 03       	mulsu	r23, r23
     100:	0c 03       	fmul	r16, r20
     102:	4f 0d       	add	r20, r15
     104:	73 0b       	sbc	r23, r19
     106:	8b 0d       	add	r24, r11
     108:	d2 0b       	sbc	r29, r18
     10a:	42 0b       	sbc	r20, r18
     10c:	c1 0a       	sbc	r12, r17
     10e:	78 0b       	sbc	r23, r24
     110:	56 0b       	sbc	r21, r22
     112:	2b 20       	and	r2, r11
     114:	13 20       	and	r1, r3
     116:	53 20       	and	r5, r3
     118:	f8 1f       	adc	r31, r24
     11a:	cd 1f       	adc	r28, r29
     11c:	bb 1f       	adc	r27, r27
     11e:	91 1f       	adc	r25, r17
     120:	76 1f       	adc	r23, r22
     122:	3d 1f       	adc	r19, r29
     124:	21 1f       	adc	r18, r17
     126:	cc 1e       	adc	r12, r28
     128:	cc 1e       	adc	r12, r28
     12a:	cc 1e       	adc	r12, r28
     12c:	cc 1e       	adc	r12, r28
     12e:	cc 1e       	adc	r12, r28
     130:	cc 1e       	adc	r12, r28
     132:	6a 1f       	adc	r22, r26
     134:	16 1f       	adc	r17, r22
     136:	cc 1e       	adc	r12, r28
     138:	cc 1e       	adc	r12, r28
     13a:	cc 1e       	adc	r12, r28
     13c:	cc 1e       	adc	r12, r28
     13e:	cc 1e       	adc	r12, r28
     140:	cc 1e       	adc	r12, r28
     142:	cc 1e       	adc	r12, r28
     144:	cc 1e       	adc	r12, r28
     146:	cc 1e       	adc	r12, r28
     148:	cc 1e       	adc	r12, r28
     14a:	cc 1e       	adc	r12, r28
     14c:	cc 1e       	adc	r12, r28
     14e:	3d 1f       	adc	r19, r29
     150:	53 20       	and	r5, r3
     152:	0a 1f       	adc	r16, r26
     154:	fd 1e       	adc	r15, r29
     156:	cc 1e       	adc	r12, r28
     158:	cc 1e       	adc	r12, r28
     15a:	cc 1e       	adc	r12, r28
     15c:	cc 1e       	adc	r12, r28
     15e:	cc 1e       	adc	r12, r28
     160:	cc 1e       	adc	r12, r28
     162:	cc 1e       	adc	r12, r28
     164:	cc 1e       	adc	r12, r28
     166:	cc 1e       	adc	r12, r28
     168:	cc 1e       	adc	r12, r28
     16a:	cc 1e       	adc	r12, r28
     16c:	cc 1e       	adc	r12, r28
     16e:	cd 1f       	adc	r28, r29
     170:	91 1f       	adc	r25, r17
     172:	cc 1e       	adc	r12, r28
     174:	cc 1e       	adc	r12, r28
     176:	2b 20       	and	r2, r11
     178:	bb 1f       	adc	r27, r27
     17a:	eb 1e       	adc	r14, r27
     17c:	66 29       	or	r22, r6
     17e:	5a 29       	or	r21, r10
     180:	4e 29       	or	r20, r14
     182:	42 29       	or	r20, r2
     184:	36 29       	or	r19, r6
     186:	2b 29       	or	r18, r11
     188:	1f 29       	or	r17, r15
     18a:	ce 29       	or	r28, r14
     18c:	bb 29       	or	r27, r11
     18e:	9c 29       	or	r25, r12
     190:	75 29       	or	r23, r5
     192:	af 29       	or	r26, r15
     194:	71 29       	or	r23, r1
     196:	ce 2f       	mov	r28, r30
     198:	f4 2f       	mov	r31, r20
     19a:	b3 30       	cpi	r27, 0x03	; 3
     19c:	2d 30       	cpi	r18, 0x0D	; 13
     19e:	84 30       	cpi	r24, 0x04	; 4
     1a0:	d2 30       	cpi	r29, 0x02	; 2
     1a2:	dd 30       	cpi	r29, 0x0D	; 13
     1a4:	44 2f       	mov	r20, r20
     1a6:	8a 2f       	mov	r24, r26
     1a8:	08 4a       	sbci	r16, 0xA8	; 168
     1aa:	d7 3b       	cpi	r29, 0xB7	; 183
     1ac:	3b ce       	rjmp	.-906    	; 0xfffffe24 <__eeprom_end+0xff7efe24>
     1ae:	01 6e       	ori	r16, 0xE1	; 225
     1b0:	84 bc       	out	0x24, r8	; 36
     1b2:	bf fd       	.word	0xfdbf	; ????
     1b4:	c1 2f       	mov	r28, r17
     1b6:	3d 6c       	ori	r19, 0xCD	; 205
     1b8:	74 31       	cpi	r23, 0x14	; 20
     1ba:	9a bd       	out	0x2a, r25	; 42
     1bc:	56 83       	std	Z+6, r21	; 0x06
     1be:	3d da       	rcall	.-2950   	; 0xfffff63a <__eeprom_end+0xff7ef63a>
     1c0:	3d 00       	.word	0x003d	; ????
     1c2:	c7 7f       	andi	r28, 0xF7	; 247
     1c4:	11 be       	out	0x31, r1	; 49
     1c6:	d9 e4       	ldi	r29, 0x49	; 73
     1c8:	bb 4c       	sbci	r27, 0xCB	; 203
     1ca:	3e 91       	ld	r19, -X
     1cc:	6b aa       	std	Y+51, r6	; 0x33
     1ce:	aa be       	out	0x3a, r10	; 58
     1d0:	00 00       	nop
     1d2:	00 80       	ld	r0, Z
     1d4:	3f 07       	cpc	r19, r31
     1d6:	63 42       	sbci	r22, 0x23	; 35
     1d8:	36 b7       	in	r19, 0x36	; 54
     1da:	9b d8       	rcall	.-3786   	; 0xfffff312 <__eeprom_end+0xff7ef312>
     1dc:	a7 1a       	sub	r10, r23
     1de:	39 68       	ori	r19, 0x89	; 137
     1e0:	56 18       	sub	r5, r6
     1e2:	ae ba       	out	0x1e, r10	; 30
     1e4:	ab 55       	subi	r26, 0x5B	; 91
     1e6:	8c 1d       	adc	r24, r12
     1e8:	3c b7       	in	r19, 0x3c	; 60
     1ea:	cc 57       	subi	r28, 0x7C	; 124
     1ec:	63 bd       	out	0x23, r22	; 35
     1ee:	6d ed       	ldi	r22, 0xDD	; 221
     1f0:	fd 75       	andi	r31, 0x5D	; 93
     1f2:	3e f6       	brtc	.-114    	; 0x182 <__SREG__+0x143>
     1f4:	17 72       	andi	r17, 0x27	; 39
     1f6:	31 bf       	out	0x31, r19	; 49
     1f8:	00 00       	nop
     1fa:	00 80       	ld	r0, Z
     1fc:	3f 05       	cpc	r19, r15
     1fe:	a8 4c       	sbci	r26, 0xC8	; 200
     200:	cd b2       	in	r12, 0x1d	; 29
     202:	d4 4e       	sbci	r29, 0xE4	; 228
     204:	b9 38       	cpi	r27, 0x89	; 137
     206:	36 a9       	ldd	r19, Z+54	; 0x36
     208:	02 0c       	add	r0, r2
     20a:	50 b9       	out	0x00, r21	; 0
     20c:	91 86       	std	Z+9, r9	; 0x09
     20e:	88 08       	sbc	r8, r8
     210:	3c a6       	std	Y+44, r3	; 0x2c
     212:	aa aa       	std	Y+50, r10	; 0x32
     214:	2a be       	out	0x3a, r2	; 58
     216:	00 00       	nop
     218:	00 80       	ld	r0, Z
     21a:	3f 00       	.word	0x003f	; ????

0000021c <__trampolines_start>:
     21c:	0c 94 8b 0d 	jmp	0x1b16	; 0x1b16 <__EEPROM_REGION_LENGTH__+0xb16>
     220:	0c 94 cd 1f 	jmp	0x3f9a	; 0x3f9a <handleIRRemoteCommands+0x26e>
     224:	0c 94 ce 2f 	jmp	0x5f9c	; 0x5f9c <handleCalibration+0x134>
     228:	0c 94 44 2f 	jmp	0x5e88	; 0x5e88 <handleCalibration+0x20>
     22c:	0c 94 fd 1e 	jmp	0x3dfa	; 0x3dfa <handleIRRemoteCommands+0xce>
     230:	0c 94 21 1f 	jmp	0x3e42	; 0x3e42 <handleIRRemoteCommands+0x116>
     234:	0c 94 5a 29 	jmp	0x52b4	; 0x52b4 <__vector_29+0x70a>
     238:	0c 94 13 0a 	jmp	0x1426	; 0x1426 <__EEPROM_REGION_LENGTH__+0x426>
     23c:	0c 94 91 1f 	jmp	0x3f22	; 0x3f22 <handleIRRemoteCommands+0x1f6>
     240:	0c 94 71 29 	jmp	0x52e2	; 0x52e2 <__vector_29+0x738>
     244:	0c 94 2e 06 	jmp	0xc5c	; 0xc5c <__LOCK_REGION_LENGTH__+0x85c>
     248:	0c 94 2d 30 	jmp	0x605a	; 0x605a <handleCalibration+0x1f2>
     24c:	0c 94 2b 29 	jmp	0x5256	; 0x5256 <__vector_29+0x6ac>
     250:	0c 94 0c 03 	jmp	0x618	; 0x618 <__LOCK_REGION_LENGTH__+0x218>
     254:	0c 94 53 20 	jmp	0x40a6	; 0x40a6 <handleIRRemoteCommands+0x37a>
     258:	0c 94 4f 0d 	jmp	0x1a9e	; 0x1a9e <__EEPROM_REGION_LENGTH__+0xa9e>
     25c:	0c 94 f8 09 	jmp	0x13f0	; 0x13f0 <__EEPROM_REGION_LENGTH__+0x3f0>
     260:	0c 94 56 0b 	jmp	0x16ac	; 0x16ac <__EEPROM_REGION_LENGTH__+0x6ac>
     264:	0c 94 cc 1e 	jmp	0x3d98	; 0x3d98 <handleIRRemoteCommands+0x6c>
     268:	0c 94 75 29 	jmp	0x52ea	; 0x52ea <__vector_29+0x740>
     26c:	0c 94 78 0b 	jmp	0x16f0	; 0x16f0 <__EEPROM_REGION_LENGTH__+0x6f0>
     270:	0c 94 36 29 	jmp	0x526c	; 0x526c <__vector_29+0x6c2>
     274:	0c 94 8a 2f 	jmp	0x5f14	; 0x5f14 <handleCalibration+0xac>
     278:	0c 94 9c 29 	jmp	0x5338	; 0x5338 <__vector_29+0x78e>
     27c:	0c 94 0a 1f 	jmp	0x3e14	; 0x3e14 <handleIRRemoteCommands+0xe8>
     280:	0c 94 42 29 	jmp	0x5284	; 0x5284 <__vector_29+0x6da>
     284:	0c 94 4e 29 	jmp	0x529c	; 0x529c <__vector_29+0x6f2>
     288:	0c 94 dd 30 	jmp	0x61ba	; 0x61ba <handleCalibration+0x352>
     28c:	0c 94 84 30 	jmp	0x6108	; 0x6108 <handleCalibration+0x2a0>
     290:	0c 94 d2 30 	jmp	0x61a4	; 0x61a4 <handleCalibration+0x33c>
     294:	0c 94 d2 0b 	jmp	0x17a4	; 0x17a4 <__EEPROM_REGION_LENGTH__+0x7a4>
     298:	0c 94 66 29 	jmp	0x52cc	; 0x52cc <__vector_29+0x722>
     29c:	0c 94 2b 20 	jmp	0x4056	; 0x4056 <handleIRRemoteCommands+0x32a>
     2a0:	0c 94 73 0b 	jmp	0x16e6	; 0x16e6 <__EEPROM_REGION_LENGTH__+0x6e6>
     2a4:	0c 94 f4 2f 	jmp	0x5fe8	; 0x5fe8 <handleCalibration+0x180>
     2a8:	0c 94 42 0b 	jmp	0x1684	; 0x1684 <__EEPROM_REGION_LENGTH__+0x684>
     2ac:	0c 94 bb 1f 	jmp	0x3f76	; 0x3f76 <handleIRRemoteCommands+0x24a>
     2b0:	0c 94 bb 29 	jmp	0x5376	; 0x5376 <__vector_29+0x7cc>
     2b4:	0c 94 c1 0a 	jmp	0x1582	; 0x1582 <__EEPROM_REGION_LENGTH__+0x582>
     2b8:	0c 94 13 20 	jmp	0x4026	; 0x4026 <handleIRRemoteCommands+0x2fa>
     2bc:	0c 94 76 1f 	jmp	0x3eec	; 0x3eec <handleIRRemoteCommands+0x1c0>
     2c0:	0c 94 08 0a 	jmp	0x1410	; 0x1410 <__EEPROM_REGION_LENGTH__+0x410>
     2c4:	0c 94 77 03 	jmp	0x6ee	; 0x6ee <__LOCK_REGION_LENGTH__+0x2ee>
     2c8:	0c 94 16 1f 	jmp	0x3e2c	; 0x3e2c <handleIRRemoteCommands+0x100>
     2cc:	0c 94 eb 1e 	jmp	0x3dd6	; 0x3dd6 <handleIRRemoteCommands+0xaa>
     2d0:	0c 94 b3 30 	jmp	0x6166	; 0x6166 <handleCalibration+0x2fe>
     2d4:	0c 94 3d 1f 	jmp	0x3e7a	; 0x3e7a <handleIRRemoteCommands+0x14e>
     2d8:	0c 94 ce 29 	jmp	0x539c	; 0x539c <__vector_29+0x7f2>
     2dc:	0c 94 e4 09 	jmp	0x13c8	; 0x13c8 <__EEPROM_REGION_LENGTH__+0x3c8>
     2e0:	0c 94 af 29 	jmp	0x535e	; 0x535e <__vector_29+0x7b4>
     2e4:	0c 94 1f 29 	jmp	0x523e	; 0x523e <__vector_29+0x694>
     2e8:	0c 94 f8 1f 	jmp	0x3ff0	; 0x3ff0 <handleIRRemoteCommands+0x2c4>
     2ec:	0c 94 b0 06 	jmp	0xd60	; 0xd60 <__LOCK_REGION_LENGTH__+0x960>
     2f0:	0c 94 6a 1f 	jmp	0x3ed4	; 0x3ed4 <handleIRRemoteCommands+0x1a8>

000002f4 <__ctors_end>:
     2f4:	11 24       	eor	r1, r1
     2f6:	1f be       	out	0x3f, r1	; 63
     2f8:	cf ef       	ldi	r28, 0xFF	; 255
     2fa:	d1 e2       	ldi	r29, 0x21	; 33
     2fc:	de bf       	out	0x3e, r29	; 62
     2fe:	cd bf       	out	0x3d, r28	; 61
     300:	00 e0       	ldi	r16, 0x00	; 0
     302:	0c bf       	out	0x3c, r16	; 60

00000304 <__do_copy_data>:
     304:	12 e0       	ldi	r17, 0x02	; 2
     306:	a0 e0       	ldi	r26, 0x00	; 0
     308:	b2 e0       	ldi	r27, 0x02	; 2
     30a:	e6 e0       	ldi	r30, 0x06	; 6
     30c:	f5 ea       	ldi	r31, 0xA5	; 165
     30e:	00 e0       	ldi	r16, 0x00	; 0
     310:	0b bf       	out	0x3b, r16	; 59
     312:	02 c0       	rjmp	.+4      	; 0x318 <__do_copy_data+0x14>
     314:	07 90       	elpm	r0, Z+
     316:	0d 92       	st	X+, r0
     318:	ae 32       	cpi	r26, 0x2E	; 46
     31a:	b1 07       	cpc	r27, r17
     31c:	d9 f7       	brne	.-10     	; 0x314 <__do_copy_data+0x10>

0000031e <__do_clear_bss>:
     31e:	25 e1       	ldi	r18, 0x15	; 21
     320:	ae e2       	ldi	r26, 0x2E	; 46
     322:	b2 e0       	ldi	r27, 0x02	; 2
     324:	01 c0       	rjmp	.+2      	; 0x328 <.do_clear_bss_start>

00000326 <.do_clear_bss_loop>:
     326:	1d 92       	st	X+, r1

00000328 <.do_clear_bss_start>:
     328:	a2 36       	cpi	r26, 0x62	; 98
     32a:	b2 07       	cpc	r27, r18
     32c:	e1 f7       	brne	.-8      	; 0x326 <.do_clear_bss_loop>
     32e:	0e 94 9d 01 	call	0x33a	; 0x33a <main>
     332:	0c 94 81 52 	jmp	0xa502	; 0xa502 <_exit>

00000336 <__bad_interrupt>:
     336:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000033a <main>:
//		r_speed = r_speed +2;
//		l_speed = l_speed +2;
//	}
//}

int main(void) {
     33a:	cf 93       	push	r28
     33c:	df 93       	push	r29
     33e:	cd b7       	in	r28, 0x3d	; 61
     340:	de b7       	in	r29, 0x3e	; 62
     342:	c7 55       	subi	r28, 0x57	; 87
     344:	d3 40       	sbci	r29, 0x03	; 3
     346:	0f b6       	in	r0, 0x3f	; 63
     348:	f8 94       	cli
     34a:	de bf       	out	0x3e, r29	; 62
     34c:	0f be       	out	0x3f, r0	; 63
     34e:	cd bf       	out	0x3d, r28	; 61
    float x_ref[2] = {0.0,0.0};
    float sum[2] = {0.0,0.0};
    float distance =0, smallest = 10000.0;
    int id_formation[100] = {ROBOTS+1};
    float x_refs[2] = {0, 200};
    float x_hat[100][2] = {0};
     350:	9e 01       	movw	r18, r28
     352:	2f 5f       	subi	r18, 0xFF	; 255
     354:	3f 4f       	sbci	r19, 0xFF	; 255
     356:	cf 5d       	subi	r28, 0xDF	; 223
     358:	dc 4f       	sbci	r29, 0xFC	; 252
     35a:	39 83       	std	Y+1, r19	; 0x01
     35c:	28 83       	st	Y, r18
     35e:	c1 52       	subi	r28, 0x21	; 33
     360:	d3 40       	sbci	r29, 0x03	; 3
     362:	80 e2       	ldi	r24, 0x20	; 32
     364:	93 e0       	ldi	r25, 0x03	; 3
     366:	d9 01       	movw	r26, r18
     368:	fc 01       	movw	r30, r24
     36a:	1d 92       	st	X+, r1
     36c:	31 97       	sbiw	r30, 0x01	; 1
     36e:	e9 f7       	brne	.-6      	; 0x36a <main+0x30>
	unsigned long int wait_time = 0;
	unsigned long int wait_time_previous = 0;
	unsigned long int straight_time = 0;
	unsigned long int straight_time_previous = 0;
	
	initPeripherals();
     370:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <initPeripherals>

	initBehaviors();
     374:	0e 94 df 43 	call	0x87be	; 0x87be <initBehaviors>

	speedStepCounter = getTime100MicroSec();
     378:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
     37c:	8b 01       	movw	r16, r22
     37e:	9c 01       	movw	r18, r24
     380:	60 93 bc 02 	sts	0x02BC, r22	; 0x8002bc <speedStepCounter>
     384:	10 93 bd 02 	sts	0x02BD, r17	; 0x8002bd <speedStepCounter+0x1>
     388:	20 93 be 02 	sts	0x02BE, r18	; 0x8002be <speedStepCounter+0x2>
     38c:	30 93 bf 02 	sts	0x02BF, r19	; 0x8002bf <speedStepCounter+0x3>
     390:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <speedStepCounter+0x4>
     394:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <speedStepCounter+0x5>
     398:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <speedStepCounter+0x6>
     39c:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <speedStepCounter+0x7>
	
	// I noticed that I have to wait a little before calibrating in order to have the sensors to be 
	// well calibrated (sensors noise eliminated). Don't sure why, maybe due to the sensitivity of the 
	// sensor that stabilizes...
	startTime = getTime100MicroSec();
     3a0:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
     3a4:	6b 01       	movw	r12, r22
     3a6:	7c 01       	movw	r14, r24
	while((getTime100MicroSec() - startTime) < PAUSE_300_MSEC);
     3a8:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
     3ac:	dc 01       	movw	r26, r24
     3ae:	cb 01       	movw	r24, r22
     3b0:	8c 19       	sub	r24, r12
     3b2:	9d 09       	sbc	r25, r13
     3b4:	ae 09       	sbc	r26, r14
     3b6:	bf 09       	sbc	r27, r15
     3b8:	85 34       	cpi	r24, 0x45	; 69
     3ba:	9b 40       	sbci	r25, 0x0B	; 11
     3bc:	a1 05       	cpc	r26, r1
     3be:	b1 05       	cpc	r27, r1
     3c0:	98 f3       	brcs	.-26     	; 0x3a8 <main+0x6e>
	calibrateSensors();
     3c2:	0e 94 a6 47 	call	0x8f4c	; 0x8f4c <calibrateSensors>

	startTime = getTime100MicroSec();
     3c6:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
     3ca:	ca 5c       	subi	r28, 0xCA	; 202
     3cc:	dc 4f       	sbci	r29, 0xFC	; 252
     3ce:	68 83       	st	Y, r22
     3d0:	79 83       	std	Y+1, r23	; 0x01
     3d2:	8a 83       	std	Y+2, r24	; 0x02
     3d4:	9b 83       	std	Y+3, r25	; 0x03
     3d6:	c6 53       	subi	r28, 0x36	; 54
     3d8:	d3 40       	sbci	r29, 0x03	; 3
    resetOdometry();
     3da:	0e 94 61 25 	call	0x4ac2	; 0x4ac2 <resetOdometry>
	
	

    demoStartTime = getTime100MicroSec();
     3de:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
     3e2:	60 93 c4 02 	sts	0x02C4, r22	; 0x8002c4 <demoStartTime>
     3e6:	70 93 c5 02 	sts	0x02C5, r23	; 0x8002c5 <demoStartTime+0x1>
     3ea:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <demoStartTime+0x2>
     3ee:	90 93 c7 02 	sts	0x02C7, r25	; 0x8002c7 <demoStartTime+0x3>
    unsigned long int period = getTime100MicroSec();
     3f2:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
     3f6:	c8 5b       	subi	r28, 0xB8	; 184
     3f8:	dc 4f       	sbci	r29, 0xFC	; 252
     3fa:	68 83       	st	Y, r22
     3fc:	79 83       	std	Y+1, r23	; 0x01
     3fe:	8a 83       	std	Y+2, r24	; 0x02
     400:	9b 83       	std	Y+3, r25	; 0x03
     402:	c8 54       	subi	r28, 0x48	; 72
     404:	d3 40       	sbci	r29, 0x03	; 3
	unsigned char prevSelector=0;
	unsigned int i=0;
	unsigned int currRand=0, currRand2=0;
	//float speed = 0;
    float x_ref[2] = {0.0,0.0};
    float sum[2] = {0.0,0.0};
     406:	c0 5b       	subi	r28, 0xB0	; 176
     408:	dc 4f       	sbci	r29, 0xFC	; 252
     40a:	18 82       	st	Y, r1
     40c:	19 82       	std	Y+1, r1	; 0x01
     40e:	1a 82       	std	Y+2, r1	; 0x02
     410:	1b 82       	std	Y+3, r1	; 0x03
     412:	c0 55       	subi	r28, 0x50	; 80
     414:	d3 40       	sbci	r29, 0x03	; 3
     416:	cc 5a       	subi	r28, 0xAC	; 172
     418:	dc 4f       	sbci	r29, 0xFC	; 252
     41a:	18 82       	st	Y, r1
     41c:	19 82       	std	Y+1, r1	; 0x01
     41e:	1a 82       	std	Y+2, r1	; 0x02
     420:	1b 82       	std	Y+3, r1	; 0x03
     422:	c4 55       	subi	r28, 0x54	; 84
     424:	d3 40       	sbci	r29, 0x03	; 3
	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
	unsigned int i=0;
	unsigned int currRand=0, currRand2=0;
	//float speed = 0;
    float x_ref[2] = {0.0,0.0};
     426:	c0 5c       	subi	r28, 0xC0	; 192
     428:	dc 4f       	sbci	r29, 0xFC	; 252
     42a:	18 82       	st	Y, r1
     42c:	19 82       	std	Y+1, r1	; 0x01
     42e:	1a 82       	std	Y+2, r1	; 0x02
     430:	1b 82       	std	Y+3, r1	; 0x03
     432:	c0 54       	subi	r28, 0x40	; 64
     434:	d3 40       	sbci	r29, 0x03	; 3
     436:	cc 5b       	subi	r28, 0xBC	; 188
     438:	dc 4f       	sbci	r29, 0xFC	; 252
     43a:	18 82       	st	Y, r1
     43c:	19 82       	std	Y+1, r1	; 0x01
     43e:	1a 82       	std	Y+2, r1	; 0x02
     440:	1b 82       	std	Y+3, r1	; 0x03
     442:	c4 54       	subi	r28, 0x44	; 68
     444:	d3 40       	sbci	r29, 0x03	; 3
	unsigned long int loop_time_previous = 0;
	unsigned long int comm_time_previous = 0;
	unsigned long int control_time_previous = 0;
	unsigned long int init_time_previous = 0;
	unsigned long int wait_time = 0;
	unsigned long int wait_time_previous = 0;
     446:	c4 5b       	subi	r28, 0xB4	; 180
     448:	dc 4f       	sbci	r29, 0xFC	; 252
     44a:	18 82       	st	Y, r1
     44c:	19 82       	std	Y+1, r1	; 0x01
     44e:	1a 82       	std	Y+2, r1	; 0x02
     450:	1b 82       	std	Y+3, r1	; 0x03
     452:	cc 54       	subi	r28, 0x4C	; 76
     454:	d3 40       	sbci	r29, 0x03	; 3
	unsigned int rec[ROBOTS];
	unsigned int neigh[Ni];
	unsigned long int loop_time_previous = 0;
	unsigned long int comm_time_previous = 0;
	unsigned long int control_time_previous = 0;
	unsigned long int init_time_previous = 0;
     456:	c9 5d       	subi	r28, 0xD9	; 217
     458:	dc 4f       	sbci	r29, 0xFC	; 252
     45a:	18 82       	st	Y, r1
     45c:	19 82       	std	Y+1, r1	; 0x01
     45e:	1a 82       	std	Y+2, r1	; 0x02
     460:	1b 82       	std	Y+3, r1	; 0x03
     462:	c7 52       	subi	r28, 0x27	; 39
     464:	d3 40       	sbci	r29, 0x03	; 3
	int Ni = 1;
	int com = 0;
	int D = 1;
	unsigned int rec[ROBOTS];
	unsigned int neigh[Ni];
	unsigned long int loop_time_previous = 0;
     466:	cf 5c       	subi	r28, 0xCF	; 207
     468:	dc 4f       	sbci	r29, 0xFC	; 252
     46a:	18 82       	st	Y, r1
     46c:	19 82       	std	Y+1, r1	; 0x01
     46e:	1a 82       	std	Y+2, r1	; 0x02
     470:	1b 82       	std	Y+3, r1	; 0x03
     472:	c1 53       	subi	r28, 0x31	; 49
     474:	d3 40       	sbci	r29, 0x03	; 3
	float theta_acc = 0.0;
	float targetAngle=0;
    float *u;
    unsigned long int trigger_LED_timer = 0;
    bool trigger_flag = false;
	bool init_trigger = false;
     476:	c1 5c       	subi	r28, 0xC1	; 193
     478:	dc 4f       	sbci	r29, 0xFC	; 252
     47a:	18 82       	st	Y, r1
     47c:	cf 53       	subi	r28, 0x3F	; 63
     47e:	d3 40       	sbci	r29, 0x03	; 3
    float theta_ref = 0.0;
	float theta_acc = 0.0;
	float targetAngle=0;
    float *u;
    unsigned long int trigger_LED_timer = 0;
    bool trigger_flag = false;
     480:	c6 5c       	subi	r28, 0xC6	; 198
     482:	dc 4f       	sbci	r29, 0xFC	; 252
     484:	18 82       	st	Y, r1
     486:	ca 53       	subi	r28, 0x3A	; 58
     488:	d3 40       	sbci	r29, 0x03	; 3
    float x_hat[100][2] = {0};
    float theta_ref = 0.0;
	float theta_acc = 0.0;
	float targetAngle=0;
    float *u;
    unsigned long int trigger_LED_timer = 0;
     48a:	c5 5c       	subi	r28, 0xC5	; 197
     48c:	dc 4f       	sbci	r29, 0xFC	; 252
     48e:	18 82       	st	Y, r1
     490:	19 82       	std	Y+1, r1	; 0x01
     492:	1a 82       	std	Y+2, r1	; 0x02
     494:	1b 82       	std	Y+3, r1	; 0x03
     496:	cb 53       	subi	r28, 0x3B	; 59
     498:	d3 40       	sbci	r29, 0x03	; 3

int main(void) {

    static state NextState = idle;
	unsigned long int startTime = 0, endTime = 0, turnOffLedsTime = 0;
	unsigned char prevSelector=0;
     49a:	cb 5c       	subi	r28, 0xCB	; 203
     49c:	dc 4f       	sbci	r29, 0xFC	; 252
     49e:	18 82       	st	Y, r1
     4a0:	c5 53       	subi	r28, 0x35	; 53
     4a2:	d3 40       	sbci	r29, 0x03	; 3
    demoStartTime = getTime100MicroSec();
    unsigned long int period = getTime100MicroSec();
	
	while(1) {
		// turn on all IRs
		LED_IR1_LOW;
     4a4:	44 98       	cbi	0x08, 4	; 8
		LED_IR2_LOW;
     4a6:	45 98       	cbi	0x08, 5	; 8
		
		loop_time = getTime100MicroSec() - loop_time_previous;
     4a8:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
     4ac:	dc 01       	movw	r26, r24
     4ae:	cb 01       	movw	r24, r22
     4b0:	cf 5c       	subi	r28, 0xCF	; 207
     4b2:	dc 4f       	sbci	r29, 0xFC	; 252
     4b4:	28 81       	ld	r18, Y
     4b6:	39 81       	ldd	r19, Y+1	; 0x01
     4b8:	4a 81       	ldd	r20, Y+2	; 0x02
     4ba:	5b 81       	ldd	r21, Y+3	; 0x03
     4bc:	c1 53       	subi	r28, 0x31	; 49
     4be:	d3 40       	sbci	r29, 0x03	; 3
     4c0:	82 1b       	sub	r24, r18
     4c2:	93 0b       	sbc	r25, r19
     4c4:	a4 0b       	sbc	r26, r20
     4c6:	b5 0b       	sbc	r27, r21
     4c8:	80 93 f1 03 	sts	0x03F1, r24	; 0x8003f1 <loop_time>
     4cc:	90 93 f2 03 	sts	0x03F2, r25	; 0x8003f2 <loop_time+0x1>
     4d0:	a0 93 f3 03 	sts	0x03F3, r26	; 0x8003f3 <loop_time+0x2>
     4d4:	b0 93 f4 03 	sts	0x03F4, r27	; 0x8003f4 <loop_time+0x3>
		loop_time_previous = getTime100MicroSec();
     4d8:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
     4dc:	cf 5c       	subi	r28, 0xCF	; 207
     4de:	dc 4f       	sbci	r29, 0xFC	; 252
     4e0:	68 83       	st	Y, r22
     4e2:	79 83       	std	Y+1, r23	; 0x01
     4e4:	8a 83       	std	Y+2, r24	; 0x02
     4e6:	9b 83       	std	Y+3, r25	; 0x03
     4e8:	c1 53       	subi	r28, 0x31	; 49
     4ea:	d3 40       	sbci	r29, 0x03	; 3
		
		currentSelector = getSelector();	// update selector position
     4ec:	0e 94 d6 24 	call	0x49ac	; 0x49ac <getSelector>
     4f0:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <currentSelector>

		control_time_previous = getTime100MicroSec();
     4f4:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
     4f8:	6b 01       	movw	r12, r22
     4fa:	7c 01       	movw	r14, r24
		readAccelXYZ();						// update accelerometer values to compute the angle
     4fc:	0e 94 91 46 	call	0x8d22	; 0x8d22 <readAccelXYZ>

		computeAngle();
     500:	0e 94 4b 4c 	call	0x9896	; 0x9896 <computeAngle>
		control_time = getTime100MicroSec() - control_time_previous;
     504:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
     508:	dc 01       	movw	r26, r24
     50a:	cb 01       	movw	r24, r22
     50c:	8c 19       	sub	r24, r12
     50e:	9d 09       	sbc	r25, r13
     510:	ae 09       	sbc	r26, r14
     512:	bf 09       	sbc	r27, r15
     514:	80 93 e9 03 	sts	0x03E9, r24	; 0x8003e9 <control_time>
     518:	90 93 ea 03 	sts	0x03EA, r25	; 0x8003ea <control_time+0x1>
     51c:	a0 93 eb 03 	sts	0x03EB, r26	; 0x8003eb <control_time+0x2>
     520:	b0 93 ec 03 	sts	0x03EC, r27	; 0x8003ec <control_time+0x3>

		endTime = getTime100MicroSec();
     524:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
     528:	dc 01       	movw	r26, r24
     52a:	cb 01       	movw	r24, r22
     52c:	ca 5c       	subi	r28, 0xCA	; 202
     52e:	dc 4f       	sbci	r29, 0xFC	; 252
     530:	28 81       	ld	r18, Y
     532:	39 81       	ldd	r19, Y+1	; 0x01
     534:	4a 81       	ldd	r20, Y+2	; 0x02
     536:	5b 81       	ldd	r21, Y+3	; 0x03
     538:	c6 53       	subi	r28, 0x36	; 54
     53a:	d3 40       	sbci	r29, 0x03	; 3
     53c:	82 1b       	sub	r24, r18
     53e:	93 0b       	sbc	r25, r19
     540:	a4 0b       	sbc	r26, r20
     542:	b5 0b       	sbc	r27, r21
     544:	8e 31       	cpi	r24, 0x1E	; 30
     546:	9b 44       	sbci	r25, 0x4B	; 75
     548:	a1 05       	cpc	r26, r1
     54a:	b1 05       	cpc	r27, r1
     54c:	10 f0       	brcs	.+4      	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
     54e:	0c 94 70 0e 	jmp	0x1ce0	; 0x1ce0 <__EEPROM_REGION_LENGTH__+0xce0>
			readBatteryLevel();				// the battery level is updated every two seconds
    		startTime = getTime100MicroSec();
		}

        handleIRRemoteCommands();
     552:	0e 94 96 1e 	call	0x3d2c	; 0x3d2c <handleIRRemoteCommands>
		
		if ((NextState == straight || NextState == idle)){
     556:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <__data_end>
     55a:	83 30       	cpi	r24, 0x03	; 3
     55c:	11 f4       	brne	.+4      	; 0x562 <__LOCK_REGION_LENGTH__+0x162>
     55e:	0c 94 6c 0e 	jmp	0x1cd8	; 0x1cd8 <__EEPROM_REGION_LENGTH__+0xcd8>
     562:	88 23       	and	r24, r24
     564:	11 f4       	brne	.+4      	; 0x56a <__LOCK_REGION_LENGTH__+0x16a>
     566:	0c 94 6c 0e 	jmp	0x1cd8	; 0x1cd8 <__EEPROM_REGION_LENGTH__+0xcd8>
			turn = false;
		}else{
			turn = true;
     56a:	41 e0       	ldi	r20, 0x01	; 1
     56c:	40 93 2b 07 	sts	0x072B, r20	; 0x80072b <turn>
		}

		//comm_time_previous = getTime100MicroSec();
		reset_flag = false;
     570:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <reset_flag>
        if(handleRFCommands()){		
     574:	0e 94 c9 15 	call	0x2b92	; 0x2b92 <handleRFCommands>
     578:	88 23       	and	r24, r24
     57a:	61 f1       	breq	.+88     	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
			for (int i = 0; i<ROBOTS; i++){
     57c:	20 91 2b 02 	lds	r18, 0x022B	; 0x80022b <ROBOTS>
     580:	30 91 2c 02 	lds	r19, 0x022C	; 0x80022c <ROBOTS+0x1>
     584:	21 15       	cp	r18, r1
     586:	31 05       	cpc	r19, r1
     588:	29 f1       	breq	.+74     	; 0x5d4 <__LOCK_REGION_LENGTH__+0x1d4>
     58a:	a2 ed       	ldi	r26, 0xD2	; 210
     58c:	b8 e0       	ldi	r27, 0x08	; 8
     58e:	fe 01       	movw	r30, r28
     590:	31 96       	adiw	r30, 0x01	; 1
     592:	82 e4       	ldi	r24, 0x42	; 66
     594:	97 e0       	ldi	r25, 0x07	; 7
     596:	22 0f       	add	r18, r18
     598:	33 1f       	adc	r19, r19
     59a:	22 0f       	add	r18, r18
     59c:	33 1f       	adc	r19, r19
     59e:	2e 52       	subi	r18, 0x2E	; 46
     5a0:	37 4f       	sbci	r19, 0xF7	; 247
     5a2:	8d 01       	movw	r16, r26
				x_hat[i][0] = Xpos_array[i];
     5a4:	d8 01       	movw	r26, r16
     5a6:	4d 91       	ld	r20, X+
     5a8:	5d 91       	ld	r21, X+
     5aa:	6d 91       	ld	r22, X+
     5ac:	7d 91       	ld	r23, X+
     5ae:	8d 01       	movw	r16, r26
     5b0:	40 83       	st	Z, r20
     5b2:	51 83       	std	Z+1, r21	; 0x01
     5b4:	62 83       	std	Z+2, r22	; 0x02
     5b6:	73 83       	std	Z+3, r23	; 0x03
				x_hat[i][1] = Ypos_array[i];
     5b8:	dc 01       	movw	r26, r24
     5ba:	4d 91       	ld	r20, X+
     5bc:	5d 91       	ld	r21, X+
     5be:	6d 91       	ld	r22, X+
     5c0:	7d 91       	ld	r23, X+
     5c2:	cd 01       	movw	r24, r26
     5c4:	44 83       	std	Z+4, r20	; 0x04
     5c6:	55 83       	std	Z+5, r21	; 0x05
     5c8:	66 83       	std	Z+6, r22	; 0x06
     5ca:	77 83       	std	Z+7, r23	; 0x07
     5cc:	38 96       	adiw	r30, 0x08	; 8
		}

		//comm_time_previous = getTime100MicroSec();
		reset_flag = false;
        if(handleRFCommands()){		
			for (int i = 0; i<ROBOTS; i++){
     5ce:	02 17       	cp	r16, r18
     5d0:	13 07       	cpc	r17, r19
     5d2:	41 f7       	brne	.-48     	; 0x5a4 <__LOCK_REGION_LENGTH__+0x1a4>
				x_hat[i][0] = Xpos_array[i];
				x_hat[i][1] = Ypos_array[i];
			}
		}
		
		if (turn){
     5d4:	80 91 2b 07 	lds	r24, 0x072B	; 0x80072b <turn>
     5d8:	88 23       	and	r24, r24
     5da:	81 f0       	breq	.+32     	; 0x5fc <__LOCK_REGION_LENGTH__+0x1fc>
			filtered_theta = theta;
     5dc:	80 91 af 02 	lds	r24, 0x02AF	; 0x8002af <theta>
     5e0:	90 91 b0 02 	lds	r25, 0x02B0	; 0x8002b0 <theta+0x1>
     5e4:	a0 91 b1 02 	lds	r26, 0x02B1	; 0x8002b1 <theta+0x2>
     5e8:	b0 91 b2 02 	lds	r27, 0x02B2	; 0x8002b2 <theta+0x3>
     5ec:	80 93 2c 07 	sts	0x072C, r24	; 0x80072c <filtered_theta>
     5f0:	90 93 2d 07 	sts	0x072D, r25	; 0x80072d <filtered_theta+0x1>
     5f4:	a0 93 2e 07 	sts	0x072E, r26	; 0x80072e <filtered_theta+0x2>
     5f8:	b0 93 2f 07 	sts	0x072F, r27	; 0x80072f <filtered_theta+0x3>
		}
		//comm_time = getTime100MicroSec() - comm_time_previous;
		
		switch(currentSelector) {
     5fc:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <currentSelector>
     600:	90 e0       	ldi	r25, 0x00	; 0
     602:	8f 30       	cpi	r24, 0x0F	; 15
     604:	91 05       	cpc	r25, r1
     606:	08 f0       	brcs	.+2      	; 0x60a <__LOCK_REGION_LENGTH__+0x20a>
     608:	29 c3       	rjmp	.+1618   	; 0xc5c <__LOCK_REGION_LENGTH__+0x85c>
     60a:	fc 01       	movw	r30, r24
     60c:	88 27       	eor	r24, r24
     60e:	ee 58       	subi	r30, 0x8E	; 142
     610:	ff 4f       	sbci	r31, 0xFF	; 255
     612:	8f 4f       	sbci	r24, 0xFF	; 255
     614:	0c 94 85 51 	jmp	0xa30a	; 0xa30a <__tablejump2__>

                break;
					
			case 14:
			// Move in straight line toward goal -- Phase algorithm
				enableObstacleAvoidance();
     618:	0e 94 de 45 	call	0x8bbc	; 0x8bbc <enableObstacleAvoidance>
				
				// In order to visualise what is happening
				xPos_fixed = position[0];
     61c:	60 91 32 07 	lds	r22, 0x0732	; 0x800732 <position>
     620:	70 91 33 07 	lds	r23, 0x0733	; 0x800733 <position+0x1>
     624:	80 91 34 07 	lds	r24, 0x0734	; 0x800734 <position+0x2>
     628:	90 91 35 07 	lds	r25, 0x0735	; 0x800735 <position+0x3>
     62c:	60 93 02 04 	sts	0x0402, r22	; 0x800402 <xPos_fixed>
     630:	70 93 03 04 	sts	0x0403, r23	; 0x800403 <xPos_fixed+0x1>
     634:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <xPos_fixed+0x2>
     638:	90 93 05 04 	sts	0x0405, r25	; 0x800405 <xPos_fixed+0x3>
				yPos_fixed = position[1];
     63c:	c0 90 36 07 	lds	r12, 0x0736	; 0x800736 <position+0x4>
     640:	d0 90 37 07 	lds	r13, 0x0737	; 0x800737 <position+0x5>
     644:	e0 90 38 07 	lds	r14, 0x0738	; 0x800738 <position+0x6>
     648:	f0 90 39 07 	lds	r15, 0x0739	; 0x800739 <position+0x7>
     64c:	c0 92 fe 03 	sts	0x03FE, r12	; 0x8003fe <yPos_fixed>
     650:	d0 92 ff 03 	sts	0x03FF, r13	; 0x8003ff <yPos_fixed+0x1>
     654:	e0 92 00 04 	sts	0x0400, r14	; 0x800400 <yPos_fixed+0x2>
     658:	f0 92 01 04 	sts	0x0401, r15	; 0x800401 <yPos_fixed+0x3>

				// controller
				//control_time_previous = getTime100MicroSec();
                u = da_control(position, x_ref, id);
     65c:	00 91 29 02 	lds	r16, 0x0229	; 0x800229 <id>
     660:	10 91 2a 02 	lds	r17, 0x022A	; 0x80022a <id+0x1>
float *da_control(const float (*x), float *x_ref, int id){

    static float u[2];
    float K_ = 50;

    u[0] = -K_*(x[0]-x_ref[0]);
     664:	cc 5b       	subi	r28, 0xBC	; 188
     666:	dc 4f       	sbci	r29, 0xFC	; 252
     668:	28 81       	ld	r18, Y
     66a:	39 81       	ldd	r19, Y+1	; 0x01
     66c:	4a 81       	ldd	r20, Y+2	; 0x02
     66e:	5b 81       	ldd	r21, Y+3	; 0x03
     670:	c4 54       	subi	r28, 0x44	; 68
     672:	d3 40       	sbci	r29, 0x03	; 3
     674:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <__subsf3>
     678:	20 e0       	ldi	r18, 0x00	; 0
     67a:	30 e0       	ldi	r19, 0x00	; 0
     67c:	48 e4       	ldi	r20, 0x48	; 72
     67e:	52 ec       	ldi	r21, 0xC2	; 194
     680:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
     684:	4b 01       	movw	r8, r22
     686:	5c 01       	movw	r10, r24
     688:	60 93 2f 02 	sts	0x022F, r22	; 0x80022f <u.7190>
     68c:	70 93 30 02 	sts	0x0230, r23	; 0x800230 <u.7190+0x1>
     690:	80 93 31 02 	sts	0x0231, r24	; 0x800231 <u.7190+0x2>
     694:	90 93 32 02 	sts	0x0232, r25	; 0x800232 <u.7190+0x3>
    u[1] = -K_*(x[1]-x_ref[1]);
     698:	c0 5c       	subi	r28, 0xC0	; 192
     69a:	dc 4f       	sbci	r29, 0xFC	; 252
     69c:	28 81       	ld	r18, Y
     69e:	39 81       	ldd	r19, Y+1	; 0x01
     6a0:	4a 81       	ldd	r20, Y+2	; 0x02
     6a2:	5b 81       	ldd	r21, Y+3	; 0x03
     6a4:	c0 54       	subi	r28, 0x40	; 64
     6a6:	d3 40       	sbci	r29, 0x03	; 3
     6a8:	c7 01       	movw	r24, r14
     6aa:	b6 01       	movw	r22, r12
     6ac:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <__subsf3>
     6b0:	20 e0       	ldi	r18, 0x00	; 0
     6b2:	30 e0       	ldi	r19, 0x00	; 0
     6b4:	48 e4       	ldi	r20, 0x48	; 72
     6b6:	52 ec       	ldi	r21, 0xC2	; 194
     6b8:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
     6bc:	6b 01       	movw	r12, r22
     6be:	7c 01       	movw	r14, r24
     6c0:	60 93 33 02 	sts	0x0233, r22	; 0x800233 <u.7190+0x4>
     6c4:	70 93 34 02 	sts	0x0234, r23	; 0x800234 <u.7190+0x5>
     6c8:	80 93 35 02 	sts	0x0235, r24	; 0x800235 <u.7190+0x6>
     6cc:	90 93 36 02 	sts	0x0236, r25	; 0x800236 <u.7190+0x7>
				//control_time_previous = getTime100MicroSec();
                u = da_control(position, x_ref, id);
				//control_time = getTime100MicroSec() - control_time_previous;

				//control_time_previous = getTime100MicroSec();
                switch (NextState){
     6d0:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <__data_end>
     6d4:	90 e0       	ldi	r25, 0x00	; 0
     6d6:	88 30       	cpi	r24, 0x08	; 8
     6d8:	91 05       	cpc	r25, r1
     6da:	10 f0       	brcs	.+4      	; 0x6e0 <__LOCK_REGION_LENGTH__+0x2e0>
     6dc:	0c 94 73 0b 	jmp	0x16e6	; 0x16e6 <__EEPROM_REGION_LENGTH__+0x6e6>
     6e0:	fc 01       	movw	r30, r24
     6e2:	88 27       	eor	r24, r24
     6e4:	ef 57       	subi	r30, 0x7F	; 127
     6e6:	ff 4f       	sbci	r31, 0xFF	; 255
     6e8:	8f 4f       	sbci	r24, 0xFF	; 255
     6ea:	0c 94 85 51 	jmp	0xa30a	; 0xa30a <__tablejump2__>
                break;
					
			case 13:
                // ETC

                enableObstacleAvoidance();
     6ee:	0e 94 de 45 	call	0x8bbc	; 0x8bbc <enableObstacleAvoidance>

float *etc_control(float (*x_hat)[2], int id){

    static float u[2];

    u[0] = 0;
     6f2:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <u.7157>
     6f6:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <u.7157+0x1>
     6fa:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <u.7157+0x2>
     6fe:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <u.7157+0x3>
    u[1] = 0;
     702:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <u.7157+0x4>
     706:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <u.7157+0x5>
     70a:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <u.7157+0x6>
     70e:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <u.7157+0x7>

    for(int i=0;i<ROBOTS;i++){
     712:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <ROBOTS>
     716:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <ROBOTS+0x1>
     71a:	00 97       	sbiw	r24, 0x00	; 0
     71c:	11 f4       	brne	.+4      	; 0x722 <__LOCK_REGION_LENGTH__+0x322>
     71e:	0c 94 b8 14 	jmp	0x2970	; 0x2970 <__stack+0x771>
     722:	52 e8       	ldi	r21, 0x82	; 130
     724:	25 2e       	mov	r2, r21
     726:	5d e0       	ldi	r21, 0x0D	; 13
     728:	35 2e       	mov	r3, r21
     72a:	8e 01       	movw	r16, r28
     72c:	0f 5f       	subi	r16, 0xFF	; 255
     72e:	1f 4f       	sbci	r17, 0xFF	; 255
     730:	a2 ef       	ldi	r26, 0xF2	; 242
     732:	bb e0       	ldi	r27, 0x0B	; 11
     734:	c9 5d       	subi	r28, 0xD9	; 217
     736:	dc 4f       	sbci	r29, 0xFC	; 252
     738:	b9 83       	std	Y+1, r27	; 0x01
     73a:	a8 83       	st	Y, r26
     73c:	c7 52       	subi	r28, 0x27	; 39
     73e:	d3 40       	sbci	r29, 0x03	; 3
     740:	e2 e6       	ldi	r30, 0x62	; 98
     742:	fa e0       	ldi	r31, 0x0A	; 10
     744:	c5 5d       	subi	r28, 0xD5	; 213
     746:	dc 4f       	sbci	r29, 0xFC	; 252
     748:	f9 83       	std	Y+1, r31	; 0x01
     74a:	e8 83       	st	Y, r30
     74c:	cb 52       	subi	r28, 0x2B	; 43
     74e:	d3 40       	sbci	r29, 0x03	; 3
     750:	88 0f       	add	r24, r24
     752:	99 1f       	adc	r25, r25
     754:	88 0f       	add	r24, r24
     756:	99 1f       	adc	r25, r25
     758:	9c 01       	movw	r18, r24
     75a:	2e 57       	subi	r18, 0x7E	; 126
     75c:	32 4f       	sbci	r19, 0xF2	; 242
     75e:	c1 5d       	subi	r28, 0xD1	; 209
     760:	dc 4f       	sbci	r29, 0xFC	; 252
     762:	39 83       	std	Y+1, r19	; 0x01
     764:	28 83       	st	Y, r18
     766:	cf 52       	subi	r28, 0x2F	; 47
     768:	d3 40       	sbci	r29, 0x03	; 3
     76a:	cd 5d       	subi	r28, 0xDD	; 221
     76c:	dc 4f       	sbci	r29, 0xFC	; 252
     76e:	18 82       	st	Y, r1
     770:	19 82       	std	Y+1, r1	; 0x01
     772:	1a 82       	std	Y+2, r1	; 0x02
     774:	1b 82       	std	Y+3, r1	; 0x03
     776:	c3 52       	subi	r28, 0x23	; 35
     778:	d3 40       	sbci	r29, 0x03	; 3
     77a:	81 2c       	mov	r8, r1
     77c:	91 2c       	mov	r9, r1
     77e:	54 01       	movw	r10, r8
        u[0] += -L[i]*(x_hat[i][0])+Bx[i];
     780:	d1 01       	movw	r26, r2
     782:	cd 90       	ld	r12, X+
     784:	dd 90       	ld	r13, X+
     786:	ed 90       	ld	r14, X+
     788:	fd 90       	ld	r15, X+
     78a:	1d 01       	movw	r2, r26
     78c:	f7 fa       	bst	r15, 7
     78e:	f0 94       	com	r15
     790:	f7 f8       	bld	r15, 7
     792:	f0 94       	com	r15
     794:	c9 5d       	subi	r28, 0xD9	; 217
     796:	dc 4f       	sbci	r29, 0xFC	; 252
     798:	e8 81       	ld	r30, Y
     79a:	f9 81       	ldd	r31, Y+1	; 0x01
     79c:	c7 52       	subi	r28, 0x27	; 39
     79e:	d3 40       	sbci	r29, 0x03	; 3
     7a0:	41 90       	ld	r4, Z+
     7a2:	51 90       	ld	r5, Z+
     7a4:	61 90       	ld	r6, Z+
     7a6:	71 90       	ld	r7, Z+
     7a8:	c9 5d       	subi	r28, 0xD9	; 217
     7aa:	dc 4f       	sbci	r29, 0xFC	; 252
     7ac:	f9 83       	std	Y+1, r31	; 0x01
     7ae:	e8 83       	st	Y, r30
     7b0:	c7 52       	subi	r28, 0x27	; 39
     7b2:	d3 40       	sbci	r29, 0x03	; 3
     7b4:	d8 01       	movw	r26, r16
     7b6:	2d 91       	ld	r18, X+
     7b8:	3d 91       	ld	r19, X+
     7ba:	4d 91       	ld	r20, X+
     7bc:	5c 91       	ld	r21, X
     7be:	c7 01       	movw	r24, r14
     7c0:	b6 01       	movw	r22, r12
     7c2:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
     7c6:	a3 01       	movw	r20, r6
     7c8:	92 01       	movw	r18, r4
     7ca:	0e 94 db 4c 	call	0x99b6	; 0x99b6 <__addsf3>
     7ce:	9b 01       	movw	r18, r22
     7d0:	ac 01       	movw	r20, r24
     7d2:	c5 01       	movw	r24, r10
     7d4:	b4 01       	movw	r22, r8
     7d6:	0e 94 db 4c 	call	0x99b6	; 0x99b6 <__addsf3>
     7da:	4b 01       	movw	r8, r22
     7dc:	5c 01       	movw	r10, r24
        u[1] += -L[i]*(x_hat[i][1])+By[i];
     7de:	c5 5d       	subi	r28, 0xD5	; 213
     7e0:	dc 4f       	sbci	r29, 0xFC	; 252
     7e2:	e8 81       	ld	r30, Y
     7e4:	f9 81       	ldd	r31, Y+1	; 0x01
     7e6:	cb 52       	subi	r28, 0x2B	; 43
     7e8:	d3 40       	sbci	r29, 0x03	; 3
     7ea:	41 90       	ld	r4, Z+
     7ec:	51 90       	ld	r5, Z+
     7ee:	61 90       	ld	r6, Z+
     7f0:	71 90       	ld	r7, Z+
     7f2:	c5 5d       	subi	r28, 0xD5	; 213
     7f4:	dc 4f       	sbci	r29, 0xFC	; 252
     7f6:	f9 83       	std	Y+1, r31	; 0x01
     7f8:	e8 83       	st	Y, r30
     7fa:	cb 52       	subi	r28, 0x2B	; 43
     7fc:	d3 40       	sbci	r29, 0x03	; 3
     7fe:	d8 01       	movw	r26, r16
     800:	14 96       	adiw	r26, 0x04	; 4
     802:	2d 91       	ld	r18, X+
     804:	3d 91       	ld	r19, X+
     806:	4d 91       	ld	r20, X+
     808:	5c 91       	ld	r21, X
     80a:	17 97       	sbiw	r26, 0x07	; 7
     80c:	c7 01       	movw	r24, r14
     80e:	b6 01       	movw	r22, r12
     810:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
     814:	a3 01       	movw	r20, r6
     816:	92 01       	movw	r18, r4
     818:	0e 94 db 4c 	call	0x99b6	; 0x99b6 <__addsf3>
     81c:	9b 01       	movw	r18, r22
     81e:	ac 01       	movw	r20, r24
     820:	cd 5d       	subi	r28, 0xDD	; 221
     822:	dc 4f       	sbci	r29, 0xFC	; 252
     824:	68 81       	ld	r22, Y
     826:	79 81       	ldd	r23, Y+1	; 0x01
     828:	8a 81       	ldd	r24, Y+2	; 0x02
     82a:	9b 81       	ldd	r25, Y+3	; 0x03
     82c:	c3 52       	subi	r28, 0x23	; 35
     82e:	d3 40       	sbci	r29, 0x03	; 3
     830:	0e 94 db 4c 	call	0x99b6	; 0x99b6 <__addsf3>
     834:	cd 5d       	subi	r28, 0xDD	; 221
     836:	dc 4f       	sbci	r29, 0xFC	; 252
     838:	68 83       	st	Y, r22
     83a:	79 83       	std	Y+1, r23	; 0x01
     83c:	8a 83       	std	Y+2, r24	; 0x02
     83e:	9b 83       	std	Y+3, r25	; 0x03
     840:	c3 52       	subi	r28, 0x23	; 35
     842:	d3 40       	sbci	r29, 0x03	; 3
     844:	08 5f       	subi	r16, 0xF8	; 248
     846:	1f 4f       	sbci	r17, 0xFF	; 255
    static float u[2];

    u[0] = 0;
    u[1] = 0;

    for(int i=0;i<ROBOTS;i++){
     848:	c1 5d       	subi	r28, 0xD1	; 209
     84a:	dc 4f       	sbci	r29, 0xFC	; 252
     84c:	e8 81       	ld	r30, Y
     84e:	f9 81       	ldd	r31, Y+1	; 0x01
     850:	cf 52       	subi	r28, 0x2F	; 47
     852:	d3 40       	sbci	r29, 0x03	; 3
     854:	2e 16       	cp	r2, r30
     856:	3f 06       	cpc	r3, r31
     858:	09 f0       	breq	.+2      	; 0x85c <__LOCK_REGION_LENGTH__+0x45c>
     85a:	92 cf       	rjmp	.-220    	; 0x780 <__LOCK_REGION_LENGTH__+0x380>
     85c:	80 92 3f 02 	sts	0x023F, r8	; 0x80023f <u.7157>
     860:	90 92 40 02 	sts	0x0240, r9	; 0x800240 <u.7157+0x1>
     864:	a0 92 41 02 	sts	0x0241, r10	; 0x800241 <u.7157+0x2>
     868:	b0 92 42 02 	sts	0x0242, r11	; 0x800242 <u.7157+0x3>
     86c:	60 93 43 02 	sts	0x0243, r22	; 0x800243 <u.7157+0x4>
     870:	70 93 44 02 	sts	0x0244, r23	; 0x800244 <u.7157+0x5>
     874:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <u.7157+0x6>
     878:	90 93 46 02 	sts	0x0246, r25	; 0x800246 <u.7157+0x7>
				//control_time_previous = getTime100MicroSec();
                u = etc_control(x_hat, id);
				//control_time = getTime100MicroSec() - control_time_previous;
 
				//control_time_previous = getTime100MicroSec();
                switch (NextState) {
     87c:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <__data_end>
     880:	83 30       	cpi	r24, 0x03	; 3
     882:	11 f4       	brne	.+4      	; 0x888 <__LOCK_REGION_LENGTH__+0x488>
     884:	0c 94 19 11 	jmp	0x2232	; 0x2232 <__stack+0x33>
     888:	10 f0       	brcs	.+4      	; 0x88e <__LOCK_REGION_LENGTH__+0x48e>
     88a:	0c 94 1c 0f 	jmp	0x1e38	; 0x1e38 <__EEPROM_REGION_LENGTH__+0xe38>
     88e:	88 23       	and	r24, r24
     890:	11 f4       	brne	.+4      	; 0x896 <__LOCK_REGION_LENGTH__+0x496>
     892:	0c 94 44 12 	jmp	0x2488	; 0x2488 <__stack+0x289>
     896:	82 30       	cpi	r24, 0x02	; 2
     898:	09 f0       	breq	.+2      	; 0x89c <__LOCK_REGION_LENGTH__+0x49c>
     89a:	a3 c0       	rjmp	.+326    	; 0x9e2 <__LOCK_REGION_LENGTH__+0x5e2>
//                        theta_ref = atan2(disY, disX);
                    }break;

                    case angle:{

                        if (!trigger_flag) {
     89c:	c6 5c       	subi	r28, 0xC6	; 198
     89e:	dc 4f       	sbci	r29, 0xFC	; 252
     8a0:	98 81       	ld	r25, Y
     8a2:	ca 53       	subi	r28, 0x3A	; 58
     8a4:	d3 40       	sbci	r29, 0x03	; 3
     8a6:	99 23       	and	r25, r25
     8a8:	11 f4       	brne	.+4      	; 0x8ae <__LOCK_REGION_LENGTH__+0x4ae>
     8aa:	0c 94 f1 13 	jmp	0x27e2	; 0x27e2 <__stack+0x5e3>
    float speed_a = 0;
    float K = 0.5;
    float error = 0.0;
    bool out;

    angle_ref = (float) atan2f(u[1], u[0]) * RAD_2_DEG;
     8ae:	a5 01       	movw	r20, r10
     8b0:	94 01       	movw	r18, r8
     8b2:	cd 5d       	subi	r28, 0xDD	; 221
     8b4:	dc 4f       	sbci	r29, 0xFC	; 252
     8b6:	68 81       	ld	r22, Y
     8b8:	79 81       	ldd	r23, Y+1	; 0x01
     8ba:	8a 81       	ldd	r24, Y+2	; 0x02
     8bc:	9b 81       	ldd	r25, Y+3	; 0x03
     8be:	c3 52       	subi	r28, 0x23	; 35
     8c0:	d3 40       	sbci	r29, 0x03	; 3
     8c2:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <atan2>
     8c6:	21 ee       	ldi	r18, 0xE1	; 225
     8c8:	3e e2       	ldi	r19, 0x2E	; 46
     8ca:	45 e6       	ldi	r20, 0x65	; 101
     8cc:	52 e4       	ldi	r21, 0x42	; 66
     8ce:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
     8d2:	4b 01       	movw	r8, r22
     8d4:	5c 01       	movw	r10, r24

	theta_temp = theta_cur* RAD_2_DEG; //theta = filtered_theta from 0 to 360
     8d6:	21 ee       	ldi	r18, 0xE1	; 225
     8d8:	3e e2       	ldi	r19, 0x2E	; 46
     8da:	45 e6       	ldi	r20, 0x65	; 101
     8dc:	52 e4       	ldi	r21, 0x42	; 66
     8de:	60 91 af 02 	lds	r22, 0x02AF	; 0x8002af <theta>
     8e2:	70 91 b0 02 	lds	r23, 0x02B0	; 0x8002b0 <theta+0x1>
     8e6:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <theta+0x2>
     8ea:	90 91 b2 02 	lds	r25, 0x02B2	; 0x8002b2 <theta+0x3>
     8ee:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
     8f2:	6b 01       	movw	r12, r22
     8f4:	7c 01       	movw	r14, r24
	if (theta_temp > 180){
     8f6:	20 e0       	ldi	r18, 0x00	; 0
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	44 e3       	ldi	r20, 0x34	; 52
     8fc:	53 e4       	ldi	r21, 0x43	; 67
     8fe:	0e 94 bd 4f 	call	0x9f7a	; 0x9f7a <__gesf2>
     902:	18 16       	cp	r1, r24
     904:	54 f4       	brge	.+20     	; 0x91a <__LOCK_REGION_LENGTH__+0x51a>
		theta_temp -= 360;
     906:	20 e0       	ldi	r18, 0x00	; 0
     908:	30 e0       	ldi	r19, 0x00	; 0
     90a:	44 eb       	ldi	r20, 0xB4	; 180
     90c:	53 e4       	ldi	r21, 0x43	; 67
     90e:	c7 01       	movw	r24, r14
     910:	b6 01       	movw	r22, r12
     912:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <__subsf3>
     916:	6b 01       	movw	r12, r22
     918:	7c 01       	movw	r14, r24
	}

    error = angle_ref - theta_temp;
     91a:	a7 01       	movw	r20, r14
     91c:	96 01       	movw	r18, r12
     91e:	c5 01       	movw	r24, r10
     920:	b4 01       	movw	r22, r8
     922:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <__subsf3>
     926:	6b 01       	movw	r12, r22
     928:	7c 01       	movw	r14, r24
	//angle_temp = error;
    //error = 0;
	
    if (error > 180){
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	44 e3       	ldi	r20, 0x34	; 52
     930:	53 e4       	ldi	r21, 0x43	; 67
     932:	0e 94 bd 4f 	call	0x9f7a	; 0x9f7a <__gesf2>
     936:	18 16       	cp	r1, r24
     938:	14 f0       	brlt	.+4      	; 0x93e <__LOCK_REGION_LENGTH__+0x53e>
     93a:	0c 94 e8 12 	jmp	0x25d0	; 0x25d0 <__stack+0x3d1>
        error -= 360;
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	44 eb       	ldi	r20, 0xB4	; 180
     944:	53 e4       	ldi	r21, 0x43	; 67
     946:	c7 01       	movw	r24, r14
     948:	b6 01       	movw	r22, r12
     94a:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <__subsf3>
     94e:	6b 01       	movw	r12, r22
     950:	7c 01       	movw	r14, r24
    } else if (error < -180) {
        error += 360;
    }

    speed_a = K*error;
     952:	20 e0       	ldi	r18, 0x00	; 0
     954:	30 e0       	ldi	r19, 0x00	; 0
     956:	40 e0       	ldi	r20, 0x00	; 0
     958:	5f e3       	ldi	r21, 0x3F	; 63
     95a:	c7 01       	movw	r24, r14
     95c:	b6 01       	movw	r22, r12
     95e:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
     962:	4b 01       	movw	r8, r22
     964:	5c 01       	movw	r10, r24


    // limit speed
    if (speed_a > 15){
     966:	20 e0       	ldi	r18, 0x00	; 0
     968:	30 e0       	ldi	r19, 0x00	; 0
     96a:	40 e7       	ldi	r20, 0x70	; 112
     96c:	51 e4       	ldi	r21, 0x41	; 65
     96e:	0e 94 bd 4f 	call	0x9f7a	; 0x9f7a <__gesf2>
     972:	18 16       	cp	r1, r24
     974:	14 f4       	brge	.+4      	; 0x97a <__LOCK_REGION_LENGTH__+0x57a>
     976:	0c 94 af 12 	jmp	0x255e	; 0x255e <__stack+0x35f>
        speed_a = 15;
    }else if (speed_a < -15){
     97a:	20 e0       	ldi	r18, 0x00	; 0
     97c:	30 e0       	ldi	r19, 0x00	; 0
     97e:	40 e7       	ldi	r20, 0x70	; 112
     980:	51 ec       	ldi	r21, 0xC1	; 193
     982:	c5 01       	movw	r24, r10
     984:	b4 01       	movw	r22, r8
     986:	0e 94 b9 4d 	call	0x9b72	; 0x9b72 <__cmpsf2>
     98a:	87 ff       	sbrs	r24, 7
     98c:	02 c0       	rjmp	.+4      	; 0x992 <__LOCK_REGION_LENGTH__+0x592>
     98e:	0c 94 54 14 	jmp	0x28a8	; 0x28a8 <__stack+0x6a9>
     992:	c5 01       	movw	r24, r10
     994:	b4 01       	movw	r22, r8
     996:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__fixsfsi>
     99a:	8b 01       	movw	r16, r22
     99c:	c5 01       	movw	r24, r10
     99e:	b4 01       	movw	r22, r8
     9a0:	90 58       	subi	r25, 0x80	; 128
     9a2:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__fixsfsi>
     9a6:	b6 2e       	mov	r11, r22
     9a8:	87 2f       	mov	r24, r23
        speed_a = -15;
    }

	r_speed = speed_a;
     9aa:	10 93 f6 03 	sts	0x03F6, r17	; 0x8003f6 <r_speed+0x1>
     9ae:	00 93 f5 03 	sts	0x03F5, r16	; 0x8003f5 <r_speed>
	l_speed = -speed_a;
     9b2:	b0 92 f7 03 	sts	0x03F7, r11	; 0x8003f7 <l_speed>
     9b6:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <l_speed+0x1>

    if (fabsf(error) > 25){
     9ba:	c7 01       	movw	r24, r14
     9bc:	b6 01       	movw	r22, r12
     9be:	9f 77       	andi	r25, 0x7F	; 127
     9c0:	20 e0       	ldi	r18, 0x00	; 0
     9c2:	30 e0       	ldi	r19, 0x00	; 0
     9c4:	48 ec       	ldi	r20, 0xC8	; 200
     9c6:	51 e4       	ldi	r21, 0x41	; 65
     9c8:	0e 94 bd 4f 	call	0x9f7a	; 0x9f7a <__gesf2>
     9cc:	18 16       	cp	r1, r24
     9ce:	14 f0       	brlt	.+4      	; 0x9d4 <__LOCK_REGION_LENGTH__+0x5d4>
     9d0:	0c 94 a1 13 	jmp	0x2742	; 0x2742 <__stack+0x543>
//						start_state1 = getTime100MicroSec();
//					}
					
//					break;
//				case 1:
					setLeftSpeed(l_speed);
     9d4:	8b 2d       	mov	r24, r11
     9d6:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <setLeftSpeed>
					setRightSpeed(r_speed);
     9da:	80 91 f5 03 	lds	r24, 0x03F5	; 0x8003f5 <r_speed>
     9de:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <setRightSpeed>
                    }break;

                }
				//control_time = getTime100MicroSec() - control_time_previous;

				init_time_previous = getTime100MicroSec();
     9e2:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
     9e6:	c9 5d       	subi	r28, 0xD9	; 217
     9e8:	dc 4f       	sbci	r29, 0xFC	; 252
     9ea:	68 83       	st	Y, r22
     9ec:	79 83       	std	Y+1, r23	; 0x01
     9ee:	8a 83       	std	Y+2, r24	; 0x02
     9f0:	9b 83       	std	Y+3, r25	; 0x03
     9f2:	c7 52       	subi	r28, 0x27	; 39
     9f4:	d3 40       	sbci	r29, 0x03	; 3

}

bool trigger_etc(float *x_hat, const float *x){

    float t = getTime100MicroSec()/10000; //to seconds
     9f6:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
     9fa:	c5 5d       	subi	r28, 0xD5	; 213
     9fc:	dc 4f       	sbci	r29, 0xFC	; 252
     9fe:	68 83       	st	Y, r22
     a00:	79 83       	std	Y+1, r23	; 0x01
     a02:	8a 83       	std	Y+2, r24	; 0x02
     a04:	9b 83       	std	Y+3, r25	; 0x03
     a06:	cb 52       	subi	r28, 0x2B	; 43
     a08:	d3 40       	sbci	r29, 0x03	; 3

    float c0 = 10;
    float c1 = 250;
    float alpha = 0.5*lambda_2;

    f = sqrt(pow((x_hat[0]-x[0]),2.0) + pow((x_hat[1]-x[1]),2.0)) - (c0+c1*exp(-alpha*(t)));
     a0a:	80 91 32 07 	lds	r24, 0x0732	; 0x800732 <position>
     a0e:	90 91 33 07 	lds	r25, 0x0733	; 0x800733 <position+0x1>
     a12:	a0 91 34 07 	lds	r26, 0x0734	; 0x800734 <position+0x2>
     a16:	b0 91 35 07 	lds	r27, 0x0735	; 0x800735 <position+0x3>
     a1a:	cd 5d       	subi	r28, 0xDD	; 221
     a1c:	dc 4f       	sbci	r29, 0xFC	; 252
     a1e:	88 83       	st	Y, r24
     a20:	99 83       	std	Y+1, r25	; 0x01
     a22:	aa 83       	std	Y+2, r26	; 0x02
     a24:	bb 83       	std	Y+3, r27	; 0x03
     a26:	c3 52       	subi	r28, 0x23	; 35
     a28:	d3 40       	sbci	r29, 0x03	; 3
     a2a:	9c 01       	movw	r18, r24
     a2c:	ad 01       	movw	r20, r26
     a2e:	60 91 3a 07 	lds	r22, 0x073A	; 0x80073a <fixed_position>
     a32:	70 91 3b 07 	lds	r23, 0x073B	; 0x80073b <fixed_position+0x1>
     a36:	80 91 3c 07 	lds	r24, 0x073C	; 0x80073c <fixed_position+0x2>
     a3a:	90 91 3d 07 	lds	r25, 0x073D	; 0x80073d <fixed_position+0x3>
     a3e:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <__subsf3>
     a42:	6b 01       	movw	r12, r22
     a44:	7c 01       	movw	r14, r24
     a46:	80 90 36 07 	lds	r8, 0x0736	; 0x800736 <position+0x4>
     a4a:	90 90 37 07 	lds	r9, 0x0737	; 0x800737 <position+0x5>
     a4e:	a0 90 38 07 	lds	r10, 0x0738	; 0x800738 <position+0x6>
     a52:	b0 90 39 07 	lds	r11, 0x0739	; 0x800739 <position+0x7>
     a56:	a5 01       	movw	r20, r10
     a58:	94 01       	movw	r18, r8
     a5a:	60 91 3e 07 	lds	r22, 0x073E	; 0x80073e <fixed_position+0x4>
     a5e:	70 91 3f 07 	lds	r23, 0x073F	; 0x80073f <fixed_position+0x5>
     a62:	80 91 40 07 	lds	r24, 0x0740	; 0x800740 <fixed_position+0x6>
     a66:	90 91 41 07 	lds	r25, 0x0741	; 0x800741 <fixed_position+0x7>
     a6a:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <__subsf3>
     a6e:	9b 01       	movw	r18, r22
     a70:	ac 01       	movw	r20, r24
     a72:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
     a76:	2b 01       	movw	r4, r22
     a78:	3c 01       	movw	r6, r24
     a7a:	a7 01       	movw	r20, r14
     a7c:	96 01       	movw	r18, r12
     a7e:	c7 01       	movw	r24, r14
     a80:	b6 01       	movw	r22, r12
     a82:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
     a86:	9b 01       	movw	r18, r22
     a88:	ac 01       	movw	r20, r24
     a8a:	c3 01       	movw	r24, r6
     a8c:	b2 01       	movw	r22, r4
     a8e:	0e 94 db 4c 	call	0x99b6	; 0x99b6 <__addsf3>
     a92:	0e 94 b3 50 	call	0xa166	; 0xa166 <sqrt>
     a96:	2b 01       	movw	r4, r22
     a98:	3c 01       	movw	r6, r24
     a9a:	20 e0       	ldi	r18, 0x00	; 0
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	40 e0       	ldi	r20, 0x00	; 0
     aa0:	5f e3       	ldi	r21, 0x3F	; 63
     aa2:	60 91 25 02 	lds	r22, 0x0225	; 0x800225 <lambda_2>
     aa6:	70 91 26 02 	lds	r23, 0x0226	; 0x800226 <lambda_2+0x1>
     aaa:	80 91 27 02 	lds	r24, 0x0227	; 0x800227 <lambda_2+0x2>
     aae:	90 91 28 02 	lds	r25, 0x0228	; 0x800228 <lambda_2+0x3>
     ab2:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
     ab6:	6b 01       	movw	r12, r22
     ab8:	7c 01       	movw	r14, r24
     aba:	f7 fa       	bst	r15, 7
     abc:	f0 94       	com	r15
     abe:	f7 f8       	bld	r15, 7
     ac0:	f0 94       	com	r15
     ac2:	c5 5d       	subi	r28, 0xD5	; 213
     ac4:	dc 4f       	sbci	r29, 0xFC	; 252
     ac6:	68 81       	ld	r22, Y
     ac8:	79 81       	ldd	r23, Y+1	; 0x01
     aca:	8a 81       	ldd	r24, Y+2	; 0x02
     acc:	9b 81       	ldd	r25, Y+3	; 0x03
     ace:	cb 52       	subi	r28, 0x2B	; 43
     ad0:	d3 40       	sbci	r29, 0x03	; 3
     ad2:	20 e1       	ldi	r18, 0x10	; 16
     ad4:	37 e2       	ldi	r19, 0x27	; 39
     ad6:	40 e0       	ldi	r20, 0x00	; 0
     ad8:	50 e0       	ldi	r21, 0x00	; 0
     ada:	0e 94 44 51 	call	0xa288	; 0xa288 <__udivmodsi4>
     ade:	ca 01       	movw	r24, r20
     ae0:	b9 01       	movw	r22, r18
     ae2:	0e 94 a5 4e 	call	0x9d4a	; 0x9d4a <__floatunsisf>
     ae6:	9b 01       	movw	r18, r22
     ae8:	ac 01       	movw	r20, r24
     aea:	c7 01       	movw	r24, r14
     aec:	b6 01       	movw	r22, r12
     aee:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
     af2:	0e 94 3d 4e 	call	0x9c7a	; 0x9c7a <exp>

                }
				//control_time = getTime100MicroSec() - control_time_previous;

				init_time_previous = getTime100MicroSec();
                if(trigger_etc(fixed_position, position) | init_trigger) {
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	4a e7       	ldi	r20, 0x7A	; 122
     afc:	53 e4       	ldi	r21, 0x43	; 67
     afe:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
     b02:	20 e0       	ldi	r18, 0x00	; 0
     b04:	30 e0       	ldi	r19, 0x00	; 0
     b06:	40 e2       	ldi	r20, 0x20	; 32
     b08:	51 e4       	ldi	r21, 0x41	; 65
     b0a:	0e 94 db 4c 	call	0x99b6	; 0x99b6 <__addsf3>
     b0e:	9b 01       	movw	r18, r22
     b10:	ac 01       	movw	r20, r24
     b12:	c3 01       	movw	r24, r6
     b14:	b2 01       	movw	r22, r4
     b16:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <__subsf3>
     b1a:	20 e0       	ldi	r18, 0x00	; 0
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	a9 01       	movw	r20, r18
     b20:	0e 94 bd 4f 	call	0x9f7a	; 0x9f7a <__gesf2>
     b24:	18 16       	cp	r1, r24
     b26:	14 f0       	brlt	.+4      	; 0xb2c <__LOCK_REGION_LENGTH__+0x72c>
     b28:	0c 94 92 0e 	jmp	0x1d24	; 0x1d24 <__EEPROM_REGION_LENGTH__+0xd24>
                    for (i = 0; i < 2; i++) {
                        fixed_position[i] = position[i];
     b2c:	cd 5d       	subi	r28, 0xDD	; 221
     b2e:	dc 4f       	sbci	r29, 0xFC	; 252
     b30:	28 81       	ld	r18, Y
     b32:	39 81       	ldd	r19, Y+1	; 0x01
     b34:	4a 81       	ldd	r20, Y+2	; 0x02
     b36:	5b 81       	ldd	r21, Y+3	; 0x03
     b38:	c3 52       	subi	r28, 0x23	; 35
     b3a:	d3 40       	sbci	r29, 0x03	; 3
     b3c:	20 93 3a 07 	sts	0x073A, r18	; 0x80073a <fixed_position>
     b40:	30 93 3b 07 	sts	0x073B, r19	; 0x80073b <fixed_position+0x1>
     b44:	40 93 3c 07 	sts	0x073C, r20	; 0x80073c <fixed_position+0x2>
     b48:	50 93 3d 07 	sts	0x073D, r21	; 0x80073d <fixed_position+0x3>
     b4c:	80 92 3e 07 	sts	0x073E, r8	; 0x80073e <fixed_position+0x4>
     b50:	90 92 3f 07 	sts	0x073F, r9	; 0x80073f <fixed_position+0x5>
     b54:	a0 92 40 07 	sts	0x0740, r10	; 0x800740 <fixed_position+0x6>
     b58:	b0 92 41 07 	sts	0x0741, r11	; 0x800741 <fixed_position+0x7>
                        
                    }
					xPos_fixed = position[0];
     b5c:	20 93 02 04 	sts	0x0402, r18	; 0x800402 <xPos_fixed>
     b60:	30 93 03 04 	sts	0x0403, r19	; 0x800403 <xPos_fixed+0x1>
     b64:	40 93 04 04 	sts	0x0404, r20	; 0x800404 <xPos_fixed+0x2>
     b68:	50 93 05 04 	sts	0x0405, r21	; 0x800405 <xPos_fixed+0x3>
					yPos_fixed = position[1];
     b6c:	80 92 fe 03 	sts	0x03FE, r8	; 0x8003fe <yPos_fixed>
     b70:	90 92 ff 03 	sts	0x03FF, r9	; 0x8003ff <yPos_fixed+0x1>
     b74:	a0 92 00 04 	sts	0x0400, r10	; 0x800400 <yPos_fixed+0x2>
     b78:	b0 92 01 04 	sts	0x0401, r11	; 0x800401 <yPos_fixed+0x3>
					if (reset_flag){
     b7c:	80 91 06 04 	lds	r24, 0x0406	; 0x800406 <reset_flag>
     b80:	88 23       	and	r24, r24
     b82:	49 f0       	breq	.+18     	; 0xb96 <__LOCK_REGION_LENGTH__+0x796>
						count_resets++;
     b84:	80 91 30 07 	lds	r24, 0x0730	; 0x800730 <count_resets>
     b88:	90 91 31 07 	lds	r25, 0x0731	; 0x800731 <count_resets+0x1>
     b8c:	01 96       	adiw	r24, 0x01	; 1
     b8e:	90 93 31 07 	sts	0x0731, r25	; 0x800731 <count_resets+0x1>
     b92:	80 93 30 07 	sts	0x0730, r24	; 0x800730 <count_resets>
					}
					trigger_count++;
     b96:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <trigger_count>
     b9a:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <trigger_count+0x1>
     b9e:	01 96       	adiw	r24, 0x01	; 1
     ba0:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <trigger_count+0x1>
     ba4:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <trigger_count>
                    updateRedLed(255);
     ba8:	8f ef       	ldi	r24, 0xFF	; 255
     baa:	0e 94 0e 46 	call	0x8c1c	; 0x8c1c <updateRedLed>
                    updateGreenLed(255); //0
     bae:	8f ef       	ldi	r24, 0xFF	; 255
     bb0:	0e 94 22 46 	call	0x8c44	; 0x8c44 <updateGreenLed>
                    updateBlueLed(255); //0
     bb4:	8f ef       	ldi	r24, 0xFF	; 255
     bb6:	0e 94 36 46 	call	0x8c6c	; 0x8c6c <updateBlueLed>
                    trigger_flag = true;
					init_trigger = false;
                    trigger_LED_timer = getTime100MicroSec();
     bba:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
     bbe:	c5 5c       	subi	r28, 0xC5	; 197
     bc0:	dc 4f       	sbci	r29, 0xFC	; 252
     bc2:	68 83       	st	Y, r22
     bc4:	79 83       	std	Y+1, r23	; 0x01
     bc6:	8a 83       	std	Y+2, r24	; 0x02
     bc8:	9b 83       	std	Y+3, r25	; 0x03
     bca:	cb 53       	subi	r28, 0x3B	; 59
     bcc:	d3 40       	sbci	r29, 0x03	; 3
                }
				init_time = getTime100MicroSec() - init_time_previous;
     bce:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
     bd2:	dc 01       	movw	r26, r24
     bd4:	cb 01       	movw	r24, r22
     bd6:	c9 5d       	subi	r28, 0xD9	; 217
     bd8:	dc 4f       	sbci	r29, 0xFC	; 252
     bda:	28 81       	ld	r18, Y
     bdc:	39 81       	ldd	r19, Y+1	; 0x01
     bde:	4a 81       	ldd	r20, Y+2	; 0x02
     be0:	5b 81       	ldd	r21, Y+3	; 0x03
     be2:	c7 52       	subi	r28, 0x27	; 39
     be4:	d3 40       	sbci	r29, 0x03	; 3
     be6:	82 1b       	sub	r24, r18
     be8:	93 0b       	sbc	r25, r19
     bea:	a4 0b       	sbc	r26, r20
     bec:	b5 0b       	sbc	r27, r21
     bee:	80 93 ed 03 	sts	0x03ED, r24	; 0x8003ed <init_time>
     bf2:	90 93 ee 03 	sts	0x03EE, r25	; 0x8003ee <init_time+0x1>
     bf6:	a0 93 ef 03 	sts	0x03EF, r26	; 0x8003ef <init_time+0x2>
     bfa:	b0 93 f0 03 	sts	0x03F0, r27	; 0x8003f0 <init_time+0x3>
				
                // fix LED for triggering
                if(getTime100MicroSec()-trigger_LED_timer >= PAUSE_250_MSEC && trigger_flag) {
     bfe:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
     c02:	dc 01       	movw	r26, r24
     c04:	cb 01       	movw	r24, r22
     c06:	c5 5c       	subi	r28, 0xC5	; 197
     c08:	dc 4f       	sbci	r29, 0xFC	; 252
     c0a:	28 81       	ld	r18, Y
     c0c:	39 81       	ldd	r19, Y+1	; 0x01
     c0e:	4a 81       	ldd	r20, Y+2	; 0x02
     c10:	5b 81       	ldd	r21, Y+3	; 0x03
     c12:	cb 53       	subi	r28, 0x3B	; 59
     c14:	d3 40       	sbci	r29, 0x03	; 3
     c16:	82 1b       	sub	r24, r18
     c18:	93 0b       	sbc	r25, r19
     c1a:	a4 0b       	sbc	r26, r20
     c1c:	b5 0b       	sbc	r27, r21
     c1e:	84 36       	cpi	r24, 0x64	; 100
     c20:	99 40       	sbci	r25, 0x09	; 9
     c22:	a1 05       	cpc	r26, r1
     c24:	b1 05       	cpc	r27, r1
     c26:	10 f0       	brcs	.+4      	; 0xc2c <__LOCK_REGION_LENGTH__+0x82c>
     c28:	0c 94 7e 0e 	jmp	0x1cfc	; 0x1cfc <__EEPROM_REGION_LENGTH__+0xcfc>
                    trigger_flag = false;
                } else if (trigger_flag){
                    updateRedLed(255);
     c2c:	8f ef       	ldi	r24, 0xFF	; 255
     c2e:	0e 94 0e 46 	call	0x8c1c	; 0x8c1c <updateRedLed>
                    updateGreenLed(0);//0
     c32:	80 e0       	ldi	r24, 0x00	; 0
     c34:	0e 94 22 46 	call	0x8c44	; 0x8c44 <updateGreenLed>
                    updateBlueLed(0); //0
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	0e 94 36 46 	call	0x8c6c	; 0x8c6c <updateBlueLed>
     c3e:	c1 5c       	subi	r28, 0xC1	; 193
     c40:	dc 4f       	sbci	r29, 0xFC	; 252
     c42:	18 82       	st	Y, r1
     c44:	cf 53       	subi	r28, 0x3F	; 63
     c46:	d3 40       	sbci	r29, 0x03	; 3
     c48:	51 e0       	ldi	r21, 0x01	; 1
     c4a:	c6 5c       	subi	r28, 0xC6	; 198
     c4c:	dc 4f       	sbci	r29, 0xFC	; 252
     c4e:	58 83       	st	Y, r21
     c50:	ca 53       	subi	r28, 0x3A	; 58
     c52:	d3 40       	sbci	r29, 0x03	; 3
                // ETC

                enableObstacleAvoidance();

				//control_time_previous = getTime100MicroSec();
                u = etc_control(x_hat, id);
     c54:	2f e3       	ldi	r18, 0x3F	; 63
     c56:	62 2e       	mov	r6, r18
     c58:	22 e0       	ldi	r18, 0x02	; 2
     c5a:	72 2e       	mov	r7, r18
					//currentOsccal = OSCCAL;
					//usart0Transmit(currentOsccal,1);
					break;
		}

		comm_time_previous = getTime100MicroSec();
     c5c:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
     c60:	6b 01       	movw	r12, r22
     c62:	7c 01       	movw	r14, r24
		handleMotorsWithSpeedController();
     c64:	0e 94 2a 3b 	call	0x7654	; 0x7654 <handleMotorsWithSpeedController>
        //position[0] = xPos;
        //position[1] = yPos; //used to be yPos and xPos
		comm_time = getTime100MicroSec()- comm_time_previous;
     c68:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
     c6c:	dc 01       	movw	r26, r24
     c6e:	cb 01       	movw	r24, r22
     c70:	8c 19       	sub	r24, r12
     c72:	9d 09       	sbc	r25, r13
     c74:	ae 09       	sbc	r26, r14
     c76:	bf 09       	sbc	r27, r15
     c78:	80 93 e5 03 	sts	0x03E5, r24	; 0x8003e5 <comm_time>
     c7c:	90 93 e6 03 	sts	0x03E6, r25	; 0x8003e6 <comm_time+0x1>
     c80:	a0 93 e7 03 	sts	0x03E7, r26	; 0x8003e7 <comm_time+0x2>
     c84:	b0 93 e8 03 	sts	0x03E8, r27	; 0x8003e8 <comm_time+0x3>
		//handleMotorsWithNoController(); 
		

		if(prevSelector != currentSelector) {	// in case the selector is changed, reset the robot state
     c88:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <currentSelector>
     c8c:	cb 5c       	subi	r28, 0xCB	; 203
     c8e:	dc 4f       	sbci	r29, 0xFC	; 252
     c90:	98 81       	ld	r25, Y
     c92:	c5 53       	subi	r28, 0x35	; 53
     c94:	d3 40       	sbci	r29, 0x03	; 3
     c96:	98 17       	cp	r25, r24
     c98:	09 f4       	brne	.+2      	; 0xc9c <__LOCK_REGION_LENGTH__+0x89c>
     c9a:	04 cc       	rjmp	.-2040   	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
			disableObstacleAvoidance();
     c9c:	0e 94 e2 45 	call	0x8bc4	; 0x8bc4 <disableObstacleAvoidance>
			disableCliffAvoidance();
     ca0:	0e 94 e9 45 	call	0x8bd2	; 0x8bd2 <disableCliffAvoidance>
			GREEN_LED0_OFF;
     ca4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
     ca8:	81 60       	ori	r24, 0x01	; 1
     caa:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
			GREEN_LED1_OFF;
     cae:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
     cb2:	82 60       	ori	r24, 0x02	; 2
     cb4:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
			GREEN_LED2_OFF;
     cb8:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
     cbc:	84 60       	ori	r24, 0x04	; 4
     cbe:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
			GREEN_LED3_OFF;
     cc2:	a3 9a       	sbi	0x14, 3	; 20
			GREEN_LED4_OFF;
     cc4:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
     cc8:	80 61       	ori	r24, 0x10	; 16
     cca:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
			GREEN_LED5_OFF;
     cce:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
     cd2:	80 62       	ori	r24, 0x20	; 32
     cd4:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
			GREEN_LED6_OFF;
     cd8:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
     cdc:	80 64       	ori	r24, 0x40	; 64
     cde:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
			GREEN_LED7_OFF;
     ce2:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
     ce6:	80 68       	ori	r24, 0x80	; 128
     ce8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
			pwm_red = 255;
     cec:	8f ef       	ldi	r24, 0xFF	; 255
     cee:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <pwm_red>
			pwm_green = 255;
     cf2:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <pwm_green>
			pwm_blue = 255;
     cf6:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <pwm_blue>
			updateRedLed(pwm_red);
     cfa:	0e 94 0e 46 	call	0x8c1c	; 0x8c1c <updateRedLed>
			updateGreenLed(pwm_green);
     cfe:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <pwm_green>
     d02:	0e 94 22 46 	call	0x8c44	; 0x8c44 <updateGreenLed>
			updateBlueLed(pwm_blue);
     d06:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <pwm_blue>
     d0a:	0e 94 36 46 	call	0x8c6c	; 0x8c6c <updateBlueLed>
			setRightSpeed(0);
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <setRightSpeed>
			setLeftSpeed(0);
     d14:	80 e0       	ldi	r24, 0x00	; 0
     d16:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <setLeftSpeed>
			rgbState = 0;
     d1a:	10 92 f9 02 	sts	0x02F9, r1	; 0x8002f9 <rgbState>
			calibrationWritten = 0;
     d1e:	10 92 ba 02 	sts	0x02BA, r1	; 0x8002ba <calibrationWritten>
			demoState = 0;
     d22:	10 92 c8 02 	sts	0x02C8, r1	; 0x8002c8 <demoState>
            demoStartTime = getTime100MicroSec();
     d26:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
     d2a:	60 93 c4 02 	sts	0x02C4, r22	; 0x8002c4 <demoStartTime>
     d2e:	70 93 c5 02 	sts	0x02C5, r23	; 0x8002c5 <demoStartTime+0x1>
     d32:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <demoStartTime+0x2>
     d36:	90 93 c7 02 	sts	0x02C7, r25	; 0x8002c7 <demoStartTime+0x3>
			irCommState = 0;
     d3a:	10 92 64 02 	sts	0x0264, r1	; 0x800264 <irCommState>
			trigger_count = 0;
     d3e:	10 92 1c 02 	sts	0x021C, r1	; 0x80021c <trigger_count+0x1>
     d42:	10 92 1b 02 	sts	0x021B, r1	; 0x80021b <trigger_count>
     d46:	a0 91 cc 02 	lds	r26, 0x02CC	; 0x8002cc <currentSelector>
     d4a:	cb 5c       	subi	r28, 0xCB	; 203
     d4c:	dc 4f       	sbci	r29, 0xFC	; 252
     d4e:	a8 83       	st	Y, r26
     d50:	c5 53       	subi	r28, 0x35	; 53
     d52:	d3 40       	sbci	r29, 0x03	; 3
			trigger_flag = false;
     d54:	c6 5c       	subi	r28, 0xC6	; 198
     d56:	dc 4f       	sbci	r29, 0xFC	; 252
     d58:	18 82       	st	Y, r1
     d5a:	ca 53       	subi	r28, 0x3A	; 58
     d5c:	d3 40       	sbci	r29, 0x03	; 3
		}
		prevSelector = currentSelector;


	} // while(1)
     d5e:	a2 cb       	rjmp	.-2236   	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
					break;

            case 12:
                // PETC

                 enableObstacleAvoidance();
     d60:	0e 94 de 45 	call	0x8bbc	; 0x8bbc <enableObstacleAvoidance>

float *etc_control(float (*x_hat)[2], int id){

    static float u[2];

    u[0] = 0;
     d64:	10 92 3f 02 	sts	0x023F, r1	; 0x80023f <u.7157>
     d68:	10 92 40 02 	sts	0x0240, r1	; 0x800240 <u.7157+0x1>
     d6c:	10 92 41 02 	sts	0x0241, r1	; 0x800241 <u.7157+0x2>
     d70:	10 92 42 02 	sts	0x0242, r1	; 0x800242 <u.7157+0x3>
    u[1] = 0;
     d74:	10 92 43 02 	sts	0x0243, r1	; 0x800243 <u.7157+0x4>
     d78:	10 92 44 02 	sts	0x0244, r1	; 0x800244 <u.7157+0x5>
     d7c:	10 92 45 02 	sts	0x0245, r1	; 0x800245 <u.7157+0x6>
     d80:	10 92 46 02 	sts	0x0246, r1	; 0x800246 <u.7157+0x7>

    for(int i=0;i<ROBOTS;i++){
     d84:	80 91 2b 02 	lds	r24, 0x022B	; 0x80022b <ROBOTS>
     d88:	90 91 2c 02 	lds	r25, 0x022C	; 0x80022c <ROBOTS+0x1>
     d8c:	00 97       	sbiw	r24, 0x00	; 0
     d8e:	11 f4       	brne	.+4      	; 0xd94 <__LOCK_REGION_LENGTH__+0x994>
     d90:	0c 94 ab 14 	jmp	0x2956	; 0x2956 <__stack+0x757>
     d94:	b2 e8       	ldi	r27, 0x82	; 130
     d96:	2b 2e       	mov	r2, r27
     d98:	bd e0       	ldi	r27, 0x0D	; 13
     d9a:	3b 2e       	mov	r3, r27
     d9c:	8e 01       	movw	r16, r28
     d9e:	0f 5f       	subi	r16, 0xFF	; 255
     da0:	1f 4f       	sbci	r17, 0xFF	; 255
     da2:	a2 ef       	ldi	r26, 0xF2	; 242
     da4:	bb e0       	ldi	r27, 0x0B	; 11
     da6:	c9 5d       	subi	r28, 0xD9	; 217
     da8:	dc 4f       	sbci	r29, 0xFC	; 252
     daa:	b9 83       	std	Y+1, r27	; 0x01
     dac:	a8 83       	st	Y, r26
     dae:	c7 52       	subi	r28, 0x27	; 39
     db0:	d3 40       	sbci	r29, 0x03	; 3
     db2:	e2 e6       	ldi	r30, 0x62	; 98
     db4:	fa e0       	ldi	r31, 0x0A	; 10
     db6:	c5 5d       	subi	r28, 0xD5	; 213
     db8:	dc 4f       	sbci	r29, 0xFC	; 252
     dba:	f9 83       	std	Y+1, r31	; 0x01
     dbc:	e8 83       	st	Y, r30
     dbe:	cb 52       	subi	r28, 0x2B	; 43
     dc0:	d3 40       	sbci	r29, 0x03	; 3
     dc2:	88 0f       	add	r24, r24
     dc4:	99 1f       	adc	r25, r25
     dc6:	88 0f       	add	r24, r24
     dc8:	99 1f       	adc	r25, r25
     dca:	9c 01       	movw	r18, r24
     dcc:	2e 57       	subi	r18, 0x7E	; 126
     dce:	32 4f       	sbci	r19, 0xF2	; 242
     dd0:	c1 5d       	subi	r28, 0xD1	; 209
     dd2:	dc 4f       	sbci	r29, 0xFC	; 252
     dd4:	39 83       	std	Y+1, r19	; 0x01
     dd6:	28 83       	st	Y, r18
     dd8:	cf 52       	subi	r28, 0x2F	; 47
     dda:	d3 40       	sbci	r29, 0x03	; 3
     ddc:	cd 5d       	subi	r28, 0xDD	; 221
     dde:	dc 4f       	sbci	r29, 0xFC	; 252
     de0:	18 82       	st	Y, r1
     de2:	19 82       	std	Y+1, r1	; 0x01
     de4:	1a 82       	std	Y+2, r1	; 0x02
     de6:	1b 82       	std	Y+3, r1	; 0x03
     de8:	c3 52       	subi	r28, 0x23	; 35
     dea:	d3 40       	sbci	r29, 0x03	; 3
     dec:	81 2c       	mov	r8, r1
     dee:	91 2c       	mov	r9, r1
     df0:	54 01       	movw	r10, r8
        u[0] += -L[i]*(x_hat[i][0])+Bx[i];
     df2:	d1 01       	movw	r26, r2
     df4:	cd 90       	ld	r12, X+
     df6:	dd 90       	ld	r13, X+
     df8:	ed 90       	ld	r14, X+
     dfa:	fd 90       	ld	r15, X+
     dfc:	1d 01       	movw	r2, r26
     dfe:	f7 fa       	bst	r15, 7
     e00:	f0 94       	com	r15
     e02:	f7 f8       	bld	r15, 7
     e04:	f0 94       	com	r15
     e06:	c9 5d       	subi	r28, 0xD9	; 217
     e08:	dc 4f       	sbci	r29, 0xFC	; 252
     e0a:	e8 81       	ld	r30, Y
     e0c:	f9 81       	ldd	r31, Y+1	; 0x01
     e0e:	c7 52       	subi	r28, 0x27	; 39
     e10:	d3 40       	sbci	r29, 0x03	; 3
     e12:	41 90       	ld	r4, Z+
     e14:	51 90       	ld	r5, Z+
     e16:	61 90       	ld	r6, Z+
     e18:	71 90       	ld	r7, Z+
     e1a:	c9 5d       	subi	r28, 0xD9	; 217
     e1c:	dc 4f       	sbci	r29, 0xFC	; 252
     e1e:	f9 83       	std	Y+1, r31	; 0x01
     e20:	e8 83       	st	Y, r30
     e22:	c7 52       	subi	r28, 0x27	; 39
     e24:	d3 40       	sbci	r29, 0x03	; 3
     e26:	d8 01       	movw	r26, r16
     e28:	2d 91       	ld	r18, X+
     e2a:	3d 91       	ld	r19, X+
     e2c:	4d 91       	ld	r20, X+
     e2e:	5c 91       	ld	r21, X
     e30:	c7 01       	movw	r24, r14
     e32:	b6 01       	movw	r22, r12
     e34:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
     e38:	a3 01       	movw	r20, r6
     e3a:	92 01       	movw	r18, r4
     e3c:	0e 94 db 4c 	call	0x99b6	; 0x99b6 <__addsf3>
     e40:	9b 01       	movw	r18, r22
     e42:	ac 01       	movw	r20, r24
     e44:	c5 01       	movw	r24, r10
     e46:	b4 01       	movw	r22, r8
     e48:	0e 94 db 4c 	call	0x99b6	; 0x99b6 <__addsf3>
     e4c:	4b 01       	movw	r8, r22
     e4e:	5c 01       	movw	r10, r24
        u[1] += -L[i]*(x_hat[i][1])+By[i];
     e50:	c5 5d       	subi	r28, 0xD5	; 213
     e52:	dc 4f       	sbci	r29, 0xFC	; 252
     e54:	e8 81       	ld	r30, Y
     e56:	f9 81       	ldd	r31, Y+1	; 0x01
     e58:	cb 52       	subi	r28, 0x2B	; 43
     e5a:	d3 40       	sbci	r29, 0x03	; 3
     e5c:	41 90       	ld	r4, Z+
     e5e:	51 90       	ld	r5, Z+
     e60:	61 90       	ld	r6, Z+
     e62:	71 90       	ld	r7, Z+
     e64:	c5 5d       	subi	r28, 0xD5	; 213
     e66:	dc 4f       	sbci	r29, 0xFC	; 252
     e68:	f9 83       	std	Y+1, r31	; 0x01
     e6a:	e8 83       	st	Y, r30
     e6c:	cb 52       	subi	r28, 0x2B	; 43
     e6e:	d3 40       	sbci	r29, 0x03	; 3
     e70:	d8 01       	movw	r26, r16
     e72:	14 96       	adiw	r26, 0x04	; 4
     e74:	2d 91       	ld	r18, X+
     e76:	3d 91       	ld	r19, X+
     e78:	4d 91       	ld	r20, X+
     e7a:	5c 91       	ld	r21, X
     e7c:	17 97       	sbiw	r26, 0x07	; 7
     e7e:	c7 01       	movw	r24, r14
     e80:	b6 01       	movw	r22, r12
     e82:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
     e86:	a3 01       	movw	r20, r6
     e88:	92 01       	movw	r18, r4
     e8a:	0e 94 db 4c 	call	0x99b6	; 0x99b6 <__addsf3>
     e8e:	9b 01       	movw	r18, r22
     e90:	ac 01       	movw	r20, r24
     e92:	cd 5d       	subi	r28, 0xDD	; 221
     e94:	dc 4f       	sbci	r29, 0xFC	; 252
     e96:	68 81       	ld	r22, Y
     e98:	79 81       	ldd	r23, Y+1	; 0x01
     e9a:	8a 81       	ldd	r24, Y+2	; 0x02
     e9c:	9b 81       	ldd	r25, Y+3	; 0x03
     e9e:	c3 52       	subi	r28, 0x23	; 35
     ea0:	d3 40       	sbci	r29, 0x03	; 3
     ea2:	0e 94 db 4c 	call	0x99b6	; 0x99b6 <__addsf3>
     ea6:	cd 5d       	subi	r28, 0xDD	; 221
     ea8:	dc 4f       	sbci	r29, 0xFC	; 252
     eaa:	68 83       	st	Y, r22
     eac:	79 83       	std	Y+1, r23	; 0x01
     eae:	8a 83       	std	Y+2, r24	; 0x02
     eb0:	9b 83       	std	Y+3, r25	; 0x03
     eb2:	c3 52       	subi	r28, 0x23	; 35
     eb4:	d3 40       	sbci	r29, 0x03	; 3
     eb6:	08 5f       	subi	r16, 0xF8	; 248
     eb8:	1f 4f       	sbci	r17, 0xFF	; 255
    static float u[2];

    u[0] = 0;
    u[1] = 0;

    for(int i=0;i<ROBOTS;i++){
     eba:	c1 5d       	subi	r28, 0xD1	; 209
     ebc:	dc 4f       	sbci	r29, 0xFC	; 252
     ebe:	e8 81       	ld	r30, Y
     ec0:	f9 81       	ldd	r31, Y+1	; 0x01
     ec2:	cf 52       	subi	r28, 0x2F	; 47
     ec4:	d3 40       	sbci	r29, 0x03	; 3
     ec6:	2e 16       	cp	r2, r30
     ec8:	3f 06       	cpc	r3, r31
     eca:	09 f0       	breq	.+2      	; 0xece <__LOCK_REGION_LENGTH__+0xace>
     ecc:	92 cf       	rjmp	.-220    	; 0xdf2 <__LOCK_REGION_LENGTH__+0x9f2>
     ece:	80 92 3f 02 	sts	0x023F, r8	; 0x80023f <u.7157>
     ed2:	90 92 40 02 	sts	0x0240, r9	; 0x800240 <u.7157+0x1>
     ed6:	a0 92 41 02 	sts	0x0241, r10	; 0x800241 <u.7157+0x2>
     eda:	b0 92 42 02 	sts	0x0242, r11	; 0x800242 <u.7157+0x3>
     ede:	60 93 43 02 	sts	0x0243, r22	; 0x800243 <u.7157+0x4>
     ee2:	70 93 44 02 	sts	0x0244, r23	; 0x800244 <u.7157+0x5>
     ee6:	80 93 45 02 	sts	0x0245, r24	; 0x800245 <u.7157+0x6>
     eea:	90 93 46 02 	sts	0x0246, r25	; 0x800246 <u.7157+0x7>
                 //control_time_previous = getTime100MicroSec();
                 u = etc_control(x_hat, id);
                 //control_time = getTime100MicroSec() - control_time_previous;
                 
                 //control_time_previous = getTime100MicroSec();
                 switch (NextState) {
     eee:	80 91 2e 02 	lds	r24, 0x022E	; 0x80022e <__data_end>
     ef2:	83 30       	cpi	r24, 0x03	; 3
     ef4:	11 f4       	brne	.+4      	; 0xefa <__LOCK_REGION_LENGTH__+0xafa>
     ef6:	0c 94 ee 0f 	jmp	0x1fdc	; 0x1fdc <__EEPROM_REGION_LENGTH__+0xfdc>
     efa:	08 f0       	brcs	.+2      	; 0xefe <__LOCK_REGION_LENGTH__+0xafe>
     efc:	77 c7       	rjmp	.+3822   	; 0x1dec <__EEPROM_REGION_LENGTH__+0xdec>
     efe:	88 23       	and	r24, r24
     f00:	11 f4       	brne	.+4      	; 0xf06 <__LOCK_REGION_LENGTH__+0xb06>
     f02:	0c 94 ae 0f 	jmp	0x1f5c	; 0x1f5c <__EEPROM_REGION_LENGTH__+0xf5c>
     f06:	82 30       	cpi	r24, 0x02	; 2
     f08:	09 f0       	breq	.+2      	; 0xf0c <__LOCK_REGION_LENGTH__+0xb0c>
     f0a:	a3 c0       	rjmp	.+326    	; 0x1052 <__EEPROM_REGION_LENGTH__+0x52>
		                 //                        theta_ref = atan2(disY, disX);
	                 }break;

	                 case angle:{

		                 if (!trigger_flag) {
     f0c:	c6 5c       	subi	r28, 0xC6	; 198
     f0e:	dc 4f       	sbci	r29, 0xFC	; 252
     f10:	98 81       	ld	r25, Y
     f12:	ca 53       	subi	r28, 0x3A	; 58
     f14:	d3 40       	sbci	r29, 0x03	; 3
     f16:	99 23       	and	r25, r25
     f18:	11 f4       	brne	.+4      	; 0xf1e <__LOCK_REGION_LENGTH__+0xb1e>
     f1a:	0c 94 70 13 	jmp	0x26e0	; 0x26e0 <__stack+0x4e1>
    float speed_a = 0;
    float K = 0.5;
    float error = 0.0;
    bool out;

    angle_ref = (float) atan2f(u[1], u[0]) * RAD_2_DEG;
     f1e:	a5 01       	movw	r20, r10
     f20:	94 01       	movw	r18, r8
     f22:	cd 5d       	subi	r28, 0xDD	; 221
     f24:	dc 4f       	sbci	r29, 0xFC	; 252
     f26:	68 81       	ld	r22, Y
     f28:	79 81       	ldd	r23, Y+1	; 0x01
     f2a:	8a 81       	ldd	r24, Y+2	; 0x02
     f2c:	9b 81       	ldd	r25, Y+3	; 0x03
     f2e:	c3 52       	subi	r28, 0x23	; 35
     f30:	d3 40       	sbci	r29, 0x03	; 3
     f32:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <atan2>
     f36:	21 ee       	ldi	r18, 0xE1	; 225
     f38:	3e e2       	ldi	r19, 0x2E	; 46
     f3a:	45 e6       	ldi	r20, 0x65	; 101
     f3c:	52 e4       	ldi	r21, 0x42	; 66
     f3e:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
     f42:	4b 01       	movw	r8, r22
     f44:	5c 01       	movw	r10, r24

	theta_temp = theta_cur* RAD_2_DEG; //theta = filtered_theta from 0 to 360
     f46:	21 ee       	ldi	r18, 0xE1	; 225
     f48:	3e e2       	ldi	r19, 0x2E	; 46
     f4a:	45 e6       	ldi	r20, 0x65	; 101
     f4c:	52 e4       	ldi	r21, 0x42	; 66
     f4e:	60 91 af 02 	lds	r22, 0x02AF	; 0x8002af <theta>
     f52:	70 91 b0 02 	lds	r23, 0x02B0	; 0x8002b0 <theta+0x1>
     f56:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <theta+0x2>
     f5a:	90 91 b2 02 	lds	r25, 0x02B2	; 0x8002b2 <theta+0x3>
     f5e:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
     f62:	6b 01       	movw	r12, r22
     f64:	7c 01       	movw	r14, r24
	if (theta_temp > 180){
     f66:	20 e0       	ldi	r18, 0x00	; 0
     f68:	30 e0       	ldi	r19, 0x00	; 0
     f6a:	44 e3       	ldi	r20, 0x34	; 52
     f6c:	53 e4       	ldi	r21, 0x43	; 67
     f6e:	0e 94 bd 4f 	call	0x9f7a	; 0x9f7a <__gesf2>
     f72:	18 16       	cp	r1, r24
     f74:	54 f4       	brge	.+20     	; 0xf8a <__LOCK_REGION_LENGTH__+0xb8a>
		theta_temp -= 360;
     f76:	20 e0       	ldi	r18, 0x00	; 0
     f78:	30 e0       	ldi	r19, 0x00	; 0
     f7a:	44 eb       	ldi	r20, 0xB4	; 180
     f7c:	53 e4       	ldi	r21, 0x43	; 67
     f7e:	c7 01       	movw	r24, r14
     f80:	b6 01       	movw	r22, r12
     f82:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <__subsf3>
     f86:	6b 01       	movw	r12, r22
     f88:	7c 01       	movw	r14, r24
	}

    error = angle_ref - theta_temp;
     f8a:	a7 01       	movw	r20, r14
     f8c:	96 01       	movw	r18, r12
     f8e:	c5 01       	movw	r24, r10
     f90:	b4 01       	movw	r22, r8
     f92:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <__subsf3>
     f96:	6b 01       	movw	r12, r22
     f98:	7c 01       	movw	r14, r24
	//angle_temp = error;
    //error = 0;
	
    if (error > 180){
     f9a:	20 e0       	ldi	r18, 0x00	; 0
     f9c:	30 e0       	ldi	r19, 0x00	; 0
     f9e:	44 e3       	ldi	r20, 0x34	; 52
     fa0:	53 e4       	ldi	r21, 0x43	; 67
     fa2:	0e 94 bd 4f 	call	0x9f7a	; 0x9f7a <__gesf2>
     fa6:	18 16       	cp	r1, r24
     fa8:	14 f0       	brlt	.+4      	; 0xfae <__LOCK_REGION_LENGTH__+0xbae>
     faa:	0c 94 d0 12 	jmp	0x25a0	; 0x25a0 <__stack+0x3a1>
        error -= 360;
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	44 eb       	ldi	r20, 0xB4	; 180
     fb4:	53 e4       	ldi	r21, 0x43	; 67
     fb6:	c7 01       	movw	r24, r14
     fb8:	b6 01       	movw	r22, r12
     fba:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <__subsf3>
     fbe:	6b 01       	movw	r12, r22
     fc0:	7c 01       	movw	r14, r24
    } else if (error < -180) {
        error += 360;
    }

    speed_a = K*error;
     fc2:	20 e0       	ldi	r18, 0x00	; 0
     fc4:	30 e0       	ldi	r19, 0x00	; 0
     fc6:	40 e0       	ldi	r20, 0x00	; 0
     fc8:	5f e3       	ldi	r21, 0x3F	; 63
     fca:	c7 01       	movw	r24, r14
     fcc:	b6 01       	movw	r22, r12
     fce:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
     fd2:	4b 01       	movw	r8, r22
     fd4:	5c 01       	movw	r10, r24


    // limit speed
    if (speed_a > 15){
     fd6:	20 e0       	ldi	r18, 0x00	; 0
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	40 e7       	ldi	r20, 0x70	; 112
     fdc:	51 e4       	ldi	r21, 0x41	; 65
     fde:	0e 94 bd 4f 	call	0x9f7a	; 0x9f7a <__gesf2>
     fe2:	18 16       	cp	r1, r24
     fe4:	14 f4       	brge	.+4      	; 0xfea <__LOCK_REGION_LENGTH__+0xbea>
     fe6:	0c 94 a8 12 	jmp	0x2550	; 0x2550 <__stack+0x351>
        speed_a = 15;
    }else if (speed_a < -15){
     fea:	20 e0       	ldi	r18, 0x00	; 0
     fec:	30 e0       	ldi	r19, 0x00	; 0
     fee:	40 e7       	ldi	r20, 0x70	; 112
     ff0:	51 ec       	ldi	r21, 0xC1	; 193
     ff2:	c5 01       	movw	r24, r10
     ff4:	b4 01       	movw	r22, r8
     ff6:	0e 94 b9 4d 	call	0x9b72	; 0x9b72 <__cmpsf2>
     ffa:	87 ff       	sbrs	r24, 7
     ffc:	02 c0       	rjmp	.+4      	; 0x1002 <__EEPROM_REGION_LENGTH__+0x2>
     ffe:	0c 94 48 14 	jmp	0x2890	; 0x2890 <__stack+0x691>
    1002:	c5 01       	movw	r24, r10
    1004:	b4 01       	movw	r22, r8
    1006:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__fixsfsi>
    100a:	8b 01       	movw	r16, r22
    100c:	c5 01       	movw	r24, r10
    100e:	b4 01       	movw	r22, r8
    1010:	90 58       	subi	r25, 0x80	; 128
    1012:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__fixsfsi>
    1016:	b6 2e       	mov	r11, r22
    1018:	87 2f       	mov	r24, r23
        speed_a = -15;
    }

	r_speed = speed_a;
    101a:	10 93 f6 03 	sts	0x03F6, r17	; 0x8003f6 <r_speed+0x1>
    101e:	00 93 f5 03 	sts	0x03F5, r16	; 0x8003f5 <r_speed>
	l_speed = -speed_a;
    1022:	b0 92 f7 03 	sts	0x03F7, r11	; 0x8003f7 <l_speed>
    1026:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <l_speed+0x1>

    if (fabsf(error) > 25){
    102a:	c7 01       	movw	r24, r14
    102c:	b6 01       	movw	r22, r12
    102e:	9f 77       	andi	r25, 0x7F	; 127
    1030:	20 e0       	ldi	r18, 0x00	; 0
    1032:	30 e0       	ldi	r19, 0x00	; 0
    1034:	48 ec       	ldi	r20, 0xC8	; 200
    1036:	51 e4       	ldi	r21, 0x41	; 65
    1038:	0e 94 bd 4f 	call	0x9f7a	; 0x9f7a <__gesf2>
    103c:	18 16       	cp	r1, r24
    103e:	14 f0       	brlt	.+4      	; 0x1044 <__EEPROM_REGION_LENGTH__+0x44>
    1040:	0c 94 d0 13 	jmp	0x27a0	; 0x27a0 <__stack+0x5a1>
//						start_state1 = getTime100MicroSec();
//					}
					
//					break;
//				case 1:
					setLeftSpeed(l_speed);
    1044:	8b 2d       	mov	r24, r11
    1046:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <setLeftSpeed>
					setRightSpeed(r_speed);
    104a:	80 91 f5 03 	lds	r24, 0x03F5	; 0x8003f5 <r_speed>
    104e:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <setRightSpeed>
				//	if(!(NextState == idle)){
				//		NextState = terminate;
				//	}
                //}

				init_time_previous = getTime100MicroSec();
    1052:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    1056:	c9 5d       	subi	r28, 0xD9	; 217
    1058:	dc 4f       	sbci	r29, 0xFC	; 252
    105a:	68 83       	st	Y, r22
    105c:	79 83       	std	Y+1, r23	; 0x01
    105e:	8a 83       	std	Y+2, r24	; 0x02
    1060:	9b 83       	std	Y+3, r25	; 0x03
    1062:	c7 52       	subi	r28, 0x27	; 39
    1064:	d3 40       	sbci	r29, 0x03	; 3
                if(getTime100MicroSec()-period >= h | init_trigger) {
    1066:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    106a:	dc 01       	movw	r26, r24
    106c:	cb 01       	movw	r24, r22
    106e:	c8 5b       	subi	r28, 0xB8	; 184
    1070:	dc 4f       	sbci	r29, 0xFC	; 252
    1072:	28 81       	ld	r18, Y
    1074:	39 81       	ldd	r19, Y+1	; 0x01
    1076:	4a 81       	ldd	r20, Y+2	; 0x02
    1078:	5b 81       	ldd	r21, Y+3	; 0x03
    107a:	c8 54       	subi	r28, 0x48	; 72
    107c:	d3 40       	sbci	r29, 0x03	; 3
    107e:	82 1b       	sub	r24, r18
    1080:	93 0b       	sbc	r25, r19
    1082:	a4 0b       	sbc	r26, r20
    1084:	b5 0b       	sbc	r27, r21
    1086:	00 91 1d 02 	lds	r16, 0x021D	; 0x80021d <h>
    108a:	10 91 1e 02 	lds	r17, 0x021E	; 0x80021e <h+0x1>
    108e:	20 91 1f 02 	lds	r18, 0x021F	; 0x80021f <h+0x2>
    1092:	30 91 20 02 	lds	r19, 0x0220	; 0x800220 <h+0x3>
    1096:	80 17       	cp	r24, r16
    1098:	91 07       	cpc	r25, r17
    109a:	a2 07       	cpc	r26, r18
    109c:	b3 07       	cpc	r27, r19
    109e:	08 f4       	brcc	.+2      	; 0x10a2 <__EEPROM_REGION_LENGTH__+0xa2>
    10a0:	38 c6       	rjmp	.+3184   	; 0x1d12 <__EEPROM_REGION_LENGTH__+0xd12>
    float f = 0.0;
    float sigma = 0.01;
    static float u[2];
    float u_petc= 0;

    u[0] = 0;
    10a2:	10 92 37 02 	sts	0x0237, r1	; 0x800237 <u.7179>
    10a6:	10 92 38 02 	sts	0x0238, r1	; 0x800238 <u.7179+0x1>
    10aa:	10 92 39 02 	sts	0x0239, r1	; 0x800239 <u.7179+0x2>
    10ae:	10 92 3a 02 	sts	0x023A, r1	; 0x80023a <u.7179+0x3>
    u[1] = 0;
    10b2:	10 92 3b 02 	sts	0x023B, r1	; 0x80023b <u.7179+0x4>
    10b6:	10 92 3c 02 	sts	0x023C, r1	; 0x80023c <u.7179+0x5>
    10ba:	10 92 3d 02 	sts	0x023D, r1	; 0x80023d <u.7179+0x6>
    10be:	10 92 3e 02 	sts	0x023E, r1	; 0x80023e <u.7179+0x7>

    for(int i=0;i<ROBOTS;i++){
    10c2:	20 90 2b 02 	lds	r2, 0x022B	; 0x80022b <ROBOTS>
    10c6:	30 90 2c 02 	lds	r3, 0x022C	; 0x80022c <ROBOTS+0x1>
    10ca:	21 14       	cp	r2, r1
    10cc:	31 04       	cpc	r3, r1
    10ce:	11 f4       	brne	.+4      	; 0x10d4 <__EEPROM_REGION_LENGTH__+0xd4>
    10d0:	0c 94 c5 14 	jmp	0x298a	; 0x298a <__stack+0x78b>
    10d4:	42 e8       	ldi	r20, 0x82	; 130
    10d6:	5d e0       	ldi	r21, 0x0D	; 13
    10d8:	cd 5d       	subi	r28, 0xDD	; 221
    10da:	dc 4f       	sbci	r29, 0xFC	; 252
    10dc:	59 83       	std	Y+1, r21	; 0x01
    10de:	48 83       	st	Y, r20
    10e0:	c3 52       	subi	r28, 0x23	; 35
    10e2:	d3 40       	sbci	r29, 0x03	; 3
    10e4:	8e 01       	movw	r16, r28
    10e6:	0f 5f       	subi	r16, 0xFF	; 255
    10e8:	1f 4f       	sbci	r17, 0xFF	; 255
    10ea:	22 0c       	add	r2, r2
    10ec:	33 1c       	adc	r3, r3
    10ee:	22 0c       	add	r2, r2
    10f0:	33 1c       	adc	r3, r3
    10f2:	22 0c       	add	r2, r2
    10f4:	33 1c       	adc	r3, r3
    10f6:	20 0e       	add	r2, r16
    10f8:	31 1e       	adc	r3, r17
    10fa:	c1 2c       	mov	r12, r1
    10fc:	d1 2c       	mov	r13, r1
    10fe:	76 01       	movw	r14, r12
    1100:	46 01       	movw	r8, r12
    1102:	57 01       	movw	r10, r14
        u[0] += L[i]*(x_hat[i][0]);
    1104:	cd 5d       	subi	r28, 0xDD	; 221
    1106:	dc 4f       	sbci	r29, 0xFC	; 252
    1108:	a8 81       	ld	r26, Y
    110a:	b9 81       	ldd	r27, Y+1	; 0x01
    110c:	c3 52       	subi	r28, 0x23	; 35
    110e:	d3 40       	sbci	r29, 0x03	; 3
    1110:	4d 90       	ld	r4, X+
    1112:	5d 90       	ld	r5, X+
    1114:	6d 90       	ld	r6, X+
    1116:	7d 90       	ld	r7, X+
    1118:	cd 5d       	subi	r28, 0xDD	; 221
    111a:	dc 4f       	sbci	r29, 0xFC	; 252
    111c:	b9 83       	std	Y+1, r27	; 0x01
    111e:	a8 83       	st	Y, r26
    1120:	c3 52       	subi	r28, 0x23	; 35
    1122:	d3 40       	sbci	r29, 0x03	; 3
    1124:	f8 01       	movw	r30, r16
    1126:	20 81       	ld	r18, Z
    1128:	31 81       	ldd	r19, Z+1	; 0x01
    112a:	42 81       	ldd	r20, Z+2	; 0x02
    112c:	53 81       	ldd	r21, Z+3	; 0x03
    112e:	c3 01       	movw	r24, r6
    1130:	b2 01       	movw	r22, r4
    1132:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    1136:	9b 01       	movw	r18, r22
    1138:	ac 01       	movw	r20, r24
    113a:	c5 01       	movw	r24, r10
    113c:	b4 01       	movw	r22, r8
    113e:	0e 94 db 4c 	call	0x99b6	; 0x99b6 <__addsf3>
    1142:	4b 01       	movw	r8, r22
    1144:	5c 01       	movw	r10, r24
        u[1] += L[i]*(x_hat[i][1]);
    1146:	d8 01       	movw	r26, r16
    1148:	14 96       	adiw	r26, 0x04	; 4
    114a:	2d 91       	ld	r18, X+
    114c:	3d 91       	ld	r19, X+
    114e:	4d 91       	ld	r20, X+
    1150:	5c 91       	ld	r21, X
    1152:	17 97       	sbiw	r26, 0x07	; 7
    1154:	c3 01       	movw	r24, r6
    1156:	b2 01       	movw	r22, r4
    1158:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    115c:	9b 01       	movw	r18, r22
    115e:	ac 01       	movw	r20, r24
    1160:	c7 01       	movw	r24, r14
    1162:	b6 01       	movw	r22, r12
    1164:	0e 94 db 4c 	call	0x99b6	; 0x99b6 <__addsf3>
    1168:	6b 01       	movw	r12, r22
    116a:	7c 01       	movw	r14, r24
    116c:	08 5f       	subi	r16, 0xF8	; 248
    116e:	1f 4f       	sbci	r17, 0xFF	; 255
    float u_petc= 0;

    u[0] = 0;
    u[1] = 0;

    for(int i=0;i<ROBOTS;i++){
    1170:	20 16       	cp	r2, r16
    1172:	31 06       	cpc	r3, r17
    1174:	39 f6       	brne	.-114    	; 0x1104 <__EEPROM_REGION_LENGTH__+0x104>
    1176:	80 92 37 02 	sts	0x0237, r8	; 0x800237 <u.7179>
    117a:	90 92 38 02 	sts	0x0238, r9	; 0x800238 <u.7179+0x1>
    117e:	a0 92 39 02 	sts	0x0239, r10	; 0x800239 <u.7179+0x2>
    1182:	b0 92 3a 02 	sts	0x023A, r11	; 0x80023a <u.7179+0x3>
    1186:	60 93 3b 02 	sts	0x023B, r22	; 0x80023b <u.7179+0x4>
    118a:	70 93 3c 02 	sts	0x023C, r23	; 0x80023c <u.7179+0x5>
    118e:	80 93 3d 02 	sts	0x023D, r24	; 0x80023d <u.7179+0x6>
    1192:	90 93 3e 02 	sts	0x023E, r25	; 0x80023e <u.7179+0x7>
        u[0] += L[i]*(x_hat[i][0]);
        u[1] += L[i]*(x_hat[i][1]);
    }

    if( fabs(u[0]) > fabs(u[1])){
    1196:	e8 94       	clt
    1198:	b7 f8       	bld	r11, 7
    119a:	e8 94       	clt
    119c:	f7 f8       	bld	r15, 7
    119e:	a7 01       	movw	r20, r14
    11a0:	96 01       	movw	r18, r12
    11a2:	c5 01       	movw	r24, r10
    11a4:	b4 01       	movw	r22, r8
    11a6:	0e 94 bd 4f 	call	0x9f7a	; 0x9f7a <__gesf2>
    11aa:	2a e0       	ldi	r18, 0x0A	; 10
    11ac:	37 ed       	ldi	r19, 0xD7	; 215
    11ae:	43 e2       	ldi	r20, 0x23	; 35
    11b0:	5c e3       	ldi	r21, 0x3C	; 60
    11b2:	18 16       	cp	r1, r24
    11b4:	14 f4       	brge	.+4      	; 0x11ba <__EEPROM_REGION_LENGTH__+0x1ba>
    11b6:	0c 94 8d 12 	jmp	0x251a	; 0x251a <__stack+0x31b>
    11ba:	c7 01       	movw	r24, r14
    11bc:	b6 01       	movw	r22, r12
    11be:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    11c2:	c5 5d       	subi	r28, 0xD5	; 213
    11c4:	dc 4f       	sbci	r29, 0xFC	; 252
    11c6:	68 83       	st	Y, r22
    11c8:	79 83       	std	Y+1, r23	; 0x01
    11ca:	8a 83       	std	Y+2, r24	; 0x02
    11cc:	9b 83       	std	Y+3, r25	; 0x03
    11ce:	cb 52       	subi	r28, 0x2B	; 43
    11d0:	d3 40       	sbci	r29, 0x03	; 3
        u_petc = fabs(u[0]);
    }else{
        u_petc = fabs(u[1]);
    }

    f = sqrt(pow((fp[0]-x[0]),2.0) + pow((fp[1]-x[1]),2.0)) - sigma*u_petc;
    11d2:	20 91 32 07 	lds	r18, 0x0732	; 0x800732 <position>
    11d6:	30 91 33 07 	lds	r19, 0x0733	; 0x800733 <position+0x1>
    11da:	40 91 34 07 	lds	r20, 0x0734	; 0x800734 <position+0x2>
    11de:	50 91 35 07 	lds	r21, 0x0735	; 0x800735 <position+0x3>
    11e2:	cd 5d       	subi	r28, 0xDD	; 221
    11e4:	dc 4f       	sbci	r29, 0xFC	; 252
    11e6:	28 83       	st	Y, r18
    11e8:	39 83       	std	Y+1, r19	; 0x01
    11ea:	4a 83       	std	Y+2, r20	; 0x02
    11ec:	5b 83       	std	Y+3, r21	; 0x03
    11ee:	c3 52       	subi	r28, 0x23	; 35
    11f0:	d3 40       	sbci	r29, 0x03	; 3
    11f2:	60 91 3a 07 	lds	r22, 0x073A	; 0x80073a <fixed_position>
    11f6:	70 91 3b 07 	lds	r23, 0x073B	; 0x80073b <fixed_position+0x1>
    11fa:	80 91 3c 07 	lds	r24, 0x073C	; 0x80073c <fixed_position+0x2>
    11fe:	90 91 3d 07 	lds	r25, 0x073D	; 0x80073d <fixed_position+0x3>
    1202:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <__subsf3>
    1206:	4b 01       	movw	r8, r22
    1208:	5c 01       	movw	r10, r24
    120a:	40 90 36 07 	lds	r4, 0x0736	; 0x800736 <position+0x4>
    120e:	50 90 37 07 	lds	r5, 0x0737	; 0x800737 <position+0x5>
    1212:	60 90 38 07 	lds	r6, 0x0738	; 0x800738 <position+0x6>
    1216:	70 90 39 07 	lds	r7, 0x0739	; 0x800739 <position+0x7>
    121a:	a3 01       	movw	r20, r6
    121c:	92 01       	movw	r18, r4
    121e:	60 91 3e 07 	lds	r22, 0x073E	; 0x80073e <fixed_position+0x4>
    1222:	70 91 3f 07 	lds	r23, 0x073F	; 0x80073f <fixed_position+0x5>
    1226:	80 91 40 07 	lds	r24, 0x0740	; 0x800740 <fixed_position+0x6>
    122a:	90 91 41 07 	lds	r25, 0x0741	; 0x800741 <fixed_position+0x7>
    122e:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <__subsf3>
    1232:	6b 01       	movw	r12, r22
    1234:	7c 01       	movw	r14, r24
    1236:	a5 01       	movw	r20, r10
    1238:	94 01       	movw	r18, r8
    123a:	c5 01       	movw	r24, r10
    123c:	b4 01       	movw	r22, r8
    123e:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    1242:	4b 01       	movw	r8, r22
    1244:	5c 01       	movw	r10, r24
    1246:	a7 01       	movw	r20, r14
    1248:	96 01       	movw	r18, r12
    124a:	c7 01       	movw	r24, r14
    124c:	b6 01       	movw	r22, r12
    124e:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    1252:	9b 01       	movw	r18, r22
    1254:	ac 01       	movw	r20, r24
    1256:	c5 01       	movw	r24, r10
    1258:	b4 01       	movw	r22, r8
    125a:	0e 94 db 4c 	call	0x99b6	; 0x99b6 <__addsf3>
    125e:	0e 94 b3 50 	call	0xa166	; 0xa166 <sqrt>
                //}

				init_time_previous = getTime100MicroSec();
                if(getTime100MicroSec()-period >= h | init_trigger) {
                    trigger_flag = false;
                    if (trigger_petc(fixed_position, x_hat, position, id)) {
    1262:	c5 5d       	subi	r28, 0xD5	; 213
    1264:	dc 4f       	sbci	r29, 0xFC	; 252
    1266:	28 81       	ld	r18, Y
    1268:	39 81       	ldd	r19, Y+1	; 0x01
    126a:	4a 81       	ldd	r20, Y+2	; 0x02
    126c:	5b 81       	ldd	r21, Y+3	; 0x03
    126e:	cb 52       	subi	r28, 0x2B	; 43
    1270:	d3 40       	sbci	r29, 0x03	; 3
    1272:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <__subsf3>
    1276:	20 e0       	ldi	r18, 0x00	; 0
    1278:	30 e0       	ldi	r19, 0x00	; 0
    127a:	a9 01       	movw	r20, r18
    127c:	0e 94 bd 4f 	call	0x9f7a	; 0x9f7a <__gesf2>
    1280:	18 16       	cp	r1, r24
    1282:	14 f0       	brlt	.+4      	; 0x1288 <__EEPROM_REGION_LENGTH__+0x288>
    1284:	0c 94 86 12 	jmp	0x250c	; 0x250c <__stack+0x30d>
                        for (i = 0; i < 2; i++) {
                            fixed_position[i] = position[i];
    1288:	cd 5d       	subi	r28, 0xDD	; 221
    128a:	dc 4f       	sbci	r29, 0xFC	; 252
    128c:	88 81       	ld	r24, Y
    128e:	99 81       	ldd	r25, Y+1	; 0x01
    1290:	aa 81       	ldd	r26, Y+2	; 0x02
    1292:	bb 81       	ldd	r27, Y+3	; 0x03
    1294:	c3 52       	subi	r28, 0x23	; 35
    1296:	d3 40       	sbci	r29, 0x03	; 3
    1298:	80 93 3a 07 	sts	0x073A, r24	; 0x80073a <fixed_position>
    129c:	90 93 3b 07 	sts	0x073B, r25	; 0x80073b <fixed_position+0x1>
    12a0:	a0 93 3c 07 	sts	0x073C, r26	; 0x80073c <fixed_position+0x2>
    12a4:	b0 93 3d 07 	sts	0x073D, r27	; 0x80073d <fixed_position+0x3>
    12a8:	40 92 3e 07 	sts	0x073E, r4	; 0x80073e <fixed_position+0x4>
    12ac:	50 92 3f 07 	sts	0x073F, r5	; 0x80073f <fixed_position+0x5>
    12b0:	60 92 40 07 	sts	0x0740, r6	; 0x800740 <fixed_position+0x6>
    12b4:	70 92 41 07 	sts	0x0741, r7	; 0x800741 <fixed_position+0x7>
                            //x_hat[id][i] = position[i];
                        }
						xPos_fixed = position[0];
    12b8:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <xPos_fixed>
    12bc:	90 93 03 04 	sts	0x0403, r25	; 0x800403 <xPos_fixed+0x1>
    12c0:	a0 93 04 04 	sts	0x0404, r26	; 0x800404 <xPos_fixed+0x2>
    12c4:	b0 93 05 04 	sts	0x0405, r27	; 0x800405 <xPos_fixed+0x3>
						yPos_fixed = position[1];
    12c8:	40 92 fe 03 	sts	0x03FE, r4	; 0x8003fe <yPos_fixed>
    12cc:	50 92 ff 03 	sts	0x03FF, r5	; 0x8003ff <yPos_fixed+0x1>
    12d0:	60 92 00 04 	sts	0x0400, r6	; 0x800400 <yPos_fixed+0x2>
    12d4:	70 92 01 04 	sts	0x0401, r7	; 0x800401 <yPos_fixed+0x3>
						if (reset_flag){
    12d8:	80 91 06 04 	lds	r24, 0x0406	; 0x800406 <reset_flag>
    12dc:	88 23       	and	r24, r24
    12de:	49 f0       	breq	.+18     	; 0x12f2 <__EEPROM_REGION_LENGTH__+0x2f2>
							count_resets++;
    12e0:	80 91 30 07 	lds	r24, 0x0730	; 0x800730 <count_resets>
    12e4:	90 91 31 07 	lds	r25, 0x0731	; 0x800731 <count_resets+0x1>
    12e8:	01 96       	adiw	r24, 0x01	; 1
    12ea:	90 93 31 07 	sts	0x0731, r25	; 0x800731 <count_resets+0x1>
    12ee:	80 93 30 07 	sts	0x0730, r24	; 0x800730 <count_resets>
						}
						trigger_count++;
    12f2:	80 91 1b 02 	lds	r24, 0x021B	; 0x80021b <trigger_count>
    12f6:	90 91 1c 02 	lds	r25, 0x021C	; 0x80021c <trigger_count+0x1>
    12fa:	01 96       	adiw	r24, 0x01	; 1
    12fc:	90 93 1c 02 	sts	0x021C, r25	; 0x80021c <trigger_count+0x1>
    1300:	80 93 1b 02 	sts	0x021B, r24	; 0x80021b <trigger_count>
                        updateRedLed(255);
    1304:	8f ef       	ldi	r24, 0xFF	; 255
    1306:	0e 94 0e 46 	call	0x8c1c	; 0x8c1c <updateRedLed>
                        updateGreenLed(0); //0
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	0e 94 22 46 	call	0x8c44	; 0x8c44 <updateGreenLed>
                        updateBlueLed(0); //0
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	0e 94 36 46 	call	0x8c6c	; 0x8c6c <updateBlueLed>
                        trigger_flag = true;
						init_trigger = false;
                        trigger_LED_timer = getTime100MicroSec();
    1316:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    131a:	c5 5c       	subi	r28, 0xC5	; 197
    131c:	dc 4f       	sbci	r29, 0xFC	; 252
    131e:	68 83       	st	Y, r22
    1320:	79 83       	std	Y+1, r23	; 0x01
    1322:	8a 83       	std	Y+2, r24	; 0x02
    1324:	9b 83       	std	Y+3, r25	; 0x03
    1326:	cb 53       	subi	r28, 0x3B	; 59
    1328:	d3 40       	sbci	r29, 0x03	; 3
						trigger_count++;
                        updateRedLed(255);
                        updateGreenLed(0); //0
                        updateBlueLed(0); //0
                        trigger_flag = true;
						init_trigger = false;
    132a:	c1 5c       	subi	r28, 0xC1	; 193
    132c:	dc 4f       	sbci	r29, 0xFC	; 252
    132e:	18 82       	st	Y, r1
    1330:	cf 53       	subi	r28, 0x3F	; 63
    1332:	d3 40       	sbci	r29, 0x03	; 3
						}
						trigger_count++;
                        updateRedLed(255);
                        updateGreenLed(0); //0
                        updateBlueLed(0); //0
                        trigger_flag = true;
    1334:	91 e0       	ldi	r25, 0x01	; 1
    1336:	c6 5c       	subi	r28, 0xC6	; 198
    1338:	dc 4f       	sbci	r29, 0xFC	; 252
    133a:	98 83       	st	Y, r25
    133c:	ca 53       	subi	r28, 0x3A	; 58
    133e:	d3 40       	sbci	r29, 0x03	; 3
						init_trigger = false;
                        trigger_LED_timer = getTime100MicroSec();
                    }
                    period = getTime100MicroSec();
    1340:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    1344:	c8 5b       	subi	r28, 0xB8	; 184
    1346:	dc 4f       	sbci	r29, 0xFC	; 252
    1348:	68 83       	st	Y, r22
    134a:	79 83       	std	Y+1, r23	; 0x01
    134c:	8a 83       	std	Y+2, r24	; 0x02
    134e:	9b 83       	std	Y+3, r25	; 0x03
    1350:	c8 54       	subi	r28, 0x48	; 72
    1352:	d3 40       	sbci	r29, 0x03	; 3
                }
				init_time = getTime100MicroSec() - init_time_previous;
    1354:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    1358:	dc 01       	movw	r26, r24
    135a:	cb 01       	movw	r24, r22
    135c:	c9 5d       	subi	r28, 0xD9	; 217
    135e:	dc 4f       	sbci	r29, 0xFC	; 252
    1360:	28 81       	ld	r18, Y
    1362:	39 81       	ldd	r19, Y+1	; 0x01
    1364:	4a 81       	ldd	r20, Y+2	; 0x02
    1366:	5b 81       	ldd	r21, Y+3	; 0x03
    1368:	c7 52       	subi	r28, 0x27	; 39
    136a:	d3 40       	sbci	r29, 0x03	; 3
    136c:	82 1b       	sub	r24, r18
    136e:	93 0b       	sbc	r25, r19
    1370:	a4 0b       	sbc	r26, r20
    1372:	b5 0b       	sbc	r27, r21
    1374:	80 93 ed 03 	sts	0x03ED, r24	; 0x8003ed <init_time>
    1378:	90 93 ee 03 	sts	0x03EE, r25	; 0x8003ee <init_time+0x1>
    137c:	a0 93 ef 03 	sts	0x03EF, r26	; 0x8003ef <init_time+0x2>
    1380:	b0 93 f0 03 	sts	0x03F0, r27	; 0x8003f0 <init_time+0x3>

                // fix LED for triggering
                if(getTime100MicroSec()-trigger_LED_timer >= PAUSE_250_MSEC && trigger_flag) {
    1384:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    1388:	dc 01       	movw	r26, r24
    138a:	cb 01       	movw	r24, r22
    138c:	c5 5c       	subi	r28, 0xC5	; 197
    138e:	dc 4f       	sbci	r29, 0xFC	; 252
    1390:	28 81       	ld	r18, Y
    1392:	39 81       	ldd	r19, Y+1	; 0x01
    1394:	4a 81       	ldd	r20, Y+2	; 0x02
    1396:	5b 81       	ldd	r21, Y+3	; 0x03
    1398:	cb 53       	subi	r28, 0x3B	; 59
    139a:	d3 40       	sbci	r29, 0x03	; 3
    139c:	82 1b       	sub	r24, r18
    139e:	93 0b       	sbc	r25, r19
    13a0:	a4 0b       	sbc	r26, r20
    13a2:	b5 0b       	sbc	r27, r21
    13a4:	84 36       	cpi	r24, 0x64	; 100
    13a6:	99 40       	sbci	r25, 0x09	; 9
    13a8:	a1 05       	cpc	r26, r1
    13aa:	b1 05       	cpc	r27, r1
    13ac:	08 f0       	brcs	.+2      	; 0x13b0 <__EEPROM_REGION_LENGTH__+0x3b0>
    13ae:	ab c4       	rjmp	.+2390   	; 0x1d06 <__EEPROM_REGION_LENGTH__+0xd06>
                    trigger_flag = false;
                } else if (trigger_flag){
    13b0:	c6 5c       	subi	r28, 0xC6	; 198
    13b2:	dc 4f       	sbci	r29, 0xFC	; 252
    13b4:	48 81       	ld	r20, Y
    13b6:	ca 53       	subi	r28, 0x3A	; 58
    13b8:	d3 40       	sbci	r29, 0x03	; 3
    13ba:	41 11       	cpse	r20, r1
    13bc:	b5 c5       	rjmp	.+2922   	; 0x1f28 <__EEPROM_REGION_LENGTH__+0xf28>
                // ETC

                enableObstacleAvoidance();

				//control_time_previous = getTime100MicroSec();
                u = etc_control(x_hat, id);
    13be:	2f e3       	ldi	r18, 0x3F	; 63
    13c0:	62 2e       	mov	r6, r18
    13c2:	22 e0       	ldi	r18, 0x02	; 2
    13c4:	72 2e       	mov	r7, r18
    13c6:	4a cc       	rjmp	.-1900   	; 0xc5c <__LOCK_REGION_LENGTH__+0x85c>
					break;

			case 3:	// write default calibration values; wait 2 seconds before start writing the calibration values
					// in eeprom in order to avoid rewriting the data involuntarily when moving the selector and passing 
					// through selector position 9
					switch(demoState) {
    13c8:	80 91 c8 02 	lds	r24, 0x02C8	; 0x8002c8 <demoState>
    13cc:	81 30       	cpi	r24, 0x01	; 1
    13ce:	09 f4       	brne	.+2      	; 0x13d2 <__EEPROM_REGION_LENGTH__+0x3d2>
    13d0:	8f c5       	rjmp	.+2846   	; 0x1ef0 <__EEPROM_REGION_LENGTH__+0xef0>
    13d2:	08 f4       	brcc	.+2      	; 0x13d6 <__EEPROM_REGION_LENGTH__+0x3d6>
    13d4:	7e c5       	rjmp	.+2812   	; 0x1ed2 <__EEPROM_REGION_LENGTH__+0xed2>
    13d6:	82 30       	cpi	r24, 0x02	; 2
    13d8:	09 f0       	breq	.+2      	; 0x13dc <__EEPROM_REGION_LENGTH__+0x3dc>
    13da:	40 cc       	rjmp	.-1920   	; 0xc5c <__LOCK_REGION_LENGTH__+0x85c>
								demoState = 2;
							}
							break;						

						case 2:
							if(!calibrationWritten) {
    13dc:	80 91 ba 02 	lds	r24, 0x02BA	; 0x8002ba <calibrationWritten>
    13e0:	81 11       	cpse	r24, r1
    13e2:	3c cc       	rjmp	.-1928   	; 0xc5c <__LOCK_REGION_LENGTH__+0x85c>
								calibrationWritten = 1;
    13e4:	41 e0       	ldi	r20, 0x01	; 1
    13e6:	40 93 ba 02 	sts	0x02BA, r20	; 0x8002ba <calibrationWritten>
								writeDefaultCalibration();
    13ea:	0e 94 b6 40 	call	0x816c	; 0x816c <writeDefaultCalibration>
    13ee:	36 cc       	rjmp	.-1940   	; 0xc5c <__LOCK_REGION_LENGTH__+0x85c>
		//comm_time = getTime100MicroSec() - comm_time_previous;
		
		switch(currentSelector) {
			
			case 0: // just green color
					updateRedLed(255);
    13f0:	8f ef       	ldi	r24, 0xFF	; 255
    13f2:	0e 94 0e 46 	call	0x8c1c	; 0x8c1c <updateRedLed>
					updateGreenLed(0);
    13f6:	80 e0       	ldi	r24, 0x00	; 0
    13f8:	0e 94 22 46 	call	0x8c44	; 0x8c44 <updateGreenLed>
					updateBlueLed(255);
    13fc:	8f ef       	ldi	r24, 0xFF	; 255
    13fe:	0e 94 36 46 	call	0x8c6c	; 0x8c6c <updateBlueLed>
					setLeftSpeed(0);
    1402:	80 e0       	ldi	r24, 0x00	; 0
    1404:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <setLeftSpeed>
					setRightSpeed(0);
    1408:	80 e0       	ldi	r24, 0x00	; 0
    140a:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <setRightSpeed>
					break;
    140e:	26 cc       	rjmp	.-1972   	; 0xc5c <__LOCK_REGION_LENGTH__+0x85c>
					}

					break;

			case 2:	// motors calibration
					irEnabled = 1;
    1410:	f1 e0       	ldi	r31, 0x01	; 1
    1412:	f0 93 f1 02 	sts	0x02F1, r31	; 0x8002f1 <irEnabled>
					if(calibrateOdomFlag==1) {
    1416:	80 91 53 0f 	lds	r24, 0x0F53	; 0x800f53 <calibrateOdomFlag>
    141a:	81 30       	cpi	r24, 0x01	; 1
    141c:	09 f0       	breq	.+2      	; 0x1420 <__EEPROM_REGION_LENGTH__+0x420>
    141e:	1e cc       	rjmp	.-1988   	; 0xc5c <__LOCK_REGION_LENGTH__+0x85c>
						handleCalibration();
    1420:	0e 94 34 2f 	call	0x5e68	; 0x5e68 <handleCalibration>
    1424:	1b cc       	rjmp	.-1994   	; 0xc5c <__LOCK_REGION_LENGTH__+0x85c>
					break;
			case 1:	// motors in direct power control (no speed control)
					//updateRedLed(pwm_red);
					//updateGreenLed(pwm_green);
					//updateBlueLed(pwm_blue);
					enableObstacleAvoidance();
    1426:	0e 94 de 45 	call	0x8bbc	; 0x8bbc <enableObstacleAvoidance>
					enableCliffAvoidance();
    142a:	0e 94 e5 45 	call	0x8bca	; 0x8bca <enableCliffAvoidance>
					
					u[0] = 0;
    142e:	f3 01       	movw	r30, r6
    1430:	10 82       	st	Z, r1
    1432:	11 82       	std	Z+1, r1	; 0x01
    1434:	12 82       	std	Z+2, r1	; 0x02
    1436:	13 82       	std	Z+3, r1	; 0x03
					u[1] = 100;
    1438:	20 e0       	ldi	r18, 0x00	; 0
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	48 ec       	ldi	r20, 0xC8	; 200
    143e:	52 e4       	ldi	r21, 0x42	; 66
    1440:	24 83       	std	Z+4, r18	; 0x04
    1442:	35 83       	std	Z+5, r19	; 0x05
    1444:	46 83       	std	Z+6, r20	; 0x06
    1446:	57 83       	std	Z+7, r21	; 0x07
				
					updateRedLed(255); //255
    1448:	8f ef       	ldi	r24, 0xFF	; 255
    144a:	0e 94 0e 46 	call	0x8c1c	; 0x8c1c <updateRedLed>
					updateGreenLed(0);
    144e:	80 e0       	ldi	r24, 0x00	; 0
    1450:	0e 94 22 46 	call	0x8c44	; 0x8c44 <updateGreenLed>
					updateBlueLed(255); //255
    1454:	8f ef       	ldi	r24, 0xFF	; 255
    1456:	0e 94 36 46 	call	0x8c6c	; 0x8c6c <updateBlueLed>
    float speed_a = 0;
    float K = 0.5;
    float error = 0.0;
    bool out;

    angle_ref = (float) atan2f(u[1], u[0]) * RAD_2_DEG;
    145a:	f3 01       	movw	r30, r6
    145c:	20 81       	ld	r18, Z
    145e:	31 81       	ldd	r19, Z+1	; 0x01
    1460:	42 81       	ldd	r20, Z+2	; 0x02
    1462:	53 81       	ldd	r21, Z+3	; 0x03
    1464:	64 81       	ldd	r22, Z+4	; 0x04
    1466:	75 81       	ldd	r23, Z+5	; 0x05
    1468:	86 81       	ldd	r24, Z+6	; 0x06
    146a:	97 81       	ldd	r25, Z+7	; 0x07
    146c:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <atan2>
    1470:	21 ee       	ldi	r18, 0xE1	; 225
    1472:	3e e2       	ldi	r19, 0x2E	; 46
    1474:	45 e6       	ldi	r20, 0x65	; 101
    1476:	52 e4       	ldi	r21, 0x42	; 66
    1478:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    147c:	4b 01       	movw	r8, r22
    147e:	5c 01       	movw	r10, r24

	theta_temp = theta_cur* RAD_2_DEG; //theta = filtered_theta from 0 to 360
    1480:	21 ee       	ldi	r18, 0xE1	; 225
    1482:	3e e2       	ldi	r19, 0x2E	; 46
    1484:	45 e6       	ldi	r20, 0x65	; 101
    1486:	52 e4       	ldi	r21, 0x42	; 66
    1488:	60 91 af 02 	lds	r22, 0x02AF	; 0x8002af <theta>
    148c:	70 91 b0 02 	lds	r23, 0x02B0	; 0x8002b0 <theta+0x1>
    1490:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <theta+0x2>
    1494:	90 91 b2 02 	lds	r25, 0x02B2	; 0x8002b2 <theta+0x3>
    1498:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    149c:	6b 01       	movw	r12, r22
    149e:	7c 01       	movw	r14, r24
	if (theta_temp > 180){
    14a0:	20 e0       	ldi	r18, 0x00	; 0
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	44 e3       	ldi	r20, 0x34	; 52
    14a6:	53 e4       	ldi	r21, 0x43	; 67
    14a8:	0e 94 bd 4f 	call	0x9f7a	; 0x9f7a <__gesf2>
    14ac:	18 16       	cp	r1, r24
    14ae:	54 f4       	brge	.+20     	; 0x14c4 <__EEPROM_REGION_LENGTH__+0x4c4>
		theta_temp -= 360;
    14b0:	20 e0       	ldi	r18, 0x00	; 0
    14b2:	30 e0       	ldi	r19, 0x00	; 0
    14b4:	44 eb       	ldi	r20, 0xB4	; 180
    14b6:	53 e4       	ldi	r21, 0x43	; 67
    14b8:	c7 01       	movw	r24, r14
    14ba:	b6 01       	movw	r22, r12
    14bc:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <__subsf3>
    14c0:	6b 01       	movw	r12, r22
    14c2:	7c 01       	movw	r14, r24
	}

    error = angle_ref - theta_temp;
    14c4:	a7 01       	movw	r20, r14
    14c6:	96 01       	movw	r18, r12
    14c8:	c5 01       	movw	r24, r10
    14ca:	b4 01       	movw	r22, r8
    14cc:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <__subsf3>
    14d0:	6b 01       	movw	r12, r22
    14d2:	7c 01       	movw	r14, r24
	//angle_temp = error;
    //error = 0;
	
    if (error > 180){
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	44 e3       	ldi	r20, 0x34	; 52
    14da:	53 e4       	ldi	r21, 0x43	; 67
    14dc:	0e 94 bd 4f 	call	0x9f7a	; 0x9f7a <__gesf2>
    14e0:	18 16       	cp	r1, r24
    14e2:	0c f0       	brlt	.+2      	; 0x14e6 <__EEPROM_REGION_LENGTH__+0x4e6>
    14e4:	6e c4       	rjmp	.+2268   	; 0x1dc2 <__EEPROM_REGION_LENGTH__+0xdc2>
        error -= 360;
    14e6:	20 e0       	ldi	r18, 0x00	; 0
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	44 eb       	ldi	r20, 0xB4	; 180
    14ec:	53 e4       	ldi	r21, 0x43	; 67
    14ee:	c7 01       	movw	r24, r14
    14f0:	b6 01       	movw	r22, r12
    14f2:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <__subsf3>
    14f6:	6b 01       	movw	r12, r22
    14f8:	7c 01       	movw	r14, r24
    } else if (error < -180) {
        error += 360;
    }

    speed_a = K*error;
    14fa:	20 e0       	ldi	r18, 0x00	; 0
    14fc:	30 e0       	ldi	r19, 0x00	; 0
    14fe:	40 e0       	ldi	r20, 0x00	; 0
    1500:	5f e3       	ldi	r21, 0x3F	; 63
    1502:	c7 01       	movw	r24, r14
    1504:	b6 01       	movw	r22, r12
    1506:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    150a:	4b 01       	movw	r8, r22
    150c:	5c 01       	movw	r10, r24


    // limit speed
    if (speed_a > 15){
    150e:	20 e0       	ldi	r18, 0x00	; 0
    1510:	30 e0       	ldi	r19, 0x00	; 0
    1512:	40 e7       	ldi	r20, 0x70	; 112
    1514:	51 e4       	ldi	r21, 0x41	; 65
    1516:	0e 94 bd 4f 	call	0x9f7a	; 0x9f7a <__gesf2>
    151a:	18 16       	cp	r1, r24
    151c:	0c f4       	brge	.+2      	; 0x1520 <__EEPROM_REGION_LENGTH__+0x520>
    151e:	4b c4       	rjmp	.+2198   	; 0x1db6 <__EEPROM_REGION_LENGTH__+0xdb6>
        speed_a = 15;
    }else if (speed_a < -15){
    1520:	20 e0       	ldi	r18, 0x00	; 0
    1522:	30 e0       	ldi	r19, 0x00	; 0
    1524:	40 e7       	ldi	r20, 0x70	; 112
    1526:	51 ec       	ldi	r21, 0xC1	; 193
    1528:	c5 01       	movw	r24, r10
    152a:	b4 01       	movw	r22, r8
    152c:	0e 94 b9 4d 	call	0x9b72	; 0x9b72 <__cmpsf2>
    1530:	87 fd       	sbrc	r24, 7
    1532:	c8 c4       	rjmp	.+2448   	; 0x1ec4 <__EEPROM_REGION_LENGTH__+0xec4>
    1534:	c5 01       	movw	r24, r10
    1536:	b4 01       	movw	r22, r8
    1538:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__fixsfsi>
    153c:	2b 01       	movw	r4, r22
    153e:	c5 01       	movw	r24, r10
    1540:	b4 01       	movw	r22, r8
    1542:	90 58       	subi	r25, 0x80	; 128
    1544:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__fixsfsi>
    1548:	16 2f       	mov	r17, r22
        speed_a = -15;
    }

	r_speed = speed_a;
    154a:	50 92 f6 03 	sts	0x03F6, r5	; 0x8003f6 <r_speed+0x1>
    154e:	40 92 f5 03 	sts	0x03F5, r4	; 0x8003f5 <r_speed>
	l_speed = -speed_a;
    1552:	10 93 f7 03 	sts	0x03F7, r17	; 0x8003f7 <l_speed>
    1556:	70 93 f8 03 	sts	0x03F8, r23	; 0x8003f8 <l_speed+0x1>

    if (fabsf(error) > 25){
    155a:	c7 01       	movw	r24, r14
    155c:	b6 01       	movw	r22, r12
    155e:	9f 77       	andi	r25, 0x7F	; 127
    1560:	20 e0       	ldi	r18, 0x00	; 0
    1562:	30 e0       	ldi	r19, 0x00	; 0
    1564:	48 ec       	ldi	r20, 0xC8	; 200
    1566:	51 e4       	ldi	r21, 0x41	; 65
    1568:	0e 94 bd 4f 	call	0x9f7a	; 0x9f7a <__gesf2>
    156c:	18 16       	cp	r1, r24
    156e:	0c f0       	brlt	.+2      	; 0x1572 <__EEPROM_REGION_LENGTH__+0x572>
    1570:	8c c4       	rjmp	.+2328   	; 0x1e8a <__EEPROM_REGION_LENGTH__+0xe8a>
//						start_state1 = getTime100MicroSec();
//					}
					
//					break;
//				case 1:
					setLeftSpeed(l_speed);
    1572:	81 2f       	mov	r24, r17
    1574:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <setLeftSpeed>
					setRightSpeed(r_speed);
    1578:	80 91 f5 03 	lds	r24, 0x03F5	; 0x8003f5 <r_speed>
    157c:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <setRightSpeed>
    1580:	6d cb       	rjmp	.-2342   	; 0xc5c <__LOCK_REGION_LENGTH__+0x85c>
                    }break;

                    case compute_sum:

                        // compute average position
                        for (i=0; i<ROBOTS; i++){
    1582:	c0 90 2b 02 	lds	r12, 0x022B	; 0x80022b <ROBOTS>
    1586:	d0 90 2c 02 	lds	r13, 0x022C	; 0x80022c <ROBOTS+0x1>
    158a:	c1 14       	cp	r12, r1
    158c:	d1 04       	cpc	r13, r1
    158e:	11 f4       	brne	.+4      	; 0x1594 <__EEPROM_REGION_LENGTH__+0x594>
    1590:	0c 94 cf 14 	jmp	0x299e	; 0x299e <__stack+0x79f>
    1594:	8e 01       	movw	r16, r28
    1596:	0f 5f       	subi	r16, 0xFF	; 255
    1598:	1f 4f       	sbci	r17, 0xFF	; 255
    159a:	76 01       	movw	r14, r12
    159c:	ee 0c       	add	r14, r14
    159e:	ff 1c       	adc	r15, r15
    15a0:	ee 0c       	add	r14, r14
    15a2:	ff 1c       	adc	r15, r15
    15a4:	ee 0c       	add	r14, r14
    15a6:	ff 1c       	adc	r15, r15
    15a8:	e0 0e       	add	r14, r16
    15aa:	f1 1e       	adc	r15, r17
    15ac:	c0 5b       	subi	r28, 0xB0	; 176
    15ae:	dc 4f       	sbci	r29, 0xFC	; 252
    15b0:	88 80       	ld	r8, Y
    15b2:	99 80       	ldd	r9, Y+1	; 0x01
    15b4:	aa 80       	ldd	r10, Y+2	; 0x02
    15b6:	bb 80       	ldd	r11, Y+3	; 0x03
    15b8:	c0 55       	subi	r28, 0x50	; 80
    15ba:	d3 40       	sbci	r29, 0x03	; 3
    15bc:	cc 5a       	subi	r28, 0xAC	; 172
    15be:	dc 4f       	sbci	r29, 0xFC	; 252
    15c0:	48 80       	ld	r4, Y
    15c2:	59 80       	ldd	r5, Y+1	; 0x01
    15c4:	6a 80       	ldd	r6, Y+2	; 0x02
    15c6:	7b 80       	ldd	r7, Y+3	; 0x03
    15c8:	c4 55       	subi	r28, 0x54	; 84
    15ca:	d3 40       	sbci	r29, 0x03	; 3
                            sum[0] += x_hat[i][0];
    15cc:	d8 01       	movw	r26, r16
    15ce:	2d 91       	ld	r18, X+
    15d0:	3d 91       	ld	r19, X+
    15d2:	4d 91       	ld	r20, X+
    15d4:	5c 91       	ld	r21, X
    15d6:	c3 01       	movw	r24, r6
    15d8:	b2 01       	movw	r22, r4
    15da:	0e 94 db 4c 	call	0x99b6	; 0x99b6 <__addsf3>
    15de:	2b 01       	movw	r4, r22
    15e0:	3c 01       	movw	r6, r24
                            sum[1] += x_hat[i][1];
    15e2:	f8 01       	movw	r30, r16
    15e4:	24 81       	ldd	r18, Z+4	; 0x04
    15e6:	35 81       	ldd	r19, Z+5	; 0x05
    15e8:	46 81       	ldd	r20, Z+6	; 0x06
    15ea:	57 81       	ldd	r21, Z+7	; 0x07
    15ec:	c5 01       	movw	r24, r10
    15ee:	b4 01       	movw	r22, r8
    15f0:	0e 94 db 4c 	call	0x99b6	; 0x99b6 <__addsf3>
    15f4:	4b 01       	movw	r8, r22
    15f6:	5c 01       	movw	r10, r24
    15f8:	08 5f       	subi	r16, 0xF8	; 248
    15fa:	1f 4f       	sbci	r17, 0xFF	; 255
                    }break;

                    case compute_sum:

                        // compute average position
                        for (i=0; i<ROBOTS; i++){
    15fc:	0e 15       	cp	r16, r14
    15fe:	1f 05       	cpc	r17, r15
    1600:	29 f7       	brne	.-54     	; 0x15cc <__EEPROM_REGION_LENGTH__+0x5cc>
    1602:	c0 5b       	subi	r28, 0xB0	; 176
    1604:	dc 4f       	sbci	r29, 0xFC	; 252
    1606:	68 83       	st	Y, r22
    1608:	79 83       	std	Y+1, r23	; 0x01
    160a:	8a 83       	std	Y+2, r24	; 0x02
    160c:	9b 83       	std	Y+3, r25	; 0x03
    160e:	c0 55       	subi	r28, 0x50	; 80
    1610:	d3 40       	sbci	r29, 0x03	; 3
    1612:	cc 5a       	subi	r28, 0xAC	; 172
    1614:	dc 4f       	sbci	r29, 0xFC	; 252
    1616:	48 82       	st	Y, r4
    1618:	59 82       	std	Y+1, r5	; 0x01
    161a:	6a 82       	std	Y+2, r6	; 0x02
    161c:	7b 82       	std	Y+3, r7	; 0x03
    161e:	c4 55       	subi	r28, 0x54	; 84
    1620:	d3 40       	sbci	r29, 0x03	; 3
    1622:	b6 01       	movw	r22, r12
    1624:	80 e0       	ldi	r24, 0x00	; 0
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	0e 94 a5 4e 	call	0x9d4a	; 0x9d4a <__floatunsisf>
    162c:	6b 01       	movw	r12, r22
    162e:	7c 01       	movw	r14, r24
    1630:	c3 01       	movw	r24, r6
    1632:	b2 01       	movw	r22, r4
                            sum[0] += x_hat[i][0];
                            sum[1] += x_hat[i][1];
                        }

                        x_ref[0] = sum[0]/(ROBOTS);
    1634:	a7 01       	movw	r20, r14
    1636:	96 01       	movw	r18, r12
    1638:	0e 94 c3 4d 	call	0x9b86	; 0x9b86 <__divsf3>
    163c:	cc 5b       	subi	r28, 0xBC	; 188
    163e:	dc 4f       	sbci	r29, 0xFC	; 252
    1640:	68 83       	st	Y, r22
    1642:	79 83       	std	Y+1, r23	; 0x01
    1644:	8a 83       	std	Y+2, r24	; 0x02
    1646:	9b 83       	std	Y+3, r25	; 0x03
    1648:	c4 54       	subi	r28, 0x44	; 68
    164a:	d3 40       	sbci	r29, 0x03	; 3
                        x_ref[1] = sum[1]/(ROBOTS);
    164c:	a7 01       	movw	r20, r14
    164e:	96 01       	movw	r18, r12
    1650:	c0 5b       	subi	r28, 0xB0	; 176
    1652:	dc 4f       	sbci	r29, 0xFC	; 252
    1654:	68 81       	ld	r22, Y
    1656:	79 81       	ldd	r23, Y+1	; 0x01
    1658:	8a 81       	ldd	r24, Y+2	; 0x02
    165a:	9b 81       	ldd	r25, Y+3	; 0x03
    165c:	c0 55       	subi	r28, 0x50	; 80
    165e:	d3 40       	sbci	r29, 0x03	; 3
    1660:	0e 94 c3 4d 	call	0x9b86	; 0x9b86 <__divsf3>
    1664:	c0 5c       	subi	r28, 0xC0	; 192
    1666:	dc 4f       	sbci	r29, 0xFC	; 252
    1668:	68 83       	st	Y, r22
    166a:	79 83       	std	Y+1, r23	; 0x01
    166c:	8a 83       	std	Y+2, r24	; 0x02
    166e:	9b 83       	std	Y+3, r25	; 0x03
    1670:	c0 54       	subi	r28, 0x40	; 64
    1672:	d3 40       	sbci	r29, 0x03	; 3

                        NextState = compute_formation;
    1674:	86 e0       	ldi	r24, 0x06	; 6
    1676:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <__data_end>
				xPos_fixed = position[0];
				yPos_fixed = position[1];

				// controller
				//control_time_previous = getTime100MicroSec();
                u = da_control(position, x_ref, id);
    167a:	0f e2       	ldi	r16, 0x2F	; 47
    167c:	60 2e       	mov	r6, r16
    167e:	02 e0       	ldi	r16, 0x02	; 2
    1680:	70 2e       	mov	r7, r16
                        x_ref[0] = sum[0]/(ROBOTS);
                        x_ref[1] = sum[1]/(ROBOTS);

                        NextState = compute_formation;

                        break;
    1682:	ec ca       	rjmp	.-2600   	; 0xc5c <__LOCK_REGION_LENGTH__+0x85c>
						}
						
					}break;	

                    case terminate:{
                        setLeftSpeed(0);
    1684:	80 e0       	ldi	r24, 0x00	; 0
    1686:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <setLeftSpeed>
                        setRightSpeed(0);
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <setRightSpeed>

                        updateRedLed(255);
    1690:	8f ef       	ldi	r24, 0xFF	; 255
    1692:	0e 94 0e 46 	call	0x8c1c	; 0x8c1c <updateRedLed>
                        updateGreenLed(0); //0
    1696:	80 e0       	ldi	r24, 0x00	; 0
    1698:	0e 94 22 46 	call	0x8c44	; 0x8c44 <updateGreenLed>
                        updateBlueLed(255);
    169c:	8f ef       	ldi	r24, 0xFF	; 255
    169e:	0e 94 36 46 	call	0x8c6c	; 0x8c6c <updateBlueLed>
				xPos_fixed = position[0];
				yPos_fixed = position[1];

				// controller
				//control_time_previous = getTime100MicroSec();
                u = da_control(position, x_ref, id);
    16a2:	3f e2       	ldi	r19, 0x2F	; 47
    16a4:	63 2e       	mov	r6, r19
    16a6:	32 e0       	ldi	r19, 0x02	; 2
    16a8:	73 2e       	mov	r7, r19

                        updateRedLed(255);
                        updateGreenLed(0); //0
                        updateBlueLed(255);

                    }break;
    16aa:	d8 ca       	rjmp	.-2640   	; 0xc5c <__LOCK_REGION_LENGTH__+0x85c>

                    }break;
					
					case wait:{
						
						setLeftSpeed(0);
    16ac:	80 e0       	ldi	r24, 0x00	; 0
    16ae:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <setLeftSpeed>
						setRightSpeed(0);
    16b2:	80 e0       	ldi	r24, 0x00	; 0
    16b4:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <setRightSpeed>
					
						wait_time = getTime100MicroSec() - wait_time_previous;
    16b8:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
						
						if (wait_time > PAUSE_750_MSEC){
    16bc:	dc 01       	movw	r26, r24
    16be:	cb 01       	movw	r24, r22
    16c0:	c4 5b       	subi	r28, 0xB4	; 180
    16c2:	dc 4f       	sbci	r29, 0xFC	; 252
    16c4:	28 81       	ld	r18, Y
    16c6:	39 81       	ldd	r19, Y+1	; 0x01
    16c8:	4a 81       	ldd	r20, Y+2	; 0x02
    16ca:	5b 81       	ldd	r21, Y+3	; 0x03
    16cc:	cc 54       	subi	r28, 0x4C	; 76
    16ce:	d3 40       	sbci	r29, 0x03	; 3
    16d0:	82 1b       	sub	r24, r18
    16d2:	93 0b       	sbc	r25, r19
    16d4:	a4 0b       	sbc	r26, r20
    16d6:	b5 0b       	sbc	r27, r21
    16d8:	8c 32       	cpi	r24, 0x2C	; 44
    16da:	9c 41       	sbci	r25, 0x1C	; 28
    16dc:	a1 05       	cpc	r26, r1
    16de:	b1 05       	cpc	r27, r1
    16e0:	10 f0       	brcs	.+4      	; 0x16e6 <__EEPROM_REGION_LENGTH__+0x6e6>
    16e2:	0c 94 5b 14 	jmp	0x28b6	; 0x28b6 <__stack+0x6b7>
				xPos_fixed = position[0];
				yPos_fixed = position[1];

				// controller
				//control_time_previous = getTime100MicroSec();
                u = da_control(position, x_ref, id);
    16e6:	8f e2       	ldi	r24, 0x2F	; 47
    16e8:	68 2e       	mov	r6, r24
    16ea:	82 e0       	ldi	r24, 0x02	; 2
    16ec:	78 2e       	mov	r7, r24
    16ee:	b6 ca       	rjmp	.-2708   	; 0xc5c <__LOCK_REGION_LENGTH__+0x85c>
                            if(id_formation[n] == id){
                                correct_id = n;
                            }
                        }

                        x_ref[0] += B[0][id];
    16f0:	f8 01       	movw	r30, r16
    16f2:	ee 0f       	add	r30, r30
    16f4:	ff 1f       	adc	r31, r31
    16f6:	ee 0f       	add	r30, r30
    16f8:	ff 1f       	adc	r31, r31
    16fa:	e5 5f       	subi	r30, 0xF5	; 245
    16fc:	fb 4f       	sbci	r31, 0xFB	; 251
    16fe:	20 81       	ld	r18, Z
    1700:	31 81       	ldd	r19, Z+1	; 0x01
    1702:	42 81       	ldd	r20, Z+2	; 0x02
    1704:	53 81       	ldd	r21, Z+3	; 0x03
    1706:	cc 5b       	subi	r28, 0xBC	; 188
    1708:	dc 4f       	sbci	r29, 0xFC	; 252
    170a:	68 81       	ld	r22, Y
    170c:	79 81       	ldd	r23, Y+1	; 0x01
    170e:	8a 81       	ldd	r24, Y+2	; 0x02
    1710:	9b 81       	ldd	r25, Y+3	; 0x03
    1712:	c4 54       	subi	r28, 0x44	; 68
    1714:	d3 40       	sbci	r29, 0x03	; 3
    1716:	0e 94 db 4c 	call	0x99b6	; 0x99b6 <__addsf3>
    171a:	cc 5b       	subi	r28, 0xBC	; 188
    171c:	dc 4f       	sbci	r29, 0xFC	; 252
    171e:	68 83       	st	Y, r22
    1720:	79 83       	std	Y+1, r23	; 0x01
    1722:	8a 83       	std	Y+2, r24	; 0x02
    1724:	9b 83       	std	Y+3, r25	; 0x03
    1726:	c4 54       	subi	r28, 0x44	; 68
    1728:	d3 40       	sbci	r29, 0x03	; 3
                        x_ref[1] += B[1][id];
    172a:	f8 01       	movw	r30, r16
    172c:	ee 0f       	add	r30, r30
    172e:	ff 1f       	adc	r31, r31
    1730:	ee 0f       	add	r30, r30
    1732:	ff 1f       	adc	r31, r31
    1734:	e5 56       	subi	r30, 0x65	; 101
    1736:	fa 4f       	sbci	r31, 0xFA	; 250
    1738:	20 81       	ld	r18, Z
    173a:	31 81       	ldd	r19, Z+1	; 0x01
    173c:	42 81       	ldd	r20, Z+2	; 0x02
    173e:	53 81       	ldd	r21, Z+3	; 0x03
    1740:	c0 5c       	subi	r28, 0xC0	; 192
    1742:	dc 4f       	sbci	r29, 0xFC	; 252
    1744:	68 81       	ld	r22, Y
    1746:	79 81       	ldd	r23, Y+1	; 0x01
    1748:	8a 81       	ldd	r24, Y+2	; 0x02
    174a:	9b 81       	ldd	r25, Y+3	; 0x03
    174c:	c0 54       	subi	r28, 0x40	; 64
    174e:	d3 40       	sbci	r29, 0x03	; 3
    1750:	0e 94 db 4c 	call	0x99b6	; 0x99b6 <__addsf3>
    1754:	c0 5c       	subi	r28, 0xC0	; 192
    1756:	dc 4f       	sbci	r29, 0xFC	; 252
    1758:	68 83       	st	Y, r22
    175a:	79 83       	std	Y+1, r23	; 0x01
    175c:	8a 83       	std	Y+2, r24	; 0x02
    175e:	9b 83       	std	Y+3, r25	; 0x03
    1760:	c0 54       	subi	r28, 0x40	; 64
    1762:	d3 40       	sbci	r29, 0x03	; 3
						
						//x_ref[0] = 895;
						//x_ref[1] = 1121;

                        NextState = angle;
    1764:	82 e0       	ldi	r24, 0x02	; 2
    1766:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <__data_end>
						init_time = getTime100MicroSec() - init_time_previous;
    176a:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    176e:	dc 01       	movw	r26, r24
    1770:	cb 01       	movw	r24, r22
    1772:	c9 5d       	subi	r28, 0xD9	; 217
    1774:	dc 4f       	sbci	r29, 0xFC	; 252
    1776:	28 81       	ld	r18, Y
    1778:	39 81       	ldd	r19, Y+1	; 0x01
    177a:	4a 81       	ldd	r20, Y+2	; 0x02
    177c:	5b 81       	ldd	r21, Y+3	; 0x03
    177e:	c7 52       	subi	r28, 0x27	; 39
    1780:	d3 40       	sbci	r29, 0x03	; 3
    1782:	82 1b       	sub	r24, r18
    1784:	93 0b       	sbc	r25, r19
    1786:	a4 0b       	sbc	r26, r20
    1788:	b5 0b       	sbc	r27, r21
    178a:	80 93 ed 03 	sts	0x03ED, r24	; 0x8003ed <init_time>
    178e:	90 93 ee 03 	sts	0x03EE, r25	; 0x8003ee <init_time+0x1>
    1792:	a0 93 ef 03 	sts	0x03EF, r26	; 0x8003ef <init_time+0x2>
    1796:	b0 93 f0 03 	sts	0x03F0, r27	; 0x8003f0 <init_time+0x3>
				xPos_fixed = position[0];
				yPos_fixed = position[1];

				// controller
				//control_time_previous = getTime100MicroSec();
                u = da_control(position, x_ref, id);
    179a:	1f e2       	ldi	r17, 0x2F	; 47
    179c:	61 2e       	mov	r6, r17
    179e:	12 e0       	ldi	r17, 0x02	; 2
    17a0:	71 2e       	mov	r7, r17
						//x_ref[0] = 895;
						//x_ref[1] = 1121;

                        NextState = angle;
						init_time = getTime100MicroSec() - init_time_previous;
                        break;
    17a2:	5c ca       	rjmp	.-2888   	; 0xc5c <__LOCK_REGION_LENGTH__+0x85c>
						
                    case straight: {

                        updateRedLed(255);
    17a4:	8f ef       	ldi	r24, 0xFF	; 255
    17a6:	0e 94 0e 46 	call	0x8c1c	; 0x8c1c <updateRedLed>
                        updateGreenLed(255);
    17aa:	8f ef       	ldi	r24, 0xFF	; 255
    17ac:	0e 94 22 46 	call	0x8c44	; 0x8c44 <updateGreenLed>
                        updateBlueLed(0); //0
    17b0:	80 e0       	ldi	r24, 0x00	; 0
    17b2:	0e 94 36 46 	call	0x8c6c	; 0x8c6c <updateBlueLed>

                        speed = K * sqrt(pow(u[0], 2) + pow(u[1], 2));
    17b6:	80 90 2f 02 	lds	r8, 0x022F	; 0x80022f <u.7190>
    17ba:	90 90 30 02 	lds	r9, 0x0230	; 0x800230 <u.7190+0x1>
    17be:	a0 90 31 02 	lds	r10, 0x0231	; 0x800231 <u.7190+0x2>
    17c2:	b0 90 32 02 	lds	r11, 0x0232	; 0x800232 <u.7190+0x3>
    17c6:	60 91 33 02 	lds	r22, 0x0233	; 0x800233 <u.7190+0x4>
    17ca:	70 91 34 02 	lds	r23, 0x0234	; 0x800234 <u.7190+0x5>
    17ce:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <u.7190+0x6>
    17d2:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <u.7190+0x7>
    17d6:	9b 01       	movw	r18, r22
    17d8:	ac 01       	movw	r20, r24
    17da:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    17de:	6b 01       	movw	r12, r22
    17e0:	7c 01       	movw	r14, r24
    17e2:	a5 01       	movw	r20, r10
    17e4:	94 01       	movw	r18, r8
    17e6:	c5 01       	movw	r24, r10
    17e8:	b4 01       	movw	r22, r8
    17ea:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    17ee:	9b 01       	movw	r18, r22
    17f0:	ac 01       	movw	r20, r24
    17f2:	c7 01       	movw	r24, r14
    17f4:	b6 01       	movw	r22, r12
    17f6:	0e 94 db 4c 	call	0x99b6	; 0x99b6 <__addsf3>
    17fa:	0e 94 b3 50 	call	0xa166	; 0xa166 <sqrt>
    17fe:	20 91 21 02 	lds	r18, 0x0221	; 0x800221 <K>
    1802:	30 91 22 02 	lds	r19, 0x0222	; 0x800222 <K+0x1>
    1806:	40 91 23 02 	lds	r20, 0x0223	; 0x800223 <K+0x2>
    180a:	50 91 24 02 	lds	r21, 0x0224	; 0x800224 <K+0x3>
    180e:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    1812:	8b 01       	movw	r16, r22
    1814:	f8 2e       	mov	r15, r24
    1816:	e9 2e       	mov	r14, r25
    1818:	cb 01       	movw	r24, r22
    181a:	af 2d       	mov	r26, r15
    181c:	be 2d       	mov	r27, r14
    181e:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <speed>
    1822:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <speed+0x1>
    1826:	a0 93 09 04 	sts	0x0409, r26	; 0x800409 <speed+0x2>
    182a:	b0 93 0a 04 	sts	0x040A, r27	; 0x80040a <speed+0x3>

                        if (speed > u_max) {
    182e:	d0 90 15 02 	lds	r13, 0x0215	; 0x800215 <u_max>
    1832:	c0 90 16 02 	lds	r12, 0x0216	; 0x800216 <u_max+0x1>
    1836:	b0 90 17 02 	lds	r11, 0x0217	; 0x800217 <u_max+0x2>
    183a:	a0 90 18 02 	lds	r10, 0x0218	; 0x800218 <u_max+0x3>
    183e:	2d 2d       	mov	r18, r13
    1840:	3c 2d       	mov	r19, r12
    1842:	4b 2d       	mov	r20, r11
    1844:	5a 2d       	mov	r21, r10
    1846:	b8 01       	movw	r22, r16
    1848:	8f 2d       	mov	r24, r15
    184a:	9e 2d       	mov	r25, r14
    184c:	0e 94 bd 4f 	call	0x9f7a	; 0x9f7a <__gesf2>
    1850:	18 16       	cp	r1, r24
    1852:	0c f0       	brlt	.+2      	; 0x1856 <__EEPROM_REGION_LENGTH__+0x856>
    1854:	04 c7       	rjmp	.+3592   	; 0x265e <__stack+0x45f>
                            speed = u_max;
    1856:	8d 2d       	mov	r24, r13
    1858:	9c 2d       	mov	r25, r12
    185a:	ab 2d       	mov	r26, r11
    185c:	ba 2d       	mov	r27, r10
    185e:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <speed>
    1862:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <speed+0x1>
    1866:	a0 93 09 04 	sts	0x0409, r26	; 0x800409 <speed+0x2>
    186a:	b0 93 0a 04 	sts	0x040A, r27	; 0x80040a <speed+0x3>
                        }
						l_speed = speed;
    186e:	6d 2d       	mov	r22, r13
    1870:	7c 2d       	mov	r23, r12
    1872:	8b 2d       	mov	r24, r11
    1874:	9a 2d       	mov	r25, r10
    1876:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__fixsfsi>
    187a:	70 93 f8 03 	sts	0x03F8, r23	; 0x8003f8 <l_speed+0x1>
    187e:	60 93 f7 03 	sts	0x03F7, r22	; 0x8003f7 <l_speed>
						r_speed = speed;
    1882:	70 93 f6 03 	sts	0x03F6, r23	; 0x8003f6 <r_speed+0x1>
    1886:	60 93 f5 03 	sts	0x03F5, r22	; 0x8003f5 <r_speed>

                        setLeftSpeed(speed);
    188a:	6d 2d       	mov	r22, r13
    188c:	7c 2d       	mov	r23, r12
    188e:	8b 2d       	mov	r24, r11
    1890:	9a 2d       	mov	r25, r10
    1892:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__fixsfsi>
    1896:	86 2f       	mov	r24, r22
    1898:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <setLeftSpeed>
                        setRightSpeed(speed-offset_rwheel);
    189c:	20 91 f9 03 	lds	r18, 0x03F9	; 0x8003f9 <offset_rwheel>
    18a0:	30 91 fa 03 	lds	r19, 0x03FA	; 0x8003fa <offset_rwheel+0x1>
    18a4:	40 91 fb 03 	lds	r20, 0x03FB	; 0x8003fb <offset_rwheel+0x2>
    18a8:	50 91 fc 03 	lds	r21, 0x03FC	; 0x8003fc <offset_rwheel+0x3>
    18ac:	60 91 07 04 	lds	r22, 0x0407	; 0x800407 <speed>
    18b0:	70 91 08 04 	lds	r23, 0x0408	; 0x800408 <speed+0x1>
    18b4:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <speed+0x2>
    18b8:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <speed+0x3>
    18bc:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <__subsf3>
    18c0:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__fixsfsi>
    18c4:	86 2f       	mov	r24, r22
    18c6:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <setRightSpeed>

						straight_time = getTime100MicroSec() - straight_time_previous;
    18ca:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
						//comm_time_previous = getTime100MicroSec();
						//if (straight_time > PAUSE_500_MSEC){
                        if (!(angle_control(u, false, 5, filtered_theta))){
    18ce:	40 90 2c 07 	lds	r4, 0x072C	; 0x80072c <filtered_theta>
    18d2:	50 90 2d 07 	lds	r5, 0x072D	; 0x80072d <filtered_theta+0x1>
    18d6:	60 90 2e 07 	lds	r6, 0x072E	; 0x80072e <filtered_theta+0x2>
    18da:	70 90 2f 07 	lds	r7, 0x072F	; 0x80072f <filtered_theta+0x3>
    float speed_a = 0;
    float K = 0.5;
    float error = 0.0;
    bool out;

    angle_ref = (float) atan2f(u[1], u[0]) * RAD_2_DEG;
    18de:	20 91 2f 02 	lds	r18, 0x022F	; 0x80022f <u.7190>
    18e2:	30 91 30 02 	lds	r19, 0x0230	; 0x800230 <u.7190+0x1>
    18e6:	40 91 31 02 	lds	r20, 0x0231	; 0x800231 <u.7190+0x2>
    18ea:	50 91 32 02 	lds	r21, 0x0232	; 0x800232 <u.7190+0x3>
    18ee:	60 91 33 02 	lds	r22, 0x0233	; 0x800233 <u.7190+0x4>
    18f2:	70 91 34 02 	lds	r23, 0x0234	; 0x800234 <u.7190+0x5>
    18f6:	80 91 35 02 	lds	r24, 0x0235	; 0x800235 <u.7190+0x6>
    18fa:	90 91 36 02 	lds	r25, 0x0236	; 0x800236 <u.7190+0x7>
    18fe:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <atan2>
    1902:	21 ee       	ldi	r18, 0xE1	; 225
    1904:	3e e2       	ldi	r19, 0x2E	; 46
    1906:	45 e6       	ldi	r20, 0x65	; 101
    1908:	52 e4       	ldi	r21, 0x42	; 66
    190a:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    190e:	4b 01       	movw	r8, r22
    1910:	5c 01       	movw	r10, r24

	theta_temp = theta_cur* RAD_2_DEG; //theta = filtered_theta from 0 to 360
    1912:	21 ee       	ldi	r18, 0xE1	; 225
    1914:	3e e2       	ldi	r19, 0x2E	; 46
    1916:	45 e6       	ldi	r20, 0x65	; 101
    1918:	52 e4       	ldi	r21, 0x42	; 66
    191a:	c3 01       	movw	r24, r6
    191c:	b2 01       	movw	r22, r4
    191e:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    1922:	6b 01       	movw	r12, r22
    1924:	7c 01       	movw	r14, r24
	if (theta_temp > 180){
    1926:	20 e0       	ldi	r18, 0x00	; 0
    1928:	30 e0       	ldi	r19, 0x00	; 0
    192a:	44 e3       	ldi	r20, 0x34	; 52
    192c:	53 e4       	ldi	r21, 0x43	; 67
    192e:	0e 94 bd 4f 	call	0x9f7a	; 0x9f7a <__gesf2>
    1932:	18 16       	cp	r1, r24
    1934:	54 f4       	brge	.+20     	; 0x194a <__EEPROM_REGION_LENGTH__+0x94a>
		theta_temp -= 360;
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	44 eb       	ldi	r20, 0xB4	; 180
    193c:	53 e4       	ldi	r21, 0x43	; 67
    193e:	c7 01       	movw	r24, r14
    1940:	b6 01       	movw	r22, r12
    1942:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <__subsf3>
    1946:	6b 01       	movw	r12, r22
    1948:	7c 01       	movw	r14, r24
	}

    error = angle_ref - theta_temp;
    194a:	a7 01       	movw	r20, r14
    194c:	96 01       	movw	r18, r12
    194e:	c5 01       	movw	r24, r10
    1950:	b4 01       	movw	r22, r8
    1952:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <__subsf3>
    1956:	6b 01       	movw	r12, r22
    1958:	7c 01       	movw	r14, r24
	//angle_temp = error;
    //error = 0;
	
    if (error > 180){
    195a:	20 e0       	ldi	r18, 0x00	; 0
    195c:	30 e0       	ldi	r19, 0x00	; 0
    195e:	44 e3       	ldi	r20, 0x34	; 52
    1960:	53 e4       	ldi	r21, 0x43	; 67
    1962:	0e 94 bd 4f 	call	0x9f7a	; 0x9f7a <__gesf2>
    1966:	18 16       	cp	r1, r24
    1968:	0c f0       	brlt	.+2      	; 0x196c <__EEPROM_REGION_LENGTH__+0x96c>
    196a:	64 c6       	rjmp	.+3272   	; 0x2634 <__stack+0x435>
        error -= 360;
    196c:	20 e0       	ldi	r18, 0x00	; 0
    196e:	30 e0       	ldi	r19, 0x00	; 0
    1970:	44 eb       	ldi	r20, 0xB4	; 180
    1972:	53 e4       	ldi	r21, 0x43	; 67
    1974:	c7 01       	movw	r24, r14
    1976:	b6 01       	movw	r22, r12
    1978:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <__subsf3>
    197c:	6b 01       	movw	r12, r22
    197e:	7c 01       	movw	r14, r24
    } else if (error < -180) {
        error += 360;
    }

    speed_a = K*error;
    1980:	20 e0       	ldi	r18, 0x00	; 0
    1982:	30 e0       	ldi	r19, 0x00	; 0
    1984:	40 e0       	ldi	r20, 0x00	; 0
    1986:	5f e3       	ldi	r21, 0x3F	; 63
    1988:	c7 01       	movw	r24, r14
    198a:	b6 01       	movw	r22, r12
    198c:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    1990:	4b 01       	movw	r8, r22
    1992:	5c 01       	movw	r10, r24


    // limit speed
    if (speed_a > 15){
    1994:	20 e0       	ldi	r18, 0x00	; 0
    1996:	30 e0       	ldi	r19, 0x00	; 0
    1998:	40 e7       	ldi	r20, 0x70	; 112
    199a:	51 e4       	ldi	r21, 0x41	; 65
    199c:	0e 94 bd 4f 	call	0x9f7a	; 0x9f7a <__gesf2>
    19a0:	18 16       	cp	r1, r24
    19a2:	0c f4       	brge	.+2      	; 0x19a6 <__EEPROM_REGION_LENGTH__+0x9a6>
    19a4:	42 c6       	rjmp	.+3204   	; 0x262a <__stack+0x42b>
        speed_a = 15;
    }else if (speed_a < -15){
    19a6:	20 e0       	ldi	r18, 0x00	; 0
    19a8:	30 e0       	ldi	r19, 0x00	; 0
    19aa:	40 e7       	ldi	r20, 0x70	; 112
    19ac:	51 ec       	ldi	r21, 0xC1	; 193
    19ae:	c5 01       	movw	r24, r10
    19b0:	b4 01       	movw	r22, r8
    19b2:	0e 94 b9 4d 	call	0x9b72	; 0x9b72 <__cmpsf2>
    19b6:	87 fd       	sbrc	r24, 7
    19b8:	c3 c7       	rjmp	.+3974   	; 0x2940 <__stack+0x741>
    19ba:	c5 01       	movw	r24, r10
    19bc:	b4 01       	movw	r22, r8
    19be:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__fixsfsi>
    19c2:	8b 01       	movw	r16, r22
    19c4:	c5 01       	movw	r24, r10
    19c6:	b4 01       	movw	r22, r8
    19c8:	90 58       	subi	r25, 0x80	; 128
    19ca:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__fixsfsi>
        speed_a = -15;
    }

	r_speed = speed_a;
    19ce:	10 93 f6 03 	sts	0x03F6, r17	; 0x8003f6 <r_speed+0x1>
    19d2:	00 93 f5 03 	sts	0x03F5, r16	; 0x8003f5 <r_speed>
	l_speed = -speed_a;
    19d6:	70 93 f8 03 	sts	0x03F8, r23	; 0x8003f8 <l_speed+0x1>
    19da:	60 93 f7 03 	sts	0x03F7, r22	; 0x8003f7 <l_speed>

    if (fabsf(error) > 25){
    19de:	c7 01       	movw	r24, r14
    19e0:	b6 01       	movw	r22, r12
    19e2:	9f 77       	andi	r25, 0x7F	; 127
    19e4:	20 e0       	ldi	r18, 0x00	; 0
    19e6:	30 e0       	ldi	r19, 0x00	; 0
    19e8:	48 ec       	ldi	r20, 0xC8	; 200
    19ea:	51 e4       	ldi	r21, 0x41	; 65
    19ec:	0e 94 bd 4f 	call	0x9f7a	; 0x9f7a <__gesf2>
    19f0:	18 16       	cp	r1, r24
    19f2:	0c f0       	brlt	.+2      	; 0x19f6 <__EEPROM_REGION_LENGTH__+0x9f6>
    19f4:	3b c7       	rjmp	.+3702   	; 0x286c <__stack+0x66d>

						straight_time = getTime100MicroSec() - straight_time_previous;
						//comm_time_previous = getTime100MicroSec();
						//if (straight_time > PAUSE_500_MSEC){
                        if (!(angle_control(u, false, 5, filtered_theta))){
                            NextState = angle;
    19f6:	82 e0       	ldi	r24, 0x02	; 2
    19f8:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <__data_end>
							theta = filtered_theta;
    19fc:	40 92 af 02 	sts	0x02AF, r4	; 0x8002af <theta>
    1a00:	50 92 b0 02 	sts	0x02B0, r5	; 0x8002b0 <theta+0x1>
    1a04:	60 92 b1 02 	sts	0x02B1, r6	; 0x8002b1 <theta+0x2>
    1a08:	70 92 b2 02 	sts	0x02B2, r7	; 0x8002b2 <theta+0x3>
                        }
						//}
						//comm_time = getTime100MicroSec() - comm_time_previous;

                        if (fabsf(position[0]-x_ref[0]) < error_radius && fabsf(position[1]-x_ref[1]) < error_radius){
    1a0c:	60 91 19 02 	lds	r22, 0x0219	; 0x800219 <error_radius>
    1a10:	70 91 1a 02 	lds	r23, 0x021A	; 0x80021a <error_radius+0x1>
    1a14:	07 2e       	mov	r0, r23
    1a16:	00 0c       	add	r0, r0
    1a18:	88 0b       	sbc	r24, r24
    1a1a:	99 0b       	sbc	r25, r25
    1a1c:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    1a20:	6b 01       	movw	r12, r22
    1a22:	7c 01       	movw	r14, r24
    1a24:	cc 5b       	subi	r28, 0xBC	; 188
    1a26:	dc 4f       	sbci	r29, 0xFC	; 252
    1a28:	28 81       	ld	r18, Y
    1a2a:	39 81       	ldd	r19, Y+1	; 0x01
    1a2c:	4a 81       	ldd	r20, Y+2	; 0x02
    1a2e:	5b 81       	ldd	r21, Y+3	; 0x03
    1a30:	c4 54       	subi	r28, 0x44	; 68
    1a32:	d3 40       	sbci	r29, 0x03	; 3
    1a34:	60 91 32 07 	lds	r22, 0x0732	; 0x800732 <position>
    1a38:	70 91 33 07 	lds	r23, 0x0733	; 0x800733 <position+0x1>
    1a3c:	80 91 34 07 	lds	r24, 0x0734	; 0x800734 <position+0x2>
    1a40:	90 91 35 07 	lds	r25, 0x0735	; 0x800735 <position+0x3>
    1a44:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <__subsf3>
    1a48:	9f 77       	andi	r25, 0x7F	; 127
    1a4a:	a7 01       	movw	r20, r14
    1a4c:	96 01       	movw	r18, r12
    1a4e:	0e 94 b9 4d 	call	0x9b72	; 0x9b72 <__cmpsf2>
    1a52:	87 ff       	sbrs	r24, 7
    1a54:	48 ce       	rjmp	.-880    	; 0x16e6 <__EEPROM_REGION_LENGTH__+0x6e6>
    1a56:	c0 5c       	subi	r28, 0xC0	; 192
    1a58:	dc 4f       	sbci	r29, 0xFC	; 252
    1a5a:	28 81       	ld	r18, Y
    1a5c:	39 81       	ldd	r19, Y+1	; 0x01
    1a5e:	4a 81       	ldd	r20, Y+2	; 0x02
    1a60:	5b 81       	ldd	r21, Y+3	; 0x03
    1a62:	c0 54       	subi	r28, 0x40	; 64
    1a64:	d3 40       	sbci	r29, 0x03	; 3
    1a66:	60 91 36 07 	lds	r22, 0x0736	; 0x800736 <position+0x4>
    1a6a:	70 91 37 07 	lds	r23, 0x0737	; 0x800737 <position+0x5>
    1a6e:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <position+0x6>
    1a72:	90 91 39 07 	lds	r25, 0x0739	; 0x800739 <position+0x7>
    1a76:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <__subsf3>
    1a7a:	9b 01       	movw	r18, r22
    1a7c:	ac 01       	movw	r20, r24
    1a7e:	5f 77       	andi	r21, 0x7F	; 127
    1a80:	c7 01       	movw	r24, r14
    1a82:	b6 01       	movw	r22, r12
    1a84:	0e 94 bd 4f 	call	0x9f7a	; 0x9f7a <__gesf2>
    1a88:	18 16       	cp	r1, r24
    1a8a:	0c f0       	brlt	.+2      	; 0x1a8e <__EEPROM_REGION_LENGTH__+0xa8e>
    1a8c:	2c ce       	rjmp	.-936    	; 0x16e6 <__EEPROM_REGION_LENGTH__+0x6e6>
                            NextState = terminate;
    1a8e:	34 e0       	ldi	r19, 0x04	; 4
    1a90:	30 93 2e 02 	sts	0x022E, r19	; 0x80022e <__data_end>
				xPos_fixed = position[0];
				yPos_fixed = position[1];

				// controller
				//control_time_previous = getTime100MicroSec();
                u = da_control(position, x_ref, id);
    1a94:	ef e2       	ldi	r30, 0x2F	; 47
    1a96:	6e 2e       	mov	r6, r30
    1a98:	e2 e0       	ldi	r30, 0x02	; 2
    1a9a:	7e 2e       	mov	r7, r30
    1a9c:	df c8       	rjmp	.-3650   	; 0xc5c <__LOCK_REGION_LENGTH__+0x85c>
                switch (NextState){


                    case idle:{
                        // automatically move to next state -- eventually some kind of signal
                        updateRedLed(255); //
    1a9e:	8f ef       	ldi	r24, 0xFF	; 255
    1aa0:	0e 94 0e 46 	call	0x8c1c	; 0x8c1c <updateRedLed>
                        updateGreenLed(0); //0
    1aa4:	80 e0       	ldi	r24, 0x00	; 0
    1aa6:	0e 94 22 46 	call	0x8c44	; 0x8c44 <updateGreenLed>
                        updateBlueLed(255);
    1aaa:	8f ef       	ldi	r24, 0xFF	; 255
    1aac:	0e 94 36 46 	call	0x8c6c	; 0x8c6c <updateBlueLed>
                        setLeftSpeed(0);
    1ab0:	80 e0       	ldi	r24, 0x00	; 0
    1ab2:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <setLeftSpeed>
                        setRightSpeed(0);
    1ab6:	80 e0       	ldi	r24, 0x00	; 0
    1ab8:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <setRightSpeed>

						if (start_comm){
    1abc:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <start_comm>
    1ac0:	88 23       	and	r24, r24
    1ac2:	09 f4       	brne	.+2      	; 0x1ac6 <__EEPROM_REGION_LENGTH__+0xac6>
    1ac4:	10 ce       	rjmp	.-992    	; 0x16e6 <__EEPROM_REGION_LENGTH__+0x6e6>
							if((getTime100MicroSec()-demoStartTime) >= (PAUSE_2_SEC)) {
    1ac6:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    1aca:	00 91 c4 02 	lds	r16, 0x02C4	; 0x8002c4 <demoStartTime>
    1ace:	10 91 c5 02 	lds	r17, 0x02C5	; 0x8002c5 <demoStartTime+0x1>
    1ad2:	20 91 c6 02 	lds	r18, 0x02C6	; 0x8002c6 <demoStartTime+0x2>
    1ad6:	30 91 c7 02 	lds	r19, 0x02C7	; 0x8002c7 <demoStartTime+0x3>
    1ada:	dc 01       	movw	r26, r24
    1adc:	cb 01       	movw	r24, r22
    1ade:	80 1b       	sub	r24, r16
    1ae0:	91 0b       	sbc	r25, r17
    1ae2:	a2 0b       	sbc	r26, r18
    1ae4:	b3 0b       	sbc	r27, r19
    1ae6:	8e 31       	cpi	r24, 0x1E	; 30
    1ae8:	9b 44       	sbci	r25, 0x4B	; 75
    1aea:	a1 05       	cpc	r26, r1
    1aec:	b1 05       	cpc	r27, r1
    1aee:	08 f4       	brcc	.+2      	; 0x1af2 <__EEPROM_REGION_LENGTH__+0xaf2>
    1af0:	fa cd       	rjmp	.-1036   	; 0x16e6 <__EEPROM_REGION_LENGTH__+0x6e6>
								NextState = compute_sum;
    1af2:	85 e0       	ldi	r24, 0x05	; 5
    1af4:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <__data_end>
								init_time_previous = getTime100MicroSec();
    1af8:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    1afc:	c9 5d       	subi	r28, 0xD9	; 217
    1afe:	dc 4f       	sbci	r29, 0xFC	; 252
    1b00:	68 83       	st	Y, r22
    1b02:	79 83       	std	Y+1, r23	; 0x01
    1b04:	8a 83       	std	Y+2, r24	; 0x02
    1b06:	9b 83       	std	Y+3, r25	; 0x03
    1b08:	c7 52       	subi	r28, 0x27	; 39
    1b0a:	d3 40       	sbci	r29, 0x03	; 3
				xPos_fixed = position[0];
				yPos_fixed = position[1];

				// controller
				//control_time_previous = getTime100MicroSec();
                u = da_control(position, x_ref, id);
    1b0c:	9f e2       	ldi	r25, 0x2F	; 47
    1b0e:	69 2e       	mov	r6, r25
    1b10:	92 e0       	ldi	r25, 0x02	; 2
    1b12:	79 2e       	mov	r7, r25
    1b14:	a3 c8       	rjmp	.-3770   	; 0xc5c <__LOCK_REGION_LENGTH__+0x85c>

                    }break;
					
                    case angle:{

                        if (!trigger_flag) {
    1b16:	c6 5c       	subi	r28, 0xC6	; 198
    1b18:	dc 4f       	sbci	r29, 0xFC	; 252
    1b1a:	48 81       	ld	r20, Y
    1b1c:	ca 53       	subi	r28, 0x3A	; 58
    1b1e:	d3 40       	sbci	r29, 0x03	; 3
    1b20:	44 23       	and	r20, r20
    1b22:	09 f4       	brne	.+2      	; 0x1b26 <__EEPROM_REGION_LENGTH__+0xb26>
    1b24:	d3 c6       	rjmp	.+3494   	; 0x28cc <__stack+0x6cd>
    float speed_a = 0;
    float K = 0.5;
    float error = 0.0;
    bool out;

    angle_ref = (float) atan2f(u[1], u[0]) * RAD_2_DEG;
    1b26:	a5 01       	movw	r20, r10
    1b28:	94 01       	movw	r18, r8
    1b2a:	c7 01       	movw	r24, r14
    1b2c:	b6 01       	movw	r22, r12
    1b2e:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <atan2>
    1b32:	21 ee       	ldi	r18, 0xE1	; 225
    1b34:	3e e2       	ldi	r19, 0x2E	; 46
    1b36:	45 e6       	ldi	r20, 0x65	; 101
    1b38:	52 e4       	ldi	r21, 0x42	; 66
    1b3a:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    1b3e:	4b 01       	movw	r8, r22
    1b40:	5c 01       	movw	r10, r24

	theta_temp = theta_cur* RAD_2_DEG; //theta = filtered_theta from 0 to 360
    1b42:	21 ee       	ldi	r18, 0xE1	; 225
    1b44:	3e e2       	ldi	r19, 0x2E	; 46
    1b46:	45 e6       	ldi	r20, 0x65	; 101
    1b48:	52 e4       	ldi	r21, 0x42	; 66
    1b4a:	60 91 af 02 	lds	r22, 0x02AF	; 0x8002af <theta>
    1b4e:	70 91 b0 02 	lds	r23, 0x02B0	; 0x8002b0 <theta+0x1>
    1b52:	80 91 b1 02 	lds	r24, 0x02B1	; 0x8002b1 <theta+0x2>
    1b56:	90 91 b2 02 	lds	r25, 0x02B2	; 0x8002b2 <theta+0x3>
    1b5a:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    1b5e:	6b 01       	movw	r12, r22
    1b60:	7c 01       	movw	r14, r24
	if (theta_temp > 180){
    1b62:	20 e0       	ldi	r18, 0x00	; 0
    1b64:	30 e0       	ldi	r19, 0x00	; 0
    1b66:	44 e3       	ldi	r20, 0x34	; 52
    1b68:	53 e4       	ldi	r21, 0x43	; 67
    1b6a:	0e 94 bd 4f 	call	0x9f7a	; 0x9f7a <__gesf2>
    1b6e:	18 16       	cp	r1, r24
    1b70:	54 f4       	brge	.+20     	; 0x1b86 <__EEPROM_REGION_LENGTH__+0xb86>
		theta_temp -= 360;
    1b72:	20 e0       	ldi	r18, 0x00	; 0
    1b74:	30 e0       	ldi	r19, 0x00	; 0
    1b76:	44 eb       	ldi	r20, 0xB4	; 180
    1b78:	53 e4       	ldi	r21, 0x43	; 67
    1b7a:	c7 01       	movw	r24, r14
    1b7c:	b6 01       	movw	r22, r12
    1b7e:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <__subsf3>
    1b82:	6b 01       	movw	r12, r22
    1b84:	7c 01       	movw	r14, r24
	}

    error = angle_ref - theta_temp;
    1b86:	a7 01       	movw	r20, r14
    1b88:	96 01       	movw	r18, r12
    1b8a:	c5 01       	movw	r24, r10
    1b8c:	b4 01       	movw	r22, r8
    1b8e:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <__subsf3>
    1b92:	6b 01       	movw	r12, r22
    1b94:	7c 01       	movw	r14, r24
	//angle_temp = error;
    //error = 0;
	
    if (error > 180){
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	30 e0       	ldi	r19, 0x00	; 0
    1b9a:	44 e3       	ldi	r20, 0x34	; 52
    1b9c:	53 e4       	ldi	r21, 0x43	; 67
    1b9e:	0e 94 bd 4f 	call	0x9f7a	; 0x9f7a <__gesf2>
    1ba2:	18 16       	cp	r1, r24
    1ba4:	0c f0       	brlt	.+2      	; 0x1ba8 <__EEPROM_REGION_LENGTH__+0xba8>
    1ba6:	65 c5       	rjmp	.+2762   	; 0x2672 <__stack+0x473>
        error -= 360;
    1ba8:	20 e0       	ldi	r18, 0x00	; 0
    1baa:	30 e0       	ldi	r19, 0x00	; 0
    1bac:	44 eb       	ldi	r20, 0xB4	; 180
    1bae:	53 e4       	ldi	r21, 0x43	; 67
    1bb0:	c7 01       	movw	r24, r14
    1bb2:	b6 01       	movw	r22, r12
    1bb4:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <__subsf3>
    1bb8:	6b 01       	movw	r12, r22
    1bba:	7c 01       	movw	r14, r24
    } else if (error < -180) {
        error += 360;
    }

    speed_a = K*error;
    1bbc:	20 e0       	ldi	r18, 0x00	; 0
    1bbe:	30 e0       	ldi	r19, 0x00	; 0
    1bc0:	40 e0       	ldi	r20, 0x00	; 0
    1bc2:	5f e3       	ldi	r21, 0x3F	; 63
    1bc4:	c7 01       	movw	r24, r14
    1bc6:	b6 01       	movw	r22, r12
    1bc8:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    1bcc:	4b 01       	movw	r8, r22
    1bce:	5c 01       	movw	r10, r24


    // limit speed
    if (speed_a > 15){
    1bd0:	20 e0       	ldi	r18, 0x00	; 0
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	40 e7       	ldi	r20, 0x70	; 112
    1bd6:	51 e4       	ldi	r21, 0x41	; 65
    1bd8:	0e 94 bd 4f 	call	0x9f7a	; 0x9f7a <__gesf2>
    1bdc:	18 16       	cp	r1, r24
    1bde:	0c f4       	brge	.+2      	; 0x1be2 <__EEPROM_REGION_LENGTH__+0xbe2>
    1be0:	42 c5       	rjmp	.+2692   	; 0x2666 <__stack+0x467>
        speed_a = 15;
    }else if (speed_a < -15){
    1be2:	20 e0       	ldi	r18, 0x00	; 0
    1be4:	30 e0       	ldi	r19, 0x00	; 0
    1be6:	40 e7       	ldi	r20, 0x70	; 112
    1be8:	51 ec       	ldi	r21, 0xC1	; 193
    1bea:	c5 01       	movw	r24, r10
    1bec:	b4 01       	movw	r22, r8
    1bee:	0e 94 b9 4d 	call	0x9b72	; 0x9b72 <__cmpsf2>
    1bf2:	87 fd       	sbrc	r24, 7
    1bf4:	aa c6       	rjmp	.+3412   	; 0x294a <__stack+0x74b>
    1bf6:	c5 01       	movw	r24, r10
    1bf8:	b4 01       	movw	r22, r8
    1bfa:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__fixsfsi>
    1bfe:	8b 01       	movw	r16, r22
    1c00:	c5 01       	movw	r24, r10
    1c02:	b4 01       	movw	r22, r8
    1c04:	90 58       	subi	r25, 0x80	; 128
    1c06:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__fixsfsi>
    1c0a:	b6 2e       	mov	r11, r22
    1c0c:	87 2f       	mov	r24, r23
        speed_a = -15;
    }

	r_speed = speed_a;
    1c0e:	10 93 f6 03 	sts	0x03F6, r17	; 0x8003f6 <r_speed+0x1>
    1c12:	00 93 f5 03 	sts	0x03F5, r16	; 0x8003f5 <r_speed>
	l_speed = -speed_a;
    1c16:	b0 92 f7 03 	sts	0x03F7, r11	; 0x8003f7 <l_speed>
    1c1a:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <l_speed+0x1>

    if (fabsf(error) > 25){
    1c1e:	c7 01       	movw	r24, r14
    1c20:	b6 01       	movw	r22, r12
    1c22:	9f 77       	andi	r25, 0x7F	; 127
    1c24:	20 e0       	ldi	r18, 0x00	; 0
    1c26:	30 e0       	ldi	r19, 0x00	; 0
    1c28:	48 ec       	ldi	r20, 0xC8	; 200
    1c2a:	51 e4       	ldi	r21, 0x41	; 65
    1c2c:	0e 94 bd 4f 	call	0x9f7a	; 0x9f7a <__gesf2>
    1c30:	18 16       	cp	r1, r24
    1c32:	0c f0       	brlt	.+2      	; 0x1c36 <__EEPROM_REGION_LENGTH__+0xc36>
    1c34:	65 c6       	rjmp	.+3274   	; 0x2900 <__stack+0x701>
//						start_state1 = getTime100MicroSec();
//					}
					
//					break;
//				case 1:
					setLeftSpeed(l_speed);
    1c36:	8b 2d       	mov	r24, r11
    1c38:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <setLeftSpeed>
					setRightSpeed(r_speed);
    1c3c:	80 91 f5 03 	lds	r24, 0x03F5	; 0x8003f5 <r_speed>
    1c40:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <setRightSpeed>
                            setLeftSpeed(0);
                            setRightSpeed(0);
                        }
						//comm_time = getTime100MicroSec() - comm_time_previous;

                        if (fabsf(position[0]-x_ref[0]) < error_radius && fabsf(position[1]-x_ref[1]) < error_radius){
    1c44:	60 91 19 02 	lds	r22, 0x0219	; 0x800219 <error_radius>
    1c48:	70 91 1a 02 	lds	r23, 0x021A	; 0x80021a <error_radius+0x1>
    1c4c:	07 2e       	mov	r0, r23
    1c4e:	00 0c       	add	r0, r0
    1c50:	88 0b       	sbc	r24, r24
    1c52:	99 0b       	sbc	r25, r25
    1c54:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    1c58:	6b 01       	movw	r12, r22
    1c5a:	7c 01       	movw	r14, r24
    1c5c:	cc 5b       	subi	r28, 0xBC	; 188
    1c5e:	dc 4f       	sbci	r29, 0xFC	; 252
    1c60:	28 81       	ld	r18, Y
    1c62:	39 81       	ldd	r19, Y+1	; 0x01
    1c64:	4a 81       	ldd	r20, Y+2	; 0x02
    1c66:	5b 81       	ldd	r21, Y+3	; 0x03
    1c68:	c4 54       	subi	r28, 0x44	; 68
    1c6a:	d3 40       	sbci	r29, 0x03	; 3
    1c6c:	60 91 32 07 	lds	r22, 0x0732	; 0x800732 <position>
    1c70:	70 91 33 07 	lds	r23, 0x0733	; 0x800733 <position+0x1>
    1c74:	80 91 34 07 	lds	r24, 0x0734	; 0x800734 <position+0x2>
    1c78:	90 91 35 07 	lds	r25, 0x0735	; 0x800735 <position+0x3>
    1c7c:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <__subsf3>
    1c80:	9f 77       	andi	r25, 0x7F	; 127
    1c82:	a7 01       	movw	r20, r14
    1c84:	96 01       	movw	r18, r12
    1c86:	0e 94 b9 4d 	call	0x9b72	; 0x9b72 <__cmpsf2>
    1c8a:	87 ff       	sbrs	r24, 7
    1c8c:	2c cd       	rjmp	.-1448   	; 0x16e6 <__EEPROM_REGION_LENGTH__+0x6e6>
    1c8e:	c0 5c       	subi	r28, 0xC0	; 192
    1c90:	dc 4f       	sbci	r29, 0xFC	; 252
    1c92:	28 81       	ld	r18, Y
    1c94:	39 81       	ldd	r19, Y+1	; 0x01
    1c96:	4a 81       	ldd	r20, Y+2	; 0x02
    1c98:	5b 81       	ldd	r21, Y+3	; 0x03
    1c9a:	c0 54       	subi	r28, 0x40	; 64
    1c9c:	d3 40       	sbci	r29, 0x03	; 3
    1c9e:	60 91 36 07 	lds	r22, 0x0736	; 0x800736 <position+0x4>
    1ca2:	70 91 37 07 	lds	r23, 0x0737	; 0x800737 <position+0x5>
    1ca6:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <position+0x6>
    1caa:	90 91 39 07 	lds	r25, 0x0739	; 0x800739 <position+0x7>
    1cae:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <__subsf3>
    1cb2:	9b 01       	movw	r18, r22
    1cb4:	ac 01       	movw	r20, r24
    1cb6:	5f 77       	andi	r21, 0x7F	; 127
    1cb8:	c7 01       	movw	r24, r14
    1cba:	b6 01       	movw	r22, r12
    1cbc:	0e 94 bd 4f 	call	0x9f7a	; 0x9f7a <__gesf2>
    1cc0:	18 16       	cp	r1, r24
    1cc2:	0c f0       	brlt	.+2      	; 0x1cc6 <__EEPROM_REGION_LENGTH__+0xcc6>
    1cc4:	10 cd       	rjmp	.-1504   	; 0x16e6 <__EEPROM_REGION_LENGTH__+0x6e6>
                            NextState = terminate;
    1cc6:	84 e0       	ldi	r24, 0x04	; 4
    1cc8:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <__data_end>
				xPos_fixed = position[0];
				yPos_fixed = position[1];

				// controller
				//control_time_previous = getTime100MicroSec();
                u = da_control(position, x_ref, id);
    1ccc:	5f e2       	ldi	r21, 0x2F	; 47
    1cce:	65 2e       	mov	r6, r21
    1cd0:	52 e0       	ldi	r21, 0x02	; 2
    1cd2:	75 2e       	mov	r7, r21
    1cd4:	0c 94 2e 06 	jmp	0xc5c	; 0xc5c <__LOCK_REGION_LENGTH__+0x85c>
		}

        handleIRRemoteCommands();
		
		if ((NextState == straight || NextState == idle)){
			turn = false;
    1cd8:	10 92 2b 07 	sts	0x072B, r1	; 0x80072b <turn>
    1cdc:	0c 94 b8 02 	jmp	0x570	; 0x570 <__LOCK_REGION_LENGTH__+0x170>
		computeAngle();
		control_time = getTime100MicroSec() - control_time_previous;

		endTime = getTime100MicroSec();
		if((endTime-startTime) >= (PAUSE_2_SEC)) {
			readBatteryLevel();				// the battery level is updated every two seconds
    1ce0:	0e 94 5d 25 	call	0x4aba	; 0x4aba <readBatteryLevel>
    		startTime = getTime100MicroSec();
    1ce4:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    1ce8:	ca 5c       	subi	r28, 0xCA	; 202
    1cea:	dc 4f       	sbci	r29, 0xFC	; 252
    1cec:	68 83       	st	Y, r22
    1cee:	79 83       	std	Y+1, r23	; 0x01
    1cf0:	8a 83       	std	Y+2, r24	; 0x02
    1cf2:	9b 83       	std	Y+3, r25	; 0x03
    1cf4:	c6 53       	subi	r28, 0x36	; 54
    1cf6:	d3 40       	sbci	r29, 0x03	; 3
    1cf8:	0c 94 a9 02 	jmp	0x552	; 0x552 <__LOCK_REGION_LENGTH__+0x152>
                    trigger_LED_timer = getTime100MicroSec();
                }
				init_time = getTime100MicroSec() - init_time_previous;
				
                // fix LED for triggering
                if(getTime100MicroSec()-trigger_LED_timer >= PAUSE_250_MSEC && trigger_flag) {
    1cfc:	c1 5c       	subi	r28, 0xC1	; 193
    1cfe:	dc 4f       	sbci	r29, 0xFC	; 252
    1d00:	18 82       	st	Y, r1
    1d02:	cf 53       	subi	r28, 0x3F	; 63
    1d04:	d3 40       	sbci	r29, 0x03	; 3
                    trigger_flag = false;
    1d06:	c6 5c       	subi	r28, 0xC6	; 198
    1d08:	dc 4f       	sbci	r29, 0xFC	; 252
    1d0a:	18 82       	st	Y, r1
    1d0c:	ca 53       	subi	r28, 0x3A	; 58
    1d0e:	d3 40       	sbci	r29, 0x03	; 3
    1d10:	56 cb       	rjmp	.-2388   	; 0x13be <__EEPROM_REGION_LENGTH__+0x3be>
				//		NextState = terminate;
				//	}
                //}

				init_time_previous = getTime100MicroSec();
                if(getTime100MicroSec()-period >= h | init_trigger) {
    1d12:	c1 5c       	subi	r28, 0xC1	; 193
    1d14:	dc 4f       	sbci	r29, 0xFC	; 252
    1d16:	38 81       	ld	r19, Y
    1d18:	cf 53       	subi	r28, 0x3F	; 63
    1d1a:	d3 40       	sbci	r29, 0x03	; 3
    1d1c:	33 23       	and	r19, r19
    1d1e:	09 f4       	brne	.+2      	; 0x1d22 <__EEPROM_REGION_LENGTH__+0xd22>
    1d20:	19 cb       	rjmp	.-2510   	; 0x1354 <__EEPROM_REGION_LENGTH__+0x354>
    1d22:	bf c9       	rjmp	.-3202   	; 0x10a2 <__EEPROM_REGION_LENGTH__+0xa2>

                }
				//control_time = getTime100MicroSec() - control_time_previous;

				init_time_previous = getTime100MicroSec();
                if(trigger_etc(fixed_position, position) | init_trigger) {
    1d24:	c1 5c       	subi	r28, 0xC1	; 193
    1d26:	dc 4f       	sbci	r29, 0xFC	; 252
    1d28:	98 81       	ld	r25, Y
    1d2a:	cf 53       	subi	r28, 0x3F	; 63
    1d2c:	d3 40       	sbci	r29, 0x03	; 3
    1d2e:	91 11       	cpse	r25, r1
    1d30:	0c 94 96 05 	jmp	0xb2c	; 0xb2c <__LOCK_REGION_LENGTH__+0x72c>
                    updateBlueLed(255); //0
                    trigger_flag = true;
					init_trigger = false;
                    trigger_LED_timer = getTime100MicroSec();
                }
				init_time = getTime100MicroSec() - init_time_previous;
    1d34:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    1d38:	dc 01       	movw	r26, r24
    1d3a:	cb 01       	movw	r24, r22
    1d3c:	c9 5d       	subi	r28, 0xD9	; 217
    1d3e:	dc 4f       	sbci	r29, 0xFC	; 252
    1d40:	28 81       	ld	r18, Y
    1d42:	39 81       	ldd	r19, Y+1	; 0x01
    1d44:	4a 81       	ldd	r20, Y+2	; 0x02
    1d46:	5b 81       	ldd	r21, Y+3	; 0x03
    1d48:	c7 52       	subi	r28, 0x27	; 39
    1d4a:	d3 40       	sbci	r29, 0x03	; 3
    1d4c:	82 1b       	sub	r24, r18
    1d4e:	93 0b       	sbc	r25, r19
    1d50:	a4 0b       	sbc	r26, r20
    1d52:	b5 0b       	sbc	r27, r21
    1d54:	80 93 ed 03 	sts	0x03ED, r24	; 0x8003ed <init_time>
    1d58:	90 93 ee 03 	sts	0x03EE, r25	; 0x8003ee <init_time+0x1>
    1d5c:	a0 93 ef 03 	sts	0x03EF, r26	; 0x8003ef <init_time+0x2>
    1d60:	b0 93 f0 03 	sts	0x03F0, r27	; 0x8003f0 <init_time+0x3>
				
                // fix LED for triggering
                if(getTime100MicroSec()-trigger_LED_timer >= PAUSE_250_MSEC && trigger_flag) {
    1d64:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    1d68:	dc 01       	movw	r26, r24
    1d6a:	cb 01       	movw	r24, r22
    1d6c:	c5 5c       	subi	r28, 0xC5	; 197
    1d6e:	dc 4f       	sbci	r29, 0xFC	; 252
    1d70:	28 81       	ld	r18, Y
    1d72:	39 81       	ldd	r19, Y+1	; 0x01
    1d74:	4a 81       	ldd	r20, Y+2	; 0x02
    1d76:	5b 81       	ldd	r21, Y+3	; 0x03
    1d78:	cb 53       	subi	r28, 0x3B	; 59
    1d7a:	d3 40       	sbci	r29, 0x03	; 3
    1d7c:	82 1b       	sub	r24, r18
    1d7e:	93 0b       	sbc	r25, r19
    1d80:	a4 0b       	sbc	r26, r20
    1d82:	b5 0b       	sbc	r27, r21
    1d84:	84 36       	cpi	r24, 0x64	; 100
    1d86:	99 40       	sbci	r25, 0x09	; 9
    1d88:	a1 05       	cpc	r26, r1
    1d8a:	b1 05       	cpc	r27, r1
    1d8c:	08 f0       	brcs	.+2      	; 0x1d90 <__EEPROM_REGION_LENGTH__+0xd90>
    1d8e:	bb cf       	rjmp	.-138    	; 0x1d06 <__EEPROM_REGION_LENGTH__+0xd06>
                    trigger_flag = false;
                } else if (trigger_flag){
    1d90:	c6 5c       	subi	r28, 0xC6	; 198
    1d92:	dc 4f       	sbci	r29, 0xFC	; 252
    1d94:	48 81       	ld	r20, Y
    1d96:	ca 53       	subi	r28, 0x3A	; 58
    1d98:	d3 40       	sbci	r29, 0x03	; 3
    1d9a:	41 11       	cpse	r20, r1
    1d9c:	0c 94 16 06 	jmp	0xc2c	; 0xc2c <__LOCK_REGION_LENGTH__+0x82c>
    1da0:	c1 5c       	subi	r28, 0xC1	; 193
    1da2:	dc 4f       	sbci	r29, 0xFC	; 252
    1da4:	48 83       	st	Y, r20
    1da6:	cf 53       	subi	r28, 0x3F	; 63
    1da8:	d3 40       	sbci	r29, 0x03	; 3
                // ETC

                enableObstacleAvoidance();

				//control_time_previous = getTime100MicroSec();
                u = etc_control(x_hat, id);
    1daa:	9f e3       	ldi	r25, 0x3F	; 63
    1dac:	69 2e       	mov	r6, r25
    1dae:	92 e0       	ldi	r25, 0x02	; 2
    1db0:	79 2e       	mov	r7, r25
    1db2:	0c 94 2e 06 	jmp	0xc5c	; 0xc5c <__LOCK_REGION_LENGTH__+0x85c>

    speed_a = K*error;


    // limit speed
    if (speed_a > 15){
    1db6:	11 ef       	ldi	r17, 0xF1	; 241
    1db8:	7f ef       	ldi	r23, 0xFF	; 255
    1dba:	4f e0       	ldi	r20, 0x0F	; 15
    1dbc:	44 2e       	mov	r4, r20
    1dbe:	51 2c       	mov	r5, r1
    1dc0:	c4 cb       	rjmp	.-2168   	; 0x154a <__EEPROM_REGION_LENGTH__+0x54a>
	//angle_temp = error;
    //error = 0;
	
    if (error > 180){
        error -= 360;
    } else if (error < -180) {
    1dc2:	20 e0       	ldi	r18, 0x00	; 0
    1dc4:	30 e0       	ldi	r19, 0x00	; 0
    1dc6:	44 e3       	ldi	r20, 0x34	; 52
    1dc8:	53 ec       	ldi	r21, 0xC3	; 195
    1dca:	c7 01       	movw	r24, r14
    1dcc:	b6 01       	movw	r22, r12
    1dce:	0e 94 b9 4d 	call	0x9b72	; 0x9b72 <__cmpsf2>
    1dd2:	87 ff       	sbrs	r24, 7
    1dd4:	92 cb       	rjmp	.-2268   	; 0x14fa <__EEPROM_REGION_LENGTH__+0x4fa>
        error += 360;
    1dd6:	20 e0       	ldi	r18, 0x00	; 0
    1dd8:	30 e0       	ldi	r19, 0x00	; 0
    1dda:	44 eb       	ldi	r20, 0xB4	; 180
    1ddc:	53 e4       	ldi	r21, 0x43	; 67
    1dde:	c7 01       	movw	r24, r14
    1de0:	b6 01       	movw	r22, r12
    1de2:	0e 94 db 4c 	call	0x99b6	; 0x99b6 <__addsf3>
    1de6:	6b 01       	movw	r12, r22
    1de8:	7c 01       	movw	r14, r24
    1dea:	87 cb       	rjmp	.-2290   	; 0x14fa <__EEPROM_REGION_LENGTH__+0x4fa>
                 //control_time_previous = getTime100MicroSec();
                 u = etc_control(x_hat, id);
                 //control_time = getTime100MicroSec() - control_time_previous;
                 
                 //control_time_previous = getTime100MicroSec();
                 switch (NextState) {
    1dec:	84 30       	cpi	r24, 0x04	; 4
    1dee:	09 f4       	brne	.+2      	; 0x1df2 <__EEPROM_REGION_LENGTH__+0xdf2>
    1df0:	82 c3       	rjmp	.+1796   	; 0x24f6 <__stack+0x2f7>
    1df2:	87 30       	cpi	r24, 0x07	; 7
    1df4:	09 f0       	breq	.+2      	; 0x1df8 <__EEPROM_REGION_LENGTH__+0xdf8>
    1df6:	2d c9       	rjmp	.-3494   	; 0x1052 <__EEPROM_REGION_LENGTH__+0x52>

	                 }break;
	                 
	                 case wait:{
		                 
		                 setLeftSpeed(0);
    1df8:	80 e0       	ldi	r24, 0x00	; 0
    1dfa:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <setLeftSpeed>
		                 setRightSpeed(0);
    1dfe:	80 e0       	ldi	r24, 0x00	; 0
    1e00:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <setRightSpeed>
		                 
		                 wait_time = getTime100MicroSec() - wait_time_previous;
    1e04:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
		                 
		                 if (wait_time > PAUSE_750_MSEC){
    1e08:	dc 01       	movw	r26, r24
    1e0a:	cb 01       	movw	r24, r22
    1e0c:	c4 5b       	subi	r28, 0xB4	; 180
    1e0e:	dc 4f       	sbci	r29, 0xFC	; 252
    1e10:	28 81       	ld	r18, Y
    1e12:	39 81       	ldd	r19, Y+1	; 0x01
    1e14:	4a 81       	ldd	r20, Y+2	; 0x02
    1e16:	5b 81       	ldd	r21, Y+3	; 0x03
    1e18:	cc 54       	subi	r28, 0x4C	; 76
    1e1a:	d3 40       	sbci	r29, 0x03	; 3
    1e1c:	82 1b       	sub	r24, r18
    1e1e:	93 0b       	sbc	r25, r19
    1e20:	a4 0b       	sbc	r26, r20
    1e22:	b5 0b       	sbc	r27, r21
    1e24:	8c 32       	cpi	r24, 0x2C	; 44
    1e26:	9c 41       	sbci	r25, 0x1C	; 28
    1e28:	a1 05       	cpc	r26, r1
    1e2a:	b1 05       	cpc	r27, r1
    1e2c:	08 f4       	brcc	.+2      	; 0x1e30 <__EEPROM_REGION_LENGTH__+0xe30>
    1e2e:	11 c9       	rjmp	.-3550   	; 0x1052 <__EEPROM_REGION_LENGTH__+0x52>
			                 NextState = straight;
    1e30:	43 e0       	ldi	r20, 0x03	; 3
    1e32:	40 93 2e 02 	sts	0x022E, r20	; 0x80022e <__data_end>
    1e36:	0d c9       	rjmp	.-3558   	; 0x1052 <__EEPROM_REGION_LENGTH__+0x52>
				//control_time_previous = getTime100MicroSec();
                u = etc_control(x_hat, id);
				//control_time = getTime100MicroSec() - control_time_previous;
 
				//control_time_previous = getTime100MicroSec();
                switch (NextState) {
    1e38:	84 30       	cpi	r24, 0x04	; 4
    1e3a:	09 f4       	brne	.+2      	; 0x1e3e <__EEPROM_REGION_LENGTH__+0xe3e>
    1e3c:	84 c0       	rjmp	.+264    	; 0x1f46 <__EEPROM_REGION_LENGTH__+0xf46>
    1e3e:	87 30       	cpi	r24, 0x07	; 7
    1e40:	11 f0       	breq	.+4      	; 0x1e46 <__EEPROM_REGION_LENGTH__+0xe46>
    1e42:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <__LOCK_REGION_LENGTH__+0x5e2>

                    }break;
					
					case wait:{
						
						setLeftSpeed(0);
    1e46:	80 e0       	ldi	r24, 0x00	; 0
    1e48:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <setLeftSpeed>
						setRightSpeed(0);
    1e4c:	80 e0       	ldi	r24, 0x00	; 0
    1e4e:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <setRightSpeed>
						
						wait_time = getTime100MicroSec() - wait_time_previous;
    1e52:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
						
						if (wait_time > PAUSE_750_MSEC){
    1e56:	dc 01       	movw	r26, r24
    1e58:	cb 01       	movw	r24, r22
    1e5a:	c4 5b       	subi	r28, 0xB4	; 180
    1e5c:	dc 4f       	sbci	r29, 0xFC	; 252
    1e5e:	28 81       	ld	r18, Y
    1e60:	39 81       	ldd	r19, Y+1	; 0x01
    1e62:	4a 81       	ldd	r20, Y+2	; 0x02
    1e64:	5b 81       	ldd	r21, Y+3	; 0x03
    1e66:	cc 54       	subi	r28, 0x4C	; 76
    1e68:	d3 40       	sbci	r29, 0x03	; 3
    1e6a:	82 1b       	sub	r24, r18
    1e6c:	93 0b       	sbc	r25, r19
    1e6e:	a4 0b       	sbc	r26, r20
    1e70:	b5 0b       	sbc	r27, r21
    1e72:	8c 32       	cpi	r24, 0x2C	; 44
    1e74:	9c 41       	sbci	r25, 0x1C	; 28
    1e76:	a1 05       	cpc	r26, r1
    1e78:	b1 05       	cpc	r27, r1
    1e7a:	10 f4       	brcc	.+4      	; 0x1e80 <__EEPROM_REGION_LENGTH__+0xe80>
    1e7c:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <__LOCK_REGION_LENGTH__+0x5e2>
							NextState = straight;
    1e80:	43 e0       	ldi	r20, 0x03	; 3
    1e82:	40 93 2e 02 	sts	0x022E, r20	; 0x80022e <__data_end>
    1e86:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <__LOCK_REGION_LENGTH__+0x5e2>
    }else{
        if (check){
            //setLeftSpeed( 0);
            //setRightSpeed( 0);
        }
		angle_state = 0;
    1e8a:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <angle_state>
		start_state0 = getTime100MicroSec();
    1e8e:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    1e92:	60 93 48 02 	sts	0x0248, r22	; 0x800248 <start_state0>
    1e96:	70 93 49 02 	sts	0x0249, r23	; 0x800249 <start_state0+0x1>
    1e9a:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <start_state0+0x2>
    1e9e:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <start_state0+0x3>
					updateRedLed(255); //255
					updateGreenLed(0);
					updateBlueLed(255); //255
											
					if (angle_control(u, true, 0, theta)){
						setLeftSpeed(50);
    1ea2:	82 e3       	ldi	r24, 0x32	; 50
    1ea4:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <setLeftSpeed>
						setRightSpeed(50);
    1ea8:	82 e3       	ldi	r24, 0x32	; 50
    1eaa:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <setRightSpeed>
						updateRedLed(255); //255
    1eae:	8f ef       	ldi	r24, 0xFF	; 255
    1eb0:	0e 94 0e 46 	call	0x8c1c	; 0x8c1c <updateRedLed>
						updateGreenLed(255);
    1eb4:	8f ef       	ldi	r24, 0xFF	; 255
    1eb6:	0e 94 22 46 	call	0x8c44	; 0x8c44 <updateGreenLed>
						updateBlueLed(0); //255
    1eba:	80 e0       	ldi	r24, 0x00	; 0
    1ebc:	0e 94 36 46 	call	0x8c6c	; 0x8c6c <updateBlueLed>
    1ec0:	0c 94 2e 06 	jmp	0xc5c	; 0xc5c <__LOCK_REGION_LENGTH__+0x85c>


    // limit speed
    if (speed_a > 15){
        speed_a = 15;
    }else if (speed_a < -15){
    1ec4:	1f e0       	ldi	r17, 0x0F	; 15
    1ec6:	70 e0       	ldi	r23, 0x00	; 0
    1ec8:	31 ef       	ldi	r19, 0xF1	; 241
    1eca:	43 2e       	mov	r4, r19
    1ecc:	55 24       	eor	r5, r5
    1ece:	5a 94       	dec	r5
    1ed0:	3c cb       	rjmp	.-2440   	; 0x154a <__EEPROM_REGION_LENGTH__+0x54a>
			case 3:	// write default calibration values; wait 2 seconds before start writing the calibration values
					// in eeprom in order to avoid rewriting the data involuntarily when moving the selector and passing 
					// through selector position 9
					switch(demoState) {
						case 0:
							demoStartTime = getTime100MicroSec();
    1ed2:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    1ed6:	60 93 c4 02 	sts	0x02C4, r22	; 0x8002c4 <demoStartTime>
    1eda:	70 93 c5 02 	sts	0x02C5, r23	; 0x8002c5 <demoStartTime+0x1>
    1ede:	80 93 c6 02 	sts	0x02C6, r24	; 0x8002c6 <demoStartTime+0x2>
    1ee2:	90 93 c7 02 	sts	0x02C7, r25	; 0x8002c7 <demoStartTime+0x3>
							demoState = 1;
    1ee6:	21 e0       	ldi	r18, 0x01	; 1
    1ee8:	20 93 c8 02 	sts	0x02C8, r18	; 0x8002c8 <demoState>
							break;
    1eec:	0c 94 2e 06 	jmp	0xc5c	; 0xc5c <__LOCK_REGION_LENGTH__+0x85c>

						case 1:
							if((getTime100MicroSec()-demoStartTime) >= (PAUSE_2_SEC)) {
    1ef0:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    1ef4:	00 91 c4 02 	lds	r16, 0x02C4	; 0x8002c4 <demoStartTime>
    1ef8:	10 91 c5 02 	lds	r17, 0x02C5	; 0x8002c5 <demoStartTime+0x1>
    1efc:	20 91 c6 02 	lds	r18, 0x02C6	; 0x8002c6 <demoStartTime+0x2>
    1f00:	30 91 c7 02 	lds	r19, 0x02C7	; 0x8002c7 <demoStartTime+0x3>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	80 1b       	sub	r24, r16
    1f0a:	91 0b       	sbc	r25, r17
    1f0c:	a2 0b       	sbc	r26, r18
    1f0e:	b3 0b       	sbc	r27, r19
    1f10:	8e 31       	cpi	r24, 0x1E	; 30
    1f12:	9b 44       	sbci	r25, 0x4B	; 75
    1f14:	a1 05       	cpc	r26, r1
    1f16:	b1 05       	cpc	r27, r1
    1f18:	10 f4       	brcc	.+4      	; 0x1f1e <__EEPROM_REGION_LENGTH__+0xf1e>
    1f1a:	0c 94 2e 06 	jmp	0xc5c	; 0xc5c <__LOCK_REGION_LENGTH__+0x85c>
								demoState = 2;
    1f1e:	82 e0       	ldi	r24, 0x02	; 2
    1f20:	80 93 c8 02 	sts	0x02C8, r24	; 0x8002c8 <demoState>
    1f24:	0c 94 2e 06 	jmp	0xc5c	; 0xc5c <__LOCK_REGION_LENGTH__+0x85c>

                // fix LED for triggering
                if(getTime100MicroSec()-trigger_LED_timer >= PAUSE_250_MSEC && trigger_flag) {
                    trigger_flag = false;
                } else if (trigger_flag){
                    updateRedLed(255); 
    1f28:	8f ef       	ldi	r24, 0xFF	; 255
    1f2a:	0e 94 0e 46 	call	0x8c1c	; 0x8c1c <updateRedLed>
                    updateGreenLed(0); //0
    1f2e:	80 e0       	ldi	r24, 0x00	; 0
    1f30:	0e 94 22 46 	call	0x8c44	; 0x8c44 <updateGreenLed>
                    updateBlueLed(0); //0
    1f34:	80 e0       	ldi	r24, 0x00	; 0
    1f36:	0e 94 36 46 	call	0x8c6c	; 0x8c6c <updateBlueLed>
                // PETC

                 enableObstacleAvoidance();

                 //control_time_previous = getTime100MicroSec();
                 u = etc_control(x_hat, id);
    1f3a:	7f e3       	ldi	r23, 0x3F	; 63
    1f3c:	67 2e       	mov	r6, r23
    1f3e:	72 e0       	ldi	r23, 0x02	; 2
    1f40:	77 2e       	mov	r7, r23
    1f42:	0c 94 2e 06 	jmp	0xc5c	; 0xc5c <__LOCK_REGION_LENGTH__+0x85c>

                    case terminate:{
                        //setLeftSpeed(0);
                        //setRightSpeed(0);

                        updateRedLed(0); //0
    1f46:	80 e0       	ldi	r24, 0x00	; 0
    1f48:	0e 94 0e 46 	call	0x8c1c	; 0x8c1c <updateRedLed>
                        updateGreenLed(0); //0
    1f4c:	80 e0       	ldi	r24, 0x00	; 0
    1f4e:	0e 94 22 46 	call	0x8c44	; 0x8c44 <updateGreenLed>
                        updateBlueLed(255);
    1f52:	8f ef       	ldi	r24, 0xFF	; 255
    1f54:	0e 94 36 46 	call	0x8c6c	; 0x8c6c <updateBlueLed>

                    }break;
    1f58:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <__LOCK_REGION_LENGTH__+0x5e2>
                 //control_time_previous = getTime100MicroSec();
                 switch (NextState) {

	                 case idle: {
		                 // automatically move to next state -- eventually some kind of signal
		                 updateRedLed(255);
    1f5c:	8f ef       	ldi	r24, 0xFF	; 255
    1f5e:	0e 94 0e 46 	call	0x8c1c	; 0x8c1c <updateRedLed>
		                 updateGreenLed(0); //0
    1f62:	80 e0       	ldi	r24, 0x00	; 0
    1f64:	0e 94 22 46 	call	0x8c44	; 0x8c44 <updateGreenLed>
		                 updateBlueLed(255);
    1f68:	8f ef       	ldi	r24, 0xFF	; 255
    1f6a:	0e 94 36 46 	call	0x8c6c	; 0x8c6c <updateBlueLed>
		                 setLeftSpeed(0);
    1f6e:	80 e0       	ldi	r24, 0x00	; 0
    1f70:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <setLeftSpeed>
		                 setRightSpeed(0);
    1f74:	80 e0       	ldi	r24, 0x00	; 0
    1f76:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <setRightSpeed>

		                 if(start_comm){
    1f7a:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <start_comm>
    1f7e:	88 23       	and	r24, r24
    1f80:	09 f4       	brne	.+2      	; 0x1f84 <__EEPROM_REGION_LENGTH__+0xf84>
    1f82:	67 c8       	rjmp	.-3890   	; 0x1052 <__EEPROM_REGION_LENGTH__+0x52>
			                 if ((getTime100MicroSec() - demoStartTime) >= (PAUSE_2_SEC)) {
    1f84:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    1f88:	00 91 c4 02 	lds	r16, 0x02C4	; 0x8002c4 <demoStartTime>
    1f8c:	10 91 c5 02 	lds	r17, 0x02C5	; 0x8002c5 <demoStartTime+0x1>
    1f90:	20 91 c6 02 	lds	r18, 0x02C6	; 0x8002c6 <demoStartTime+0x2>
    1f94:	30 91 c7 02 	lds	r19, 0x02C7	; 0x8002c7 <demoStartTime+0x3>
    1f98:	dc 01       	movw	r26, r24
    1f9a:	cb 01       	movw	r24, r22
    1f9c:	80 1b       	sub	r24, r16
    1f9e:	91 0b       	sbc	r25, r17
    1fa0:	a2 0b       	sbc	r26, r18
    1fa2:	b3 0b       	sbc	r27, r19
    1fa4:	8e 31       	cpi	r24, 0x1E	; 30
    1fa6:	9b 44       	sbci	r25, 0x4B	; 75
    1fa8:	a1 05       	cpc	r26, r1
    1faa:	b1 05       	cpc	r27, r1
    1fac:	08 f4       	brcc	.+2      	; 0x1fb0 <__EEPROM_REGION_LENGTH__+0xfb0>
    1fae:	51 c8       	rjmp	.-3934   	; 0x1052 <__EEPROM_REGION_LENGTH__+0x52>
				                 NextState = angle;
    1fb0:	82 e0       	ldi	r24, 0x02	; 2
    1fb2:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <__data_end>
				//	if(!(NextState == idle)){
				//		NextState = terminate;
				//	}
                //}

				init_time_previous = getTime100MicroSec();
    1fb6:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    1fba:	c9 5d       	subi	r28, 0xD9	; 217
    1fbc:	dc 4f       	sbci	r29, 0xFC	; 252
    1fbe:	68 83       	st	Y, r22
    1fc0:	79 83       	std	Y+1, r23	; 0x01
    1fc2:	8a 83       	std	Y+2, r24	; 0x02
    1fc4:	9b 83       	std	Y+3, r25	; 0x03
    1fc6:	c7 52       	subi	r28, 0x27	; 39
    1fc8:	d3 40       	sbci	r29, 0x03	; 3
                if(getTime100MicroSec()-period >= h | init_trigger) {
    1fca:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
		                 setRightSpeed(0);

		                 if(start_comm){
			                 if ((getTime100MicroSec() - demoStartTime) >= (PAUSE_2_SEC)) {
				                 NextState = angle;
				                 init_trigger = true;
    1fce:	41 e0       	ldi	r20, 0x01	; 1
    1fd0:	c1 5c       	subi	r28, 0xC1	; 193
    1fd2:	dc 4f       	sbci	r29, 0xFC	; 252
    1fd4:	48 83       	st	Y, r20
    1fd6:	cf 53       	subi	r28, 0x3F	; 63
    1fd8:	d3 40       	sbci	r29, 0x03	; 3
    1fda:	63 c8       	rjmp	.-3898   	; 0x10a2 <__EEPROM_REGION_LENGTH__+0xa2>
		                 }
	                 }break;

	                 case straight: {

		                 if (!trigger_flag) {
    1fdc:	c6 5c       	subi	r28, 0xC6	; 198
    1fde:	dc 4f       	sbci	r29, 0xFC	; 252
    1fe0:	58 81       	ld	r21, Y
    1fe2:	ca 53       	subi	r28, 0x3A	; 58
    1fe4:	d3 40       	sbci	r29, 0x03	; 3
    1fe6:	55 23       	and	r21, r21
    1fe8:	09 f4       	brne	.+2      	; 0x1fec <__EEPROM_REGION_LENGTH__+0xfec>
    1fea:	58 c3       	rjmp	.+1712   	; 0x269c <__stack+0x49d>
			                 updateRedLed(255);
			                 updateGreenLed(255);
			                 updateBlueLed(0); //0
		                 }

		                 speed = K * sqrt(pow(u[0], 2) + pow(u[1], 2));
    1fec:	cd 5d       	subi	r28, 0xDD	; 221
    1fee:	dc 4f       	sbci	r29, 0xFC	; 252
    1ff0:	28 81       	ld	r18, Y
    1ff2:	39 81       	ldd	r19, Y+1	; 0x01
    1ff4:	4a 81       	ldd	r20, Y+2	; 0x02
    1ff6:	5b 81       	ldd	r21, Y+3	; 0x03
    1ff8:	c3 52       	subi	r28, 0x23	; 35
    1ffa:	d3 40       	sbci	r29, 0x03	; 3
    1ffc:	ca 01       	movw	r24, r20
    1ffe:	b9 01       	movw	r22, r18
    2000:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    2004:	6b 01       	movw	r12, r22
    2006:	7c 01       	movw	r14, r24
    2008:	a5 01       	movw	r20, r10
    200a:	94 01       	movw	r18, r8
    200c:	c5 01       	movw	r24, r10
    200e:	b4 01       	movw	r22, r8
    2010:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    2014:	9b 01       	movw	r18, r22
    2016:	ac 01       	movw	r20, r24
    2018:	c7 01       	movw	r24, r14
    201a:	b6 01       	movw	r22, r12
    201c:	0e 94 db 4c 	call	0x99b6	; 0x99b6 <__addsf3>
    2020:	0e 94 b3 50 	call	0xa166	; 0xa166 <sqrt>
    2024:	20 91 21 02 	lds	r18, 0x0221	; 0x800221 <K>
    2028:	30 91 22 02 	lds	r19, 0x0222	; 0x800222 <K+0x1>
    202c:	40 91 23 02 	lds	r20, 0x0223	; 0x800223 <K+0x2>
    2030:	50 91 24 02 	lds	r21, 0x0224	; 0x800224 <K+0x3>
    2034:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    2038:	8b 01       	movw	r16, r22
    203a:	f8 2e       	mov	r15, r24
    203c:	e9 2e       	mov	r14, r25
    203e:	cb 01       	movw	r24, r22
    2040:	af 2d       	mov	r26, r15
    2042:	be 2d       	mov	r27, r14
    2044:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <speed>
    2048:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <speed+0x1>
    204c:	a0 93 09 04 	sts	0x0409, r26	; 0x800409 <speed+0x2>
    2050:	b0 93 0a 04 	sts	0x040A, r27	; 0x80040a <speed+0x3>

		                 if (speed > u_max) {
    2054:	d0 90 15 02 	lds	r13, 0x0215	; 0x800215 <u_max>
    2058:	c0 90 16 02 	lds	r12, 0x0216	; 0x800216 <u_max+0x1>
    205c:	b0 90 17 02 	lds	r11, 0x0217	; 0x800217 <u_max+0x2>
    2060:	a0 90 18 02 	lds	r10, 0x0218	; 0x800218 <u_max+0x3>
    2064:	2d 2d       	mov	r18, r13
    2066:	3c 2d       	mov	r19, r12
    2068:	4b 2d       	mov	r20, r11
    206a:	5a 2d       	mov	r21, r10
    206c:	b8 01       	movw	r22, r16
    206e:	8f 2d       	mov	r24, r15
    2070:	9e 2d       	mov	r25, r14
    2072:	0e 94 bd 4f 	call	0x9f7a	; 0x9f7a <__gesf2>
    2076:	18 16       	cp	r1, r24
    2078:	0c f0       	brlt	.+2      	; 0x207c <__DATA_REGION_LENGTH__+0x7c>
    207a:	66 c2       	rjmp	.+1228   	; 0x2548 <__stack+0x349>
			                 speed = u_max;
    207c:	8d 2d       	mov	r24, r13
    207e:	9c 2d       	mov	r25, r12
    2080:	ab 2d       	mov	r26, r11
    2082:	ba 2d       	mov	r27, r10
    2084:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <speed>
    2088:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <speed+0x1>
    208c:	a0 93 09 04 	sts	0x0409, r26	; 0x800409 <speed+0x2>
    2090:	b0 93 0a 04 	sts	0x040A, r27	; 0x80040a <speed+0x3>
		                 }
		                 l_speed = speed;
    2094:	6d 2d       	mov	r22, r13
    2096:	7c 2d       	mov	r23, r12
    2098:	8b 2d       	mov	r24, r11
    209a:	9a 2d       	mov	r25, r10
    209c:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__fixsfsi>
    20a0:	70 93 f8 03 	sts	0x03F8, r23	; 0x8003f8 <l_speed+0x1>
    20a4:	60 93 f7 03 	sts	0x03F7, r22	; 0x8003f7 <l_speed>
		                 r_speed = speed;
    20a8:	70 93 f6 03 	sts	0x03F6, r23	; 0x8003f6 <r_speed+0x1>
    20ac:	60 93 f5 03 	sts	0x03F5, r22	; 0x8003f5 <r_speed>

		                 setLeftSpeed(speed);
    20b0:	6d 2d       	mov	r22, r13
    20b2:	7c 2d       	mov	r23, r12
    20b4:	8b 2d       	mov	r24, r11
    20b6:	9a 2d       	mov	r25, r10
    20b8:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__fixsfsi>
    20bc:	86 2f       	mov	r24, r22
    20be:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <setLeftSpeed>
		                 setRightSpeed(speed-offset_rwheel);
    20c2:	20 91 f9 03 	lds	r18, 0x03F9	; 0x8003f9 <offset_rwheel>
    20c6:	30 91 fa 03 	lds	r19, 0x03FA	; 0x8003fa <offset_rwheel+0x1>
    20ca:	40 91 fb 03 	lds	r20, 0x03FB	; 0x8003fb <offset_rwheel+0x2>
    20ce:	50 91 fc 03 	lds	r21, 0x03FC	; 0x8003fc <offset_rwheel+0x3>
    20d2:	60 91 07 04 	lds	r22, 0x0407	; 0x800407 <speed>
    20d6:	70 91 08 04 	lds	r23, 0x0408	; 0x800408 <speed+0x1>
    20da:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <speed+0x2>
    20de:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <speed+0x3>
    20e2:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <__subsf3>
    20e6:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__fixsfsi>
    20ea:	86 2f       	mov	r24, r22
    20ec:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <setRightSpeed>
		                 
		                 //comm_time_previous = getTime100MicroSec();
		                 if (!(angle_control(u, false, 5, filtered_theta))){
    20f0:	40 90 2c 07 	lds	r4, 0x072C	; 0x80072c <filtered_theta>
    20f4:	50 90 2d 07 	lds	r5, 0x072D	; 0x80072d <filtered_theta+0x1>
    20f8:	60 90 2e 07 	lds	r6, 0x072E	; 0x80072e <filtered_theta+0x2>
    20fc:	70 90 2f 07 	lds	r7, 0x072F	; 0x80072f <filtered_theta+0x3>
    float speed_a = 0;
    float K = 0.5;
    float error = 0.0;
    bool out;

    angle_ref = (float) atan2f(u[1], u[0]) * RAD_2_DEG;
    2100:	20 91 3f 02 	lds	r18, 0x023F	; 0x80023f <u.7157>
    2104:	30 91 40 02 	lds	r19, 0x0240	; 0x800240 <u.7157+0x1>
    2108:	40 91 41 02 	lds	r20, 0x0241	; 0x800241 <u.7157+0x2>
    210c:	50 91 42 02 	lds	r21, 0x0242	; 0x800242 <u.7157+0x3>
    2110:	60 91 43 02 	lds	r22, 0x0243	; 0x800243 <u.7157+0x4>
    2114:	70 91 44 02 	lds	r23, 0x0244	; 0x800244 <u.7157+0x5>
    2118:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <u.7157+0x6>
    211c:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <u.7157+0x7>
    2120:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <atan2>
    2124:	21 ee       	ldi	r18, 0xE1	; 225
    2126:	3e e2       	ldi	r19, 0x2E	; 46
    2128:	45 e6       	ldi	r20, 0x65	; 101
    212a:	52 e4       	ldi	r21, 0x42	; 66
    212c:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    2130:	4b 01       	movw	r8, r22
    2132:	5c 01       	movw	r10, r24

	theta_temp = theta_cur* RAD_2_DEG; //theta = filtered_theta from 0 to 360
    2134:	21 ee       	ldi	r18, 0xE1	; 225
    2136:	3e e2       	ldi	r19, 0x2E	; 46
    2138:	45 e6       	ldi	r20, 0x65	; 101
    213a:	52 e4       	ldi	r21, 0x42	; 66
    213c:	c3 01       	movw	r24, r6
    213e:	b2 01       	movw	r22, r4
    2140:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    2144:	6b 01       	movw	r12, r22
    2146:	7c 01       	movw	r14, r24
	if (theta_temp > 180){
    2148:	20 e0       	ldi	r18, 0x00	; 0
    214a:	30 e0       	ldi	r19, 0x00	; 0
    214c:	44 e3       	ldi	r20, 0x34	; 52
    214e:	53 e4       	ldi	r21, 0x43	; 67
    2150:	0e 94 bd 4f 	call	0x9f7a	; 0x9f7a <__gesf2>
    2154:	18 16       	cp	r1, r24
    2156:	54 f4       	brge	.+20     	; 0x216c <__DATA_REGION_LENGTH__+0x16c>
		theta_temp -= 360;
    2158:	20 e0       	ldi	r18, 0x00	; 0
    215a:	30 e0       	ldi	r19, 0x00	; 0
    215c:	44 eb       	ldi	r20, 0xB4	; 180
    215e:	53 e4       	ldi	r21, 0x43	; 67
    2160:	c7 01       	movw	r24, r14
    2162:	b6 01       	movw	r22, r12
    2164:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <__subsf3>
    2168:	6b 01       	movw	r12, r22
    216a:	7c 01       	movw	r14, r24
	}

    error = angle_ref - theta_temp;
    216c:	a7 01       	movw	r20, r14
    216e:	96 01       	movw	r18, r12
    2170:	c5 01       	movw	r24, r10
    2172:	b4 01       	movw	r22, r8
    2174:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <__subsf3>
    2178:	6b 01       	movw	r12, r22
    217a:	7c 01       	movw	r14, r24
	//angle_temp = error;
    //error = 0;
	
    if (error > 180){
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	30 e0       	ldi	r19, 0x00	; 0
    2180:	44 e3       	ldi	r20, 0x34	; 52
    2182:	53 e4       	ldi	r21, 0x43	; 67
    2184:	0e 94 bd 4f 	call	0x9f7a	; 0x9f7a <__gesf2>
    2188:	18 16       	cp	r1, r24
    218a:	0c f0       	brlt	.+2      	; 0x218e <__DATA_REGION_LENGTH__+0x18e>
    218c:	f4 c1       	rjmp	.+1000   	; 0x2576 <__stack+0x377>
        error -= 360;
    218e:	20 e0       	ldi	r18, 0x00	; 0
    2190:	30 e0       	ldi	r19, 0x00	; 0
    2192:	44 eb       	ldi	r20, 0xB4	; 180
    2194:	53 e4       	ldi	r21, 0x43	; 67
    2196:	c7 01       	movw	r24, r14
    2198:	b6 01       	movw	r22, r12
    219a:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <__subsf3>
    219e:	6b 01       	movw	r12, r22
    21a0:	7c 01       	movw	r14, r24
    } else if (error < -180) {
        error += 360;
    }

    speed_a = K*error;
    21a2:	20 e0       	ldi	r18, 0x00	; 0
    21a4:	30 e0       	ldi	r19, 0x00	; 0
    21a6:	40 e0       	ldi	r20, 0x00	; 0
    21a8:	5f e3       	ldi	r21, 0x3F	; 63
    21aa:	c7 01       	movw	r24, r14
    21ac:	b6 01       	movw	r22, r12
    21ae:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    21b2:	4b 01       	movw	r8, r22
    21b4:	5c 01       	movw	r10, r24


    // limit speed
    if (speed_a > 15){
    21b6:	20 e0       	ldi	r18, 0x00	; 0
    21b8:	30 e0       	ldi	r19, 0x00	; 0
    21ba:	40 e7       	ldi	r20, 0x70	; 112
    21bc:	51 e4       	ldi	r21, 0x41	; 65
    21be:	0e 94 bd 4f 	call	0x9f7a	; 0x9f7a <__gesf2>
    21c2:	18 16       	cp	r1, r24
    21c4:	0c f4       	brge	.+2      	; 0x21c8 <__DATA_REGION_LENGTH__+0x1c8>
    21c6:	d2 c1       	rjmp	.+932    	; 0x256c <__stack+0x36d>
        speed_a = 15;
    }else if (speed_a < -15){
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	40 e7       	ldi	r20, 0x70	; 112
    21ce:	51 ec       	ldi	r21, 0xC1	; 193
    21d0:	c5 01       	movw	r24, r10
    21d2:	b4 01       	movw	r22, r8
    21d4:	0e 94 b9 4d 	call	0x9b72	; 0x9b72 <__cmpsf2>
    21d8:	87 fd       	sbrc	r24, 7
    21da:	61 c3       	rjmp	.+1730   	; 0x289e <__stack+0x69f>
    21dc:	c5 01       	movw	r24, r10
    21de:	b4 01       	movw	r22, r8
    21e0:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__fixsfsi>
    21e4:	8b 01       	movw	r16, r22
    21e6:	c5 01       	movw	r24, r10
    21e8:	b4 01       	movw	r22, r8
    21ea:	90 58       	subi	r25, 0x80	; 128
    21ec:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__fixsfsi>
        speed_a = -15;
    }

	r_speed = speed_a;
    21f0:	10 93 f6 03 	sts	0x03F6, r17	; 0x8003f6 <r_speed+0x1>
    21f4:	00 93 f5 03 	sts	0x03F5, r16	; 0x8003f5 <r_speed>
	l_speed = -speed_a;
    21f8:	70 93 f8 03 	sts	0x03F8, r23	; 0x8003f8 <l_speed+0x1>
    21fc:	60 93 f7 03 	sts	0x03F7, r22	; 0x8003f7 <l_speed>

    if (fabsf(error) > 25){
    2200:	c7 01       	movw	r24, r14
    2202:	b6 01       	movw	r22, r12
    2204:	9f 77       	andi	r25, 0x7F	; 127
    2206:	20 e0       	ldi	r18, 0x00	; 0
    2208:	30 e0       	ldi	r19, 0x00	; 0
    220a:	48 ec       	ldi	r20, 0xC8	; 200
    220c:	51 e4       	ldi	r21, 0x41	; 65
    220e:	0e 94 bd 4f 	call	0x9f7a	; 0x9f7a <__gesf2>
    2212:	18 16       	cp	r1, r24
    2214:	0c f0       	brlt	.+2      	; 0x2218 <__stack+0x19>
    2216:	87 c2       	rjmp	.+1294   	; 0x2726 <__stack+0x527>
		                 setLeftSpeed(speed);
		                 setRightSpeed(speed-offset_rwheel);
		                 
		                 //comm_time_previous = getTime100MicroSec();
		                 if (!(angle_control(u, false, 5, filtered_theta))){
			                 NextState = angle;
    2218:	82 e0       	ldi	r24, 0x02	; 2
    221a:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <__data_end>
			                 theta = filtered_theta;
    221e:	40 92 af 02 	sts	0x02AF, r4	; 0x8002af <theta>
    2222:	50 92 b0 02 	sts	0x02B0, r5	; 0x8002b0 <theta+0x1>
    2226:	60 92 b1 02 	sts	0x02B1, r6	; 0x8002b1 <theta+0x2>
    222a:	70 92 b2 02 	sts	0x02B2, r7	; 0x8002b2 <theta+0x3>
    222e:	0c 94 29 08 	jmp	0x1052	; 0x1052 <__EEPROM_REGION_LENGTH__+0x52>
						}
                    }break;

                    case straight: {

                        if (!trigger_flag) {
    2232:	c6 5c       	subi	r28, 0xC6	; 198
    2234:	dc 4f       	sbci	r29, 0xFC	; 252
    2236:	58 81       	ld	r21, Y
    2238:	ca 53       	subi	r28, 0x3A	; 58
    223a:	d3 40       	sbci	r29, 0x03	; 3
    223c:	55 23       	and	r21, r21
    223e:	09 f4       	brne	.+2      	; 0x2242 <__stack+0x43>
    2240:	f3 c2       	rjmp	.+1510   	; 0x2828 <__stack+0x629>
                            updateRedLed(255);
                            updateGreenLed(255);
                            updateBlueLed(0); //0
                        }

                        speed = K * sqrt(pow(u[0], 2) + pow(u[1], 2));
    2242:	cd 5d       	subi	r28, 0xDD	; 221
    2244:	dc 4f       	sbci	r29, 0xFC	; 252
    2246:	28 81       	ld	r18, Y
    2248:	39 81       	ldd	r19, Y+1	; 0x01
    224a:	4a 81       	ldd	r20, Y+2	; 0x02
    224c:	5b 81       	ldd	r21, Y+3	; 0x03
    224e:	c3 52       	subi	r28, 0x23	; 35
    2250:	d3 40       	sbci	r29, 0x03	; 3
    2252:	ca 01       	movw	r24, r20
    2254:	b9 01       	movw	r22, r18
    2256:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    225a:	6b 01       	movw	r12, r22
    225c:	7c 01       	movw	r14, r24
    225e:	a5 01       	movw	r20, r10
    2260:	94 01       	movw	r18, r8
    2262:	c5 01       	movw	r24, r10
    2264:	b4 01       	movw	r22, r8
    2266:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    226a:	9b 01       	movw	r18, r22
    226c:	ac 01       	movw	r20, r24
    226e:	c7 01       	movw	r24, r14
    2270:	b6 01       	movw	r22, r12
    2272:	0e 94 db 4c 	call	0x99b6	; 0x99b6 <__addsf3>
    2276:	0e 94 b3 50 	call	0xa166	; 0xa166 <sqrt>
    227a:	20 91 21 02 	lds	r18, 0x0221	; 0x800221 <K>
    227e:	30 91 22 02 	lds	r19, 0x0222	; 0x800222 <K+0x1>
    2282:	40 91 23 02 	lds	r20, 0x0223	; 0x800223 <K+0x2>
    2286:	50 91 24 02 	lds	r21, 0x0224	; 0x800224 <K+0x3>
    228a:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    228e:	8b 01       	movw	r16, r22
    2290:	f8 2e       	mov	r15, r24
    2292:	e9 2e       	mov	r14, r25
    2294:	cb 01       	movw	r24, r22
    2296:	af 2d       	mov	r26, r15
    2298:	be 2d       	mov	r27, r14
    229a:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <speed>
    229e:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <speed+0x1>
    22a2:	a0 93 09 04 	sts	0x0409, r26	; 0x800409 <speed+0x2>
    22a6:	b0 93 0a 04 	sts	0x040A, r27	; 0x80040a <speed+0x3>

                        if (speed > u_max) {
    22aa:	d0 90 15 02 	lds	r13, 0x0215	; 0x800215 <u_max>
    22ae:	c0 90 16 02 	lds	r12, 0x0216	; 0x800216 <u_max+0x1>
    22b2:	b0 90 17 02 	lds	r11, 0x0217	; 0x800217 <u_max+0x2>
    22b6:	a0 90 18 02 	lds	r10, 0x0218	; 0x800218 <u_max+0x3>
    22ba:	2d 2d       	mov	r18, r13
    22bc:	3c 2d       	mov	r19, r12
    22be:	4b 2d       	mov	r20, r11
    22c0:	5a 2d       	mov	r21, r10
    22c2:	b8 01       	movw	r22, r16
    22c4:	8f 2d       	mov	r24, r15
    22c6:	9e 2d       	mov	r25, r14
    22c8:	0e 94 bd 4f 	call	0x9f7a	; 0x9f7a <__gesf2>
    22cc:	18 16       	cp	r1, r24
    22ce:	0c f0       	brlt	.+2      	; 0x22d2 <__stack+0xd3>
    22d0:	32 c1       	rjmp	.+612    	; 0x2536 <__stack+0x337>
                            speed = u_max;
    22d2:	8d 2d       	mov	r24, r13
    22d4:	9c 2d       	mov	r25, r12
    22d6:	ab 2d       	mov	r26, r11
    22d8:	ba 2d       	mov	r27, r10
    22da:	80 93 07 04 	sts	0x0407, r24	; 0x800407 <speed>
    22de:	90 93 08 04 	sts	0x0408, r25	; 0x800408 <speed+0x1>
    22e2:	a0 93 09 04 	sts	0x0409, r26	; 0x800409 <speed+0x2>
    22e6:	b0 93 0a 04 	sts	0x040A, r27	; 0x80040a <speed+0x3>
                        }
						l_speed = speed;
    22ea:	6d 2d       	mov	r22, r13
    22ec:	7c 2d       	mov	r23, r12
    22ee:	8b 2d       	mov	r24, r11
    22f0:	9a 2d       	mov	r25, r10
    22f2:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__fixsfsi>
    22f6:	70 93 f8 03 	sts	0x03F8, r23	; 0x8003f8 <l_speed+0x1>
    22fa:	60 93 f7 03 	sts	0x03F7, r22	; 0x8003f7 <l_speed>
						r_speed = speed;
    22fe:	70 93 f6 03 	sts	0x03F6, r23	; 0x8003f6 <r_speed+0x1>
    2302:	60 93 f5 03 	sts	0x03F5, r22	; 0x8003f5 <r_speed>

                        setLeftSpeed(speed);
    2306:	6d 2d       	mov	r22, r13
    2308:	7c 2d       	mov	r23, r12
    230a:	8b 2d       	mov	r24, r11
    230c:	9a 2d       	mov	r25, r10
    230e:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__fixsfsi>
    2312:	86 2f       	mov	r24, r22
    2314:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <setLeftSpeed>
                        setRightSpeed(speed-offset_rwheel);
    2318:	20 91 f9 03 	lds	r18, 0x03F9	; 0x8003f9 <offset_rwheel>
    231c:	30 91 fa 03 	lds	r19, 0x03FA	; 0x8003fa <offset_rwheel+0x1>
    2320:	40 91 fb 03 	lds	r20, 0x03FB	; 0x8003fb <offset_rwheel+0x2>
    2324:	50 91 fc 03 	lds	r21, 0x03FC	; 0x8003fc <offset_rwheel+0x3>
    2328:	60 91 07 04 	lds	r22, 0x0407	; 0x800407 <speed>
    232c:	70 91 08 04 	lds	r23, 0x0408	; 0x800408 <speed+0x1>
    2330:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <speed+0x2>
    2334:	90 91 0a 04 	lds	r25, 0x040A	; 0x80040a <speed+0x3>
    2338:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <__subsf3>
    233c:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__fixsfsi>
    2340:	86 2f       	mov	r24, r22
    2342:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <setRightSpeed>
						
						//comm_time_previous = getTime100MicroSec();
						if (!(angle_control(u, false, 5, filtered_theta))){
    2346:	40 90 2c 07 	lds	r4, 0x072C	; 0x80072c <filtered_theta>
    234a:	50 90 2d 07 	lds	r5, 0x072D	; 0x80072d <filtered_theta+0x1>
    234e:	60 90 2e 07 	lds	r6, 0x072E	; 0x80072e <filtered_theta+0x2>
    2352:	70 90 2f 07 	lds	r7, 0x072F	; 0x80072f <filtered_theta+0x3>
    float speed_a = 0;
    float K = 0.5;
    float error = 0.0;
    bool out;

    angle_ref = (float) atan2f(u[1], u[0]) * RAD_2_DEG;
    2356:	20 91 3f 02 	lds	r18, 0x023F	; 0x80023f <u.7157>
    235a:	30 91 40 02 	lds	r19, 0x0240	; 0x800240 <u.7157+0x1>
    235e:	40 91 41 02 	lds	r20, 0x0241	; 0x800241 <u.7157+0x2>
    2362:	50 91 42 02 	lds	r21, 0x0242	; 0x800242 <u.7157+0x3>
    2366:	60 91 43 02 	lds	r22, 0x0243	; 0x800243 <u.7157+0x4>
    236a:	70 91 44 02 	lds	r23, 0x0244	; 0x800244 <u.7157+0x5>
    236e:	80 91 45 02 	lds	r24, 0x0245	; 0x800245 <u.7157+0x6>
    2372:	90 91 46 02 	lds	r25, 0x0246	; 0x800246 <u.7157+0x7>
    2376:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <atan2>
    237a:	21 ee       	ldi	r18, 0xE1	; 225
    237c:	3e e2       	ldi	r19, 0x2E	; 46
    237e:	45 e6       	ldi	r20, 0x65	; 101
    2380:	52 e4       	ldi	r21, 0x42	; 66
    2382:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    2386:	4b 01       	movw	r8, r22
    2388:	5c 01       	movw	r10, r24

	theta_temp = theta_cur* RAD_2_DEG; //theta = filtered_theta from 0 to 360
    238a:	21 ee       	ldi	r18, 0xE1	; 225
    238c:	3e e2       	ldi	r19, 0x2E	; 46
    238e:	45 e6       	ldi	r20, 0x65	; 101
    2390:	52 e4       	ldi	r21, 0x42	; 66
    2392:	c3 01       	movw	r24, r6
    2394:	b2 01       	movw	r22, r4
    2396:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    239a:	6b 01       	movw	r12, r22
    239c:	7c 01       	movw	r14, r24
	if (theta_temp > 180){
    239e:	20 e0       	ldi	r18, 0x00	; 0
    23a0:	30 e0       	ldi	r19, 0x00	; 0
    23a2:	44 e3       	ldi	r20, 0x34	; 52
    23a4:	53 e4       	ldi	r21, 0x43	; 67
    23a6:	0e 94 bd 4f 	call	0x9f7a	; 0x9f7a <__gesf2>
    23aa:	18 16       	cp	r1, r24
    23ac:	54 f4       	brge	.+20     	; 0x23c2 <__stack+0x1c3>
		theta_temp -= 360;
    23ae:	20 e0       	ldi	r18, 0x00	; 0
    23b0:	30 e0       	ldi	r19, 0x00	; 0
    23b2:	44 eb       	ldi	r20, 0xB4	; 180
    23b4:	53 e4       	ldi	r21, 0x43	; 67
    23b6:	c7 01       	movw	r24, r14
    23b8:	b6 01       	movw	r22, r12
    23ba:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <__subsf3>
    23be:	6b 01       	movw	r12, r22
    23c0:	7c 01       	movw	r14, r24
	}

    error = angle_ref - theta_temp;
    23c2:	a7 01       	movw	r20, r14
    23c4:	96 01       	movw	r18, r12
    23c6:	c5 01       	movw	r24, r10
    23c8:	b4 01       	movw	r22, r8
    23ca:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <__subsf3>
    23ce:	6b 01       	movw	r12, r22
    23d0:	7c 01       	movw	r14, r24
	//angle_temp = error;
    //error = 0;
	
    if (error > 180){
    23d2:	20 e0       	ldi	r18, 0x00	; 0
    23d4:	30 e0       	ldi	r19, 0x00	; 0
    23d6:	44 e3       	ldi	r20, 0x34	; 52
    23d8:	53 e4       	ldi	r21, 0x43	; 67
    23da:	0e 94 bd 4f 	call	0x9f7a	; 0x9f7a <__gesf2>
    23de:	18 16       	cp	r1, r24
    23e0:	0c f0       	brlt	.+2      	; 0x23e4 <__stack+0x1e5>
    23e2:	0e c1       	rjmp	.+540    	; 0x2600 <__stack+0x401>
        error -= 360;
    23e4:	20 e0       	ldi	r18, 0x00	; 0
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	44 eb       	ldi	r20, 0xB4	; 180
    23ea:	53 e4       	ldi	r21, 0x43	; 67
    23ec:	c7 01       	movw	r24, r14
    23ee:	b6 01       	movw	r22, r12
    23f0:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <__subsf3>
    23f4:	6b 01       	movw	r12, r22
    23f6:	7c 01       	movw	r14, r24
    } else if (error < -180) {
        error += 360;
    }

    speed_a = K*error;
    23f8:	20 e0       	ldi	r18, 0x00	; 0
    23fa:	30 e0       	ldi	r19, 0x00	; 0
    23fc:	40 e0       	ldi	r20, 0x00	; 0
    23fe:	5f e3       	ldi	r21, 0x3F	; 63
    2400:	c7 01       	movw	r24, r14
    2402:	b6 01       	movw	r22, r12
    2404:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    2408:	4b 01       	movw	r8, r22
    240a:	5c 01       	movw	r10, r24


    // limit speed
    if (speed_a > 15){
    240c:	20 e0       	ldi	r18, 0x00	; 0
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	40 e7       	ldi	r20, 0x70	; 112
    2412:	51 e4       	ldi	r21, 0x41	; 65
    2414:	0e 94 bd 4f 	call	0x9f7a	; 0x9f7a <__gesf2>
    2418:	18 16       	cp	r1, r24
    241a:	0c f4       	brge	.+2      	; 0x241e <__stack+0x21f>
    241c:	90 c0       	rjmp	.+288    	; 0x253e <__stack+0x33f>
        speed_a = 15;
    }else if (speed_a < -15){
    241e:	20 e0       	ldi	r18, 0x00	; 0
    2420:	30 e0       	ldi	r19, 0x00	; 0
    2422:	40 e7       	ldi	r20, 0x70	; 112
    2424:	51 ec       	ldi	r21, 0xC1	; 193
    2426:	c5 01       	movw	r24, r10
    2428:	b4 01       	movw	r22, r8
    242a:	0e 94 b9 4d 	call	0x9b72	; 0x9b72 <__cmpsf2>
    242e:	87 fd       	sbrc	r24, 7
    2430:	2a c2       	rjmp	.+1108   	; 0x2886 <__stack+0x687>
    2432:	c5 01       	movw	r24, r10
    2434:	b4 01       	movw	r22, r8
    2436:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__fixsfsi>
    243a:	8b 01       	movw	r16, r22
    243c:	c5 01       	movw	r24, r10
    243e:	b4 01       	movw	r22, r8
    2440:	90 58       	subi	r25, 0x80	; 128
    2442:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__fixsfsi>
        speed_a = -15;
    }

	r_speed = speed_a;
    2446:	10 93 f6 03 	sts	0x03F6, r17	; 0x8003f6 <r_speed+0x1>
    244a:	00 93 f5 03 	sts	0x03F5, r16	; 0x8003f5 <r_speed>
	l_speed = -speed_a;
    244e:	70 93 f8 03 	sts	0x03F8, r23	; 0x8003f8 <l_speed+0x1>
    2452:	60 93 f7 03 	sts	0x03F7, r22	; 0x8003f7 <l_speed>

    if (fabsf(error) > 25){
    2456:	c7 01       	movw	r24, r14
    2458:	b6 01       	movw	r22, r12
    245a:	9f 77       	andi	r25, 0x7F	; 127
    245c:	20 e0       	ldi	r18, 0x00	; 0
    245e:	30 e0       	ldi	r19, 0x00	; 0
    2460:	48 ec       	ldi	r20, 0xC8	; 200
    2462:	51 e4       	ldi	r21, 0x41	; 65
    2464:	0e 94 bd 4f 	call	0x9f7a	; 0x9f7a <__gesf2>
    2468:	18 16       	cp	r1, r24
    246a:	0c f0       	brlt	.+2      	; 0x246e <__stack+0x26f>
    246c:	8b c1       	rjmp	.+790    	; 0x2784 <__stack+0x585>
                        setLeftSpeed(speed);
                        setRightSpeed(speed-offset_rwheel);
						
						//comm_time_previous = getTime100MicroSec();
						if (!(angle_control(u, false, 5, filtered_theta))){
							NextState = angle;
    246e:	82 e0       	ldi	r24, 0x02	; 2
    2470:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <__data_end>
							theta = filtered_theta;
    2474:	40 92 af 02 	sts	0x02AF, r4	; 0x8002af <theta>
    2478:	50 92 b0 02 	sts	0x02B0, r5	; 0x8002b0 <theta+0x1>
    247c:	60 92 b1 02 	sts	0x02B1, r6	; 0x8002b1 <theta+0x2>
    2480:	70 92 b2 02 	sts	0x02B2, r7	; 0x8002b2 <theta+0x3>
    2484:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <__LOCK_REGION_LENGTH__+0x5e2>
				//control_time_previous = getTime100MicroSec();
                switch (NextState) {

                    case idle: {
                        // automatically move to next state -- eventually some kind of signal
                        updateRedLed(255);
    2488:	8f ef       	ldi	r24, 0xFF	; 255
    248a:	0e 94 0e 46 	call	0x8c1c	; 0x8c1c <updateRedLed>
                        updateGreenLed(0); //0
    248e:	80 e0       	ldi	r24, 0x00	; 0
    2490:	0e 94 22 46 	call	0x8c44	; 0x8c44 <updateGreenLed>
                        updateBlueLed(255);
    2494:	8f ef       	ldi	r24, 0xFF	; 255
    2496:	0e 94 36 46 	call	0x8c6c	; 0x8c6c <updateBlueLed>
                        setLeftSpeed(0);
    249a:	80 e0       	ldi	r24, 0x00	; 0
    249c:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <setLeftSpeed>
                        setRightSpeed(0);
    24a0:	80 e0       	ldi	r24, 0x00	; 0
    24a2:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <setRightSpeed>

						if(start_comm){
    24a6:	80 91 fd 03 	lds	r24, 0x03FD	; 0x8003fd <start_comm>
    24aa:	88 23       	and	r24, r24
    24ac:	11 f4       	brne	.+4      	; 0x24b2 <__stack+0x2b3>
    24ae:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <__LOCK_REGION_LENGTH__+0x5e2>
							if ((getTime100MicroSec() - demoStartTime) >= (PAUSE_2_SEC)) {
    24b2:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    24b6:	00 91 c4 02 	lds	r16, 0x02C4	; 0x8002c4 <demoStartTime>
    24ba:	10 91 c5 02 	lds	r17, 0x02C5	; 0x8002c5 <demoStartTime+0x1>
    24be:	20 91 c6 02 	lds	r18, 0x02C6	; 0x8002c6 <demoStartTime+0x2>
    24c2:	30 91 c7 02 	lds	r19, 0x02C7	; 0x8002c7 <demoStartTime+0x3>
    24c6:	dc 01       	movw	r26, r24
    24c8:	cb 01       	movw	r24, r22
    24ca:	80 1b       	sub	r24, r16
    24cc:	91 0b       	sbc	r25, r17
    24ce:	a2 0b       	sbc	r26, r18
    24d0:	b3 0b       	sbc	r27, r19
    24d2:	8e 31       	cpi	r24, 0x1E	; 30
    24d4:	9b 44       	sbci	r25, 0x4B	; 75
    24d6:	a1 05       	cpc	r26, r1
    24d8:	b1 05       	cpc	r27, r1
    24da:	10 f4       	brcc	.+4      	; 0x24e0 <__stack+0x2e1>
    24dc:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <__LOCK_REGION_LENGTH__+0x5e2>
	                            NextState = angle;
    24e0:	82 e0       	ldi	r24, 0x02	; 2
    24e2:	80 93 2e 02 	sts	0x022E, r24	; 0x80022e <__data_end>
								init_trigger = true;
    24e6:	41 e0       	ldi	r20, 0x01	; 1
    24e8:	c1 5c       	subi	r28, 0xC1	; 193
    24ea:	dc 4f       	sbci	r29, 0xFC	; 252
    24ec:	48 83       	st	Y, r20
    24ee:	cf 53       	subi	r28, 0x3F	; 63
    24f0:	d3 40       	sbci	r29, 0x03	; 3
    24f2:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <__LOCK_REGION_LENGTH__+0x5e2>

	                 case terminate:{
		                 //setLeftSpeed(0);
		                 //setRightSpeed(0);

		                 updateRedLed(0); //0
    24f6:	80 e0       	ldi	r24, 0x00	; 0
    24f8:	0e 94 0e 46 	call	0x8c1c	; 0x8c1c <updateRedLed>
		                 updateGreenLed(0); //0
    24fc:	80 e0       	ldi	r24, 0x00	; 0
    24fe:	0e 94 22 46 	call	0x8c44	; 0x8c44 <updateGreenLed>
		                 updateBlueLed(255);
    2502:	8f ef       	ldi	r24, 0xFF	; 255
    2504:	0e 94 36 46 	call	0x8c6c	; 0x8c6c <updateBlueLed>

	                 }break;
    2508:	0c 94 29 08 	jmp	0x1052	; 0x1052 <__EEPROM_REGION_LENGTH__+0x52>
				//	}
                //}

				init_time_previous = getTime100MicroSec();
                if(getTime100MicroSec()-period >= h | init_trigger) {
                    trigger_flag = false;
    250c:	c6 5c       	subi	r28, 0xC6	; 198
    250e:	dc 4f       	sbci	r29, 0xFC	; 252
    2510:	18 82       	st	Y, r1
    2512:	ca 53       	subi	r28, 0x3A	; 58
    2514:	d3 40       	sbci	r29, 0x03	; 3
    2516:	0c 94 a0 09 	jmp	0x1340	; 0x1340 <__EEPROM_REGION_LENGTH__+0x340>
    251a:	c5 01       	movw	r24, r10
    251c:	b4 01       	movw	r22, r8
    251e:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    2522:	c5 5d       	subi	r28, 0xD5	; 213
    2524:	dc 4f       	sbci	r29, 0xFC	; 252
    2526:	68 83       	st	Y, r22
    2528:	79 83       	std	Y+1, r23	; 0x01
    252a:	8a 83       	std	Y+2, r24	; 0x02
    252c:	9b 83       	std	Y+3, r25	; 0x03
    252e:	cb 52       	subi	r28, 0x2B	; 43
    2530:	d3 40       	sbci	r29, 0x03	; 3
    2532:	0c 94 e9 08 	jmp	0x11d2	; 0x11d2 <__EEPROM_REGION_LENGTH__+0x1d2>
    2536:	d0 2e       	mov	r13, r16
    2538:	c1 2e       	mov	r12, r17
    253a:	57 01       	movw	r10, r14
    253c:	d6 ce       	rjmp	.-596    	; 0x22ea <__stack+0xeb>

    speed_a = K*error;


    // limit speed
    if (speed_a > 15){
    253e:	61 ef       	ldi	r22, 0xF1	; 241
    2540:	7f ef       	ldi	r23, 0xFF	; 255
    2542:	0f e0       	ldi	r16, 0x0F	; 15
    2544:	10 e0       	ldi	r17, 0x00	; 0
    2546:	7f cf       	rjmp	.-258    	; 0x2446 <__stack+0x247>
    2548:	d0 2e       	mov	r13, r16
    254a:	c1 2e       	mov	r12, r17
    254c:	57 01       	movw	r10, r14
    254e:	a2 cd       	rjmp	.-1212   	; 0x2094 <__DATA_REGION_LENGTH__+0x94>
    2550:	a1 ef       	ldi	r26, 0xF1	; 241
    2552:	ba 2e       	mov	r11, r26
    2554:	8f ef       	ldi	r24, 0xFF	; 255
    2556:	0f e0       	ldi	r16, 0x0F	; 15
    2558:	10 e0       	ldi	r17, 0x00	; 0
    255a:	0c 94 0d 08 	jmp	0x101a	; 0x101a <__EEPROM_REGION_LENGTH__+0x1a>
    255e:	41 ef       	ldi	r20, 0xF1	; 241
    2560:	b4 2e       	mov	r11, r20
    2562:	8f ef       	ldi	r24, 0xFF	; 255
    2564:	0f e0       	ldi	r16, 0x0F	; 15
    2566:	10 e0       	ldi	r17, 0x00	; 0
    2568:	0c 94 d5 04 	jmp	0x9aa	; 0x9aa <__LOCK_REGION_LENGTH__+0x5aa>
    256c:	61 ef       	ldi	r22, 0xF1	; 241
    256e:	7f ef       	ldi	r23, 0xFF	; 255
    2570:	0f e0       	ldi	r16, 0x0F	; 15
    2572:	10 e0       	ldi	r17, 0x00	; 0
    2574:	3d ce       	rjmp	.-902    	; 0x21f0 <__DATA_REGION_LENGTH__+0x1f0>
	//angle_temp = error;
    //error = 0;
	
    if (error > 180){
        error -= 360;
    } else if (error < -180) {
    2576:	20 e0       	ldi	r18, 0x00	; 0
    2578:	30 e0       	ldi	r19, 0x00	; 0
    257a:	44 e3       	ldi	r20, 0x34	; 52
    257c:	53 ec       	ldi	r21, 0xC3	; 195
    257e:	c7 01       	movw	r24, r14
    2580:	b6 01       	movw	r22, r12
    2582:	0e 94 b9 4d 	call	0x9b72	; 0x9b72 <__cmpsf2>
    2586:	87 ff       	sbrs	r24, 7
    2588:	0c ce       	rjmp	.-1000   	; 0x21a2 <__DATA_REGION_LENGTH__+0x1a2>
        error += 360;
    258a:	20 e0       	ldi	r18, 0x00	; 0
    258c:	30 e0       	ldi	r19, 0x00	; 0
    258e:	44 eb       	ldi	r20, 0xB4	; 180
    2590:	53 e4       	ldi	r21, 0x43	; 67
    2592:	c7 01       	movw	r24, r14
    2594:	b6 01       	movw	r22, r12
    2596:	0e 94 db 4c 	call	0x99b6	; 0x99b6 <__addsf3>
    259a:	6b 01       	movw	r12, r22
    259c:	7c 01       	movw	r14, r24
    259e:	01 ce       	rjmp	.-1022   	; 0x21a2 <__DATA_REGION_LENGTH__+0x1a2>
	//angle_temp = error;
    //error = 0;
	
    if (error > 180){
        error -= 360;
    } else if (error < -180) {
    25a0:	20 e0       	ldi	r18, 0x00	; 0
    25a2:	30 e0       	ldi	r19, 0x00	; 0
    25a4:	44 e3       	ldi	r20, 0x34	; 52
    25a6:	53 ec       	ldi	r21, 0xC3	; 195
    25a8:	c7 01       	movw	r24, r14
    25aa:	b6 01       	movw	r22, r12
    25ac:	0e 94 b9 4d 	call	0x9b72	; 0x9b72 <__cmpsf2>
    25b0:	87 fd       	sbrc	r24, 7
    25b2:	02 c0       	rjmp	.+4      	; 0x25b8 <__stack+0x3b9>
    25b4:	0c 94 e1 07 	jmp	0xfc2	; 0xfc2 <__LOCK_REGION_LENGTH__+0xbc2>
        error += 360;
    25b8:	20 e0       	ldi	r18, 0x00	; 0
    25ba:	30 e0       	ldi	r19, 0x00	; 0
    25bc:	44 eb       	ldi	r20, 0xB4	; 180
    25be:	53 e4       	ldi	r21, 0x43	; 67
    25c0:	c7 01       	movw	r24, r14
    25c2:	b6 01       	movw	r22, r12
    25c4:	0e 94 db 4c 	call	0x99b6	; 0x99b6 <__addsf3>
    25c8:	6b 01       	movw	r12, r22
    25ca:	7c 01       	movw	r14, r24
    25cc:	0c 94 e1 07 	jmp	0xfc2	; 0xfc2 <__LOCK_REGION_LENGTH__+0xbc2>
	//angle_temp = error;
    //error = 0;
	
    if (error > 180){
        error -= 360;
    } else if (error < -180) {
    25d0:	20 e0       	ldi	r18, 0x00	; 0
    25d2:	30 e0       	ldi	r19, 0x00	; 0
    25d4:	44 e3       	ldi	r20, 0x34	; 52
    25d6:	53 ec       	ldi	r21, 0xC3	; 195
    25d8:	c7 01       	movw	r24, r14
    25da:	b6 01       	movw	r22, r12
    25dc:	0e 94 b9 4d 	call	0x9b72	; 0x9b72 <__cmpsf2>
    25e0:	87 fd       	sbrc	r24, 7
    25e2:	02 c0       	rjmp	.+4      	; 0x25e8 <__stack+0x3e9>
    25e4:	0c 94 a9 04 	jmp	0x952	; 0x952 <__LOCK_REGION_LENGTH__+0x552>
        error += 360;
    25e8:	20 e0       	ldi	r18, 0x00	; 0
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	44 eb       	ldi	r20, 0xB4	; 180
    25ee:	53 e4       	ldi	r21, 0x43	; 67
    25f0:	c7 01       	movw	r24, r14
    25f2:	b6 01       	movw	r22, r12
    25f4:	0e 94 db 4c 	call	0x99b6	; 0x99b6 <__addsf3>
    25f8:	6b 01       	movw	r12, r22
    25fa:	7c 01       	movw	r14, r24
    25fc:	0c 94 a9 04 	jmp	0x952	; 0x952 <__LOCK_REGION_LENGTH__+0x552>
	//angle_temp = error;
    //error = 0;
	
    if (error > 180){
        error -= 360;
    } else if (error < -180) {
    2600:	20 e0       	ldi	r18, 0x00	; 0
    2602:	30 e0       	ldi	r19, 0x00	; 0
    2604:	44 e3       	ldi	r20, 0x34	; 52
    2606:	53 ec       	ldi	r21, 0xC3	; 195
    2608:	c7 01       	movw	r24, r14
    260a:	b6 01       	movw	r22, r12
    260c:	0e 94 b9 4d 	call	0x9b72	; 0x9b72 <__cmpsf2>
    2610:	87 ff       	sbrs	r24, 7
    2612:	f2 ce       	rjmp	.-540    	; 0x23f8 <__stack+0x1f9>
        error += 360;
    2614:	20 e0       	ldi	r18, 0x00	; 0
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	44 eb       	ldi	r20, 0xB4	; 180
    261a:	53 e4       	ldi	r21, 0x43	; 67
    261c:	c7 01       	movw	r24, r14
    261e:	b6 01       	movw	r22, r12
    2620:	0e 94 db 4c 	call	0x99b6	; 0x99b6 <__addsf3>
    2624:	6b 01       	movw	r12, r22
    2626:	7c 01       	movw	r14, r24
    2628:	e7 ce       	rjmp	.-562    	; 0x23f8 <__stack+0x1f9>

    speed_a = K*error;


    // limit speed
    if (speed_a > 15){
    262a:	61 ef       	ldi	r22, 0xF1	; 241
    262c:	7f ef       	ldi	r23, 0xFF	; 255
    262e:	0f e0       	ldi	r16, 0x0F	; 15
    2630:	10 e0       	ldi	r17, 0x00	; 0
    2632:	cd c9       	rjmp	.-3174   	; 0x19ce <__EEPROM_REGION_LENGTH__+0x9ce>
	//angle_temp = error;
    //error = 0;
	
    if (error > 180){
        error -= 360;
    } else if (error < -180) {
    2634:	20 e0       	ldi	r18, 0x00	; 0
    2636:	30 e0       	ldi	r19, 0x00	; 0
    2638:	44 e3       	ldi	r20, 0x34	; 52
    263a:	53 ec       	ldi	r21, 0xC3	; 195
    263c:	c7 01       	movw	r24, r14
    263e:	b6 01       	movw	r22, r12
    2640:	0e 94 b9 4d 	call	0x9b72	; 0x9b72 <__cmpsf2>
    2644:	87 ff       	sbrs	r24, 7
    2646:	9c c9       	rjmp	.-3272   	; 0x1980 <__EEPROM_REGION_LENGTH__+0x980>
        error += 360;
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	44 eb       	ldi	r20, 0xB4	; 180
    264e:	53 e4       	ldi	r21, 0x43	; 67
    2650:	c7 01       	movw	r24, r14
    2652:	b6 01       	movw	r22, r12
    2654:	0e 94 db 4c 	call	0x99b6	; 0x99b6 <__addsf3>
    2658:	6b 01       	movw	r12, r22
    265a:	7c 01       	movw	r14, r24
    265c:	91 c9       	rjmp	.-3294   	; 0x1980 <__EEPROM_REGION_LENGTH__+0x980>
    265e:	d0 2e       	mov	r13, r16
    2660:	c1 2e       	mov	r12, r17
    2662:	57 01       	movw	r10, r14
    2664:	04 c9       	rjmp	.-3576   	; 0x186e <__EEPROM_REGION_LENGTH__+0x86e>

    speed_a = K*error;


    // limit speed
    if (speed_a > 15){
    2666:	71 ef       	ldi	r23, 0xF1	; 241
    2668:	b7 2e       	mov	r11, r23
    266a:	8f ef       	ldi	r24, 0xFF	; 255
    266c:	0f e0       	ldi	r16, 0x0F	; 15
    266e:	10 e0       	ldi	r17, 0x00	; 0
    2670:	ce ca       	rjmp	.-2660   	; 0x1c0e <__EEPROM_REGION_LENGTH__+0xc0e>
	//angle_temp = error;
    //error = 0;
	
    if (error > 180){
        error -= 360;
    } else if (error < -180) {
    2672:	20 e0       	ldi	r18, 0x00	; 0
    2674:	30 e0       	ldi	r19, 0x00	; 0
    2676:	44 e3       	ldi	r20, 0x34	; 52
    2678:	53 ec       	ldi	r21, 0xC3	; 195
    267a:	c7 01       	movw	r24, r14
    267c:	b6 01       	movw	r22, r12
    267e:	0e 94 b9 4d 	call	0x9b72	; 0x9b72 <__cmpsf2>
    2682:	87 ff       	sbrs	r24, 7
    2684:	9b ca       	rjmp	.-2762   	; 0x1bbc <__EEPROM_REGION_LENGTH__+0xbbc>
        error += 360;
    2686:	20 e0       	ldi	r18, 0x00	; 0
    2688:	30 e0       	ldi	r19, 0x00	; 0
    268a:	44 eb       	ldi	r20, 0xB4	; 180
    268c:	53 e4       	ldi	r21, 0x43	; 67
    268e:	c7 01       	movw	r24, r14
    2690:	b6 01       	movw	r22, r12
    2692:	0e 94 db 4c 	call	0x99b6	; 0x99b6 <__addsf3>
    2696:	6b 01       	movw	r12, r22
    2698:	7c 01       	movw	r14, r24
    269a:	90 ca       	rjmp	.-2784   	; 0x1bbc <__EEPROM_REGION_LENGTH__+0xbbc>
	                 }break;

	                 case straight: {

		                 if (!trigger_flag) {
			                 updateRedLed(255);
    269c:	8f ef       	ldi	r24, 0xFF	; 255
    269e:	0e 94 0e 46 	call	0x8c1c	; 0x8c1c <updateRedLed>
			                 updateGreenLed(255);
    26a2:	8f ef       	ldi	r24, 0xFF	; 255
    26a4:	0e 94 22 46 	call	0x8c44	; 0x8c44 <updateGreenLed>
			                 updateBlueLed(0); //0
    26a8:	80 e0       	ldi	r24, 0x00	; 0
    26aa:	0e 94 36 46 	call	0x8c6c	; 0x8c6c <updateBlueLed>
    26ae:	80 90 3f 02 	lds	r8, 0x023F	; 0x80023f <u.7157>
    26b2:	90 90 40 02 	lds	r9, 0x0240	; 0x800240 <u.7157+0x1>
    26b6:	a0 90 41 02 	lds	r10, 0x0241	; 0x800241 <u.7157+0x2>
    26ba:	b0 90 42 02 	lds	r11, 0x0242	; 0x800242 <u.7157+0x3>
    26be:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <u.7157+0x4>
    26c2:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <u.7157+0x5>
    26c6:	a0 91 45 02 	lds	r26, 0x0245	; 0x800245 <u.7157+0x6>
    26ca:	b0 91 46 02 	lds	r27, 0x0246	; 0x800246 <u.7157+0x7>
    26ce:	cd 5d       	subi	r28, 0xDD	; 221
    26d0:	dc 4f       	sbci	r29, 0xFC	; 252
    26d2:	88 83       	st	Y, r24
    26d4:	99 83       	std	Y+1, r25	; 0x01
    26d6:	aa 83       	std	Y+2, r26	; 0x02
    26d8:	bb 83       	std	Y+3, r27	; 0x03
    26da:	c3 52       	subi	r28, 0x23	; 35
    26dc:	d3 40       	sbci	r29, 0x03	; 3
    26de:	86 cc       	rjmp	.-1780   	; 0x1fec <__EEPROM_REGION_LENGTH__+0xfec>
	                 }break;

	                 case angle:{

		                 if (!trigger_flag) {
			                 updateRedLed(0); //0
    26e0:	80 e0       	ldi	r24, 0x00	; 0
    26e2:	0e 94 0e 46 	call	0x8c1c	; 0x8c1c <updateRedLed>
			                 updateGreenLed(255);
    26e6:	8f ef       	ldi	r24, 0xFF	; 255
    26e8:	0e 94 22 46 	call	0x8c44	; 0x8c44 <updateGreenLed>
			                 updateBlueLed(255);
    26ec:	8f ef       	ldi	r24, 0xFF	; 255
    26ee:	0e 94 36 46 	call	0x8c6c	; 0x8c6c <updateBlueLed>
    26f2:	80 90 3f 02 	lds	r8, 0x023F	; 0x80023f <u.7157>
    26f6:	90 90 40 02 	lds	r9, 0x0240	; 0x800240 <u.7157+0x1>
    26fa:	a0 90 41 02 	lds	r10, 0x0241	; 0x800241 <u.7157+0x2>
    26fe:	b0 90 42 02 	lds	r11, 0x0242	; 0x800242 <u.7157+0x3>
    2702:	20 91 43 02 	lds	r18, 0x0243	; 0x800243 <u.7157+0x4>
    2706:	30 91 44 02 	lds	r19, 0x0244	; 0x800244 <u.7157+0x5>
    270a:	40 91 45 02 	lds	r20, 0x0245	; 0x800245 <u.7157+0x6>
    270e:	50 91 46 02 	lds	r21, 0x0246	; 0x800246 <u.7157+0x7>
    2712:	cd 5d       	subi	r28, 0xDD	; 221
    2714:	dc 4f       	sbci	r29, 0xFC	; 252
    2716:	28 83       	st	Y, r18
    2718:	39 83       	std	Y+1, r19	; 0x01
    271a:	4a 83       	std	Y+2, r20	; 0x02
    271c:	5b 83       	std	Y+3, r21	; 0x03
    271e:	c3 52       	subi	r28, 0x23	; 35
    2720:	d3 40       	sbci	r29, 0x03	; 3
    2722:	0c 94 8f 07 	jmp	0xf1e	; 0xf1e <__LOCK_REGION_LENGTH__+0xb1e>
    }else{
        if (check){
            //setLeftSpeed( 0);
            //setRightSpeed( 0);
        }
		angle_state = 0;
    2726:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <angle_state>
		start_state0 = getTime100MicroSec();
    272a:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    272e:	60 93 48 02 	sts	0x0248, r22	; 0x800248 <start_state0>
    2732:	70 93 49 02 	sts	0x0249, r23	; 0x800249 <start_state0+0x1>
    2736:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <start_state0+0x2>
    273a:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <start_state0+0x3>
    273e:	0c 94 29 08 	jmp	0x1052	; 0x1052 <__EEPROM_REGION_LENGTH__+0x52>
    }else{
        if (check){
            //setLeftSpeed( 0);
            //setRightSpeed( 0);
        }
		angle_state = 0;
    2742:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <angle_state>
		start_state0 = getTime100MicroSec();
    2746:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    274a:	60 93 48 02 	sts	0x0248, r22	; 0x800248 <start_state0>
    274e:	70 93 49 02 	sts	0x0249, r23	; 0x800249 <start_state0+0x1>
    2752:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <start_state0+0x2>
    2756:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <start_state0+0x3>
                            updateBlueLed(255);
                        }

						//comm_time_previous = getTime100MicroSec();
                        if (angle_control(u, true, 5, theta)){
                            NextState = wait;
    275a:	37 e0       	ldi	r19, 0x07	; 7
    275c:	30 93 2e 02 	sts	0x022E, r19	; 0x80022e <__data_end>
							wait_time_previous = getTime100MicroSec();
    2760:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    2764:	c4 5b       	subi	r28, 0xB4	; 180
    2766:	dc 4f       	sbci	r29, 0xFC	; 252
    2768:	68 83       	st	Y, r22
    276a:	79 83       	std	Y+1, r23	; 0x01
    276c:	8a 83       	std	Y+2, r24	; 0x02
    276e:	9b 83       	std	Y+3, r25	; 0x03
    2770:	cc 54       	subi	r28, 0x4C	; 76
    2772:	d3 40       	sbci	r29, 0x03	; 3

                            setLeftSpeed(10);
    2774:	8a e0       	ldi	r24, 0x0A	; 10
    2776:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <setLeftSpeed>
                            setRightSpeed(10);
    277a:	8a e0       	ldi	r24, 0x0A	; 10
    277c:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <setRightSpeed>
    2780:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <__LOCK_REGION_LENGTH__+0x5e2>
    }else{
        if (check){
            //setLeftSpeed( 0);
            //setRightSpeed( 0);
        }
		angle_state = 0;
    2784:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <angle_state>
		start_state0 = getTime100MicroSec();
    2788:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    278c:	60 93 48 02 	sts	0x0248, r22	; 0x800248 <start_state0>
    2790:	70 93 49 02 	sts	0x0249, r23	; 0x800249 <start_state0+0x1>
    2794:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <start_state0+0x2>
    2798:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <start_state0+0x3>
    279c:	0c 94 f1 04 	jmp	0x9e2	; 0x9e2 <__LOCK_REGION_LENGTH__+0x5e2>
    }else{
        if (check){
            //setLeftSpeed( 0);
            //setRightSpeed( 0);
        }
		angle_state = 0;
    27a0:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <angle_state>
		start_state0 = getTime100MicroSec();
    27a4:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    27a8:	60 93 48 02 	sts	0x0248, r22	; 0x800248 <start_state0>
    27ac:	70 93 49 02 	sts	0x0249, r23	; 0x800249 <start_state0+0x1>
    27b0:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <start_state0+0x2>
    27b4:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <start_state0+0x3>
			                 updateBlueLed(255);
		                 }

		                 //comm_time_previous = getTime100MicroSec();
		                 if (angle_control(u, true, 5, theta)){
			                 NextState = wait;
    27b8:	37 e0       	ldi	r19, 0x07	; 7
    27ba:	30 93 2e 02 	sts	0x022E, r19	; 0x80022e <__data_end>
			                 wait_time_previous = getTime100MicroSec();
    27be:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    27c2:	c4 5b       	subi	r28, 0xB4	; 180
    27c4:	dc 4f       	sbci	r29, 0xFC	; 252
    27c6:	68 83       	st	Y, r22
    27c8:	79 83       	std	Y+1, r23	; 0x01
    27ca:	8a 83       	std	Y+2, r24	; 0x02
    27cc:	9b 83       	std	Y+3, r25	; 0x03
    27ce:	cc 54       	subi	r28, 0x4C	; 76
    27d0:	d3 40       	sbci	r29, 0x03	; 3

			                 setLeftSpeed(10);
    27d2:	8a e0       	ldi	r24, 0x0A	; 10
    27d4:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <setLeftSpeed>
			                 setRightSpeed(10);
    27d8:	8a e0       	ldi	r24, 0x0A	; 10
    27da:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <setRightSpeed>
    27de:	0c 94 29 08 	jmp	0x1052	; 0x1052 <__EEPROM_REGION_LENGTH__+0x52>
                    }break;

                    case angle:{

                        if (!trigger_flag) {
                            updateRedLed(0); //0
    27e2:	80 e0       	ldi	r24, 0x00	; 0
    27e4:	0e 94 0e 46 	call	0x8c1c	; 0x8c1c <updateRedLed>
                            updateGreenLed(255);
    27e8:	8f ef       	ldi	r24, 0xFF	; 255
    27ea:	0e 94 22 46 	call	0x8c44	; 0x8c44 <updateGreenLed>
                            updateBlueLed(255);
    27ee:	8f ef       	ldi	r24, 0xFF	; 255
    27f0:	0e 94 36 46 	call	0x8c6c	; 0x8c6c <updateBlueLed>
    27f4:	80 90 3f 02 	lds	r8, 0x023F	; 0x80023f <u.7157>
    27f8:	90 90 40 02 	lds	r9, 0x0240	; 0x800240 <u.7157+0x1>
    27fc:	a0 90 41 02 	lds	r10, 0x0241	; 0x800241 <u.7157+0x2>
    2800:	b0 90 42 02 	lds	r11, 0x0242	; 0x800242 <u.7157+0x3>
    2804:	20 91 43 02 	lds	r18, 0x0243	; 0x800243 <u.7157+0x4>
    2808:	30 91 44 02 	lds	r19, 0x0244	; 0x800244 <u.7157+0x5>
    280c:	40 91 45 02 	lds	r20, 0x0245	; 0x800245 <u.7157+0x6>
    2810:	50 91 46 02 	lds	r21, 0x0246	; 0x800246 <u.7157+0x7>
    2814:	cd 5d       	subi	r28, 0xDD	; 221
    2816:	dc 4f       	sbci	r29, 0xFC	; 252
    2818:	28 83       	st	Y, r18
    281a:	39 83       	std	Y+1, r19	; 0x01
    281c:	4a 83       	std	Y+2, r20	; 0x02
    281e:	5b 83       	std	Y+3, r21	; 0x03
    2820:	c3 52       	subi	r28, 0x23	; 35
    2822:	d3 40       	sbci	r29, 0x03	; 3
    2824:	0c 94 57 04 	jmp	0x8ae	; 0x8ae <__LOCK_REGION_LENGTH__+0x4ae>
                    }break;

                    case straight: {

                        if (!trigger_flag) {
                            updateRedLed(255);
    2828:	8f ef       	ldi	r24, 0xFF	; 255
    282a:	0e 94 0e 46 	call	0x8c1c	; 0x8c1c <updateRedLed>
                            updateGreenLed(255);
    282e:	8f ef       	ldi	r24, 0xFF	; 255
    2830:	0e 94 22 46 	call	0x8c44	; 0x8c44 <updateGreenLed>
                            updateBlueLed(0); //0
    2834:	80 e0       	ldi	r24, 0x00	; 0
    2836:	0e 94 36 46 	call	0x8c6c	; 0x8c6c <updateBlueLed>
    283a:	80 90 3f 02 	lds	r8, 0x023F	; 0x80023f <u.7157>
    283e:	90 90 40 02 	lds	r9, 0x0240	; 0x800240 <u.7157+0x1>
    2842:	a0 90 41 02 	lds	r10, 0x0241	; 0x800241 <u.7157+0x2>
    2846:	b0 90 42 02 	lds	r11, 0x0242	; 0x800242 <u.7157+0x3>
    284a:	80 91 43 02 	lds	r24, 0x0243	; 0x800243 <u.7157+0x4>
    284e:	90 91 44 02 	lds	r25, 0x0244	; 0x800244 <u.7157+0x5>
    2852:	a0 91 45 02 	lds	r26, 0x0245	; 0x800245 <u.7157+0x6>
    2856:	b0 91 46 02 	lds	r27, 0x0246	; 0x800246 <u.7157+0x7>
    285a:	cd 5d       	subi	r28, 0xDD	; 221
    285c:	dc 4f       	sbci	r29, 0xFC	; 252
    285e:	88 83       	st	Y, r24
    2860:	99 83       	std	Y+1, r25	; 0x01
    2862:	aa 83       	std	Y+2, r26	; 0x02
    2864:	bb 83       	std	Y+3, r27	; 0x03
    2866:	c3 52       	subi	r28, 0x23	; 35
    2868:	d3 40       	sbci	r29, 0x03	; 3
    286a:	eb cc       	rjmp	.-1578   	; 0x2242 <__stack+0x43>
    }else{
        if (check){
            //setLeftSpeed( 0);
            //setRightSpeed( 0);
        }
		angle_state = 0;
    286c:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <angle_state>
		start_state0 = getTime100MicroSec();
    2870:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    2874:	60 93 48 02 	sts	0x0248, r22	; 0x800248 <start_state0>
    2878:	70 93 49 02 	sts	0x0249, r23	; 0x800249 <start_state0+0x1>
    287c:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <start_state0+0x2>
    2880:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <start_state0+0x3>
    2884:	c3 c8       	rjmp	.-3706   	; 0x1a0c <__EEPROM_REGION_LENGTH__+0xa0c>


    // limit speed
    if (speed_a > 15){
        speed_a = 15;
    }else if (speed_a < -15){
    2886:	6f e0       	ldi	r22, 0x0F	; 15
    2888:	70 e0       	ldi	r23, 0x00	; 0
    288a:	01 ef       	ldi	r16, 0xF1	; 241
    288c:	1f ef       	ldi	r17, 0xFF	; 255
    288e:	db cd       	rjmp	.-1098   	; 0x2446 <__stack+0x247>
    2890:	ff e0       	ldi	r31, 0x0F	; 15
    2892:	bf 2e       	mov	r11, r31
    2894:	80 e0       	ldi	r24, 0x00	; 0
    2896:	01 ef       	ldi	r16, 0xF1	; 241
    2898:	1f ef       	ldi	r17, 0xFF	; 255
    289a:	0c 94 0d 08 	jmp	0x101a	; 0x101a <__EEPROM_REGION_LENGTH__+0x1a>
    289e:	6f e0       	ldi	r22, 0x0F	; 15
    28a0:	70 e0       	ldi	r23, 0x00	; 0
    28a2:	01 ef       	ldi	r16, 0xF1	; 241
    28a4:	1f ef       	ldi	r17, 0xFF	; 255
    28a6:	a4 cc       	rjmp	.-1720   	; 0x21f0 <__DATA_REGION_LENGTH__+0x1f0>
    28a8:	3f e0       	ldi	r19, 0x0F	; 15
    28aa:	b3 2e       	mov	r11, r19
    28ac:	80 e0       	ldi	r24, 0x00	; 0
    28ae:	01 ef       	ldi	r16, 0xF1	; 241
    28b0:	1f ef       	ldi	r17, 0xFF	; 255
    28b2:	0c 94 d5 04 	jmp	0x9aa	; 0x9aa <__LOCK_REGION_LENGTH__+0x5aa>
						setRightSpeed(0);
					
						wait_time = getTime100MicroSec() - wait_time_previous;
						
						if (wait_time > PAUSE_750_MSEC){
							NextState = straight;
    28b6:	43 e0       	ldi	r20, 0x03	; 3
    28b8:	40 93 2e 02 	sts	0x022E, r20	; 0x80022e <__data_end>
							straight_time_previous = getTime100MicroSec();
    28bc:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
				xPos_fixed = position[0];
				yPos_fixed = position[1];

				// controller
				//control_time_previous = getTime100MicroSec();
                u = da_control(position, x_ref, id);
    28c0:	4f e2       	ldi	r20, 0x2F	; 47
    28c2:	64 2e       	mov	r6, r20
    28c4:	42 e0       	ldi	r20, 0x02	; 2
    28c6:	74 2e       	mov	r7, r20
    28c8:	0c 94 2e 06 	jmp	0xc5c	; 0xc5c <__LOCK_REGION_LENGTH__+0x85c>
                    }break;
					
                    case angle:{

                        if (!trigger_flag) {
                            updateRedLed(0); //0
    28cc:	80 e0       	ldi	r24, 0x00	; 0
    28ce:	0e 94 0e 46 	call	0x8c1c	; 0x8c1c <updateRedLed>
                            updateGreenLed(255);
    28d2:	8f ef       	ldi	r24, 0xFF	; 255
    28d4:	0e 94 22 46 	call	0x8c44	; 0x8c44 <updateGreenLed>
                            updateBlueLed(255);
    28d8:	8f ef       	ldi	r24, 0xFF	; 255
    28da:	0e 94 36 46 	call	0x8c6c	; 0x8c6c <updateBlueLed>
    28de:	80 90 2f 02 	lds	r8, 0x022F	; 0x80022f <u.7190>
    28e2:	90 90 30 02 	lds	r9, 0x0230	; 0x800230 <u.7190+0x1>
    28e6:	a0 90 31 02 	lds	r10, 0x0231	; 0x800231 <u.7190+0x2>
    28ea:	b0 90 32 02 	lds	r11, 0x0232	; 0x800232 <u.7190+0x3>
    28ee:	c0 90 33 02 	lds	r12, 0x0233	; 0x800233 <u.7190+0x4>
    28f2:	d0 90 34 02 	lds	r13, 0x0234	; 0x800234 <u.7190+0x5>
    28f6:	e0 90 35 02 	lds	r14, 0x0235	; 0x800235 <u.7190+0x6>
    28fa:	f0 90 36 02 	lds	r15, 0x0236	; 0x800236 <u.7190+0x7>
    28fe:	13 c9       	rjmp	.-3546   	; 0x1b26 <__EEPROM_REGION_LENGTH__+0xb26>
    }else{
        if (check){
            //setLeftSpeed( 0);
            //setRightSpeed( 0);
        }
		angle_state = 0;
    2900:	10 92 47 02 	sts	0x0247, r1	; 0x800247 <angle_state>
		start_state0 = getTime100MicroSec();
    2904:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    2908:	60 93 48 02 	sts	0x0248, r22	; 0x800248 <start_state0>
    290c:	70 93 49 02 	sts	0x0249, r23	; 0x800249 <start_state0+0x1>
    2910:	80 93 4a 02 	sts	0x024A, r24	; 0x80024a <start_state0+0x2>
    2914:	90 93 4b 02 	sts	0x024B, r25	; 0x80024b <start_state0+0x3>
                            updateBlueLed(255);
                        }

						//comm_time_previous = getTime100MicroSec();
                        if (angle_control(u, true, 5, theta)){
                            NextState = wait;
    2918:	57 e0       	ldi	r21, 0x07	; 7
    291a:	50 93 2e 02 	sts	0x022E, r21	; 0x80022e <__data_end>
							wait_time_previous = getTime100MicroSec();
    291e:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    2922:	c4 5b       	subi	r28, 0xB4	; 180
    2924:	dc 4f       	sbci	r29, 0xFC	; 252
    2926:	68 83       	st	Y, r22
    2928:	79 83       	std	Y+1, r23	; 0x01
    292a:	8a 83       	std	Y+2, r24	; 0x02
    292c:	9b 83       	std	Y+3, r25	; 0x03
    292e:	cc 54       	subi	r28, 0x4C	; 76
    2930:	d3 40       	sbci	r29, 0x03	; 3

                            setLeftSpeed(0);
    2932:	80 e0       	ldi	r24, 0x00	; 0
    2934:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <setLeftSpeed>
                            setRightSpeed(0);
    2938:	80 e0       	ldi	r24, 0x00	; 0
    293a:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <setRightSpeed>
    293e:	82 c9       	rjmp	.-3324   	; 0x1c44 <__EEPROM_REGION_LENGTH__+0xc44>


    // limit speed
    if (speed_a > 15){
        speed_a = 15;
    }else if (speed_a < -15){
    2940:	6f e0       	ldi	r22, 0x0F	; 15
    2942:	70 e0       	ldi	r23, 0x00	; 0
    2944:	01 ef       	ldi	r16, 0xF1	; 241
    2946:	1f ef       	ldi	r17, 0xFF	; 255
    2948:	42 c8       	rjmp	.-3964   	; 0x19ce <__EEPROM_REGION_LENGTH__+0x9ce>
    294a:	6f e0       	ldi	r22, 0x0F	; 15
    294c:	b6 2e       	mov	r11, r22
    294e:	80 e0       	ldi	r24, 0x00	; 0
    2950:	01 ef       	ldi	r16, 0xF1	; 241
    2952:	1f ef       	ldi	r17, 0xFF	; 255
    2954:	5c c9       	rjmp	.-3400   	; 0x1c0e <__EEPROM_REGION_LENGTH__+0xc0e>
    static float u[2];

    u[0] = 0;
    u[1] = 0;

    for(int i=0;i<ROBOTS;i++){
    2956:	cd 5d       	subi	r28, 0xDD	; 221
    2958:	dc 4f       	sbci	r29, 0xFC	; 252
    295a:	18 82       	st	Y, r1
    295c:	19 82       	std	Y+1, r1	; 0x01
    295e:	1a 82       	std	Y+2, r1	; 0x02
    2960:	1b 82       	std	Y+3, r1	; 0x03
    2962:	c3 52       	subi	r28, 0x23	; 35
    2964:	d3 40       	sbci	r29, 0x03	; 3
    2966:	81 2c       	mov	r8, r1
    2968:	91 2c       	mov	r9, r1
    296a:	54 01       	movw	r10, r8
    296c:	0c 94 77 07 	jmp	0xeee	; 0xeee <__LOCK_REGION_LENGTH__+0xaee>
    2970:	cd 5d       	subi	r28, 0xDD	; 221
    2972:	dc 4f       	sbci	r29, 0xFC	; 252
    2974:	18 82       	st	Y, r1
    2976:	19 82       	std	Y+1, r1	; 0x01
    2978:	1a 82       	std	Y+2, r1	; 0x02
    297a:	1b 82       	std	Y+3, r1	; 0x03
    297c:	c3 52       	subi	r28, 0x23	; 35
    297e:	d3 40       	sbci	r29, 0x03	; 3
    2980:	81 2c       	mov	r8, r1
    2982:	91 2c       	mov	r9, r1
    2984:	54 01       	movw	r10, r8
    2986:	0c 94 3e 04 	jmp	0x87c	; 0x87c <__LOCK_REGION_LENGTH__+0x47c>
    float u_petc= 0;

    u[0] = 0;
    u[1] = 0;

    for(int i=0;i<ROBOTS;i++){
    298a:	c5 5d       	subi	r28, 0xD5	; 213
    298c:	dc 4f       	sbci	r29, 0xFC	; 252
    298e:	18 82       	st	Y, r1
    2990:	19 82       	std	Y+1, r1	; 0x01
    2992:	1a 82       	std	Y+2, r1	; 0x02
    2994:	1b 82       	std	Y+3, r1	; 0x03
    2996:	cb 52       	subi	r28, 0x2B	; 43
    2998:	d3 40       	sbci	r29, 0x03	; 3
    299a:	0c 94 e9 08 	jmp	0x11d2	; 0x11d2 <__EEPROM_REGION_LENGTH__+0x1d2>
                    }break;

                    case compute_sum:

                        // compute average position
                        for (i=0; i<ROBOTS; i++){
    299e:	c1 2c       	mov	r12, r1
    29a0:	d1 2c       	mov	r13, r1
    29a2:	76 01       	movw	r14, r12
    29a4:	cc 5a       	subi	r28, 0xAC	; 172
    29a6:	dc 4f       	sbci	r29, 0xFC	; 252
    29a8:	68 81       	ld	r22, Y
    29aa:	79 81       	ldd	r23, Y+1	; 0x01
    29ac:	8a 81       	ldd	r24, Y+2	; 0x02
    29ae:	9b 81       	ldd	r25, Y+3	; 0x03
    29b0:	c4 55       	subi	r28, 0x54	; 84
    29b2:	d3 40       	sbci	r29, 0x03	; 3
    29b4:	0c 94 1a 0b 	jmp	0x1634	; 0x1634 <__EEPROM_REGION_LENGTH__+0x634>

000029b8 <initSPI>:
}

void closeSPI() {

	SPCR = 0x00;
	SPSR = 0x00;
    29b8:	84 b1       	in	r24, 0x04	; 4
    29ba:	80 7f       	andi	r24, 0xF0	; 240
    29bc:	84 b9       	out	0x04, r24	; 4
    29be:	84 b1       	in	r24, 0x04	; 4
    29c0:	87 60       	ori	r24, 0x07	; 7
    29c2:	84 b9       	out	0x04, r24	; 4
    29c4:	80 e5       	ldi	r24, 0x50	; 80
    29c6:	8c bd       	out	0x2c, r24	; 44
    29c8:	8d b5       	in	r24, 0x2d	; 45
    29ca:	81 60       	ori	r24, 0x01	; 1
    29cc:	8d bd       	out	0x2d, r24	; 45
    29ce:	08 95       	ret

000029d0 <SPI_ReadWrite_Block>:
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    29d0:	44 23       	and	r20, r20
    29d2:	f9 f0       	breq	.+62     	; 0x2a12 <SPI_ReadWrite_Block+0x42>
    29d4:	fc 01       	movw	r30, r24
    29d6:	db 01       	movw	r26, r22
    29d8:	41 50       	subi	r20, 0x01	; 1
    29da:	24 2f       	mov	r18, r20
    29dc:	30 e0       	ldi	r19, 0x00	; 0
    29de:	2f 5f       	subi	r18, 0xFF	; 255
    29e0:	3f 4f       	sbci	r19, 0xFF	; 255
    29e2:	28 0f       	add	r18, r24
    29e4:	39 1f       	adc	r19, r25
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
    29e6:	41 e0       	ldi	r20, 0x01	; 1
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
    29e8:	81 91       	ld	r24, Z+
    29ea:	8e bd       	out	0x2e, r24	; 46
#define SPI_SS PORTB0	// SS pin (Slave Select)

// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
    29ec:	80 e0       	ldi	r24, 0x00	; 0
    29ee:	90 e0       	ldi	r25, 0x00	; 0
	while (1) {
		timeout++;
    29f0:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
    29f2:	80 31       	cpi	r24, 0x10	; 16
    29f4:	57 e2       	ldi	r21, 0x27	; 39
    29f6:	95 07       	cpc	r25, r21
    29f8:	68 f4       	brcc	.+26     	; 0x2a14 <SPI_ReadWrite_Block+0x44>
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    29fa:	0d b4       	in	r0, 0x2d	; 45
    29fc:	07 fe       	sbrs	r0, 7
    29fe:	f8 cf       	rjmp	.-16     	; 0x29f0 <SPI_ReadWrite_Block+0x20>
void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
    2a00:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <spiCommError>
    2a04:	81 11       	cpse	r24, r1
    2a06:	05 c0       	rjmp	.+10     	; 0x2a12 <SPI_ReadWrite_Block+0x42>
			return;
		  }
          buffer[i] = SPDR;
    2a08:	8e b5       	in	r24, 0x2e	; 46
    2a0a:	8d 93       	st	X+, r24
	SPSR = 0x00;
}

void SPI_ReadWrite_Block(uint8_t* data, uint8_t* buffer, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    2a0c:	e2 17       	cp	r30, r18
    2a0e:	f3 07       	cpc	r31, r19
    2a10:	59 f7       	brne	.-42     	; 0x29e8 <SPI_ReadWrite_Block+0x18>
    2a12:	08 95       	ret
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
    2a14:	40 93 fb 02 	sts	0x02FB, r20	; 0x8002fb <spiCommError>
		}
	
		if(SPSR & _BV(SPIF)) {
    2a18:	0d b4       	in	r0, 0x2d	; 45
    2a1a:	07 fe       	sbrs	r0, 7
    2a1c:	e9 cf       	rjmp	.-46     	; 0x29f0 <SPI_ReadWrite_Block+0x20>
    2a1e:	08 95       	ret

00002a20 <SPI_Write_Block>:
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    2a20:	66 23       	and	r22, r22
    2a22:	e1 f0       	breq	.+56     	; 0x2a5c <SPI_Write_Block+0x3c>
    2a24:	fc 01       	movw	r30, r24
    2a26:	61 50       	subi	r22, 0x01	; 1
    2a28:	26 2f       	mov	r18, r22
    2a2a:	30 e0       	ldi	r19, 0x00	; 0
    2a2c:	2f 5f       	subi	r18, 0xFF	; 255
    2a2e:	3f 4f       	sbci	r19, 0xFF	; 255
    2a30:	28 0f       	add	r18, r24
    2a32:	39 1f       	adc	r19, r25
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
    2a34:	41 e0       	ldi	r20, 0x01	; 1
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
    2a36:	81 91       	ld	r24, Z+
    2a38:	8e bd       	out	0x2e, r24	; 46
#define SPI_SS PORTB0	// SS pin (Slave Select)

// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
    2a3a:	80 e0       	ldi	r24, 0x00	; 0
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
	while (1) {
		timeout++;
    2a3e:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
    2a40:	80 31       	cpi	r24, 0x10	; 16
    2a42:	57 e2       	ldi	r21, 0x27	; 39
    2a44:	95 07       	cpc	r25, r21
    2a46:	58 f4       	brcc	.+22     	; 0x2a5e <SPI_Write_Block+0x3e>
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    2a48:	0d b4       	in	r0, 0x2d	; 45
    2a4a:	07 fe       	sbrs	r0, 7
    2a4c:	f8 cf       	rjmp	.-16     	; 0x2a3e <SPI_Write_Block+0x1e>
void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
          SPDR = data[i];
          SPI_WAIT();
		  if(spiCommError) {
    2a4e:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <spiCommError>
    2a52:	81 11       	cpse	r24, r1
    2a54:	03 c0       	rjmp	.+6      	; 0x2a5c <SPI_Write_Block+0x3c>
    }
}

void SPI_Write_Block(uint8_t* data, uint8_t len) {
    uint8_t i;
    for (i = 0; i < len; i++) {
    2a56:	e2 17       	cp	r30, r18
    2a58:	f3 07       	cpc	r31, r19
    2a5a:	69 f7       	brne	.-38     	; 0x2a36 <SPI_Write_Block+0x16>
    2a5c:	08 95       	ret
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
    2a5e:	40 93 fb 02 	sts	0x02FB, r20	; 0x8002fb <spiCommError>
		}
	
		if(SPSR & _BV(SPIF)) {
    2a62:	0d b4       	in	r0, 0x2d	; 45
    2a64:	07 fe       	sbrs	r0, 7
    2a66:	eb cf       	rjmp	.-42     	; 0x2a3e <SPI_Write_Block+0x1e>
    2a68:	08 95       	ret

00002a6a <SPI_Write_Byte>:
    }

}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    2a6a:	8e bd       	out	0x2e, r24	; 46
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    2a6c:	81 e0       	ldi	r24, 0x01	; 1
    2a6e:	90 e0       	ldi	r25, 0x00	; 0
		if(timeout>=10000) {
			spiCommError = 1;
    2a70:	21 e0       	ldi	r18, 0x01	; 1
    2a72:	05 c0       	rjmp	.+10     	; 0x2a7e <SPI_Write_Byte+0x14>
// wait for an SPI read/write operation to complete
//#define SPI_WAIT()              while ((SPSR & _BV(SPIF)) == 0);
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
    2a74:	01 96       	adiw	r24, 0x01	; 1
		if(timeout>=10000) {
    2a76:	80 31       	cpi	r24, 0x10	; 16
    2a78:	37 e2       	ldi	r19, 0x27	; 39
    2a7a:	93 07       	cpc	r25, r19
    2a7c:	28 f4       	brcc	.+10     	; 0x2a88 <SPI_Write_Byte+0x1e>
			spiCommError = 1;
		}
	
		if(SPSR & _BV(SPIF)) {
    2a7e:	0d b4       	in	r0, 0x2d	; 45
    2a80:	07 fe       	sbrs	r0, 7
    2a82:	f8 cf       	rjmp	.-16     	; 0x2a74 <SPI_Write_Byte+0xa>
}

uint8_t SPI_Write_Byte(uint8_t byte) {
    SPDR = byte;
    SPI_WAIT();
    return SPDR;
    2a84:	8e b5       	in	r24, 0x2e	; 46
}
    2a86:	08 95       	ret
void SPI_WAIT() {
	unsigned int timeout=0;
	while (1) {
		timeout++;
		if(timeout>=10000) {
			spiCommError = 1;
    2a88:	20 93 fb 02 	sts	0x02FB, r18	; 0x8002fb <spiCommError>
    2a8c:	f8 cf       	rjmp	.-16     	; 0x2a7e <SPI_Write_Byte+0x14>

00002a8e <mirf_config>:

void flushTxFifo() {

    mirf_CSN_lo;
    SPI_Write_Byte(FLUSH_TX);
    mirf_CSN_hi;
    2a8e:	cf 93       	push	r28
    2a90:	df 93       	push	r29
    2a92:	00 d0       	rcall	.+0      	; 0x2a94 <mirf_config+0x6>
    2a94:	cd b7       	in	r28, 0x3d	; 61
    2a96:	de b7       	in	r29, 0x3e	; 62
    2a98:	28 98       	cbi	0x05, 0	; 5
    2a9a:	80 e2       	ldi	r24, 0x20	; 32
    2a9c:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <SPI_Write_Byte>
    2aa0:	8d e0       	ldi	r24, 0x0D	; 13
    2aa2:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <SPI_Write_Byte>
    2aa6:	28 9a       	sbi	0x05, 0	; 5
    2aa8:	28 98       	cbi	0x05, 0	; 5
    2aaa:	83 e2       	ldi	r24, 0x23	; 35
    2aac:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <SPI_Write_Byte>
    2ab0:	81 e0       	ldi	r24, 0x01	; 1
    2ab2:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <SPI_Write_Byte>
    2ab6:	28 9a       	sbi	0x05, 0	; 5
    2ab8:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <rfAddress>
    2abc:	90 91 fe 02 	lds	r25, 0x02FE	; 0x8002fe <rfAddress+0x1>
    2ac0:	99 83       	std	Y+1, r25	; 0x01
    2ac2:	8a 83       	std	Y+2, r24	; 0x02
    2ac4:	1b 82       	std	Y+3, r1	; 0x03
    2ac6:	28 98       	cbi	0x05, 0	; 5
    2ac8:	80 e3       	ldi	r24, 0x30	; 48
    2aca:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <SPI_Write_Byte>
    2ace:	63 e0       	ldi	r22, 0x03	; 3
    2ad0:	ce 01       	movw	r24, r28
    2ad2:	01 96       	adiw	r24, 0x01	; 1
    2ad4:	0e 94 10 15 	call	0x2a20	; 0x2a20 <SPI_Write_Block>
    2ad8:	28 9a       	sbi	0x05, 0	; 5
    2ada:	28 98       	cbi	0x05, 0	; 5
    2adc:	8a e2       	ldi	r24, 0x2A	; 42
    2ade:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <SPI_Write_Byte>
    2ae2:	63 e0       	ldi	r22, 0x03	; 3
    2ae4:	ce 01       	movw	r24, r28
    2ae6:	01 96       	adiw	r24, 0x01	; 1
    2ae8:	0e 94 10 15 	call	0x2a20	; 0x2a20 <SPI_Write_Block>
    2aec:	28 9a       	sbi	0x05, 0	; 5
    2aee:	28 98       	cbi	0x05, 0	; 5
    2af0:	81 e2       	ldi	r24, 0x21	; 33
    2af2:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <SPI_Write_Byte>
    2af6:	81 e0       	ldi	r24, 0x01	; 1
    2af8:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <SPI_Write_Byte>
    2afc:	28 9a       	sbi	0x05, 0	; 5
    2afe:	28 98       	cbi	0x05, 0	; 5
    2b00:	82 e2       	ldi	r24, 0x22	; 34
    2b02:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <SPI_Write_Byte>
    2b06:	81 e0       	ldi	r24, 0x01	; 1
    2b08:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <SPI_Write_Byte>
    2b0c:	28 9a       	sbi	0x05, 0	; 5
    2b0e:	28 98       	cbi	0x05, 0	; 5
    2b10:	84 e2       	ldi	r24, 0x24	; 36
    2b12:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <SPI_Write_Byte>
    2b16:	82 e1       	ldi	r24, 0x12	; 18
    2b18:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <SPI_Write_Byte>
    2b1c:	28 9a       	sbi	0x05, 0	; 5
    2b1e:	28 98       	cbi	0x05, 0	; 5
    2b20:	85 e2       	ldi	r24, 0x25	; 37
    2b22:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <SPI_Write_Byte>
    2b26:	88 e2       	ldi	r24, 0x28	; 40
    2b28:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <SPI_Write_Byte>
    2b2c:	28 9a       	sbi	0x05, 0	; 5
    2b2e:	28 98       	cbi	0x05, 0	; 5
    2b30:	81 e3       	ldi	r24, 0x31	; 49
    2b32:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <SPI_Write_Byte>
    2b36:	8d e0       	ldi	r24, 0x0D	; 13
    2b38:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <SPI_Write_Byte>
    2b3c:	28 9a       	sbi	0x05, 0	; 5
    2b3e:	28 98       	cbi	0x05, 0	; 5
    2b40:	80 e5       	ldi	r24, 0x50	; 80
    2b42:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <SPI_Write_Byte>
    2b46:	83 e7       	ldi	r24, 0x73	; 115
    2b48:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <SPI_Write_Byte>
    2b4c:	28 9a       	sbi	0x05, 0	; 5
    2b4e:	28 98       	cbi	0x05, 0	; 5
    2b50:	8c e3       	ldi	r24, 0x3C	; 60
    2b52:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <SPI_Write_Byte>
    2b56:	81 e0       	ldi	r24, 0x01	; 1
    2b58:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <SPI_Write_Byte>
    2b5c:	28 9a       	sbi	0x05, 0	; 5
    2b5e:	28 98       	cbi	0x05, 0	; 5
    2b60:	8d e3       	ldi	r24, 0x3D	; 61
    2b62:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <SPI_Write_Byte>
    2b66:	86 e0       	ldi	r24, 0x06	; 6
    2b68:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <SPI_Write_Byte>
    2b6c:	28 9a       	sbi	0x05, 0	; 5
    2b6e:	28 98       	cbi	0x05, 0	; 5
    2b70:	80 e2       	ldi	r24, 0x20	; 32
    2b72:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <SPI_Write_Byte>
    2b76:	8f e0       	ldi	r24, 0x0F	; 15
    2b78:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <SPI_Write_Byte>
    2b7c:	28 9a       	sbi	0x05, 0	; 5
    2b7e:	0f 90       	pop	r0
    2b80:	0f 90       	pop	r0
    2b82:	0f 90       	pop	r0
    2b84:	df 91       	pop	r29
    2b86:	cf 91       	pop	r28
    2b88:	08 95       	ret

00002b8a <mirf_init>:
    2b8a:	2c 9a       	sbi	0x05, 4	; 5
    2b8c:	28 9a       	sbi	0x05, 0	; 5
    2b8e:	0c 94 47 15 	jmp	0x2a8e	; 0x2a8e <mirf_config>

00002b92 <handleRFCommands>:

}

bool handleRFCommands() {
    2b92:	4f 92       	push	r4
    2b94:	5f 92       	push	r5
    2b96:	6f 92       	push	r6
    2b98:	7f 92       	push	r7
    2b9a:	8f 92       	push	r8
    2b9c:	9f 92       	push	r9
    2b9e:	af 92       	push	r10
    2ba0:	bf 92       	push	r11
    2ba2:	cf 92       	push	r12
    2ba4:	df 92       	push	r13
    2ba6:	ef 92       	push	r14
    2ba8:	ff 92       	push	r15
    2baa:	0f 93       	push	r16
    2bac:	1f 93       	push	r17
    2bae:	cf 93       	push	r28
    2bb0:	df 93       	push	r29
    2bb2:	1f 92       	push	r1
    2bb4:	cd b7       	in	r28, 0x3d	; 61
    2bb6:	de b7       	in	r29, 0x3e	; 62
*/

uint8_t mirf_data_ready() 
// Checks if data is available for reading
{
    if (PTX) return 0;
    2bb8:	80 91 12 0f 	lds	r24, 0x0F12	; 0x800f12 <PTX>
    2bbc:	88 23       	and	r24, r24
    2bbe:	99 f0       	breq	.+38     	; 0x2be6 <handleRFCommands+0x54>
	unsigned int id_start = 0;
	unsigned int r_speed_temp = 0;
	unsigned int l_speed_temp = 0;
	bool out;
	
	out = false;
    2bc0:	80 e0       	ldi	r24, 0x00	; 0

	}
	
	return out;

}
    2bc2:	0f 90       	pop	r0
    2bc4:	df 91       	pop	r29
    2bc6:	cf 91       	pop	r28
    2bc8:	1f 91       	pop	r17
    2bca:	0f 91       	pop	r16
    2bcc:	ff 90       	pop	r15
    2bce:	ef 90       	pop	r14
    2bd0:	df 90       	pop	r13
    2bd2:	cf 90       	pop	r12
    2bd4:	bf 90       	pop	r11
    2bd6:	af 90       	pop	r10
    2bd8:	9f 90       	pop	r9
    2bda:	8f 90       	pop	r8
    2bdc:	7f 90       	pop	r7
    2bde:	6f 90       	pop	r6
    2be0:	5f 90       	pop	r5
    2be2:	4f 90       	pop	r4
    2be4:	08 95       	ret
// Checks if data is available for reading
{
    if (PTX) return 0;
    uint8_t status;
    // Read MiRF status 
    mirf_CSN_lo;                                // Pull down chip select
    2be6:	28 98       	cbi	0x05, 0	; 5
    status = SPI_Write_Byte(NOP);               // Read status register
    2be8:	8f ef       	ldi	r24, 0xFF	; 255
    2bea:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <SPI_Write_Byte>
    mirf_CSN_hi;                                // Pull up chip select
    2bee:	28 9a       	sbi	0x05, 0	; 5
	unsigned int l_speed_temp = 0;
	bool out;
	
	out = false;

	if(mirf_data_ready()) {
    2bf0:	86 ff       	sbrs	r24, 6
    2bf2:	e6 cf       	rjmp	.-52     	; 0x2bc0 <handleRFCommands+0x2e>
		
		out = true;

		rfFlags |= 0x02;
    2bf4:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <rfFlags>
    2bf8:	82 60       	ori	r24, 0x02	; 2
    2bfa:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <rfFlags>
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    2bfe:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2c00:	87 e2       	ldi	r24, 0x27	; 39
    2c02:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <SPI_Write_Byte>
    SPI_Write_Byte(value);
    2c06:	80 e7       	ldi	r24, 0x70	; 112
    2c08:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <SPI_Write_Byte>
    mirf_CSN_hi;
    2c0c:	28 9a       	sbi	0x05, 0	; 5

}

uint8_t rx_fifo_is_empty() {
	
	uint8_t fifo_status = 0;
    2c0e:	19 82       	std	Y+1, r1	; 0x01
}

void mirf_read_register(uint8_t reg, uint8_t * value, uint8_t len)
// Reads an array of bytes from the given start position in the MiRF registers.
{
    mirf_CSN_lo;
    2c10:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(R_REGISTER | (REGISTER_MASK & reg));
    2c12:	87 e1       	ldi	r24, 0x17	; 23
    2c14:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <SPI_Write_Byte>
    SPI_ReadWrite_Block(value,value,len);
    2c18:	41 e0       	ldi	r20, 0x01	; 1
    2c1a:	be 01       	movw	r22, r28
    2c1c:	6f 5f       	subi	r22, 0xFF	; 255
    2c1e:	7f 4f       	sbci	r23, 0xFF	; 255
    2c20:	cb 01       	movw	r24, r22
    2c22:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <SPI_ReadWrite_Block>
    mirf_CSN_hi;
    2c26:	28 9a       	sbi	0x05, 0	; 5
	
	uint8_t fifo_status = 0;

	mirf_read_register(FIFO_STATUS, &fifo_status, 1);
	
	return (uint8_t)(fifo_status&0x01);
    2c28:	89 81       	ldd	r24, Y+1	; 0x01
		rfFlags |= 0x02;

		// clear irq status
		mirf_config_register(STATUS, 0x70);

		if(rx_fifo_is_empty()) {
    2c2a:	80 fd       	sbrc	r24, 0
			return;
    2c2c:	ca cf       	rjmp	.-108    	; 0x2bc2 <handleRFCommands+0x30>
}

void mirf_get_data(uint8_t * data) 
// Reads mirf_PAYLOAD bytes into data array
{
    mirf_CSN_lo;                               		// Pull down chip select
    2c2e:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte( R_RX_PAYLOAD );            		// Send cmd to read rx payload
    2c30:	81 e6       	ldi	r24, 0x61	; 97
    2c32:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <SPI_Write_Byte>
    SPI_ReadWrite_Block(data,data,PAYLOAD_SIZE); 	// Read payload
    2c36:	4d e0       	ldi	r20, 0x0D	; 13
    2c38:	6f e6       	ldi	r22, 0x6F	; 111
    2c3a:	73 e1       	ldi	r23, 0x13	; 19
    2c3c:	cb 01       	movw	r24, r22
    2c3e:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <SPI_ReadWrite_Block>
    mirf_CSN_hi;                               		// Pull up chip select
    2c42:	28 9a       	sbi	0x05, 0	; 5
}

void mirf_config_register(uint8_t reg, uint8_t value)
// Clocks only one byte into the given MiRF register
{
    mirf_CSN_lo;
    2c44:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(W_REGISTER | (REGISTER_MASK & reg));
    2c46:	87 e2       	ldi	r24, 0x27	; 39
    2c48:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <SPI_Write_Byte>
    SPI_Write_Byte(value);
    2c4c:	80 e4       	ldi	r24, 0x40	; 64
    2c4e:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <SPI_Write_Byte>
    mirf_CSN_hi;
    2c52:	28 9a       	sbi	0x05, 0	; 5
	return (uint8_t)(fifo_status&0x01);
}

void flush_rx_fifo() {

    mirf_CSN_lo;
    2c54:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_RX);
    2c56:	82 ee       	ldi	r24, 0xE2	; 226
    2c58:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <SPI_Write_Byte>
    mirf_CSN_hi;
    2c5c:	28 9a       	sbi	0x05, 0	; 5
		mirf_get_data(rfData);
		flush_rx_fifo();

		//usartTransmit(rfData[0]);

		if(rfDebugMode==1) {
    2c5e:	80 91 fa 02 	lds	r24, 0x02FA	; 0x8002fa <rfDebugMode>
    2c62:	81 30       	cpi	r24, 0x01	; 1
    2c64:	09 f4       	brne	.+2      	; 0x2c68 <handleRFCommands+0xd6>
    2c66:	3c c4       	rjmp	.+2168   	; 0x34e0 <handleRFCommands+0x94e>

			writeAckPayload(ackPayload, 16);
			
		} else {		
			
			if ((rfData[3]&0b10000000)==0b10000000){
    2c68:	10 91 72 13 	lds	r17, 0x1372	; 0x801372 <rfData+0x3>
    2c6c:	17 fd       	sbrc	r17, 7
    2c6e:	81 c2       	rjmp	.+1282   	; 0x3172 <handleRFCommands+0x5e0>
				}
				
				
			}else{
				// operational packet
				id_neigh = rfData[4];
    2c70:	00 91 73 13 	lds	r16, 0x1373	; 0x801373 <rfData+0x4>
			
				// Change this to theta in future
				filtered_theta = (((signed int) (rfData[2]<<8) | (unsigned char) rfData[1]))/573.0;
    2c74:	f0 90 71 13 	lds	r15, 0x1371	; 0x801371 <rfData+0x2>
    2c78:	e0 90 70 13 	lds	r14, 0x1370	; 0x801370 <rfData+0x1>
    2c7c:	60 91 70 13 	lds	r22, 0x1370	; 0x801370 <rfData+0x1>
    2c80:	70 91 71 13 	lds	r23, 0x1371	; 0x801371 <rfData+0x2>
    2c84:	07 2e       	mov	r0, r23
    2c86:	00 0c       	add	r0, r0
    2c88:	88 0b       	sbc	r24, r24
    2c8a:	99 0b       	sbc	r25, r25
    2c8c:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    2c90:	20 e0       	ldi	r18, 0x00	; 0
    2c92:	30 e4       	ldi	r19, 0x40	; 64
    2c94:	4f e0       	ldi	r20, 0x0F	; 15
    2c96:	54 e4       	ldi	r21, 0x44	; 68
    2c98:	0e 94 c3 4d 	call	0x9b86	; 0x9b86 <__divsf3>
    2c9c:	60 93 2c 07 	sts	0x072C, r22	; 0x80072c <filtered_theta>
    2ca0:	70 93 2d 07 	sts	0x072D, r23	; 0x80072d <filtered_theta+0x1>
    2ca4:	80 93 2e 07 	sts	0x072E, r24	; 0x80072e <filtered_theta+0x2>
    2ca8:	90 93 2f 07 	sts	0x072F, r25	; 0x80072f <filtered_theta+0x3>
				//resetOrientation();
				
				
				if(calibrateOdomFlag==0) {
    2cac:	80 91 53 0f 	lds	r24, 0x0F53	; 0x800f53 <calibrateOdomFlag>
    2cb0:	81 11       	cpse	r24, r1
    2cb2:	20 c0       	rjmp	.+64     	; 0x2cf4 <handleRFCommands+0x162>
					speedr = (rfData[1]&0x7F);	// cast the speed to be at most 127, thus the received speed are in the range 0..127 (usually 0..100),
    2cb4:	2e 2d       	mov	r18, r14
    2cb6:	2f 77       	andi	r18, 0x7F	; 127
    2cb8:	30 e0       	ldi	r19, 0x00	; 0
    2cba:	30 93 00 03 	sts	0x0300, r19	; 0x800300 <speedr+0x1>
    2cbe:	20 93 ff 02 	sts	0x02FF, r18	; 0x8002ff <speedr>
					speedl = (rfData[2]&0x7F);	// the received speed is then shifted by 3 (x8) in order to have a speed more or less
    2cc2:	8f 2d       	mov	r24, r15
    2cc4:	8f 77       	andi	r24, 0x7F	; 127
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	90 93 02 03 	sts	0x0302, r25	; 0x800302 <speedl+0x1>
    2ccc:	80 93 01 03 	sts	0x0301, r24	; 0x800301 <speedl>
					// in the same range of the measured speed that is 0..800.
					// In order to have greater resolution at lower speed we shift the speed only by 2 (x4),
					// this means that the range is more or less 0..400.


					if((rfData[1]&0x80)==0x80) {			// motor right forward
    2cd0:	e7 fc       	sbrc	r14, 7
    2cd2:	03 c0       	rjmp	.+6      	; 0x2cda <handleRFCommands+0x148>
						pwm_right_desired = speedr; 		// speed received (0..127) is expressed in 1/5 of mm/s (0..635 mm/s)
						} else {								// backward
						pwm_right_desired = -(speedr);
    2cd4:	31 95       	neg	r19
    2cd6:	21 95       	neg	r18
    2cd8:	31 09       	sbc	r19, r1
    2cda:	30 93 1a 03 	sts	0x031A, r19	; 0x80031a <pwm_right_desired+0x1>
    2cde:	20 93 19 03 	sts	0x0319, r18	; 0x800319 <pwm_right_desired>
					}

					if((rfData[2]&0x80)==0x80) {			// motor left forward
    2ce2:	f7 fc       	sbrc	r15, 7
    2ce4:	03 c0       	rjmp	.+6      	; 0x2cec <handleRFCommands+0x15a>
						pwm_left_desired = speedl;
						} else {								// backward
						pwm_left_desired = -(speedl);
    2ce6:	91 95       	neg	r25
    2ce8:	81 95       	neg	r24
    2cea:	91 09       	sbc	r25, r1
    2cec:	90 93 18 03 	sts	0x0318, r25	; 0x800318 <pwm_left_desired+0x1>
    2cf0:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <pwm_left_desired>
					}

				}
				
				// Indicate when to leave idle state
				if((rfData[3]&0b01000000)==0b01000000) {
    2cf4:	16 ff       	sbrs	r17, 6
    2cf6:	72 c1       	rjmp	.+740    	; 0x2fdc <handleRFCommands+0x44a>
					start_comm = true;
    2cf8:	81 e0       	ldi	r24, 0x01	; 1
    2cfa:	80 93 fd 03 	sts	0x03FD, r24	; 0x8003fd <start_comm>
				
				//id_neigh = rfData[5];
				
				
				// Xpos and Ypos needs to be assigned this value and Xpos_array needs to be updated only if triggered + delay
				position[0] = ((signed int) (rfData[i*4+6]<<8) | (unsigned char) rfData[i*4+5]);
    2cfe:	60 91 74 13 	lds	r22, 0x1374	; 0x801374 <rfData+0x5>
    2d02:	70 91 75 13 	lds	r23, 0x1375	; 0x801375 <rfData+0x6>
    2d06:	07 2e       	mov	r0, r23
    2d08:	00 0c       	add	r0, r0
    2d0a:	88 0b       	sbc	r24, r24
    2d0c:	99 0b       	sbc	r25, r25
    2d0e:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    2d12:	6b 01       	movw	r12, r22
    2d14:	7c 01       	movw	r14, r24
    2d16:	60 93 32 07 	sts	0x0732, r22	; 0x800732 <position>
    2d1a:	70 93 33 07 	sts	0x0733, r23	; 0x800733 <position+0x1>
    2d1e:	80 93 34 07 	sts	0x0734, r24	; 0x800734 <position+0x2>
    2d22:	90 93 35 07 	sts	0x0735, r25	; 0x800735 <position+0x3>
				position[1] = ((signed int) (rfData[i*4+8]<<8) | (unsigned char) rfData[i*4+7]);
    2d26:	60 91 76 13 	lds	r22, 0x1376	; 0x801376 <rfData+0x7>
    2d2a:	70 91 77 13 	lds	r23, 0x1377	; 0x801377 <rfData+0x8>
    2d2e:	07 2e       	mov	r0, r23
    2d30:	00 0c       	add	r0, r0
    2d32:	88 0b       	sbc	r24, r24
    2d34:	99 0b       	sbc	r25, r25
    2d36:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    2d3a:	2b 01       	movw	r4, r22
    2d3c:	3c 01       	movw	r6, r24
    2d3e:	60 93 36 07 	sts	0x0736, r22	; 0x800736 <position+0x4>
    2d42:	70 93 37 07 	sts	0x0737, r23	; 0x800737 <position+0x5>
    2d46:	80 93 38 07 	sts	0x0738, r24	; 0x800738 <position+0x6>
    2d4a:	90 93 39 07 	sts	0x0739, r25	; 0x800739 <position+0x7>
				
				// Only update the array if data is sent
				if ((rfData[3]&0b00010000)==0b00010000){
    2d4e:	14 ff       	sbrs	r17, 4
    2d50:	29 c0       	rjmp	.+82     	; 0x2da4 <handleRFCommands+0x212>
				}
				
				
			}else{
				// operational packet
				id_neigh = rfData[4];
    2d52:	10 e0       	ldi	r17, 0x00	; 0
				position[0] = ((signed int) (rfData[i*4+6]<<8) | (unsigned char) rfData[i*4+5]);
				position[1] = ((signed int) (rfData[i*4+8]<<8) | (unsigned char) rfData[i*4+7]);
				
				// Only update the array if data is sent
				if ((rfData[3]&0b00010000)==0b00010000){
					Xpos_array[id_neigh] = ((signed int) (rfData[i*4+10]<<8) | (unsigned char) rfData[i*4+9]);
    2d54:	00 0f       	add	r16, r16
    2d56:	11 1f       	adc	r17, r17
    2d58:	00 0f       	add	r16, r16
    2d5a:	11 1f       	adc	r17, r17
    2d5c:	98 01       	movw	r18, r16
    2d5e:	2e 52       	subi	r18, 0x2E	; 46
    2d60:	37 4f       	sbci	r19, 0xF7	; 247
    2d62:	59 01       	movw	r10, r18
    2d64:	60 91 78 13 	lds	r22, 0x1378	; 0x801378 <rfData+0x9>
    2d68:	70 91 79 13 	lds	r23, 0x1379	; 0x801379 <rfData+0xa>
    2d6c:	07 2e       	mov	r0, r23
    2d6e:	00 0c       	add	r0, r0
    2d70:	88 0b       	sbc	r24, r24
    2d72:	99 0b       	sbc	r25, r25
    2d74:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    2d78:	f5 01       	movw	r30, r10
    2d7a:	60 83       	st	Z, r22
    2d7c:	71 83       	std	Z+1, r23	; 0x01
    2d7e:	82 83       	std	Z+2, r24	; 0x02
    2d80:	93 83       	std	Z+3, r25	; 0x03
					Ypos_array[id_neigh] = ((signed int) (rfData[i*4+12]<<8) | (unsigned char) rfData[i*4+11]);										
    2d82:	0e 5b       	subi	r16, 0xBE	; 190
    2d84:	18 4f       	sbci	r17, 0xF8	; 248
    2d86:	60 91 7a 13 	lds	r22, 0x137A	; 0x80137a <rfData+0xb>
    2d8a:	70 91 7b 13 	lds	r23, 0x137B	; 0x80137b <rfData+0xc>
    2d8e:	07 2e       	mov	r0, r23
    2d90:	00 0c       	add	r0, r0
    2d92:	88 0b       	sbc	r24, r24
    2d94:	99 0b       	sbc	r25, r25
    2d96:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    2d9a:	f8 01       	movw	r30, r16
    2d9c:	60 83       	st	Z, r22
    2d9e:	71 83       	std	Z+1, r23	; 0x01
    2da0:	82 83       	std	Z+2, r24	; 0x02
    2da2:	93 83       	std	Z+3, r25	; 0x03
				}
				
				// reset data when requested
				if ((rfData[0]&0b00000001)==0b00000001){
    2da4:	80 91 6f 13 	lds	r24, 0x136F	; 0x80136f <rfData>
    2da8:	80 ff       	sbrs	r24, 0
    2daa:	13 c0       	rjmp	.+38     	; 0x2dd2 <handleRFCommands+0x240>
					reset_flag = true;
    2dac:	81 e0       	ldi	r24, 0x01	; 1
    2dae:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <reset_flag>
					xPos = position[0];		
    2db2:	c0 92 a7 02 	sts	0x02A7, r12	; 0x8002a7 <xPos>
    2db6:	d0 92 a8 02 	sts	0x02A8, r13	; 0x8002a8 <xPos+0x1>
    2dba:	e0 92 a9 02 	sts	0x02A9, r14	; 0x8002a9 <xPos+0x2>
    2dbe:	f0 92 aa 02 	sts	0x02AA, r15	; 0x8002aa <xPos+0x3>
					yPos = position[1];			
    2dc2:	40 92 a3 02 	sts	0x02A3, r4	; 0x8002a3 <yPos>
    2dc6:	50 92 a4 02 	sts	0x02A4, r5	; 0x8002a4 <yPos+0x1>
    2dca:	60 92 a5 02 	sts	0x02A5, r6	; 0x8002a5 <yPos+0x2>
    2dce:	70 92 a6 02 	sts	0x02A6, r7	; 0x8002a6 <yPos+0x3>
    2dd2:	10 91 cc 02 	lds	r17, 0x02CC	; 0x8002cc <currentSelector>
				}
				
			}
			
			if(currentSelector == 2) {
    2dd6:	12 30       	cpi	r17, 0x02	; 2
    2dd8:	09 f4       	brne	.+2      	; 0x2ddc <handleRFCommands+0x24a>
    2dda:	ae c1       	rjmp	.+860    	; 0x3138 <handleRFCommands+0x5a6>
						
			// read and handle the remaining bytes of the payload (at the moment not used)


			// write back the ack payload
			ackPayload[0] = packetId&0xFF;
    2ddc:	80 91 10 02 	lds	r24, 0x0210	; 0x800210 <packetId>
    2de0:	80 93 a7 12 	sts	0x12A7, r24	; 0x8012a7 <ackPayload>

			switch(packetId) {
    2de4:	85 30       	cpi	r24, 0x05	; 5
    2de6:	09 f4       	brne	.+2      	; 0x2dea <handleRFCommands+0x258>
    2de8:	80 c2       	rjmp	.+1280   	; 0x32ea <handleRFCommands+0x758>
    2dea:	08 f0       	brcs	.+2      	; 0x2dee <handleRFCommands+0x25c>
    2dec:	48 c0       	rjmp	.+144    	; 0x2e7e <handleRFCommands+0x2ec>
    2dee:	83 30       	cpi	r24, 0x03	; 3
    2df0:	09 f4       	brne	.+2      	; 0x2df4 <handleRFCommands+0x262>
    2df2:	f7 c0       	rjmp	.+494    	; 0x2fe2 <handleRFCommands+0x450>
    2df4:	84 30       	cpi	r24, 0x04	; 4
    2df6:	09 f0       	breq	.+2      	; 0x2dfa <handleRFCommands+0x268>
    2df8:	48 c1       	rjmp	.+656    	; 0x308a <handleRFCommands+0x4f8>
					#endif
					packetId = 4;
					break;

				case 4:
					ackPayload[1] = proximityResult[4]&0xFF;
    2dfa:	90 91 9f 03 	lds	r25, 0x039F	; 0x80039f <proximityResult+0x8>
    2dfe:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <proximityResult+0x9>
    2e02:	90 93 a8 12 	sts	0x12A8, r25	; 0x8012a8 <ackPayload+0x1>
					ackPayload[2] = proximityResult[4]>>8;
    2e06:	80 93 a9 12 	sts	0x12A9, r24	; 0x8012a9 <ackPayload+0x2>
					ackPayload[3] = proximityResult[8]&0xFF;
    2e0a:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <proximityResult+0x10>
    2e0e:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <proximityResult+0x11>
    2e12:	90 93 aa 12 	sts	0x12AA, r25	; 0x8012aa <ackPayload+0x3>
					ackPayload[4] = proximityResult[8]>>8;
    2e16:	80 93 ab 12 	sts	0x12AB, r24	; 0x8012ab <ackPayload+0x4>
					ackPayload[5] = proximityResult[9]&0xFF;
    2e1a:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <proximityResult+0x12>
    2e1e:	80 91 aa 03 	lds	r24, 0x03AA	; 0x8003aa <proximityResult+0x13>
    2e22:	90 93 ac 12 	sts	0x12AC, r25	; 0x8012ac <ackPayload+0x5>
					ackPayload[6] = proximityResult[9]>>8;
    2e26:	80 93 ad 12 	sts	0x12AD, r24	; 0x8012ad <ackPayload+0x6>
					ackPayload[7] = proximityResult[10]&0xFF;
    2e2a:	90 91 ab 03 	lds	r25, 0x03AB	; 0x8003ab <proximityResult+0x14>
    2e2e:	80 91 ac 03 	lds	r24, 0x03AC	; 0x8003ac <proximityResult+0x15>
    2e32:	90 93 ae 12 	sts	0x12AE, r25	; 0x8012ae <ackPayload+0x7>
					ackPayload[8] = proximityResult[10]>>8;
    2e36:	80 93 af 12 	sts	0x12AF, r24	; 0x8012af <ackPayload+0x8>
					ackPayload[9] = proximityResult[11]&0xFF;
    2e3a:	90 91 ad 03 	lds	r25, 0x03AD	; 0x8003ad <proximityResult+0x16>
    2e3e:	80 91 ae 03 	lds	r24, 0x03AE	; 0x8003ae <proximityResult+0x17>
    2e42:	90 93 b0 12 	sts	0x12B0, r25	; 0x8012b0 <ackPayload+0x9>
					ackPayload[10] = proximityResult[11]>>8;
    2e46:	80 93 b1 12 	sts	0x12B1, r24	; 0x8012b1 <ackPayload+0xa>
					ackPayload[11] = accX&0xFF;
    2e4a:	90 91 e9 02 	lds	r25, 0x02E9	; 0x8002e9 <accX>
    2e4e:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <accX+0x1>
    2e52:	90 93 b2 12 	sts	0x12B2, r25	; 0x8012b2 <ackPayload+0xb>
					ackPayload[12] = accX>>8;
    2e56:	80 93 b3 12 	sts	0x12B3, r24	; 0x8012b3 <ackPayload+0xc>
					ackPayload[13] = accY&0xFF;
    2e5a:	90 91 e7 02 	lds	r25, 0x02E7	; 0x8002e7 <accY>
    2e5e:	80 91 e8 02 	lds	r24, 0x02E8	; 0x8002e8 <accY+0x1>
    2e62:	90 93 b4 12 	sts	0x12B4, r25	; 0x8012b4 <ackPayload+0xd>
					ackPayload[14] = accY>>8;
    2e66:	80 93 b5 12 	sts	0x12B5, r24	; 0x8012b5 <ackPayload+0xe>
					ackPayload[15] = irCommand;
    2e6a:	80 91 f4 02 	lds	r24, 0x02F4	; 0x8002f4 <irCommand>
    2e6e:	80 93 b6 12 	sts	0x12B6, r24	; 0x8012b6 <ackPayload+0xf>
					packetId = 5;
    2e72:	85 e0       	ldi	r24, 0x05	; 5
    2e74:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <packetId>
    2e78:	10 91 2b 07 	lds	r17, 0x072B	; 0x80072b <turn>
					break;
    2e7c:	7f c0       	rjmp	.+254    	; 0x2f7c <handleRFCommands+0x3ea>


			// write back the ack payload
			ackPayload[0] = packetId&0xFF;

			switch(packetId) {
    2e7e:	86 30       	cpi	r24, 0x06	; 6
    2e80:	09 f4       	brne	.+2      	; 0x2e84 <handleRFCommands+0x2f2>
    2e82:	06 c1       	rjmp	.+524    	; 0x3090 <handleRFCommands+0x4fe>
    2e84:	87 30       	cpi	r24, 0x07	; 7
    2e86:	09 f0       	breq	.+2      	; 0x2e8a <handleRFCommands+0x2f8>
    2e88:	00 c1       	rjmp	.+512    	; 0x308a <handleRFCommands+0x4f8>
					packetId = 7;
					break;


				case 7:
					lastTheta = theta;
    2e8a:	c0 90 af 02 	lds	r12, 0x02AF	; 0x8002af <theta>
    2e8e:	d0 90 b0 02 	lds	r13, 0x02B0	; 0x8002b0 <theta+0x1>
    2e92:	e0 90 b1 02 	lds	r14, 0x02B1	; 0x8002b1 <theta+0x2>
    2e96:	f0 90 b2 02 	lds	r15, 0x02B2	; 0x8002b2 <theta+0x3>
    2e9a:	c0 92 ab 02 	sts	0x02AB, r12	; 0x8002ab <lastTheta>
    2e9e:	d0 92 ac 02 	sts	0x02AC, r13	; 0x8002ac <lastTheta+0x1>
    2ea2:	e0 92 ad 02 	sts	0x02AD, r14	; 0x8002ad <lastTheta+0x2>
    2ea6:	f0 92 ae 02 	sts	0x02AE, r15	; 0x8002ae <lastTheta+0x3>
					ackPayload[1] = ((unsigned int) xPos_fixed)&0xFF;
    2eaa:	60 91 02 04 	lds	r22, 0x0402	; 0x800402 <xPos_fixed>
    2eae:	70 91 03 04 	lds	r23, 0x0403	; 0x800403 <xPos_fixed+0x1>
    2eb2:	80 91 04 04 	lds	r24, 0x0404	; 0x800404 <xPos_fixed+0x2>
    2eb6:	90 91 05 04 	lds	r25, 0x0405	; 0x800405 <xPos_fixed+0x3>
    2eba:	0e 94 76 4e 	call	0x9cec	; 0x9cec <__fixunssfsi>
    2ebe:	60 93 a8 12 	sts	0x12A8, r22	; 0x8012a8 <ackPayload+0x1>
					ackPayload[2] = ((unsigned int) xPos_fixed)>>8;
    2ec2:	70 93 a9 12 	sts	0x12A9, r23	; 0x8012a9 <ackPayload+0x2>
					ackPayload[3] = ((unsigned int) yPos_fixed)&0xFF;
    2ec6:	60 91 fe 03 	lds	r22, 0x03FE	; 0x8003fe <yPos_fixed>
    2eca:	70 91 ff 03 	lds	r23, 0x03FF	; 0x8003ff <yPos_fixed+0x1>
    2ece:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <yPos_fixed+0x2>
    2ed2:	90 91 01 04 	lds	r25, 0x0401	; 0x800401 <yPos_fixed+0x3>
    2ed6:	0e 94 76 4e 	call	0x9cec	; 0x9cec <__fixunssfsi>
    2eda:	60 93 aa 12 	sts	0x12AA, r22	; 0x8012aa <ackPayload+0x3>
					ackPayload[4] = ((unsigned int) yPos_fixed)>>8;
    2ede:	70 93 ab 12 	sts	0x12AB, r23	; 0x8012ab <ackPayload+0x4>
					ackPayload[5] = (trigger_count)&0xFF;
    2ee2:	90 91 1b 02 	lds	r25, 0x021B	; 0x80021b <trigger_count>
    2ee6:	80 91 1c 02 	lds	r24, 0x021C	; 0x80021c <trigger_count+0x1>
    2eea:	90 93 ac 12 	sts	0x12AC, r25	; 0x8012ac <ackPayload+0x5>
					ackPayload[6] = (trigger_count)>>8;
    2eee:	80 93 ad 12 	sts	0x12AD, r24	; 0x8012ad <ackPayload+0x6>
					ackPayload[7] = turn&0xFF;
    2ef2:	10 91 2b 07 	lds	r17, 0x072B	; 0x80072b <turn>
    2ef6:	10 93 ae 12 	sts	0x12AE, r17	; 0x8012ae <ackPayload+0x7>
					ackPayload[8] = ((unsigned int) Ypos_array[id])&0xFF;
    2efa:	e0 91 29 02 	lds	r30, 0x0229	; 0x800229 <id>
    2efe:	f0 91 2a 02 	lds	r31, 0x022A	; 0x80022a <id+0x1>
    2f02:	ee 0f       	add	r30, r30
    2f04:	ff 1f       	adc	r31, r31
    2f06:	ee 0f       	add	r30, r30
    2f08:	ff 1f       	adc	r31, r31
    2f0a:	ee 5b       	subi	r30, 0xBE	; 190
    2f0c:	f8 4f       	sbci	r31, 0xF8	; 248
    2f0e:	60 81       	ld	r22, Z
    2f10:	71 81       	ldd	r23, Z+1	; 0x01
    2f12:	82 81       	ldd	r24, Z+2	; 0x02
    2f14:	93 81       	ldd	r25, Z+3	; 0x03
    2f16:	0e 94 76 4e 	call	0x9cec	; 0x9cec <__fixunssfsi>
    2f1a:	60 93 af 12 	sts	0x12AF, r22	; 0x8012af <ackPayload+0x8>
					ackPayload[9] = ((signed int)(lastTheta*573.0))&0xFF;	// radians to degrees => 573 = 1800/PI
    2f1e:	20 e0       	ldi	r18, 0x00	; 0
    2f20:	30 e4       	ldi	r19, 0x40	; 64
    2f22:	4f e0       	ldi	r20, 0x0F	; 15
    2f24:	54 e4       	ldi	r21, 0x44	; 68
    2f26:	c7 01       	movw	r24, r14
    2f28:	b6 01       	movw	r22, r12
    2f2a:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    2f2e:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__fixsfsi>
    2f32:	60 93 b0 12 	sts	0x12B0, r22	; 0x8012b0 <ackPayload+0x9>
					ackPayload[10] = ((signed int)(lastTheta*573.0))>>8;				
    2f36:	70 93 b1 12 	sts	0x12B1, r23	; 0x8012b1 <ackPayload+0xa>
					ackPayload[11] = ((unsigned int)xPos)&0xFF;
    2f3a:	60 91 a7 02 	lds	r22, 0x02A7	; 0x8002a7 <xPos>
    2f3e:	70 91 a8 02 	lds	r23, 0x02A8	; 0x8002a8 <xPos+0x1>
    2f42:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <xPos+0x2>
    2f46:	90 91 aa 02 	lds	r25, 0x02AA	; 0x8002aa <xPos+0x3>
    2f4a:	0e 94 76 4e 	call	0x9cec	; 0x9cec <__fixunssfsi>
    2f4e:	60 93 b2 12 	sts	0x12B2, r22	; 0x8012b2 <ackPayload+0xb>
					ackPayload[12] = ((unsigned int)xPos)>>8;
    2f52:	70 93 b3 12 	sts	0x12B3, r23	; 0x8012b3 <ackPayload+0xc>
					ackPayload[13] = ((unsigned int)yPos)&0xFF;
    2f56:	60 91 a3 02 	lds	r22, 0x02A3	; 0x8002a3 <yPos>
    2f5a:	70 91 a4 02 	lds	r23, 0x02A4	; 0x8002a4 <yPos+0x1>
    2f5e:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <yPos+0x2>
    2f62:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <yPos+0x3>
    2f66:	0e 94 76 4e 	call	0x9cec	; 0x9cec <__fixunssfsi>
    2f6a:	60 93 b4 12 	sts	0x12B4, r22	; 0x8012b4 <ackPayload+0xd>
					ackPayload[14] = ((unsigned int)yPos)>>8;
    2f6e:	70 93 b5 12 	sts	0x12B5, r23	; 0x8012b5 <ackPayload+0xe>
					//ackPayload[10] = ((unsigned int)(thetaOld*573.0))>>8;
					//ackPayload[11] = ((unsigned int)xPosOld)&0xFF;
					//ackPayload[12] = ((unsigned int)xPosOld)>>8;
					//ackPayload[13] = ((unsigned int)yPosOld)&0xFF;
					//ackPayload[14] = ((unsigned int)yPosOld)>>8;
					ackPayload[15] = 0;
    2f72:	10 92 b6 12 	sts	0x12B6, r1	; 0x8012b6 <ackPayload+0xf>
					packetId = 6;
    2f76:	86 e0       	ldi	r24, 0x06	; 6
    2f78:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <packetId>
					break;

			}
			if ((!turn) && ((rfData[0]&0b00000010)==0b00000010)){
    2f7c:	11 11       	cpse	r17, r1
    2f7e:	14 c0       	rjmp	.+40     	; 0x2fa8 <handleRFCommands+0x416>
    2f80:	80 91 6f 13 	lds	r24, 0x136F	; 0x80136f <rfData>
    2f84:	81 ff       	sbrs	r24, 1
    2f86:	10 c0       	rjmp	.+32     	; 0x2fa8 <handleRFCommands+0x416>
				theta = filtered_theta;
    2f88:	80 91 2c 07 	lds	r24, 0x072C	; 0x80072c <filtered_theta>
    2f8c:	90 91 2d 07 	lds	r25, 0x072D	; 0x80072d <filtered_theta+0x1>
    2f90:	a0 91 2e 07 	lds	r26, 0x072E	; 0x80072e <filtered_theta+0x2>
    2f94:	b0 91 2f 07 	lds	r27, 0x072F	; 0x80072f <filtered_theta+0x3>
    2f98:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <theta>
    2f9c:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <theta+0x1>
    2fa0:	a0 93 b1 02 	sts	0x02B1, r26	; 0x8002b1 <theta+0x2>
    2fa4:	b0 93 b2 02 	sts	0x02B2, r27	; 0x8002b2 <theta+0x3>
	return pWidth;
}

void flushTxFifo() {

    mirf_CSN_lo;
    2fa8:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    2faa:	81 ee       	ldi	r24, 0xE1	; 225
    2fac:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <SPI_Write_Byte>
    mirf_CSN_hi;
    2fb0:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    2fb2:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    2fb4:	88 ea       	ldi	r24, 0xA8	; 168
    2fb6:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <SPI_Write_Byte>
    2fba:	07 ea       	ldi	r16, 0xA7	; 167
    2fbc:	12 e1       	ldi	r17, 0x12	; 18
    2fbe:	87 eb       	ldi	r24, 0xB7	; 183
    2fc0:	e8 2e       	mov	r14, r24
    2fc2:	82 e1       	ldi	r24, 0x12	; 18
    2fc4:	f8 2e       	mov	r15, r24

	for(k=0; k<size; k++) {
		SPI_Write_Byte(data[k]);
    2fc6:	f8 01       	movw	r30, r16
    2fc8:	81 91       	ld	r24, Z+
    2fca:	8f 01       	movw	r16, r30
    2fcc:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
    2fd0:	e0 16       	cp	r14, r16
    2fd2:	f1 06       	cpc	r15, r17
    2fd4:	c1 f7       	brne	.-16     	; 0x2fc6 <handleRFCommands+0x434>
		SPI_Write_Byte(data[k]);
	}	

    mirf_CSN_hi;
    2fd6:	28 9a       	sbi	0x05, 0	; 5
	
	out = false;

	if(mirf_data_ready()) {
		
		out = true;
    2fd8:	81 e0       	ldi	r24, 0x01	; 1

		

	}
	
	return out;
    2fda:	f3 cd       	rjmp	.-1050   	; 0x2bc2 <handleRFCommands+0x30>
				
				// Indicate when to leave idle state
				if((rfData[3]&0b01000000)==0b01000000) {
					start_comm = true;
					} else {
					start_comm = false;
    2fdc:	10 92 fd 03 	sts	0x03FD, r1	; 0x8003fd <start_comm>
    2fe0:	8e ce       	rjmp	.-740    	; 0x2cfe <handleRFCommands+0x16c>
			// write back the ack payload
			ackPayload[0] = packetId&0xFF;

			switch(packetId) {
				case 3:
					ackPayload[1] = proximityResult[0]&0xFF;
    2fe2:	90 91 97 03 	lds	r25, 0x0397	; 0x800397 <proximityResult>
    2fe6:	80 91 98 03 	lds	r24, 0x0398	; 0x800398 <proximityResult+0x1>
    2fea:	90 93 a8 12 	sts	0x12A8, r25	; 0x8012a8 <ackPayload+0x1>
					ackPayload[2] = proximityResult[0]>>8;
    2fee:	80 93 a9 12 	sts	0x12A9, r24	; 0x8012a9 <ackPayload+0x2>
					ackPayload[3] = proximityResult[1]&0xFF;
    2ff2:	90 91 99 03 	lds	r25, 0x0399	; 0x800399 <proximityResult+0x2>
    2ff6:	80 91 9a 03 	lds	r24, 0x039A	; 0x80039a <proximityResult+0x3>
    2ffa:	90 93 aa 12 	sts	0x12AA, r25	; 0x8012aa <ackPayload+0x3>
					ackPayload[4] = proximityResult[1]>>8;
    2ffe:	80 93 ab 12 	sts	0x12AB, r24	; 0x8012ab <ackPayload+0x4>
					ackPayload[5] = proximityResult[2]&0xFF;
    3002:	90 91 9b 03 	lds	r25, 0x039B	; 0x80039b <proximityResult+0x4>
    3006:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <proximityResult+0x5>
    300a:	90 93 ac 12 	sts	0x12AC, r25	; 0x8012ac <ackPayload+0x5>
					ackPayload[6] = proximityResult[2]>>8;
    300e:	80 93 ad 12 	sts	0x12AD, r24	; 0x8012ad <ackPayload+0x6>
					ackPayload[7] = proximityResult[3]&0xFF;
    3012:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <proximityResult+0x6>
    3016:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <proximityResult+0x7>
    301a:	90 93 ae 12 	sts	0x12AE, r25	; 0x8012ae <ackPayload+0x7>
					ackPayload[8] = proximityResult[3]>>8;
    301e:	80 93 af 12 	sts	0x12AF, r24	; 0x8012af <ackPayload+0x8>
					ackPayload[9] = proximityResult[5]&0xFF;
    3022:	90 91 a1 03 	lds	r25, 0x03A1	; 0x8003a1 <proximityResult+0xa>
    3026:	80 91 a2 03 	lds	r24, 0x03A2	; 0x8003a2 <proximityResult+0xb>
    302a:	90 93 b0 12 	sts	0x12B0, r25	; 0x8012b0 <ackPayload+0x9>
					ackPayload[10] = proximityResult[5]>>8;
    302e:	80 93 b1 12 	sts	0x12B1, r24	; 0x8012b1 <ackPayload+0xa>
					ackPayload[11] = proximityResult[6]&0xFF;
    3032:	90 91 a3 03 	lds	r25, 0x03A3	; 0x8003a3 <proximityResult+0xc>
    3036:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <proximityResult+0xd>
    303a:	90 93 b2 12 	sts	0x12B2, r25	; 0x8012b2 <ackPayload+0xb>
					ackPayload[12] = proximityResult[6]>>8;
    303e:	80 93 b3 12 	sts	0x12B3, r24	; 0x8012b3 <ackPayload+0xc>
					ackPayload[13] = proximityResult[7]&0xFF;
    3042:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <proximityResult+0xe>
    3046:	80 91 a6 03 	lds	r24, 0x03A6	; 0x8003a6 <proximityResult+0xf>
    304a:	90 93 b4 12 	sts	0x12B4, r25	; 0x8012b4 <ackPayload+0xd>
					ackPayload[14] = proximityResult[7]>>8;
    304e:	80 93 b5 12 	sts	0x12B5, r24	; 0x8012b5 <ackPayload+0xe>
					#ifdef HW_REV_3_1
						ackPayload[15] = CHARGE_ON | (BUTTON0 << 1) | (CHARGE_STAT << 2);
    3052:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x7c0103>
    3056:	30 91 03 01 	lds	r19, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x7c0103>
    305a:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x7c0103>
    305e:	84 fb       	bst	r24, 4
    3060:	99 27       	eor	r25, r25
    3062:	90 f9       	bld	r25, 0
    3064:	82 2f       	mov	r24, r18
    3066:	88 1f       	adc	r24, r24
    3068:	88 27       	eor	r24, r24
    306a:	88 1f       	adc	r24, r24
    306c:	88 0f       	add	r24, r24
    306e:	88 0f       	add	r24, r24
    3070:	89 2b       	or	r24, r25
    3072:	35 fb       	bst	r19, 5
    3074:	88 24       	eor	r8, r8
    3076:	80 f8       	bld	r8, 0
    3078:	91 2c       	mov	r9, r1
    307a:	88 0c       	add	r8, r8
    307c:	99 1c       	adc	r9, r9
    307e:	88 2a       	or	r8, r24
    3080:	80 92 b6 12 	sts	0x12B6, r8	; 0x8012b6 <ackPayload+0xf>
					#else
						ackPayload[15] = CHARGE_ON | (BUTTON0 << 1);
					#endif
					packetId = 4;
    3084:	84 e0       	ldi	r24, 0x04	; 4
    3086:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <packetId>
    308a:	10 91 2b 07 	lds	r17, 0x072B	; 0x80072b <turn>
					break;
    308e:	76 cf       	rjmp	.-276    	; 0x2f7c <handleRFCommands+0x3ea>
					ackPayload[15] = currentSelector;
					packetId = 6;
					break;

				case 6:
					ackPayload[1] = loop_time&0xFF;
    3090:	30 91 f1 03 	lds	r19, 0x03F1	; 0x8003f1 <loop_time>
    3094:	20 91 f2 03 	lds	r18, 0x03F2	; 0x8003f2 <loop_time+0x1>
    3098:	90 91 f3 03 	lds	r25, 0x03F3	; 0x8003f3 <loop_time+0x2>
    309c:	80 91 f4 03 	lds	r24, 0x03F4	; 0x8003f4 <loop_time+0x3>
    30a0:	30 93 a8 12 	sts	0x12A8, r19	; 0x8012a8 <ackPayload+0x1>
					ackPayload[2] = loop_time>>8;
    30a4:	20 93 a9 12 	sts	0x12A9, r18	; 0x8012a9 <ackPayload+0x2>
					ackPayload[3] = loop_time>>16;
    30a8:	90 93 aa 12 	sts	0x12AA, r25	; 0x8012aa <ackPayload+0x3>
					ackPayload[4] = loop_time>>24;
    30ac:	80 93 ab 12 	sts	0x12AB, r24	; 0x8012ab <ackPayload+0x4>
					ackPayload[5] = control_time&0xFF;
    30b0:	90 91 e9 03 	lds	r25, 0x03E9	; 0x8003e9 <control_time>
    30b4:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <control_time+0x1>
    30b8:	90 93 ac 12 	sts	0x12AC, r25	; 0x8012ac <ackPayload+0x5>
					ackPayload[6] = control_time>>8;
    30bc:	80 93 ad 12 	sts	0x12AD, r24	; 0x8012ad <ackPayload+0x6>
					ackPayload[7] = count_resets&0xFF;
    30c0:	90 91 30 07 	lds	r25, 0x0730	; 0x800730 <count_resets>
    30c4:	80 91 31 07 	lds	r24, 0x0731	; 0x800731 <count_resets+0x1>
    30c8:	90 93 ae 12 	sts	0x12AE, r25	; 0x8012ae <ackPayload+0x7>
					ackPayload[8] = count_resets>>8;
    30cc:	80 93 af 12 	sts	0x12AF, r24	; 0x8012af <ackPayload+0x8>
					ackPayload[9] = ((unsigned int) speedr)&0xFF;
    30d0:	90 91 ff 02 	lds	r25, 0x02FF	; 0x8002ff <speedr>
    30d4:	80 91 00 03 	lds	r24, 0x0300	; 0x800300 <speedr+0x1>
    30d8:	90 93 b0 12 	sts	0x12B0, r25	; 0x8012b0 <ackPayload+0x9>
					ackPayload[10] = ((unsigned int) speedr)>>8;
    30dc:	80 93 b1 12 	sts	0x12B1, r24	; 0x8012b1 <ackPayload+0xa>
					ackPayload[11] = ((unsigned int) Ypos_array[ROBOTS-2])&0xFF;
    30e0:	00 91 2b 02 	lds	r16, 0x022B	; 0x80022b <ROBOTS>
    30e4:	10 91 2c 02 	lds	r17, 0x022C	; 0x80022c <ROBOTS+0x1>
    30e8:	02 50       	subi	r16, 0x02	; 2
    30ea:	11 09       	sbc	r17, r1
    30ec:	00 0f       	add	r16, r16
    30ee:	11 1f       	adc	r17, r17
    30f0:	00 0f       	add	r16, r16
    30f2:	11 1f       	adc	r17, r17
    30f4:	f8 01       	movw	r30, r16
    30f6:	ee 5b       	subi	r30, 0xBE	; 190
    30f8:	f8 4f       	sbci	r31, 0xF8	; 248
    30fa:	60 81       	ld	r22, Z
    30fc:	71 81       	ldd	r23, Z+1	; 0x01
    30fe:	82 81       	ldd	r24, Z+2	; 0x02
    3100:	93 81       	ldd	r25, Z+3	; 0x03
    3102:	0e 94 76 4e 	call	0x9cec	; 0x9cec <__fixunssfsi>
    3106:	60 93 b2 12 	sts	0x12B2, r22	; 0x8012b2 <ackPayload+0xb>
					ackPayload[12] = ((unsigned int) Ypos_array[ROBOTS-2])>>8;	
    310a:	70 93 b3 12 	sts	0x12B3, r23	; 0x8012b3 <ackPayload+0xc>
					ackPayload[13] = ((unsigned int) Xpos_array[ROBOTS-2])&0xFF;
    310e:	f8 01       	movw	r30, r16
    3110:	ee 52       	subi	r30, 0x2E	; 46
    3112:	f7 4f       	sbci	r31, 0xF7	; 247
    3114:	60 81       	ld	r22, Z
    3116:	71 81       	ldd	r23, Z+1	; 0x01
    3118:	82 81       	ldd	r24, Z+2	; 0x02
    311a:	93 81       	ldd	r25, Z+3	; 0x03
    311c:	0e 94 76 4e 	call	0x9cec	; 0x9cec <__fixunssfsi>
    3120:	60 93 b4 12 	sts	0x12B4, r22	; 0x8012b4 <ackPayload+0xd>
					ackPayload[14] = ((unsigned int) Xpos_array[ROBOTS-2])>>8;
    3124:	70 93 b5 12 	sts	0x12B5, r23	; 0x8012b5 <ackPayload+0xe>
					ackPayload[15] = 0;
    3128:	10 92 b6 12 	sts	0x12B6, r1	; 0x8012b6 <ackPayload+0xf>
					//ackPayload[15] = ((unsigned int)trigger_count)&0xFF;
					packetId = 7;
    312c:	87 e0       	ldi	r24, 0x07	; 7
    312e:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <packetId>
    3132:	10 91 2b 07 	lds	r17, 0x072B	; 0x80072b <turn>
					break;
    3136:	22 cf       	rjmp	.-444    	; 0x2f7c <handleRFCommands+0x3ea>
				}
				
			}
			
			if(currentSelector == 2) {
				if(calibrateOdomFlag==0) {
    3138:	80 91 53 0f 	lds	r24, 0x0F53	; 0x800f53 <calibrateOdomFlag>
    313c:	81 11       	cpse	r24, r1
    313e:	4e ce       	rjmp	.-868    	; 0x2ddc <handleRFCommands+0x24a>
					if((rfData[7]&0b00000001)==0b00000001) {
    3140:	80 91 76 13 	lds	r24, 0x1376	; 0x801376 <rfData+0x7>
    3144:	80 ff       	sbrs	r24, 0
    3146:	4a ce       	rjmp	.-876    	; 0x2ddc <handleRFCommands+0x24a>
						calibrateSensors();
    3148:	0e 94 a6 47 	call	0x8f4c	; 0x8f4c <calibrateSensors>
						proximityResult[8] = 1023;	// because the first time this value could be low after calibration
    314c:	8f ef       	ldi	r24, 0xFF	; 255
    314e:	93 e0       	ldi	r25, 0x03	; 3
    3150:	90 93 a8 03 	sts	0x03A8, r25	; 0x8003a8 <proximityResult+0x11>
    3154:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <proximityResult+0x10>
						proximityResult[11] = 1023;	// and in that case a false black line will be detected
    3158:	90 93 ae 03 	sts	0x03AE, r25	; 0x8003ae <proximityResult+0x17>
    315c:	80 93 ad 03 	sts	0x03AD, r24	; 0x8003ad <proximityResult+0x16>
						calibState = CALIBRATION_STATE_FIND_THRS_0;
    3160:	86 e0       	ldi	r24, 0x06	; 6
    3162:	80 93 46 15 	sts	0x1546, r24	; 0x801546 <calibState>
						calibVelIndex = 1;
    3166:	81 e0       	ldi	r24, 0x01	; 1
    3168:	80 93 a0 12 	sts	0x12A0, r24	; 0x8012a0 <calibVelIndex>
						calibrateOdomFlag = 1;
    316c:	80 93 53 0f 	sts	0x0F53, r24	; 0x800f53 <calibrateOdomFlag>
    3170:	35 ce       	rjmp	.-918    	; 0x2ddc <handleRFCommands+0x24a>
    3172:	01 2f       	mov	r16, r17
    3174:	0f 70       	andi	r16, 0x0F	; 15
    3176:	10 75       	andi	r17, 0x50	; 80
			
			if ((rfData[3]&0b10000000)==0b10000000){
				// initialisation of the positions in x_hat
				id_start = 0x0F & rfData[3];
								
				if ((rfData[3]&0b01010000)==0b00000000){
    3178:	09 f0       	breq	.+2      	; 0x317c <handleRFCommands+0x5ea>
    317a:	09 c1       	rjmp	.+530    	; 0x338e <handleRFCommands+0x7fc>
					// type 1
					if(id_start == 0){
    317c:	01 11       	cpse	r16, r1
    317e:	c5 c1       	rjmp	.+906    	; 0x350a <handleRFCommands+0x978>
						id = rfData[0];
    3180:	00 91 6f 13 	lds	r16, 0x136F	; 0x80136f <rfData>
    3184:	10 e0       	ldi	r17, 0x00	; 0
    3186:	10 93 2a 02 	sts	0x022A, r17	; 0x80022a <id+0x1>
    318a:	00 93 29 02 	sts	0x0229, r16	; 0x800229 <id>
						ROBOTS = rfData[4];
    318e:	80 91 73 13 	lds	r24, 0x1373	; 0x801373 <rfData+0x4>
    3192:	90 e0       	ldi	r25, 0x00	; 0
    3194:	90 93 2c 02 	sts	0x022C, r25	; 0x80022c <ROBOTS+0x1>
    3198:	80 93 2b 02 	sts	0x022B, r24	; 0x80022b <ROBOTS>
						filtered_theta = (((signed int) (rfData[2]<<8) | (unsigned char) rfData[1]))/573.0; //to radians
    319c:	60 91 70 13 	lds	r22, 0x1370	; 0x801370 <rfData+0x1>
    31a0:	70 91 71 13 	lds	r23, 0x1371	; 0x801371 <rfData+0x2>
    31a4:	07 2e       	mov	r0, r23
    31a6:	00 0c       	add	r0, r0
    31a8:	88 0b       	sbc	r24, r24
    31aa:	99 0b       	sbc	r25, r25
    31ac:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    31b0:	20 e0       	ldi	r18, 0x00	; 0
    31b2:	30 e4       	ldi	r19, 0x40	; 64
    31b4:	4f e0       	ldi	r20, 0x0F	; 15
    31b6:	54 e4       	ldi	r21, 0x44	; 68
    31b8:	0e 94 c3 4d 	call	0x9b86	; 0x9b86 <__divsf3>
    31bc:	60 93 2c 07 	sts	0x072C, r22	; 0x80072c <filtered_theta>
    31c0:	70 93 2d 07 	sts	0x072D, r23	; 0x80072d <filtered_theta+0x1>
    31c4:	80 93 2e 07 	sts	0x072E, r24	; 0x80072e <filtered_theta+0x2>
    31c8:	90 93 2f 07 	sts	0x072F, r25	; 0x80072f <filtered_theta+0x3>
						theta = filtered_theta;
    31cc:	60 93 af 02 	sts	0x02AF, r22	; 0x8002af <theta>
    31d0:	70 93 b0 02 	sts	0x02B0, r23	; 0x8002b0 <theta+0x1>
    31d4:	80 93 b1 02 	sts	0x02B1, r24	; 0x8002b1 <theta+0x2>
    31d8:	90 93 b2 02 	sts	0x02B2, r25	; 0x8002b2 <theta+0x3>
						
						Xpos_array[id] = ((signed int) (rfData[6]<<8) | (unsigned char) rfData[5]);
    31dc:	60 91 74 13 	lds	r22, 0x1374	; 0x801374 <rfData+0x5>
    31e0:	70 91 75 13 	lds	r23, 0x1375	; 0x801375 <rfData+0x6>
    31e4:	07 2e       	mov	r0, r23
    31e6:	00 0c       	add	r0, r0
    31e8:	88 0b       	sbc	r24, r24
    31ea:	99 0b       	sbc	r25, r25
    31ec:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    31f0:	2b 01       	movw	r4, r22
    31f2:	3c 01       	movw	r6, r24
    31f4:	00 0f       	add	r16, r16
    31f6:	11 1f       	adc	r17, r17
    31f8:	00 0f       	add	r16, r16
    31fa:	11 1f       	adc	r17, r17
    31fc:	f8 01       	movw	r30, r16
    31fe:	ee 52       	subi	r30, 0x2E	; 46
    3200:	f7 4f       	sbci	r31, 0xF7	; 247
    3202:	60 83       	st	Z, r22
    3204:	71 83       	std	Z+1, r23	; 0x01
    3206:	82 83       	std	Z+2, r24	; 0x02
    3208:	93 83       	std	Z+3, r25	; 0x03
						Ypos_array[id] = ((signed int) (rfData[8]<<8) | (unsigned char) rfData[7]);
    320a:	60 91 76 13 	lds	r22, 0x1376	; 0x801376 <rfData+0x7>
    320e:	70 91 77 13 	lds	r23, 0x1377	; 0x801377 <rfData+0x8>
    3212:	07 2e       	mov	r0, r23
    3214:	00 0c       	add	r0, r0
    3216:	88 0b       	sbc	r24, r24
    3218:	99 0b       	sbc	r25, r25
    321a:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    321e:	6b 01       	movw	r12, r22
    3220:	7c 01       	movw	r14, r24
    3222:	f8 01       	movw	r30, r16
    3224:	ee 5b       	subi	r30, 0xBE	; 190
    3226:	f8 4f       	sbci	r31, 0xF8	; 248
    3228:	60 83       	st	Z, r22
    322a:	71 83       	std	Z+1, r23	; 0x01
    322c:	82 83       	std	Z+2, r24	; 0x02
    322e:	93 83       	std	Z+3, r25	; 0x03
						
						error_radius = ((signed int) (rfData[10]<<8) | (unsigned char) rfData[9]);
    3230:	80 91 78 13 	lds	r24, 0x1378	; 0x801378 <rfData+0x9>
    3234:	90 91 79 13 	lds	r25, 0x1379	; 0x801379 <rfData+0xa>
    3238:	90 93 1a 02 	sts	0x021A, r25	; 0x80021a <error_radius+0x1>
    323c:	80 93 19 02 	sts	0x0219, r24	; 0x800219 <error_radius>
						u_max = ((signed int) (rfData[12]<<8) | (unsigned char) rfData[11]);
    3240:	60 91 7a 13 	lds	r22, 0x137A	; 0x80137a <rfData+0xb>
    3244:	70 91 7b 13 	lds	r23, 0x137B	; 0x80137b <rfData+0xc>
    3248:	07 2e       	mov	r0, r23
    324a:	00 0c       	add	r0, r0
    324c:	88 0b       	sbc	r24, r24
    324e:	99 0b       	sbc	r25, r25
    3250:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    3254:	60 93 15 02 	sts	0x0215, r22	; 0x800215 <u_max>
    3258:	70 93 16 02 	sts	0x0216, r23	; 0x800216 <u_max+0x1>
    325c:	80 93 17 02 	sts	0x0217, r24	; 0x800217 <u_max+0x2>
    3260:	90 93 18 02 	sts	0x0218, r25	; 0x800218 <u_max+0x3>
						
						//Set all variables related to Xpos
						xPos_fixed = Xpos_array[id];
    3264:	40 92 02 04 	sts	0x0402, r4	; 0x800402 <xPos_fixed>
    3268:	50 92 03 04 	sts	0x0403, r5	; 0x800403 <xPos_fixed+0x1>
    326c:	60 92 04 04 	sts	0x0404, r6	; 0x800404 <xPos_fixed+0x2>
    3270:	70 92 05 04 	sts	0x0405, r7	; 0x800405 <xPos_fixed+0x3>
						yPos_fixed = Ypos_array[id];
    3274:	c0 92 fe 03 	sts	0x03FE, r12	; 0x8003fe <yPos_fixed>
    3278:	d0 92 ff 03 	sts	0x03FF, r13	; 0x8003ff <yPos_fixed+0x1>
    327c:	e0 92 00 04 	sts	0x0400, r14	; 0x800400 <yPos_fixed+0x2>
    3280:	f0 92 01 04 	sts	0x0401, r15	; 0x800401 <yPos_fixed+0x3>
						xPos = Xpos_array[id];
    3284:	40 92 a7 02 	sts	0x02A7, r4	; 0x8002a7 <xPos>
    3288:	50 92 a8 02 	sts	0x02A8, r5	; 0x8002a8 <xPos+0x1>
    328c:	60 92 a9 02 	sts	0x02A9, r6	; 0x8002a9 <xPos+0x2>
    3290:	70 92 aa 02 	sts	0x02AA, r7	; 0x8002aa <xPos+0x3>
						yPos = Ypos_array[id];
    3294:	c0 92 a3 02 	sts	0x02A3, r12	; 0x8002a3 <yPos>
    3298:	d0 92 a4 02 	sts	0x02A4, r13	; 0x8002a4 <yPos+0x1>
    329c:	e0 92 a5 02 	sts	0x02A5, r14	; 0x8002a5 <yPos+0x2>
    32a0:	f0 92 a6 02 	sts	0x02A6, r15	; 0x8002a6 <yPos+0x3>
						position[0] = Xpos_array[id];
    32a4:	40 92 32 07 	sts	0x0732, r4	; 0x800732 <position>
    32a8:	50 92 33 07 	sts	0x0733, r5	; 0x800733 <position+0x1>
    32ac:	60 92 34 07 	sts	0x0734, r6	; 0x800734 <position+0x2>
    32b0:	70 92 35 07 	sts	0x0735, r7	; 0x800735 <position+0x3>
						position[1] = Ypos_array[id];
    32b4:	c0 92 36 07 	sts	0x0736, r12	; 0x800736 <position+0x4>
    32b8:	d0 92 37 07 	sts	0x0737, r13	; 0x800737 <position+0x5>
    32bc:	e0 92 38 07 	sts	0x0738, r14	; 0x800738 <position+0x6>
    32c0:	f0 92 39 07 	sts	0x0739, r15	; 0x800739 <position+0x7>
						fixed_position[0] = Xpos_array[id];
    32c4:	40 92 3a 07 	sts	0x073A, r4	; 0x80073a <fixed_position>
    32c8:	50 92 3b 07 	sts	0x073B, r5	; 0x80073b <fixed_position+0x1>
    32cc:	60 92 3c 07 	sts	0x073C, r6	; 0x80073c <fixed_position+0x2>
    32d0:	70 92 3d 07 	sts	0x073D, r7	; 0x80073d <fixed_position+0x3>
						fixed_position[1] = Ypos_array[id];
    32d4:	c0 92 3e 07 	sts	0x073E, r12	; 0x80073e <fixed_position+0x4>
    32d8:	d0 92 3f 07 	sts	0x073F, r13	; 0x80073f <fixed_position+0x5>
    32dc:	e0 92 40 07 	sts	0x0740, r14	; 0x800740 <fixed_position+0x6>
    32e0:	f0 92 41 07 	sts	0x0741, r15	; 0x800741 <fixed_position+0x7>
    32e4:	10 91 cc 02 	lds	r17, 0x02CC	; 0x8002cc <currentSelector>
    32e8:	76 cd       	rjmp	.-1300   	; 0x2dd6 <handleRFCommands+0x244>
					ackPayload[15] = irCommand;
					packetId = 5;
					break;

				case 5:
					if (r_speed < 0){
    32ea:	80 91 f5 03 	lds	r24, 0x03F5	; 0x8003f5 <r_speed>
    32ee:	90 91 f6 03 	lds	r25, 0x03F6	; 0x8003f6 <r_speed+0x1>
    32f2:	97 fd       	sbrc	r25, 7
    32f4:	9e c1       	rjmp	.+828    	; 0x3632 <handleRFCommands+0xaa0>
						r_speed_temp = (((unsigned int) -r_speed)&0xFF); 
					}else{
						r_speed_temp = 0x80 | (((unsigned int) r_speed)&0xFF);	
    32f6:	99 27       	eor	r25, r25
    32f8:	80 68       	ori	r24, 0x80	; 128
					}else{
						l_speed_temp = 0x80 | (((unsigned int) l_speed)&0xFF);
					}					
				
				
					ackPayload[1] = init_time&0xFF;
    32fa:	40 91 ed 03 	lds	r20, 0x03ED	; 0x8003ed <init_time>
    32fe:	30 91 ee 03 	lds	r19, 0x03EE	; 0x8003ee <init_time+0x1>
    3302:	20 91 ef 03 	lds	r18, 0x03EF	; 0x8003ef <init_time+0x2>
    3306:	90 91 f0 03 	lds	r25, 0x03F0	; 0x8003f0 <init_time+0x3>
    330a:	40 93 a8 12 	sts	0x12A8, r20	; 0x8012a8 <ackPayload+0x1>
					ackPayload[2] = init_time>>8;
    330e:	30 93 a9 12 	sts	0x12A9, r19	; 0x8012a9 <ackPayload+0x2>
					ackPayload[3] = init_time>>16;
    3312:	20 93 aa 12 	sts	0x12AA, r18	; 0x8012aa <ackPayload+0x3>
					ackPayload[4] = init_time>>24;
    3316:	90 93 ab 12 	sts	0x12AB, r25	; 0x8012ab <ackPayload+0x4>
					ackPayload[5] = comm_time&0xFF;
    331a:	40 91 e5 03 	lds	r20, 0x03E5	; 0x8003e5 <comm_time>
    331e:	30 91 e6 03 	lds	r19, 0x03E6	; 0x8003e6 <comm_time+0x1>
    3322:	20 91 e7 03 	lds	r18, 0x03E7	; 0x8003e7 <comm_time+0x2>
    3326:	90 91 e8 03 	lds	r25, 0x03E8	; 0x8003e8 <comm_time+0x3>
    332a:	40 93 ac 12 	sts	0x12AC, r20	; 0x8012ac <ackPayload+0x5>
					ackPayload[6] = comm_time>>8;
    332e:	30 93 ad 12 	sts	0x12AD, r19	; 0x8012ad <ackPayload+0x6>
					ackPayload[7] = comm_time>>16;
    3332:	20 93 ae 12 	sts	0x12AE, r18	; 0x8012ae <ackPayload+0x7>
					ackPayload[8] = comm_time>>24;
    3336:	90 93 af 12 	sts	0x12AF, r25	; 0x8012af <ackPayload+0x8>
					ackPayload[9] = r_speed_temp&0xFF;
    333a:	80 93 b0 12 	sts	0x12B0, r24	; 0x8012b0 <ackPayload+0x9>
					ackPayload[10] = turn&0xFF;
    333e:	10 91 2b 07 	lds	r17, 0x072B	; 0x80072b <turn>
    3342:	10 93 b1 12 	sts	0x12B1, r17	; 0x8012b1 <ackPayload+0xa>
					ackPayload[11] = ((signed int) (filtered_theta*573.0))&0xFF;
    3346:	20 e0       	ldi	r18, 0x00	; 0
    3348:	30 e4       	ldi	r19, 0x40	; 64
    334a:	4f e0       	ldi	r20, 0x0F	; 15
    334c:	54 e4       	ldi	r21, 0x44	; 68
    334e:	60 91 2c 07 	lds	r22, 0x072C	; 0x80072c <filtered_theta>
    3352:	70 91 2d 07 	lds	r23, 0x072D	; 0x80072d <filtered_theta+0x1>
    3356:	80 91 2e 07 	lds	r24, 0x072E	; 0x80072e <filtered_theta+0x2>
    335a:	90 91 2f 07 	lds	r25, 0x072F	; 0x80072f <filtered_theta+0x3>
    335e:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    3362:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__fixsfsi>
    3366:	60 93 b2 12 	sts	0x12B2, r22	; 0x8012b2 <ackPayload+0xb>
					ackPayload[12] = ((signed int) (filtered_theta*573.0))>>8;
    336a:	70 93 b3 12 	sts	0x12B3, r23	; 0x8012b3 <ackPayload+0xc>
					ackPayload[13] = count_resets&0xFF;
    336e:	90 91 30 07 	lds	r25, 0x0730	; 0x800730 <count_resets>
    3372:	80 91 31 07 	lds	r24, 0x0731	; 0x800731 <count_resets+0x1>
    3376:	90 93 b4 12 	sts	0x12B4, r25	; 0x8012b4 <ackPayload+0xd>
					ackPayload[14] = count_resets>>8;
    337a:	80 93 b5 12 	sts	0x12B5, r24	; 0x8012b5 <ackPayload+0xe>
					ackPayload[15] = currentSelector;
    337e:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <currentSelector>
    3382:	80 93 b6 12 	sts	0x12B6, r24	; 0x8012b6 <ackPayload+0xf>
					packetId = 6;
    3386:	86 e0       	ldi	r24, 0x06	; 6
    3388:	80 93 10 02 	sts	0x0210, r24	; 0x800210 <packetId>
					break;
    338c:	f7 cd       	rjmp	.-1042   	; 0x2f7c <handleRFCommands+0x3ea>
						Xpos_array[id_start+2] = ((signed int) (rfData[10]<<8) | (unsigned char) rfData[9]);
						Ypos_array[id_start+2] = ((signed int) (rfData[12]<<8) | (unsigned char) rfData[11]);
									
					}
					
				}else if ((rfData[3]&0b01010000)==0b00010000){
    338e:	10 31       	cpi	r17, 0x10	; 16
    3390:	09 f4       	brne	.+2      	; 0x3394 <handleRFCommands+0x802>
    3392:	54 c1       	rjmp	.+680    	; 0x363c <handleRFCommands+0xaaa>
						L[id_start+3] = ((signed int) (rfData[8]<<8) | (unsigned char) rfData[7]);
						
						L[id_start+4] = ((signed int) (rfData[10]<<8) | (unsigned char) rfData[9]);
						L[id_start+5] = ((signed int) (rfData[12]<<8) | (unsigned char) rfData[11]);
					
				}else if ((rfData[3]&0b01010000)==0b01000000){
    3394:	10 34       	cpi	r17, 0x40	; 64
    3396:	09 f4       	brne	.+2      	; 0x339a <handleRFCommands+0x808>
    3398:	d8 c1       	rjmp	.+944    	; 0x374a <handleRFCommands+0xbb8>
														
							B[0][id_start+4] = ((signed int) (rfData[10]<<8) | (unsigned char) rfData[9]);
							B[0][id_start+5] = ((signed int) (rfData[12]<<8) | (unsigned char) rfData[11]);	
						}
					
				} else if ((rfData[3]&0b01010000)==0b01010000){
    339a:	10 35       	cpi	r17, 0x50	; 80
    339c:	09 f0       	breq	.+2      	; 0x33a0 <handleRFCommands+0x80e>
    339e:	19 cd       	rjmp	.-1486   	; 0x2dd2 <handleRFCommands+0x240>
					// type 4
					
						id_start = id_start*5;
    33a0:	f5 e0       	ldi	r31, 0x05	; 5
    33a2:	0f 9f       	mul	r16, r31
    33a4:	70 01       	movw	r14, r0
    33a6:	11 24       	eor	r1, r1
						
						if (currentSelector == 13 || currentSelector == 12){
    33a8:	10 91 cc 02 	lds	r17, 0x02CC	; 0x8002cc <currentSelector>
    33ac:	84 ef       	ldi	r24, 0xF4	; 244
    33ae:	81 0f       	add	r24, r17
    33b0:	82 30       	cpi	r24, 0x02	; 2
    33b2:	08 f4       	brcc	.+2      	; 0x33b6 <handleRFCommands+0x824>
    33b4:	e3 c2       	rjmp	.+1478   	; 0x397c <handleRFCommands+0xdea>
							By[id_start+3] = ((signed int) (rfData[8]<<8) | (unsigned char) rfData[7]);
											
							By[id_start+4] = ((signed int) (rfData[10]<<8) | (unsigned char) rfData[9]);
							By[id_start+5] = ((signed int) (rfData[12]<<8) | (unsigned char) rfData[11]);
						} else{
							B[1][id_start] = ((signed int) (rfData[1]<<8) | (unsigned char) rfData[0]);
    33b6:	c7 01       	movw	r24, r14
    33b8:	88 0f       	add	r24, r24
    33ba:	99 1f       	adc	r25, r25
    33bc:	88 0f       	add	r24, r24
    33be:	99 1f       	adc	r25, r25
    33c0:	9c 01       	movw	r18, r24
    33c2:	25 56       	subi	r18, 0x65	; 101
    33c4:	3a 4f       	sbci	r19, 0xFA	; 250
    33c6:	69 01       	movw	r12, r18
    33c8:	60 91 6f 13 	lds	r22, 0x136F	; 0x80136f <rfData>
    33cc:	70 91 70 13 	lds	r23, 0x1370	; 0x801370 <rfData+0x1>
    33d0:	07 2e       	mov	r0, r23
    33d2:	00 0c       	add	r0, r0
    33d4:	88 0b       	sbc	r24, r24
    33d6:	99 0b       	sbc	r25, r25
    33d8:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    33dc:	f6 01       	movw	r30, r12
    33de:	60 83       	st	Z, r22
    33e0:	71 83       	std	Z+1, r23	; 0x01
    33e2:	82 83       	std	Z+2, r24	; 0x02
    33e4:	93 83       	std	Z+3, r25	; 0x03
							B[1][id_start+1] = ((signed int) (rfData[4]<<8) | (unsigned char) rfData[2]);
    33e6:	c7 01       	movw	r24, r14
    33e8:	88 0f       	add	r24, r24
    33ea:	99 1f       	adc	r25, r25
    33ec:	88 0f       	add	r24, r24
    33ee:	99 1f       	adc	r25, r25
    33f0:	9c 01       	movw	r18, r24
    33f2:	21 56       	subi	r18, 0x61	; 97
    33f4:	3a 4f       	sbci	r19, 0xFA	; 250
    33f6:	69 01       	movw	r12, r18
    33f8:	60 91 73 13 	lds	r22, 0x1373	; 0x801373 <rfData+0x4>
    33fc:	70 e0       	ldi	r23, 0x00	; 0
    33fe:	76 2f       	mov	r23, r22
    3400:	66 27       	eor	r22, r22
    3402:	80 91 71 13 	lds	r24, 0x1371	; 0x801371 <rfData+0x2>
    3406:	68 2b       	or	r22, r24
    3408:	07 2e       	mov	r0, r23
    340a:	00 0c       	add	r0, r0
    340c:	88 0b       	sbc	r24, r24
    340e:	99 0b       	sbc	r25, r25
    3410:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    3414:	f6 01       	movw	r30, r12
    3416:	60 83       	st	Z, r22
    3418:	71 83       	std	Z+1, r23	; 0x01
    341a:	82 83       	std	Z+2, r24	; 0x02
    341c:	93 83       	std	Z+3, r25	; 0x03
						
							B[1][id_start+2] = ((signed int) (rfData[6]<<8) | (unsigned char) rfData[5]);
    341e:	c7 01       	movw	r24, r14
    3420:	88 0f       	add	r24, r24
    3422:	99 1f       	adc	r25, r25
    3424:	88 0f       	add	r24, r24
    3426:	99 1f       	adc	r25, r25
    3428:	9c 01       	movw	r18, r24
    342a:	2d 55       	subi	r18, 0x5D	; 93
    342c:	3a 4f       	sbci	r19, 0xFA	; 250
    342e:	69 01       	movw	r12, r18
    3430:	60 91 74 13 	lds	r22, 0x1374	; 0x801374 <rfData+0x5>
    3434:	70 91 75 13 	lds	r23, 0x1375	; 0x801375 <rfData+0x6>
    3438:	07 2e       	mov	r0, r23
    343a:	00 0c       	add	r0, r0
    343c:	88 0b       	sbc	r24, r24
    343e:	99 0b       	sbc	r25, r25
    3440:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    3444:	f6 01       	movw	r30, r12
    3446:	60 83       	st	Z, r22
    3448:	71 83       	std	Z+1, r23	; 0x01
    344a:	82 83       	std	Z+2, r24	; 0x02
    344c:	93 83       	std	Z+3, r25	; 0x03
							B[1][id_start+3] = ((signed int) (rfData[8]<<8) | (unsigned char) rfData[7]);
    344e:	c7 01       	movw	r24, r14
    3450:	88 0f       	add	r24, r24
    3452:	99 1f       	adc	r25, r25
    3454:	88 0f       	add	r24, r24
    3456:	99 1f       	adc	r25, r25
    3458:	9c 01       	movw	r18, r24
    345a:	29 55       	subi	r18, 0x59	; 89
    345c:	3a 4f       	sbci	r19, 0xFA	; 250
    345e:	69 01       	movw	r12, r18
    3460:	60 91 76 13 	lds	r22, 0x1376	; 0x801376 <rfData+0x7>
    3464:	70 91 77 13 	lds	r23, 0x1377	; 0x801377 <rfData+0x8>
    3468:	07 2e       	mov	r0, r23
    346a:	00 0c       	add	r0, r0
    346c:	88 0b       	sbc	r24, r24
    346e:	99 0b       	sbc	r25, r25
    3470:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    3474:	f6 01       	movw	r30, r12
    3476:	60 83       	st	Z, r22
    3478:	71 83       	std	Z+1, r23	; 0x01
    347a:	82 83       	std	Z+2, r24	; 0x02
    347c:	93 83       	std	Z+3, r25	; 0x03
						
							B[1][id_start+4] = ((signed int) (rfData[10]<<8) | (unsigned char) rfData[9]);
    347e:	c7 01       	movw	r24, r14
    3480:	88 0f       	add	r24, r24
    3482:	99 1f       	adc	r25, r25
    3484:	88 0f       	add	r24, r24
    3486:	99 1f       	adc	r25, r25
    3488:	9c 01       	movw	r18, r24
    348a:	25 55       	subi	r18, 0x55	; 85
    348c:	3a 4f       	sbci	r19, 0xFA	; 250
    348e:	69 01       	movw	r12, r18
    3490:	60 91 78 13 	lds	r22, 0x1378	; 0x801378 <rfData+0x9>
    3494:	70 91 79 13 	lds	r23, 0x1379	; 0x801379 <rfData+0xa>
    3498:	07 2e       	mov	r0, r23
    349a:	00 0c       	add	r0, r0
    349c:	88 0b       	sbc	r24, r24
    349e:	99 0b       	sbc	r25, r25
    34a0:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    34a4:	f6 01       	movw	r30, r12
    34a6:	60 83       	st	Z, r22
    34a8:	71 83       	std	Z+1, r23	; 0x01
    34aa:	82 83       	std	Z+2, r24	; 0x02
    34ac:	93 83       	std	Z+3, r25	; 0x03
							B[1][id_start+5] = ((signed int) (rfData[12]<<8) | (unsigned char) rfData[11]);
    34ae:	c7 01       	movw	r24, r14
    34b0:	88 0f       	add	r24, r24
    34b2:	99 1f       	adc	r25, r25
    34b4:	88 0f       	add	r24, r24
    34b6:	99 1f       	adc	r25, r25
    34b8:	9c 01       	movw	r18, r24
    34ba:	21 55       	subi	r18, 0x51	; 81
    34bc:	3a 4f       	sbci	r19, 0xFA	; 250
    34be:	79 01       	movw	r14, r18
    34c0:	60 91 7a 13 	lds	r22, 0x137A	; 0x80137a <rfData+0xb>
    34c4:	70 91 7b 13 	lds	r23, 0x137B	; 0x80137b <rfData+0xc>
    34c8:	07 2e       	mov	r0, r23
    34ca:	00 0c       	add	r0, r0
    34cc:	88 0b       	sbc	r24, r24
    34ce:	99 0b       	sbc	r25, r25
    34d0:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    34d4:	f7 01       	movw	r30, r14
    34d6:	60 83       	st	Z, r22
    34d8:	71 83       	std	Z+1, r23	; 0x01
    34da:	82 83       	std	Z+2, r24	; 0x02
    34dc:	93 83       	std	Z+3, r25	; 0x03
    34de:	7b cc       	rjmp	.-1802   	; 0x2dd6 <handleRFCommands+0x244>
	return pWidth;
}

void flushTxFifo() {

    mirf_CSN_lo;
    34e0:	28 98       	cbi	0x05, 0	; 5
    SPI_Write_Byte(FLUSH_TX);
    34e2:	81 ee       	ldi	r24, 0xE1	; 225
    34e4:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <SPI_Write_Byte>
    mirf_CSN_hi;
    34e8:	28 9a       	sbi	0x05, 0	; 5

	unsigned char k = 0;

	flushTxFifo();

    mirf_CSN_lo;
    34ea:	28 98       	cbi	0x05, 0	; 5

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);
    34ec:	88 ea       	ldi	r24, 0xA8	; 168
    34ee:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <SPI_Write_Byte>
    34f2:	07 ea       	ldi	r16, 0xA7	; 167
    34f4:	12 e1       	ldi	r17, 0x12	; 18

	for(k=0; k<size; k++) {
		SPI_Write_Byte(data[k]);
    34f6:	f8 01       	movw	r30, r16
    34f8:	81 91       	ld	r24, Z+
    34fa:	8f 01       	movw	r16, r30
    34fc:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <SPI_Write_Byte>

    mirf_CSN_lo;

	SPI_Write_Byte(NRF_W_ACK_PAYLOAD_P0);

	for(k=0; k<size; k++) {
    3500:	f2 e1       	ldi	r31, 0x12	; 18
    3502:	07 3b       	cpi	r16, 0xB7	; 183
    3504:	1f 07       	cpc	r17, r31
    3506:	b9 f7       	brne	.-18     	; 0x34f6 <handleRFCommands+0x964>
    3508:	66 cd       	rjmp	.-1332   	; 0x2fd6 <handleRFCommands+0x444>
						position[0] = Xpos_array[id];
						position[1] = Ypos_array[id];
						fixed_position[0] = Xpos_array[id];
						fixed_position[1] = Ypos_array[id];
					}else{
						id_start = (id_start-1)*3;
    350a:	80 2f       	mov	r24, r16
    350c:	90 e0       	ldi	r25, 0x00	; 0
    350e:	8c 01       	movw	r16, r24
    3510:	00 0f       	add	r16, r16
    3512:	11 1f       	adc	r17, r17
    3514:	08 0f       	add	r16, r24
    3516:	19 1f       	adc	r17, r25
    3518:	78 01       	movw	r14, r16
    351a:	23 e0       	ldi	r18, 0x03	; 3
    351c:	e2 1a       	sub	r14, r18
    351e:	f1 08       	sbc	r15, r1
						
						Xpos_array[id_start] = ((signed int) (rfData[1]<<8) | (unsigned char) rfData[0]);
    3520:	ee 0c       	add	r14, r14
    3522:	ff 1c       	adc	r15, r15
    3524:	ee 0c       	add	r14, r14
    3526:	ff 1c       	adc	r15, r15
    3528:	c7 01       	movw	r24, r14
    352a:	8e 52       	subi	r24, 0x2E	; 46
    352c:	97 4f       	sbci	r25, 0xF7	; 247
    352e:	6c 01       	movw	r12, r24
    3530:	60 91 6f 13 	lds	r22, 0x136F	; 0x80136f <rfData>
    3534:	70 91 70 13 	lds	r23, 0x1370	; 0x801370 <rfData+0x1>
    3538:	07 2e       	mov	r0, r23
    353a:	00 0c       	add	r0, r0
    353c:	88 0b       	sbc	r24, r24
    353e:	99 0b       	sbc	r25, r25
    3540:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    3544:	f6 01       	movw	r30, r12
    3546:	60 83       	st	Z, r22
    3548:	71 83       	std	Z+1, r23	; 0x01
    354a:	82 83       	std	Z+2, r24	; 0x02
    354c:	93 83       	std	Z+3, r25	; 0x03
						Ypos_array[id_start] = ((signed int) (rfData[4]<<8) | (unsigned char) rfData[2]);
    354e:	97 01       	movw	r18, r14
    3550:	2e 5b       	subi	r18, 0xBE	; 190
    3552:	38 4f       	sbci	r19, 0xF8	; 248
    3554:	79 01       	movw	r14, r18
    3556:	60 91 73 13 	lds	r22, 0x1373	; 0x801373 <rfData+0x4>
    355a:	70 e0       	ldi	r23, 0x00	; 0
    355c:	76 2f       	mov	r23, r22
    355e:	66 27       	eor	r22, r22
    3560:	80 91 71 13 	lds	r24, 0x1371	; 0x801371 <rfData+0x2>
    3564:	68 2b       	or	r22, r24
    3566:	07 2e       	mov	r0, r23
    3568:	00 0c       	add	r0, r0
    356a:	88 0b       	sbc	r24, r24
    356c:	99 0b       	sbc	r25, r25
    356e:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    3572:	f7 01       	movw	r30, r14
    3574:	60 83       	st	Z, r22
    3576:	71 83       	std	Z+1, r23	; 0x01
    3578:	82 83       	std	Z+2, r24	; 0x02
    357a:	93 83       	std	Z+3, r25	; 0x03
						
						Xpos_array[id_start+1] = ((signed int) (rfData[6]<<8) | (unsigned char) rfData[5]);
    357c:	78 01       	movw	r14, r16
    357e:	f2 e0       	ldi	r31, 0x02	; 2
    3580:	ef 1a       	sub	r14, r31
    3582:	f1 08       	sbc	r15, r1
    3584:	ee 0c       	add	r14, r14
    3586:	ff 1c       	adc	r15, r15
    3588:	ee 0c       	add	r14, r14
    358a:	ff 1c       	adc	r15, r15
    358c:	97 01       	movw	r18, r14
    358e:	2e 52       	subi	r18, 0x2E	; 46
    3590:	37 4f       	sbci	r19, 0xF7	; 247
    3592:	69 01       	movw	r12, r18
    3594:	60 91 74 13 	lds	r22, 0x1374	; 0x801374 <rfData+0x5>
    3598:	70 91 75 13 	lds	r23, 0x1375	; 0x801375 <rfData+0x6>
    359c:	07 2e       	mov	r0, r23
    359e:	00 0c       	add	r0, r0
    35a0:	88 0b       	sbc	r24, r24
    35a2:	99 0b       	sbc	r25, r25
    35a4:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    35a8:	f6 01       	movw	r30, r12
    35aa:	60 83       	st	Z, r22
    35ac:	71 83       	std	Z+1, r23	; 0x01
    35ae:	82 83       	std	Z+2, r24	; 0x02
    35b0:	93 83       	std	Z+3, r25	; 0x03
						Ypos_array[id_start+1] = ((signed int) (rfData[8]<<8) | (unsigned char) rfData[7]);
    35b2:	97 01       	movw	r18, r14
    35b4:	2e 5b       	subi	r18, 0xBE	; 190
    35b6:	38 4f       	sbci	r19, 0xF8	; 248
    35b8:	79 01       	movw	r14, r18
    35ba:	60 91 76 13 	lds	r22, 0x1376	; 0x801376 <rfData+0x7>
    35be:	70 91 77 13 	lds	r23, 0x1377	; 0x801377 <rfData+0x8>
    35c2:	07 2e       	mov	r0, r23
    35c4:	00 0c       	add	r0, r0
    35c6:	88 0b       	sbc	r24, r24
    35c8:	99 0b       	sbc	r25, r25
    35ca:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    35ce:	f7 01       	movw	r30, r14
    35d0:	60 83       	st	Z, r22
    35d2:	71 83       	std	Z+1, r23	; 0x01
    35d4:	82 83       	std	Z+2, r24	; 0x02
    35d6:	93 83       	std	Z+3, r25	; 0x03
						
						Xpos_array[id_start+2] = ((signed int) (rfData[10]<<8) | (unsigned char) rfData[9]);
    35d8:	01 50       	subi	r16, 0x01	; 1
    35da:	11 09       	sbc	r17, r1
    35dc:	00 0f       	add	r16, r16
    35de:	11 1f       	adc	r17, r17
    35e0:	00 0f       	add	r16, r16
    35e2:	11 1f       	adc	r17, r17
    35e4:	98 01       	movw	r18, r16
    35e6:	2e 52       	subi	r18, 0x2E	; 46
    35e8:	37 4f       	sbci	r19, 0xF7	; 247
    35ea:	79 01       	movw	r14, r18
    35ec:	60 91 78 13 	lds	r22, 0x1378	; 0x801378 <rfData+0x9>
    35f0:	70 91 79 13 	lds	r23, 0x1379	; 0x801379 <rfData+0xa>
    35f4:	07 2e       	mov	r0, r23
    35f6:	00 0c       	add	r0, r0
    35f8:	88 0b       	sbc	r24, r24
    35fa:	99 0b       	sbc	r25, r25
    35fc:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    3600:	f7 01       	movw	r30, r14
    3602:	60 83       	st	Z, r22
    3604:	71 83       	std	Z+1, r23	; 0x01
    3606:	82 83       	std	Z+2, r24	; 0x02
    3608:	93 83       	std	Z+3, r25	; 0x03
						Ypos_array[id_start+2] = ((signed int) (rfData[12]<<8) | (unsigned char) rfData[11]);
    360a:	0e 5b       	subi	r16, 0xBE	; 190
    360c:	18 4f       	sbci	r17, 0xF8	; 248
						
						L[id_start+2] = ((signed int) (rfData[6]<<8) | (unsigned char) rfData[5]);
						L[id_start+3] = ((signed int) (rfData[8]<<8) | (unsigned char) rfData[7]);
						
						L[id_start+4] = ((signed int) (rfData[10]<<8) | (unsigned char) rfData[9]);
						L[id_start+5] = ((signed int) (rfData[12]<<8) | (unsigned char) rfData[11]);
    360e:	60 91 7a 13 	lds	r22, 0x137A	; 0x80137a <rfData+0xb>
    3612:	70 91 7b 13 	lds	r23, 0x137B	; 0x80137b <rfData+0xc>
    3616:	07 2e       	mov	r0, r23
    3618:	00 0c       	add	r0, r0
    361a:	88 0b       	sbc	r24, r24
    361c:	99 0b       	sbc	r25, r25
    361e:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    3622:	f8 01       	movw	r30, r16
    3624:	60 83       	st	Z, r22
    3626:	71 83       	std	Z+1, r23	; 0x01
    3628:	82 83       	std	Z+2, r24	; 0x02
    362a:	93 83       	std	Z+3, r25	; 0x03
    362c:	10 91 cc 02 	lds	r17, 0x02CC	; 0x8002cc <currentSelector>
    3630:	d2 cb       	rjmp	.-2140   	; 0x2dd6 <handleRFCommands+0x244>
					packetId = 5;
					break;

				case 5:
					if (r_speed < 0){
						r_speed_temp = (((unsigned int) -r_speed)&0xFF); 
    3632:	91 95       	neg	r25
    3634:	81 95       	neg	r24
    3636:	91 09       	sbc	r25, r1
    3638:	99 27       	eor	r25, r25
    363a:	5f ce       	rjmp	.-834    	; 0x32fa <handleRFCommands+0x768>
					}
					
				}else if ((rfData[3]&0b01010000)==0b00010000){
					// type 2
					
						id_start = id_start*5;
    363c:	f5 e0       	ldi	r31, 0x05	; 5
    363e:	0f 9f       	mul	r16, r31
    3640:	80 01       	movw	r16, r0
    3642:	11 24       	eor	r1, r1
					
						L[id_start] = ((signed int) (rfData[1]<<8) | (unsigned char) rfData[0]);
    3644:	c8 01       	movw	r24, r16
    3646:	88 0f       	add	r24, r24
    3648:	99 1f       	adc	r25, r25
    364a:	88 0f       	add	r24, r24
    364c:	99 1f       	adc	r25, r25
    364e:	9c 01       	movw	r18, r24
    3650:	2e 57       	subi	r18, 0x7E	; 126
    3652:	32 4f       	sbci	r19, 0xF2	; 242
    3654:	79 01       	movw	r14, r18
    3656:	60 91 6f 13 	lds	r22, 0x136F	; 0x80136f <rfData>
    365a:	70 91 70 13 	lds	r23, 0x1370	; 0x801370 <rfData+0x1>
    365e:	07 2e       	mov	r0, r23
    3660:	00 0c       	add	r0, r0
    3662:	88 0b       	sbc	r24, r24
    3664:	99 0b       	sbc	r25, r25
    3666:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    366a:	f7 01       	movw	r30, r14
    366c:	60 83       	st	Z, r22
    366e:	71 83       	std	Z+1, r23	; 0x01
    3670:	82 83       	std	Z+2, r24	; 0x02
    3672:	93 83       	std	Z+3, r25	; 0x03
						L[id_start+1] = ((signed int) (rfData[4]<<8) | (unsigned char) rfData[2]);
    3674:	c8 01       	movw	r24, r16
    3676:	88 0f       	add	r24, r24
    3678:	99 1f       	adc	r25, r25
    367a:	88 0f       	add	r24, r24
    367c:	99 1f       	adc	r25, r25
    367e:	9c 01       	movw	r18, r24
    3680:	2a 57       	subi	r18, 0x7A	; 122
    3682:	32 4f       	sbci	r19, 0xF2	; 242
    3684:	79 01       	movw	r14, r18
    3686:	60 91 73 13 	lds	r22, 0x1373	; 0x801373 <rfData+0x4>
    368a:	70 e0       	ldi	r23, 0x00	; 0
    368c:	76 2f       	mov	r23, r22
    368e:	66 27       	eor	r22, r22
    3690:	80 91 71 13 	lds	r24, 0x1371	; 0x801371 <rfData+0x2>
    3694:	68 2b       	or	r22, r24
    3696:	07 2e       	mov	r0, r23
    3698:	00 0c       	add	r0, r0
    369a:	88 0b       	sbc	r24, r24
    369c:	99 0b       	sbc	r25, r25
    369e:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    36a2:	f7 01       	movw	r30, r14
    36a4:	60 83       	st	Z, r22
    36a6:	71 83       	std	Z+1, r23	; 0x01
    36a8:	82 83       	std	Z+2, r24	; 0x02
    36aa:	93 83       	std	Z+3, r25	; 0x03
						
						L[id_start+2] = ((signed int) (rfData[6]<<8) | (unsigned char) rfData[5]);
    36ac:	c8 01       	movw	r24, r16
    36ae:	88 0f       	add	r24, r24
    36b0:	99 1f       	adc	r25, r25
    36b2:	88 0f       	add	r24, r24
    36b4:	99 1f       	adc	r25, r25
    36b6:	9c 01       	movw	r18, r24
    36b8:	26 57       	subi	r18, 0x76	; 118
    36ba:	32 4f       	sbci	r19, 0xF2	; 242
    36bc:	79 01       	movw	r14, r18
    36be:	60 91 74 13 	lds	r22, 0x1374	; 0x801374 <rfData+0x5>
    36c2:	70 91 75 13 	lds	r23, 0x1375	; 0x801375 <rfData+0x6>
    36c6:	07 2e       	mov	r0, r23
    36c8:	00 0c       	add	r0, r0
    36ca:	88 0b       	sbc	r24, r24
    36cc:	99 0b       	sbc	r25, r25
    36ce:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    36d2:	f7 01       	movw	r30, r14
    36d4:	60 83       	st	Z, r22
    36d6:	71 83       	std	Z+1, r23	; 0x01
    36d8:	82 83       	std	Z+2, r24	; 0x02
    36da:	93 83       	std	Z+3, r25	; 0x03
						L[id_start+3] = ((signed int) (rfData[8]<<8) | (unsigned char) rfData[7]);
    36dc:	c8 01       	movw	r24, r16
    36de:	88 0f       	add	r24, r24
    36e0:	99 1f       	adc	r25, r25
    36e2:	88 0f       	add	r24, r24
    36e4:	99 1f       	adc	r25, r25
    36e6:	9c 01       	movw	r18, r24
    36e8:	22 57       	subi	r18, 0x72	; 114
    36ea:	32 4f       	sbci	r19, 0xF2	; 242
    36ec:	79 01       	movw	r14, r18
    36ee:	60 91 76 13 	lds	r22, 0x1376	; 0x801376 <rfData+0x7>
    36f2:	70 91 77 13 	lds	r23, 0x1377	; 0x801377 <rfData+0x8>
    36f6:	07 2e       	mov	r0, r23
    36f8:	00 0c       	add	r0, r0
    36fa:	88 0b       	sbc	r24, r24
    36fc:	99 0b       	sbc	r25, r25
    36fe:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    3702:	f7 01       	movw	r30, r14
    3704:	60 83       	st	Z, r22
    3706:	71 83       	std	Z+1, r23	; 0x01
    3708:	82 83       	std	Z+2, r24	; 0x02
    370a:	93 83       	std	Z+3, r25	; 0x03
						
						L[id_start+4] = ((signed int) (rfData[10]<<8) | (unsigned char) rfData[9]);
    370c:	c8 01       	movw	r24, r16
    370e:	88 0f       	add	r24, r24
    3710:	99 1f       	adc	r25, r25
    3712:	88 0f       	add	r24, r24
    3714:	99 1f       	adc	r25, r25
    3716:	9c 01       	movw	r18, r24
    3718:	2e 56       	subi	r18, 0x6E	; 110
    371a:	32 4f       	sbci	r19, 0xF2	; 242
    371c:	79 01       	movw	r14, r18
    371e:	60 91 78 13 	lds	r22, 0x1378	; 0x801378 <rfData+0x9>
    3722:	70 91 79 13 	lds	r23, 0x1379	; 0x801379 <rfData+0xa>
    3726:	07 2e       	mov	r0, r23
    3728:	00 0c       	add	r0, r0
    372a:	88 0b       	sbc	r24, r24
    372c:	99 0b       	sbc	r25, r25
    372e:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    3732:	f7 01       	movw	r30, r14
    3734:	60 83       	st	Z, r22
    3736:	71 83       	std	Z+1, r23	; 0x01
    3738:	82 83       	std	Z+2, r24	; 0x02
    373a:	93 83       	std	Z+3, r25	; 0x03
						L[id_start+5] = ((signed int) (rfData[12]<<8) | (unsigned char) rfData[11]);
    373c:	00 0f       	add	r16, r16
    373e:	11 1f       	adc	r17, r17
    3740:	00 0f       	add	r16, r16
    3742:	11 1f       	adc	r17, r17
    3744:	0a 56       	subi	r16, 0x6A	; 106
    3746:	12 4f       	sbci	r17, 0xF2	; 242
    3748:	62 cf       	rjmp	.-316    	; 0x360e <handleRFCommands+0xa7c>
					
				}else if ((rfData[3]&0b01010000)==0b01000000){
					// type 3
					
						id_start = id_start*5;
    374a:	f5 e0       	ldi	r31, 0x05	; 5
    374c:	0f 9f       	mul	r16, r31
    374e:	70 01       	movw	r14, r0
    3750:	11 24       	eor	r1, r1
					
						if (currentSelector == 13 || currentSelector == 12){
    3752:	10 91 cc 02 	lds	r17, 0x02CC	; 0x8002cc <currentSelector>
    3756:	84 ef       	ldi	r24, 0xF4	; 244
    3758:	81 0f       	add	r24, r17
    375a:	82 30       	cpi	r24, 0x02	; 2
    375c:	08 f4       	brcc	.+2      	; 0x3760 <handleRFCommands+0xbce>
    375e:	85 c0       	rjmp	.+266    	; 0x386a <handleRFCommands+0xcd8>
							Bx[id_start+3] = ((signed int) (rfData[8]<<8) | (unsigned char) rfData[7]);
											
							Bx[id_start+4] = ((signed int) (rfData[10]<<8) | (unsigned char) rfData[9]);
							Bx[id_start+5] = ((signed int) (rfData[12]<<8) | (unsigned char) rfData[11]);
						} else{
							B[0][id_start] = ((signed int) (rfData[1]<<8) | (unsigned char) rfData[0]);
    3760:	c7 01       	movw	r24, r14
    3762:	88 0f       	add	r24, r24
    3764:	99 1f       	adc	r25, r25
    3766:	88 0f       	add	r24, r24
    3768:	99 1f       	adc	r25, r25
    376a:	9c 01       	movw	r18, r24
    376c:	25 5f       	subi	r18, 0xF5	; 245
    376e:	3b 4f       	sbci	r19, 0xFB	; 251
    3770:	69 01       	movw	r12, r18
    3772:	60 91 6f 13 	lds	r22, 0x136F	; 0x80136f <rfData>
    3776:	70 91 70 13 	lds	r23, 0x1370	; 0x801370 <rfData+0x1>
    377a:	07 2e       	mov	r0, r23
    377c:	00 0c       	add	r0, r0
    377e:	88 0b       	sbc	r24, r24
    3780:	99 0b       	sbc	r25, r25
    3782:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    3786:	f6 01       	movw	r30, r12
    3788:	60 83       	st	Z, r22
    378a:	71 83       	std	Z+1, r23	; 0x01
    378c:	82 83       	std	Z+2, r24	; 0x02
    378e:	93 83       	std	Z+3, r25	; 0x03
							B[0][id_start+1] = ((signed int) (rfData[4]<<8) | (unsigned char) rfData[2]);
    3790:	c7 01       	movw	r24, r14
    3792:	88 0f       	add	r24, r24
    3794:	99 1f       	adc	r25, r25
    3796:	88 0f       	add	r24, r24
    3798:	99 1f       	adc	r25, r25
    379a:	9c 01       	movw	r18, r24
    379c:	21 5f       	subi	r18, 0xF1	; 241
    379e:	3b 4f       	sbci	r19, 0xFB	; 251
    37a0:	69 01       	movw	r12, r18
    37a2:	60 91 73 13 	lds	r22, 0x1373	; 0x801373 <rfData+0x4>
    37a6:	70 e0       	ldi	r23, 0x00	; 0
    37a8:	76 2f       	mov	r23, r22
    37aa:	66 27       	eor	r22, r22
    37ac:	80 91 71 13 	lds	r24, 0x1371	; 0x801371 <rfData+0x2>
    37b0:	68 2b       	or	r22, r24
    37b2:	07 2e       	mov	r0, r23
    37b4:	00 0c       	add	r0, r0
    37b6:	88 0b       	sbc	r24, r24
    37b8:	99 0b       	sbc	r25, r25
    37ba:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    37be:	f6 01       	movw	r30, r12
    37c0:	60 83       	st	Z, r22
    37c2:	71 83       	std	Z+1, r23	; 0x01
    37c4:	82 83       	std	Z+2, r24	; 0x02
    37c6:	93 83       	std	Z+3, r25	; 0x03
														
							B[0][id_start+2] = ((signed int) (rfData[6]<<8) | (unsigned char) rfData[5]);
    37c8:	c7 01       	movw	r24, r14
    37ca:	88 0f       	add	r24, r24
    37cc:	99 1f       	adc	r25, r25
    37ce:	88 0f       	add	r24, r24
    37d0:	99 1f       	adc	r25, r25
    37d2:	9c 01       	movw	r18, r24
    37d4:	2d 5e       	subi	r18, 0xED	; 237
    37d6:	3b 4f       	sbci	r19, 0xFB	; 251
    37d8:	69 01       	movw	r12, r18
    37da:	60 91 74 13 	lds	r22, 0x1374	; 0x801374 <rfData+0x5>
    37de:	70 91 75 13 	lds	r23, 0x1375	; 0x801375 <rfData+0x6>
    37e2:	07 2e       	mov	r0, r23
    37e4:	00 0c       	add	r0, r0
    37e6:	88 0b       	sbc	r24, r24
    37e8:	99 0b       	sbc	r25, r25
    37ea:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    37ee:	f6 01       	movw	r30, r12
    37f0:	60 83       	st	Z, r22
    37f2:	71 83       	std	Z+1, r23	; 0x01
    37f4:	82 83       	std	Z+2, r24	; 0x02
    37f6:	93 83       	std	Z+3, r25	; 0x03
							B[0][id_start+3] = ((signed int) (rfData[8]<<8) | (unsigned char) rfData[7]);
    37f8:	c7 01       	movw	r24, r14
    37fa:	88 0f       	add	r24, r24
    37fc:	99 1f       	adc	r25, r25
    37fe:	88 0f       	add	r24, r24
    3800:	99 1f       	adc	r25, r25
    3802:	9c 01       	movw	r18, r24
    3804:	29 5e       	subi	r18, 0xE9	; 233
    3806:	3b 4f       	sbci	r19, 0xFB	; 251
    3808:	69 01       	movw	r12, r18
    380a:	60 91 76 13 	lds	r22, 0x1376	; 0x801376 <rfData+0x7>
    380e:	70 91 77 13 	lds	r23, 0x1377	; 0x801377 <rfData+0x8>
    3812:	07 2e       	mov	r0, r23
    3814:	00 0c       	add	r0, r0
    3816:	88 0b       	sbc	r24, r24
    3818:	99 0b       	sbc	r25, r25
    381a:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    381e:	f6 01       	movw	r30, r12
    3820:	60 83       	st	Z, r22
    3822:	71 83       	std	Z+1, r23	; 0x01
    3824:	82 83       	std	Z+2, r24	; 0x02
    3826:	93 83       	std	Z+3, r25	; 0x03
														
							B[0][id_start+4] = ((signed int) (rfData[10]<<8) | (unsigned char) rfData[9]);
    3828:	c7 01       	movw	r24, r14
    382a:	88 0f       	add	r24, r24
    382c:	99 1f       	adc	r25, r25
    382e:	88 0f       	add	r24, r24
    3830:	99 1f       	adc	r25, r25
    3832:	9c 01       	movw	r18, r24
    3834:	25 5e       	subi	r18, 0xE5	; 229
    3836:	3b 4f       	sbci	r19, 0xFB	; 251
    3838:	69 01       	movw	r12, r18
    383a:	60 91 78 13 	lds	r22, 0x1378	; 0x801378 <rfData+0x9>
    383e:	70 91 79 13 	lds	r23, 0x1379	; 0x801379 <rfData+0xa>
    3842:	07 2e       	mov	r0, r23
    3844:	00 0c       	add	r0, r0
    3846:	88 0b       	sbc	r24, r24
    3848:	99 0b       	sbc	r25, r25
    384a:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    384e:	f6 01       	movw	r30, r12
    3850:	60 83       	st	Z, r22
    3852:	71 83       	std	Z+1, r23	; 0x01
    3854:	82 83       	std	Z+2, r24	; 0x02
    3856:	93 83       	std	Z+3, r25	; 0x03
							B[0][id_start+5] = ((signed int) (rfData[12]<<8) | (unsigned char) rfData[11]);	
    3858:	c7 01       	movw	r24, r14
    385a:	88 0f       	add	r24, r24
    385c:	99 1f       	adc	r25, r25
    385e:	88 0f       	add	r24, r24
    3860:	99 1f       	adc	r25, r25
    3862:	9c 01       	movw	r18, r24
    3864:	21 5e       	subi	r18, 0xE1	; 225
    3866:	3b 4f       	sbci	r19, 0xFB	; 251
    3868:	2a ce       	rjmp	.-940    	; 0x34be <handleRFCommands+0x92c>
					// type 3
					
						id_start = id_start*5;
					
						if (currentSelector == 13 || currentSelector == 12){
							Bx[id_start] = ((signed int) (rfData[1]<<8) | (unsigned char) rfData[0]);
    386a:	87 01       	movw	r16, r14
    386c:	00 0f       	add	r16, r16
    386e:	11 1f       	adc	r17, r17
    3870:	00 0f       	add	r16, r16
    3872:	11 1f       	adc	r17, r17
    3874:	0e 50       	subi	r16, 0x0E	; 14
    3876:	14 4f       	sbci	r17, 0xF4	; 244
    3878:	60 91 6f 13 	lds	r22, 0x136F	; 0x80136f <rfData>
    387c:	70 91 70 13 	lds	r23, 0x1370	; 0x801370 <rfData+0x1>
    3880:	07 2e       	mov	r0, r23
    3882:	00 0c       	add	r0, r0
    3884:	88 0b       	sbc	r24, r24
    3886:	99 0b       	sbc	r25, r25
    3888:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    388c:	f8 01       	movw	r30, r16
    388e:	60 83       	st	Z, r22
    3890:	71 83       	std	Z+1, r23	; 0x01
    3892:	82 83       	std	Z+2, r24	; 0x02
    3894:	93 83       	std	Z+3, r25	; 0x03
							Bx[id_start+1] = ((signed int) (rfData[4]<<8) | (unsigned char) rfData[2]);
    3896:	87 01       	movw	r16, r14
    3898:	00 0f       	add	r16, r16
    389a:	11 1f       	adc	r17, r17
    389c:	00 0f       	add	r16, r16
    389e:	11 1f       	adc	r17, r17
    38a0:	0a 50       	subi	r16, 0x0A	; 10
    38a2:	14 4f       	sbci	r17, 0xF4	; 244
    38a4:	60 91 73 13 	lds	r22, 0x1373	; 0x801373 <rfData+0x4>
    38a8:	70 e0       	ldi	r23, 0x00	; 0
    38aa:	76 2f       	mov	r23, r22
    38ac:	66 27       	eor	r22, r22
    38ae:	80 91 71 13 	lds	r24, 0x1371	; 0x801371 <rfData+0x2>
    38b2:	68 2b       	or	r22, r24
    38b4:	07 2e       	mov	r0, r23
    38b6:	00 0c       	add	r0, r0
    38b8:	88 0b       	sbc	r24, r24
    38ba:	99 0b       	sbc	r25, r25
    38bc:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    38c0:	f8 01       	movw	r30, r16
    38c2:	60 83       	st	Z, r22
    38c4:	71 83       	std	Z+1, r23	; 0x01
    38c6:	82 83       	std	Z+2, r24	; 0x02
    38c8:	93 83       	std	Z+3, r25	; 0x03
											
							Bx[id_start+2] = ((signed int) (rfData[6]<<8) | (unsigned char) rfData[5]);
    38ca:	87 01       	movw	r16, r14
    38cc:	00 0f       	add	r16, r16
    38ce:	11 1f       	adc	r17, r17
    38d0:	00 0f       	add	r16, r16
    38d2:	11 1f       	adc	r17, r17
    38d4:	06 50       	subi	r16, 0x06	; 6
    38d6:	14 4f       	sbci	r17, 0xF4	; 244
    38d8:	60 91 74 13 	lds	r22, 0x1374	; 0x801374 <rfData+0x5>
    38dc:	70 91 75 13 	lds	r23, 0x1375	; 0x801375 <rfData+0x6>
    38e0:	07 2e       	mov	r0, r23
    38e2:	00 0c       	add	r0, r0
    38e4:	88 0b       	sbc	r24, r24
    38e6:	99 0b       	sbc	r25, r25
    38e8:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    38ec:	f8 01       	movw	r30, r16
    38ee:	60 83       	st	Z, r22
    38f0:	71 83       	std	Z+1, r23	; 0x01
    38f2:	82 83       	std	Z+2, r24	; 0x02
    38f4:	93 83       	std	Z+3, r25	; 0x03
							Bx[id_start+3] = ((signed int) (rfData[8]<<8) | (unsigned char) rfData[7]);
    38f6:	87 01       	movw	r16, r14
    38f8:	00 0f       	add	r16, r16
    38fa:	11 1f       	adc	r17, r17
    38fc:	00 0f       	add	r16, r16
    38fe:	11 1f       	adc	r17, r17
    3900:	02 50       	subi	r16, 0x02	; 2
    3902:	14 4f       	sbci	r17, 0xF4	; 244
    3904:	60 91 76 13 	lds	r22, 0x1376	; 0x801376 <rfData+0x7>
    3908:	70 91 77 13 	lds	r23, 0x1377	; 0x801377 <rfData+0x8>
    390c:	07 2e       	mov	r0, r23
    390e:	00 0c       	add	r0, r0
    3910:	88 0b       	sbc	r24, r24
    3912:	99 0b       	sbc	r25, r25
    3914:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    3918:	f8 01       	movw	r30, r16
    391a:	60 83       	st	Z, r22
    391c:	71 83       	std	Z+1, r23	; 0x01
    391e:	82 83       	std	Z+2, r24	; 0x02
    3920:	93 83       	std	Z+3, r25	; 0x03
											
							Bx[id_start+4] = ((signed int) (rfData[10]<<8) | (unsigned char) rfData[9]);
    3922:	87 01       	movw	r16, r14
    3924:	00 0f       	add	r16, r16
    3926:	11 1f       	adc	r17, r17
    3928:	00 0f       	add	r16, r16
    392a:	11 1f       	adc	r17, r17
    392c:	0e 5f       	subi	r16, 0xFE	; 254
    392e:	13 4f       	sbci	r17, 0xF3	; 243
    3930:	60 91 78 13 	lds	r22, 0x1378	; 0x801378 <rfData+0x9>
    3934:	70 91 79 13 	lds	r23, 0x1379	; 0x801379 <rfData+0xa>
    3938:	07 2e       	mov	r0, r23
    393a:	00 0c       	add	r0, r0
    393c:	88 0b       	sbc	r24, r24
    393e:	99 0b       	sbc	r25, r25
    3940:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    3944:	f8 01       	movw	r30, r16
    3946:	60 83       	st	Z, r22
    3948:	71 83       	std	Z+1, r23	; 0x01
    394a:	82 83       	std	Z+2, r24	; 0x02
    394c:	93 83       	std	Z+3, r25	; 0x03
							Bx[id_start+5] = ((signed int) (rfData[12]<<8) | (unsigned char) rfData[11]);
    394e:	87 01       	movw	r16, r14
    3950:	00 0f       	add	r16, r16
    3952:	11 1f       	adc	r17, r17
    3954:	00 0f       	add	r16, r16
    3956:	11 1f       	adc	r17, r17
    3958:	0a 5f       	subi	r16, 0xFA	; 250
    395a:	13 4f       	sbci	r17, 0xF3	; 243
											
							By[id_start+2] = ((signed int) (rfData[6]<<8) | (unsigned char) rfData[5]);
							By[id_start+3] = ((signed int) (rfData[8]<<8) | (unsigned char) rfData[7]);
											
							By[id_start+4] = ((signed int) (rfData[10]<<8) | (unsigned char) rfData[9]);
							By[id_start+5] = ((signed int) (rfData[12]<<8) | (unsigned char) rfData[11]);
    395c:	60 91 7a 13 	lds	r22, 0x137A	; 0x80137a <rfData+0xb>
    3960:	70 91 7b 13 	lds	r23, 0x137B	; 0x80137b <rfData+0xc>
    3964:	07 2e       	mov	r0, r23
    3966:	00 0c       	add	r0, r0
    3968:	88 0b       	sbc	r24, r24
    396a:	99 0b       	sbc	r25, r25
    396c:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    3970:	f8 01       	movw	r30, r16
    3972:	60 83       	st	Z, r22
    3974:	71 83       	std	Z+1, r23	; 0x01
    3976:	82 83       	std	Z+2, r24	; 0x02
    3978:	93 83       	std	Z+3, r25	; 0x03
    397a:	30 ca       	rjmp	.-2976   	; 0x2ddc <handleRFCommands+0x24a>
					// type 4
					
						id_start = id_start*5;
						
						if (currentSelector == 13 || currentSelector == 12){
							By[id_start] = ((signed int) (rfData[1]<<8) | (unsigned char) rfData[0]);
    397c:	87 01       	movw	r16, r14
    397e:	00 0f       	add	r16, r16
    3980:	11 1f       	adc	r17, r17
    3982:	00 0f       	add	r16, r16
    3984:	11 1f       	adc	r17, r17
    3986:	0e 59       	subi	r16, 0x9E	; 158
    3988:	15 4f       	sbci	r17, 0xF5	; 245
    398a:	60 91 6f 13 	lds	r22, 0x136F	; 0x80136f <rfData>
    398e:	70 91 70 13 	lds	r23, 0x1370	; 0x801370 <rfData+0x1>
    3992:	07 2e       	mov	r0, r23
    3994:	00 0c       	add	r0, r0
    3996:	88 0b       	sbc	r24, r24
    3998:	99 0b       	sbc	r25, r25
    399a:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    399e:	f8 01       	movw	r30, r16
    39a0:	60 83       	st	Z, r22
    39a2:	71 83       	std	Z+1, r23	; 0x01
    39a4:	82 83       	std	Z+2, r24	; 0x02
    39a6:	93 83       	std	Z+3, r25	; 0x03
							By[id_start+1] = ((signed int) (rfData[4]<<8) | (unsigned char) rfData[2]);
    39a8:	87 01       	movw	r16, r14
    39aa:	00 0f       	add	r16, r16
    39ac:	11 1f       	adc	r17, r17
    39ae:	00 0f       	add	r16, r16
    39b0:	11 1f       	adc	r17, r17
    39b2:	0a 59       	subi	r16, 0x9A	; 154
    39b4:	15 4f       	sbci	r17, 0xF5	; 245
    39b6:	60 91 73 13 	lds	r22, 0x1373	; 0x801373 <rfData+0x4>
    39ba:	70 e0       	ldi	r23, 0x00	; 0
    39bc:	76 2f       	mov	r23, r22
    39be:	66 27       	eor	r22, r22
    39c0:	80 91 71 13 	lds	r24, 0x1371	; 0x801371 <rfData+0x2>
    39c4:	68 2b       	or	r22, r24
    39c6:	07 2e       	mov	r0, r23
    39c8:	00 0c       	add	r0, r0
    39ca:	88 0b       	sbc	r24, r24
    39cc:	99 0b       	sbc	r25, r25
    39ce:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    39d2:	f8 01       	movw	r30, r16
    39d4:	60 83       	st	Z, r22
    39d6:	71 83       	std	Z+1, r23	; 0x01
    39d8:	82 83       	std	Z+2, r24	; 0x02
    39da:	93 83       	std	Z+3, r25	; 0x03
											
							By[id_start+2] = ((signed int) (rfData[6]<<8) | (unsigned char) rfData[5]);
    39dc:	87 01       	movw	r16, r14
    39de:	00 0f       	add	r16, r16
    39e0:	11 1f       	adc	r17, r17
    39e2:	00 0f       	add	r16, r16
    39e4:	11 1f       	adc	r17, r17
    39e6:	06 59       	subi	r16, 0x96	; 150
    39e8:	15 4f       	sbci	r17, 0xF5	; 245
    39ea:	60 91 74 13 	lds	r22, 0x1374	; 0x801374 <rfData+0x5>
    39ee:	70 91 75 13 	lds	r23, 0x1375	; 0x801375 <rfData+0x6>
    39f2:	07 2e       	mov	r0, r23
    39f4:	00 0c       	add	r0, r0
    39f6:	88 0b       	sbc	r24, r24
    39f8:	99 0b       	sbc	r25, r25
    39fa:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    39fe:	f8 01       	movw	r30, r16
    3a00:	60 83       	st	Z, r22
    3a02:	71 83       	std	Z+1, r23	; 0x01
    3a04:	82 83       	std	Z+2, r24	; 0x02
    3a06:	93 83       	std	Z+3, r25	; 0x03
							By[id_start+3] = ((signed int) (rfData[8]<<8) | (unsigned char) rfData[7]);
    3a08:	87 01       	movw	r16, r14
    3a0a:	00 0f       	add	r16, r16
    3a0c:	11 1f       	adc	r17, r17
    3a0e:	00 0f       	add	r16, r16
    3a10:	11 1f       	adc	r17, r17
    3a12:	02 59       	subi	r16, 0x92	; 146
    3a14:	15 4f       	sbci	r17, 0xF5	; 245
    3a16:	60 91 76 13 	lds	r22, 0x1376	; 0x801376 <rfData+0x7>
    3a1a:	70 91 77 13 	lds	r23, 0x1377	; 0x801377 <rfData+0x8>
    3a1e:	07 2e       	mov	r0, r23
    3a20:	00 0c       	add	r0, r0
    3a22:	88 0b       	sbc	r24, r24
    3a24:	99 0b       	sbc	r25, r25
    3a26:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    3a2a:	f8 01       	movw	r30, r16
    3a2c:	60 83       	st	Z, r22
    3a2e:	71 83       	std	Z+1, r23	; 0x01
    3a30:	82 83       	std	Z+2, r24	; 0x02
    3a32:	93 83       	std	Z+3, r25	; 0x03
											
							By[id_start+4] = ((signed int) (rfData[10]<<8) | (unsigned char) rfData[9]);
    3a34:	87 01       	movw	r16, r14
    3a36:	00 0f       	add	r16, r16
    3a38:	11 1f       	adc	r17, r17
    3a3a:	00 0f       	add	r16, r16
    3a3c:	11 1f       	adc	r17, r17
    3a3e:	0e 58       	subi	r16, 0x8E	; 142
    3a40:	15 4f       	sbci	r17, 0xF5	; 245
    3a42:	60 91 78 13 	lds	r22, 0x1378	; 0x801378 <rfData+0x9>
    3a46:	70 91 79 13 	lds	r23, 0x1379	; 0x801379 <rfData+0xa>
    3a4a:	07 2e       	mov	r0, r23
    3a4c:	00 0c       	add	r0, r0
    3a4e:	88 0b       	sbc	r24, r24
    3a50:	99 0b       	sbc	r25, r25
    3a52:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    3a56:	f8 01       	movw	r30, r16
    3a58:	60 83       	st	Z, r22
    3a5a:	71 83       	std	Z+1, r23	; 0x01
    3a5c:	82 83       	std	Z+2, r24	; 0x02
    3a5e:	93 83       	std	Z+3, r25	; 0x03
							By[id_start+5] = ((signed int) (rfData[12]<<8) | (unsigned char) rfData[11]);
    3a60:	87 01       	movw	r16, r14
    3a62:	00 0f       	add	r16, r16
    3a64:	11 1f       	adc	r17, r17
    3a66:	00 0f       	add	r16, r16
    3a68:	11 1f       	adc	r17, r17
    3a6a:	0a 58       	subi	r16, 0x8A	; 138
    3a6c:	15 4f       	sbci	r17, 0xF5	; 245
    3a6e:	76 cf       	rjmp	.-276    	; 0x395c <handleRFCommands+0xdca>

00003a70 <init_ir_remote_control>:
	return address;
}

unsigned char ir_remote_get_data(void) {
	return data_ir;
}
    3a70:	cf 93       	push	r28
    3a72:	df 93       	push	r29
    3a74:	c8 e6       	ldi	r28, 0x68	; 104
    3a76:	d0 e0       	ldi	r29, 0x00	; 0
    3a78:	18 82       	st	Y, r1
    3a7a:	ac e6       	ldi	r26, 0x6C	; 108
    3a7c:	b0 e0       	ldi	r27, 0x00	; 0
    3a7e:	1c 92       	st	X, r1
    3a80:	e0 eb       	ldi	r30, 0xB0	; 176
    3a82:	f0 e0       	ldi	r31, 0x00	; 0
    3a84:	10 82       	st	Z, r1
    3a86:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7c00b1>
    3a8a:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7c0070>
    3a8e:	88 81       	ld	r24, Y
    3a90:	82 60       	ori	r24, 0x02	; 2
    3a92:	88 83       	st	Y, r24
    3a94:	8c 91       	ld	r24, X
    3a96:	80 68       	ori	r24, 0x80	; 128
    3a98:	8c 93       	st	X, r24
    3a9a:	80 81       	ld	r24, Z
    3a9c:	82 60       	ori	r24, 0x02	; 2
    3a9e:	80 83       	st	Z, r24
    3aa0:	df 91       	pop	r29
    3aa2:	cf 91       	pop	r28
    3aa4:	08 95       	ret

00003aa6 <__vector_10>:
    3aa6:	1f 92       	push	r1
    3aa8:	0f 92       	push	r0
    3aaa:	0f b6       	in	r0, 0x3f	; 63
    3aac:	0f 92       	push	r0
    3aae:	11 24       	eor	r1, r1
    3ab0:	8f 93       	push	r24
    3ab2:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <irEnabled>
    3ab6:	88 23       	and	r24, r24
    3ab8:	21 f1       	breq	.+72     	; 0x3b02 <__vector_10+0x5c>
    3aba:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x7c0103>
    3abe:	86 fd       	sbrc	r24, 6
    3ac0:	20 c0       	rjmp	.+64     	; 0x3b02 <__vector_10+0x5c>
    3ac2:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7c0068>
    3ac6:	8d 7f       	andi	r24, 0xFD	; 253
    3ac8:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7c0068>
    3acc:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__TEXT_REGION_LENGTH__+0x7c006c>
    3ad0:	8f 77       	andi	r24, 0x7F	; 127
    3ad2:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7c006c>
    3ad6:	81 e0       	ldi	r24, 0x01	; 1
    3ad8:	80 93 0b 02 	sts	0x020B, r24	; 0x80020b <checkGlitch>
    3adc:	8d e0       	ldi	r24, 0x0D	; 13
    3ade:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7c00b3>
    3ae2:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7c00b1>
    3ae6:	86 60       	ori	r24, 0x06	; 6
    3ae8:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7c00b1>
    3aec:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7c0070>
    3af0:	82 60       	ori	r24, 0x02	; 2
    3af2:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7c0070>
    3af6:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <data_temp>
    3afa:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <address_temp>
    3afe:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <check_temp>
    3b02:	8f 91       	pop	r24
    3b04:	0f 90       	pop	r0
    3b06:	0f be       	out	0x3f, r0	; 63
    3b08:	0f 90       	pop	r0
    3b0a:	1f 90       	pop	r1
    3b0c:	18 95       	reti

00003b0e <__vector_13>:
    3b0e:	1f 92       	push	r1
    3b10:	0f 92       	push	r0
    3b12:	0f b6       	in	r0, 0x3f	; 63
    3b14:	0f 92       	push	r0
    3b16:	11 24       	eor	r1, r1
    3b18:	2f 93       	push	r18
    3b1a:	3f 93       	push	r19
    3b1c:	4f 93       	push	r20
    3b1e:	5f 93       	push	r21
    3b20:	6f 93       	push	r22
    3b22:	7f 93       	push	r23
    3b24:	8f 93       	push	r24
    3b26:	9f 93       	push	r25
    3b28:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7c00b1>
    3b2c:	88 7f       	andi	r24, 0xF8	; 248
    3b2e:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7c00b1>
    3b32:	80 91 0b 02 	lds	r24, 0x020B	; 0x80020b <checkGlitch>
    3b36:	88 23       	and	r24, r24
    3b38:	69 f1       	breq	.+90     	; 0x3b94 <__vector_13+0x86>
    3b3a:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x7c0103>
    3b3e:	86 fd       	sbrc	r24, 6
    3b40:	68 c0       	rjmp	.+208    	; 0x3c12 <__vector_13+0x104>
    3b42:	10 92 0b 02 	sts	0x020B, r1	; 0x80020b <checkGlitch>
    3b46:	83 e3       	ldi	r24, 0x33	; 51
    3b48:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7c00b3>
    3b4c:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7c00b1>
    3b50:	86 60       	ori	r24, 0x06	; 6
    3b52:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7c00b1>
    3b56:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7c0070>
    3b5a:	82 60       	ori	r24, 0x02	; 2
    3b5c:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7c0070>
    3b60:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <i.6832>
    3b64:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <i.6832+0x1>
    3b68:	8f 3f       	cpi	r24, 0xFF	; 255
    3b6a:	2f ef       	ldi	r18, 0xFF	; 255
    3b6c:	92 07       	cpc	r25, r18
    3b6e:	29 f0       	breq	.+10     	; 0x3b7a <__vector_13+0x6c>
    3b70:	01 96       	adiw	r24, 0x01	; 1
    3b72:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <i.6832+0x1>
    3b76:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <i.6832>
    3b7a:	9f 91       	pop	r25
    3b7c:	8f 91       	pop	r24
    3b7e:	7f 91       	pop	r23
    3b80:	6f 91       	pop	r22
    3b82:	5f 91       	pop	r21
    3b84:	4f 91       	pop	r20
    3b86:	3f 91       	pop	r19
    3b88:	2f 91       	pop	r18
    3b8a:	0f 90       	pop	r0
    3b8c:	0f be       	out	0x3f, r0	; 63
    3b8e:	0f 90       	pop	r0
    3b90:	1f 90       	pop	r1
    3b92:	18 95       	reti
    3b94:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <i.6832>
    3b98:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <i.6832+0x1>
    3b9c:	8f 3f       	cpi	r24, 0xFF	; 255
    3b9e:	4f ef       	ldi	r20, 0xFF	; 255
    3ba0:	94 07       	cpc	r25, r20
    3ba2:	09 f4       	brne	.+2      	; 0x3ba6 <__vector_13+0x98>
    3ba4:	47 c0       	rjmp	.+142    	; 0x3c34 <__vector_13+0x126>
    3ba6:	81 30       	cpi	r24, 0x01	; 1
    3ba8:	91 05       	cpc	r25, r1
    3baa:	09 f4       	brne	.+2      	; 0x3bae <__vector_13+0xa0>
    3bac:	7a c0       	rjmp	.+244    	; 0x3ca2 <__vector_13+0x194>
    3bae:	ac 01       	movw	r20, r24
    3bb0:	42 50       	subi	r20, 0x02	; 2
    3bb2:	51 09       	sbc	r21, r1
    3bb4:	45 30       	cpi	r20, 0x05	; 5
    3bb6:	51 05       	cpc	r21, r1
    3bb8:	08 f4       	brcc	.+2      	; 0x3bbc <__vector_13+0xae>
    3bba:	4f c0       	rjmp	.+158    	; 0x3c5a <__vector_13+0x14c>
    3bbc:	9c 01       	movw	r18, r24
    3bbe:	27 50       	subi	r18, 0x07	; 7
    3bc0:	31 09       	sbc	r19, r1
    3bc2:	26 30       	cpi	r18, 0x06	; 6
    3bc4:	31 05       	cpc	r19, r1
    3bc6:	08 f0       	brcs	.+2      	; 0x3bca <__vector_13+0xbc>
    3bc8:	8b c0       	rjmp	.+278    	; 0x3ce0 <__vector_13+0x1d2>
    3bca:	86 e3       	ldi	r24, 0x36	; 54
    3bcc:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7c00b3>
    3bd0:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7c00b1>
    3bd4:	86 60       	ori	r24, 0x06	; 6
    3bd6:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7c00b1>
    3bda:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7c0070>
    3bde:	82 60       	ori	r24, 0x02	; 2
    3be0:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7c0070>
    3be4:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x7c0103>
    3be8:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <i.6832>
    3bec:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <i.6832+0x1>
    3bf0:	26 fb       	bst	r18, 6
    3bf2:	66 27       	eor	r22, r22
    3bf4:	60 f9       	bld	r22, 0
    3bf6:	2c e0       	ldi	r18, 0x0C	; 12
    3bf8:	30 e0       	ldi	r19, 0x00	; 0
    3bfa:	28 1b       	sub	r18, r24
    3bfc:	39 0b       	sbc	r19, r25
    3bfe:	01 c0       	rjmp	.+2      	; 0x3c02 <__vector_13+0xf4>
    3c00:	66 0f       	add	r22, r22
    3c02:	2a 95       	dec	r18
    3c04:	ea f7       	brpl	.-6      	; 0x3c00 <__vector_13+0xf2>
    3c06:	20 91 4f 02 	lds	r18, 0x024F	; 0x80024f <data_temp>
    3c0a:	62 0f       	add	r22, r18
    3c0c:	60 93 4f 02 	sts	0x024F, r22	; 0x80024f <data_temp>
    3c10:	ab cf       	rjmp	.-170    	; 0x3b68 <__vector_13+0x5a>
    3c12:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7c0068>
    3c16:	82 60       	ori	r24, 0x02	; 2
    3c18:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7c0068>
    3c1c:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__TEXT_REGION_LENGTH__+0x7c006c>
    3c20:	80 68       	ori	r24, 0x80	; 128
    3c22:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7c006c>
    3c26:	8f ef       	ldi	r24, 0xFF	; 255
    3c28:	9f ef       	ldi	r25, 0xFF	; 255
    3c2a:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <i.6832+0x1>
    3c2e:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <i.6832>
    3c32:	a3 cf       	rjmp	.-186    	; 0x3b7a <__vector_13+0x6c>
    3c34:	20 91 03 01 	lds	r18, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x7c0103>
    3c38:	26 ff       	sbrs	r18, 6
    3c3a:	3c c0       	rjmp	.+120    	; 0x3cb4 <__vector_13+0x1a6>
    3c3c:	20 91 68 00 	lds	r18, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7c0068>
    3c40:	22 60       	ori	r18, 0x02	; 2
    3c42:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <__TEXT_REGION_LENGTH__+0x7c0068>
    3c46:	20 91 6c 00 	lds	r18, 0x006C	; 0x80006c <__TEXT_REGION_LENGTH__+0x7c006c>
    3c4a:	20 68       	ori	r18, 0x80	; 128
    3c4c:	20 93 6c 00 	sts	0x006C, r18	; 0x80006c <__TEXT_REGION_LENGTH__+0x7c006c>
    3c50:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <i.6832+0x1>
    3c54:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <i.6832>
    3c58:	90 cf       	rjmp	.-224    	; 0x3b7a <__vector_13+0x6c>
    3c5a:	86 e3       	ldi	r24, 0x36	; 54
    3c5c:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7c00b3>
    3c60:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7c00b1>
    3c64:	86 60       	ori	r24, 0x06	; 6
    3c66:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7c00b1>
    3c6a:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7c0070>
    3c6e:	82 60       	ori	r24, 0x02	; 2
    3c70:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7c0070>
    3c74:	40 91 03 01 	lds	r20, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x7c0103>
    3c78:	80 91 04 02 	lds	r24, 0x0204	; 0x800204 <i.6832>
    3c7c:	90 91 05 02 	lds	r25, 0x0205	; 0x800205 <i.6832+0x1>
    3c80:	46 fb       	bst	r20, 6
    3c82:	22 27       	eor	r18, r18
    3c84:	20 f9       	bld	r18, 0
    3c86:	46 e0       	ldi	r20, 0x06	; 6
    3c88:	50 e0       	ldi	r21, 0x00	; 0
    3c8a:	48 1b       	sub	r20, r24
    3c8c:	59 0b       	sbc	r21, r25
    3c8e:	01 c0       	rjmp	.+2      	; 0x3c92 <__vector_13+0x184>
    3c90:	22 0f       	add	r18, r18
    3c92:	4a 95       	dec	r20
    3c94:	ea f7       	brpl	.-6      	; 0x3c90 <__vector_13+0x182>
    3c96:	30 91 50 02 	lds	r19, 0x0250	; 0x800250 <address_temp>
    3c9a:	23 0f       	add	r18, r19
    3c9c:	20 93 50 02 	sts	0x0250, r18	; 0x800250 <address_temp>
    3ca0:	63 cf       	rjmp	.-314    	; 0x3b68 <__vector_13+0x5a>
    3ca2:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <__TEXT_REGION_LENGTH__+0x7c0103>
    3ca6:	86 fb       	bst	r24, 6
    3ca8:	88 27       	eor	r24, r24
    3caa:	80 f9       	bld	r24, 0
    3cac:	80 93 4e 02 	sts	0x024E, r24	; 0x80024e <check_temp>
    3cb0:	86 e3       	ldi	r24, 0x36	; 54
    3cb2:	4a cf       	rjmp	.-364    	; 0x3b48 <__vector_13+0x3a>
    3cb4:	8c e1       	ldi	r24, 0x1C	; 28
    3cb6:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__TEXT_REGION_LENGTH__+0x7c00b3>
    3cba:	80 91 b1 00 	lds	r24, 0x00B1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7c00b1>
    3cbe:	86 60       	ori	r24, 0x06	; 6
    3cc0:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7c00b1>
    3cc4:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <__TEXT_REGION_LENGTH__+0x7c0070>
    3cc8:	82 60       	ori	r24, 0x02	; 2
    3cca:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7c0070>
    3cce:	10 92 4f 02 	sts	0x024F, r1	; 0x80024f <data_temp>
    3cd2:	10 92 50 02 	sts	0x0250, r1	; 0x800250 <address_temp>
    3cd6:	10 92 4e 02 	sts	0x024E, r1	; 0x80024e <check_temp>
    3cda:	81 e0       	ldi	r24, 0x01	; 1
    3cdc:	90 e0       	ldi	r25, 0x00	; 0
    3cde:	49 cf       	rjmp	.-366    	; 0x3b72 <__vector_13+0x64>
    3ce0:	8d 30       	cpi	r24, 0x0D	; 13
    3ce2:	91 05       	cpc	r25, r1
    3ce4:	09 f0       	breq	.+2      	; 0x3ce8 <__vector_13+0x1da>
    3ce6:	44 cf       	rjmp	.-376    	; 0x3b70 <__vector_13+0x62>
    3ce8:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__TEXT_REGION_LENGTH__+0x7c0070>
    3cec:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <__TEXT_REGION_LENGTH__+0x7c0068>
    3cf0:	82 60       	ori	r24, 0x02	; 2
    3cf2:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <__TEXT_REGION_LENGTH__+0x7c0068>
    3cf6:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <__TEXT_REGION_LENGTH__+0x7c006c>
    3cfa:	80 68       	ori	r24, 0x80	; 128
    3cfc:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <__TEXT_REGION_LENGTH__+0x7c006c>
    3d00:	8f ef       	ldi	r24, 0xFF	; 255
    3d02:	9f ef       	ldi	r25, 0xFF	; 255
    3d04:	90 93 05 02 	sts	0x0205, r25	; 0x800205 <i.6832+0x1>
    3d08:	80 93 04 02 	sts	0x0204, r24	; 0x800204 <i.6832>
    3d0c:	80 91 4e 02 	lds	r24, 0x024E	; 0x80024e <check_temp>
    3d10:	80 93 06 02 	sts	0x0206, r24	; 0x800206 <check>
    3d14:	80 91 50 02 	lds	r24, 0x0250	; 0x800250 <address_temp>
    3d18:	80 93 4d 02 	sts	0x024D, r24	; 0x80024d <address>
    3d1c:	80 91 4f 02 	lds	r24, 0x024F	; 0x80024f <data_temp>
    3d20:	80 93 4c 02 	sts	0x024C, r24	; 0x80024c <data_ir>
    3d24:	81 e0       	ldi	r24, 0x01	; 1
    3d26:	80 93 f3 02 	sts	0x02F3, r24	; 0x8002f3 <command_received>
    3d2a:	27 cf       	rjmp	.-434    	; 0x3b7a <__vector_13+0x6c>

00003d2c <handleIRRemoteCommands>:

void handleIRRemoteCommands() {
    3d2c:	0f 93       	push	r16
    3d2e:	1f 93       	push	r17

	if(irEnabled) {
    3d30:	80 91 f1 02 	lds	r24, 0x02F1	; 0x8002f1 <irEnabled>
    3d34:	88 23       	and	r24, r24
    3d36:	21 f0       	breq	.+8      	; 0x3d40 <handleIRRemoteCommands+0x14>

		if(command_received) {
    3d38:	80 91 f3 02 	lds	r24, 0x02F3	; 0x8002f3 <command_received>
    3d3c:	81 11       	cpse	r24, r1
    3d3e:	03 c0       	rjmp	.+6      	; 0x3d46 <handleIRRemoteCommands+0x1a>
		}	// ir command received

	}	// ir enabled check


}
    3d40:	1f 91       	pop	r17
    3d42:	0f 91       	pop	r16
    3d44:	08 95       	ret

	if(irEnabled) {

		if(command_received) {

			command_received = 0;
    3d46:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <command_received>
			
			if((getTime100MicroSec() - lastCmdTime) < PAUSE_200_MSEC) {
    3d4a:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    3d4e:	00 91 ec 02 	lds	r16, 0x02EC	; 0x8002ec <lastCmdTime>
    3d52:	10 91 ed 02 	lds	r17, 0x02ED	; 0x8002ed <lastCmdTime+0x1>
    3d56:	20 91 ee 02 	lds	r18, 0x02EE	; 0x8002ee <lastCmdTime+0x2>
    3d5a:	30 91 ef 02 	lds	r19, 0x02EF	; 0x8002ef <lastCmdTime+0x3>
    3d5e:	dc 01       	movw	r26, r24
    3d60:	cb 01       	movw	r24, r22
    3d62:	80 1b       	sub	r24, r16
    3d64:	91 0b       	sbc	r25, r17
    3d66:	a2 0b       	sbc	r26, r18
    3d68:	b3 0b       	sbc	r27, r19
    3d6a:	83 38       	cpi	r24, 0x83	; 131
    3d6c:	97 40       	sbci	r25, 0x07	; 7
    3d6e:	a1 05       	cpc	r26, r1
    3d70:	b1 05       	cpc	r27, r1
    3d72:	30 f3       	brcs	.-52     	; 0x3d40 <handleIRRemoteCommands+0x14>
				return;
			}

			lastCmdTime = getTime100MicroSec();
    3d74:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    3d78:	60 93 ec 02 	sts	0x02EC, r22	; 0x8002ec <lastCmdTime>
    3d7c:	70 93 ed 02 	sts	0x02ED, r23	; 0x8002ed <lastCmdTime+0x1>
    3d80:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <lastCmdTime+0x2>
    3d84:	90 93 ef 02 	sts	0x02EF, r25	; 0x8002ef <lastCmdTime+0x3>
unsigned char ir_remote_get_address(void) {
	return address;
}

unsigned char ir_remote_get_data(void) {
	return data_ir;
    3d88:	80 91 4c 02 	lds	r24, 0x024C	; 0x80024c <data_ir>
				return;
			}

			lastCmdTime = getTime100MicroSec();

            irCommand = ir_remote_get_data();
    3d8c:	80 93 f4 02 	sts	0x02F4, r24	; 0x8002f4 <irCommand>

		    //usartTransmit(irCommand);			
			
			switch(irCommand) {
    3d90:	90 e0       	ldi	r25, 0x00	; 0
    3d92:	85 33       	cpi	r24, 0x35	; 53
    3d94:	91 05       	cpc	r25, r1
    3d96:	c0 f0       	brcs	.+48     	; 0x3dc8 <handleIRRemoteCommands+0x9c>
    3d98:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <pwm_right_desired>
    3d9c:	90 91 1a 03 	lds	r25, 0x031A	; 0x80031a <pwm_right_desired+0x1>
    3da0:	20 91 17 03 	lds	r18, 0x0317	; 0x800317 <pwm_left_desired>
    3da4:	30 91 18 03 	lds	r19, 0x0318	; 0x800318 <pwm_left_desired+0x1>
	               	break;

			}	// switch

			// convert pwm deisred in absolute speed (0 to 100)
			if(pwm_right_desired >= 0) {
    3da8:	97 fd       	sbrc	r25, 7
    3daa:	90 c0       	rjmp	.+288    	; 0x3ecc <handleIRRemoteCommands+0x1a0>
				speedr = pwm_right_desired;
			} else {
				speedr = (-pwm_right_desired);
    3dac:	90 93 00 03 	sts	0x0300, r25	; 0x800300 <speedr+0x1>
    3db0:	80 93 ff 02 	sts	0x02FF, r24	; 0x8002ff <speedr>
			}
			if(pwm_left_desired >= 0) {
    3db4:	37 ff       	sbrs	r19, 7
    3db6:	03 c0       	rjmp	.+6      	; 0x3dbe <handleIRRemoteCommands+0x92>
				speedl = pwm_left_desired;
			} else {
				speedl = (-pwm_left_desired);
    3db8:	31 95       	neg	r19
    3dba:	21 95       	neg	r18
    3dbc:	31 09       	sbc	r19, r1
    3dbe:	30 93 02 03 	sts	0x0302, r19	; 0x800302 <speedl+0x1>
    3dc2:	20 93 01 03 	sts	0x0301, r18	; 0x800301 <speedl>
    3dc6:	bc cf       	rjmp	.-136    	; 0x3d40 <handleIRRemoteCommands+0x14>

            irCommand = ir_remote_get_data();

		    //usartTransmit(irCommand);			
			
			switch(irCommand) {
    3dc8:	fc 01       	movw	r30, r24
    3dca:	88 27       	eor	r24, r24
    3dcc:	e7 57       	subi	r30, 0x77	; 119
    3dce:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd0:	8f 4f       	sbci	r24, 0xFF	; 255
    3dd2:	0c 94 85 51 	jmp	0xa30a	; 0xa30a <__tablejump2__>
				case 33:	// program -
					cliffAvoidanceEnabled = 0;
					break;

				case 52:	// av/tv button
					behaviorState = (behaviorState+1)%4;
    3dd6:	80 91 f0 02 	lds	r24, 0x02F0	; 0x8002f0 <behaviorState>
    3dda:	90 e0       	ldi	r25, 0x00	; 0
    3ddc:	01 96       	adiw	r24, 0x01	; 1
    3dde:	83 70       	andi	r24, 0x03	; 3
    3de0:	99 27       	eor	r25, r25
    3de2:	80 93 f0 02 	sts	0x02F0, r24	; 0x8002f0 <behaviorState>
					switch(behaviorState) {
    3de6:	82 30       	cpi	r24, 0x02	; 2
    3de8:	99 f0       	breq	.+38     	; 0x3e10 <handleIRRemoteCommands+0xe4>
    3dea:	83 30       	cpi	r24, 0x03	; 3
    3dec:	09 f4       	brne	.+2      	; 0x3df0 <handleIRRemoteCommands+0xc4>
    3dee:	a2 c1       	rjmp	.+836    	; 0x4134 <handleIRRemoteCommands+0x408>
    3df0:	81 30       	cpi	r24, 0x01	; 1
    3df2:	09 f4       	brne	.+2      	; 0x3df6 <handleIRRemoteCommands+0xca>
    3df4:	ad c1       	rjmp	.+858    	; 0x4150 <handleIRRemoteCommands+0x424>
						case 0:
							obstacleAvoidanceEnabled = 0;
    3df6:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <obstacleAvoidanceEnabled>
							cliffAvoidanceEnabled = 0;
    3dfa:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <cliffAvoidanceEnabled>
    3dfe:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <pwm_right_desired>
    3e02:	90 91 1a 03 	lds	r25, 0x031A	; 0x80031a <pwm_right_desired+0x1>
    3e06:	20 91 17 03 	lds	r18, 0x0317	; 0x800317 <pwm_left_desired>
    3e0a:	30 91 18 03 	lds	r19, 0x0318	; 0x800318 <pwm_left_desired+0x1>
							break;
    3e0e:	cc cf       	rjmp	.-104    	; 0x3da8 <handleIRRemoteCommands+0x7c>
						case 1:
							obstacleAvoidanceEnabled = 1;
							cliffAvoidanceEnabled = 0;
							break;
						case 2:
							obstacleAvoidanceEnabled = 0;
    3e10:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <obstacleAvoidanceEnabled>
							cliffAvoidanceEnabled = 1;
    3e14:	81 e0       	ldi	r24, 0x01	; 1
    3e16:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <cliffAvoidanceEnabled>
    3e1a:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <pwm_right_desired>
    3e1e:	90 91 1a 03 	lds	r25, 0x031A	; 0x80031a <pwm_right_desired+0x1>
    3e22:	20 91 17 03 	lds	r18, 0x0317	; 0x800317 <pwm_left_desired>
    3e26:	30 91 18 03 	lds	r19, 0x0318	; 0x800318 <pwm_left_desired+0x1>
							break;
    3e2a:	be cf       	rjmp	.-132    	; 0x3da8 <handleIRRemoteCommands+0x7c>
				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
					break;

				case 17:	// volume -
					obstacleAvoidanceEnabled = 0;
    3e2c:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <obstacleAvoidanceEnabled>
    3e30:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <pwm_right_desired>
    3e34:	90 91 1a 03 	lds	r25, 0x031A	; 0x80031a <pwm_right_desired+0x1>
    3e38:	20 91 17 03 	lds	r18, 0x0317	; 0x800317 <pwm_left_desired>
    3e3c:	30 91 18 03 	lds	r19, 0x0318	; 0x800318 <pwm_left_desired+0x1>
					break;
    3e40:	b3 cf       	rjmp	.-154    	; 0x3da8 <handleIRRemoteCommands+0x7c>
					pwm_right_desired += STEP_MOTORS;
	                if (pwm_right_desired>127) pwm_right_desired=127;
					break;

				case 9:	// left motor backward
					pwm_left_desired -= STEP_MOTORS;
    3e42:	20 91 17 03 	lds	r18, 0x0317	; 0x800317 <pwm_left_desired>
    3e46:	30 91 18 03 	lds	r19, 0x0318	; 0x800318 <pwm_left_desired+0x1>
    3e4a:	22 50       	subi	r18, 0x02	; 2
    3e4c:	31 09       	sbc	r19, r1
    3e4e:	30 93 18 03 	sts	0x0318, r19	; 0x800318 <pwm_left_desired+0x1>
    3e52:	20 93 17 03 	sts	0x0317, r18	; 0x800317 <pwm_left_desired>
	           	    if (pwm_left_desired<-127) pwm_left_desired=-127;
    3e56:	21 38       	cpi	r18, 0x81	; 129
    3e58:	8f ef       	ldi	r24, 0xFF	; 255
    3e5a:	38 07       	cpc	r19, r24
    3e5c:	0c f0       	brlt	.+2      	; 0x3e60 <handleIRRemoteCommands+0x134>
    3e5e:	48 c1       	rjmp	.+656    	; 0x40f0 <handleIRRemoteCommands+0x3c4>
    3e60:	81 e8       	ldi	r24, 0x81	; 129
    3e62:	9f ef       	ldi	r25, 0xFF	; 255
    3e64:	90 93 18 03 	sts	0x0318, r25	; 0x800318 <pwm_left_desired+0x1>
    3e68:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <pwm_left_desired>
    3e6c:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <pwm_right_desired>
    3e70:	90 91 1a 03 	lds	r25, 0x031A	; 0x80031a <pwm_right_desired+0x1>
    3e74:	21 e8       	ldi	r18, 0x81	; 129
    3e76:	3f ef       	ldi	r19, 0xFF	; 255
    3e78:	97 cf       	rjmp	.-210    	; 0x3da8 <handleIRRemoteCommands+0x7c>
    	            if (pwm_left_desired > 127) pwm_left_desired = 127;
               		break;

				case 8:	// both motors backward
				case 30:
					if(pwm_right_desired < pwm_left) {
    3e7a:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <pwm_right_desired>
    3e7e:	90 91 1a 03 	lds	r25, 0x031A	; 0x80031a <pwm_right_desired+0x1>
    3e82:	20 91 1b 03 	lds	r18, 0x031B	; 0x80031b <pwm_left>
    3e86:	30 91 1c 03 	lds	r19, 0x031C	; 0x80031c <pwm_left+0x1>
    3e8a:	82 17       	cp	r24, r18
    3e8c:	93 07       	cpc	r25, r19
    3e8e:	24 f0       	brlt	.+8      	; 0x3e98 <handleIRRemoteCommands+0x16c>
						pwm_left_desired  = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
    3e90:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <pwm_left_desired>
    3e94:	90 91 18 03 	lds	r25, 0x0318	; 0x800318 <pwm_left_desired+0x1>
					}
					pwm_right_desired -= STEP_MOTORS;
    3e98:	02 97       	sbiw	r24, 0x02	; 2
    3e9a:	90 93 1a 03 	sts	0x031A, r25	; 0x80031a <pwm_right_desired+0x1>
    3e9e:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <pwm_right_desired>
					pwm_left_desired -= STEP_MOTORS;
    3ea2:	90 93 18 03 	sts	0x0318, r25	; 0x800318 <pwm_left_desired+0x1>
    3ea6:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <pwm_left_desired>
	                if (pwm_right_desired < -127) pwm_right_desired = -127;
    3eaa:	81 38       	cpi	r24, 0x81	; 129
    3eac:	4f ef       	ldi	r20, 0xFF	; 255
    3eae:	94 07       	cpc	r25, r20
    3eb0:	0c f0       	brlt	.+2      	; 0x3eb4 <handleIRRemoteCommands+0x188>
    3eb2:	23 c1       	rjmp	.+582    	; 0x40fa <handleIRRemoteCommands+0x3ce>
    3eb4:	81 e8       	ldi	r24, 0x81	; 129
    3eb6:	9f ef       	ldi	r25, 0xFF	; 255
    3eb8:	90 93 1a 03 	sts	0x031A, r25	; 0x80031a <pwm_right_desired+0x1>
    3ebc:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <pwm_right_desired>
    	            if (pwm_left_desired < -127) pwm_left_desired = -127;
    3ec0:	90 93 18 03 	sts	0x0318, r25	; 0x800318 <pwm_left_desired+0x1>
    3ec4:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <pwm_left_desired>
    3ec8:	21 e8       	ldi	r18, 0x81	; 129
    3eca:	3f ef       	ldi	r19, 0xFF	; 255
    3ecc:	91 95       	neg	r25
    3ece:	81 95       	neg	r24
    3ed0:	91 09       	sbc	r25, r1
    3ed2:	6c cf       	rjmp	.-296    	; 0x3dac <handleIRRemoteCommands+0x80>
					updateBlueLed(pwm_blue);

	               	break;

				case 16:	// volume +
					obstacleAvoidanceEnabled = 1;
    3ed4:	81 e0       	ldi	r24, 0x01	; 1
    3ed6:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <obstacleAvoidanceEnabled>
    3eda:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <pwm_right_desired>
    3ede:	90 91 1a 03 	lds	r25, 0x031A	; 0x80031a <pwm_right_desired+0x1>
    3ee2:	20 91 17 03 	lds	r18, 0x0317	; 0x800317 <pwm_left_desired>
    3ee6:	30 91 18 03 	lds	r19, 0x0318	; 0x800318 <pwm_left_desired+0x1>
					break;
    3eea:	5e cf       	rjmp	.-324    	; 0x3da8 <handleIRRemoteCommands+0x7c>
					pwm_left_desired -= STEP_MOTORS;
	           	    if (pwm_left_desired<-127) pwm_left_desired=-127;
					break;

				case 7:	// right motor backward
					pwm_right_desired -= STEP_MOTORS;
    3eec:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <pwm_right_desired>
    3ef0:	90 91 1a 03 	lds	r25, 0x031A	; 0x80031a <pwm_right_desired+0x1>
    3ef4:	02 97       	sbiw	r24, 0x02	; 2
    3ef6:	90 93 1a 03 	sts	0x031A, r25	; 0x80031a <pwm_right_desired+0x1>
    3efa:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <pwm_right_desired>
	               	if (pwm_right_desired<-127) pwm_right_desired=-127;
    3efe:	81 38       	cpi	r24, 0x81	; 129
    3f00:	2f ef       	ldi	r18, 0xFF	; 255
    3f02:	92 07       	cpc	r25, r18
    3f04:	0c f0       	brlt	.+2      	; 0x3f08 <handleIRRemoteCommands+0x1dc>
    3f06:	4c cf       	rjmp	.-360    	; 0x3da0 <handleIRRemoteCommands+0x74>
    3f08:	81 e8       	ldi	r24, 0x81	; 129
    3f0a:	9f ef       	ldi	r25, 0xFF	; 255
    3f0c:	90 93 1a 03 	sts	0x031A, r25	; 0x80031a <pwm_right_desired+0x1>
    3f10:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <pwm_right_desired>
    3f14:	20 91 17 03 	lds	r18, 0x0317	; 0x800317 <pwm_left_desired>
    3f18:	30 91 18 03 	lds	r19, 0x0318	; 0x800318 <pwm_left_desired+0x1>
    3f1c:	8f e7       	ldi	r24, 0x7F	; 127
    3f1e:	90 e0       	ldi	r25, 0x00	; 0
    3f20:	45 cf       	rjmp	.-374    	; 0x3dac <handleIRRemoteCommands+0x80>
    	            if (pwm_left_desired < -127) pwm_left_desired = -127;
                  	break;

				case 6:	// both motors right
				case 47:
					pwm_right_desired -= STEP_MOTORS;
    3f22:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <pwm_right_desired>
    3f26:	90 91 1a 03 	lds	r25, 0x031A	; 0x80031a <pwm_right_desired+0x1>
    3f2a:	02 97       	sbiw	r24, 0x02	; 2
    3f2c:	90 93 1a 03 	sts	0x031A, r25	; 0x80031a <pwm_right_desired+0x1>
    3f30:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <pwm_right_desired>
					pwm_left_desired += STEP_MOTORS;
    3f34:	20 91 17 03 	lds	r18, 0x0317	; 0x800317 <pwm_left_desired>
    3f38:	30 91 18 03 	lds	r19, 0x0318	; 0x800318 <pwm_left_desired+0x1>
    3f3c:	2e 5f       	subi	r18, 0xFE	; 254
    3f3e:	3f 4f       	sbci	r19, 0xFF	; 255
    3f40:	30 93 18 03 	sts	0x0318, r19	; 0x800318 <pwm_left_desired+0x1>
    3f44:	20 93 17 03 	sts	0x0317, r18	; 0x800317 <pwm_left_desired>
                	if (pwm_right_desired<-127) pwm_right_desired=-127;
    3f48:	81 38       	cpi	r24, 0x81	; 129
    3f4a:	4f ef       	ldi	r20, 0xFF	; 255
    3f4c:	94 07       	cpc	r25, r20
    3f4e:	0c f0       	brlt	.+2      	; 0x3f52 <handleIRRemoteCommands+0x226>
    3f50:	d6 c0       	rjmp	.+428    	; 0x40fe <handleIRRemoteCommands+0x3d2>
    3f52:	81 e8       	ldi	r24, 0x81	; 129
    3f54:	9f ef       	ldi	r25, 0xFF	; 255
    3f56:	90 93 1a 03 	sts	0x031A, r25	; 0x80031a <pwm_right_desired+0x1>
    3f5a:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <pwm_right_desired>
                	if (pwm_left_desired>127) pwm_left_desired=127;
    3f5e:	20 38       	cpi	r18, 0x80	; 128
    3f60:	31 05       	cpc	r19, r1
    3f62:	e4 f2       	brlt	.-72     	; 0x3f1c <handleIRRemoteCommands+0x1f0>
    3f64:	81 e8       	ldi	r24, 0x81	; 129
    3f66:	9f ef       	ldi	r25, 0xFF	; 255
    3f68:	2f e7       	ldi	r18, 0x7F	; 127
    3f6a:	30 e0       	ldi	r19, 0x00	; 0
    3f6c:	30 93 18 03 	sts	0x0318, r19	; 0x800318 <pwm_left_desired+0x1>
    3f70:	20 93 17 03 	sts	0x0317, r18	; 0x800317 <pwm_left_desired>
    3f74:	19 cf       	rjmp	.-462    	; 0x3da8 <handleIRRemoteCommands+0x7c>
			switch(irCommand) {
				// sometimes there are two cases for the same command because two different
				// remote controls are used; one of this do not contain "numbers"
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
    3f76:	10 92 1a 03 	sts	0x031A, r1	; 0x80031a <pwm_right_desired+0x1>
    3f7a:	10 92 19 03 	sts	0x0319, r1	; 0x800319 <pwm_right_desired>
					pwm_left_desired = 0;
    3f7e:	10 92 18 03 	sts	0x0318, r1	; 0x800318 <pwm_left_desired+0x1>
    3f82:	10 92 17 03 	sts	0x0317, r1	; 0x800317 <pwm_left_desired>
					if(currentSelector == 8) {
    3f86:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <currentSelector>
    3f8a:	88 30       	cpi	r24, 0x08	; 8
    3f8c:	09 f4       	brne	.+2      	; 0x3f90 <handleIRRemoteCommands+0x264>
    3f8e:	ed c0       	rjmp	.+474    	; 0x416a <handleIRRemoteCommands+0x43e>
    3f90:	20 e0       	ldi	r18, 0x00	; 0
    3f92:	30 e0       	ldi	r19, 0x00	; 0
    3f94:	80 e0       	ldi	r24, 0x00	; 0
    3f96:	90 e0       	ldi	r25, 0x00	; 0
    3f98:	09 cf       	rjmp	.-494    	; 0x3dac <handleIRRemoteCommands+0x80>
                	if (pwm_left_desired>127) pwm_left_desired=127;
					break;

				case 4:	// both motors left
				case 46:
					pwm_right_desired += STEP_MOTORS;
    3f9a:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <pwm_right_desired>
    3f9e:	90 91 1a 03 	lds	r25, 0x031A	; 0x80031a <pwm_right_desired+0x1>
    3fa2:	02 96       	adiw	r24, 0x02	; 2
    3fa4:	90 93 1a 03 	sts	0x031A, r25	; 0x80031a <pwm_right_desired+0x1>
    3fa8:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <pwm_right_desired>
					pwm_left_desired -= STEP_MOTORS;
    3fac:	20 91 17 03 	lds	r18, 0x0317	; 0x800317 <pwm_left_desired>
    3fb0:	30 91 18 03 	lds	r19, 0x0318	; 0x800318 <pwm_left_desired+0x1>
    3fb4:	22 50       	subi	r18, 0x02	; 2
    3fb6:	31 09       	sbc	r19, r1
    3fb8:	30 93 18 03 	sts	0x0318, r19	; 0x800318 <pwm_left_desired+0x1>
    3fbc:	20 93 17 03 	sts	0x0317, r18	; 0x800317 <pwm_left_desired>
	                if (pwm_right_desired>127) pwm_right_desired=127;
    3fc0:	80 38       	cpi	r24, 0x80	; 128
    3fc2:	91 05       	cpc	r25, r1
    3fc4:	0c f4       	brge	.+2      	; 0x3fc8 <handleIRRemoteCommands+0x29c>
    3fc6:	a0 c0       	rjmp	.+320    	; 0x4108 <handleIRRemoteCommands+0x3dc>
    3fc8:	8f e7       	ldi	r24, 0x7F	; 127
    3fca:	90 e0       	ldi	r25, 0x00	; 0
    3fcc:	90 93 1a 03 	sts	0x031A, r25	; 0x80031a <pwm_right_desired+0x1>
    3fd0:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <pwm_right_desired>
	   	            if (pwm_left_desired<-127) pwm_left_desired=-127;
    3fd4:	21 38       	cpi	r18, 0x81	; 129
    3fd6:	8f ef       	ldi	r24, 0xFF	; 255
    3fd8:	38 07       	cpc	r19, r24
    3fda:	0c f0       	brlt	.+2      	; 0x3fde <handleIRRemoteCommands+0x2b2>
    3fdc:	9f cf       	rjmp	.-194    	; 0x3f1c <handleIRRemoteCommands+0x1f0>
    3fde:	8f e7       	ldi	r24, 0x7F	; 127
    3fe0:	90 e0       	ldi	r25, 0x00	; 0
    3fe2:	21 e8       	ldi	r18, 0x81	; 129
    3fe4:	3f ef       	ldi	r19, 0xFF	; 255
    3fe6:	30 93 18 03 	sts	0x0318, r19	; 0x800318 <pwm_left_desired+0x1>
    3fea:	20 93 17 03 	sts	0x0317, r18	; 0x800317 <pwm_left_desired>
    3fee:	dc ce       	rjmp	.-584    	; 0x3da8 <handleIRRemoteCommands+0x7c>
					break;

				case 3:	// left motor forward
					pwm_left_desired += STEP_MOTORS;
    3ff0:	20 91 17 03 	lds	r18, 0x0317	; 0x800317 <pwm_left_desired>
    3ff4:	30 91 18 03 	lds	r19, 0x0318	; 0x800318 <pwm_left_desired+0x1>
    3ff8:	2e 5f       	subi	r18, 0xFE	; 254
    3ffa:	3f 4f       	sbci	r19, 0xFF	; 255
    3ffc:	30 93 18 03 	sts	0x0318, r19	; 0x800318 <pwm_left_desired+0x1>
    4000:	20 93 17 03 	sts	0x0317, r18	; 0x800317 <pwm_left_desired>
	               	if (pwm_left_desired>127) pwm_left_desired=127;
    4004:	20 38       	cpi	r18, 0x80	; 128
    4006:	31 05       	cpc	r19, r1
    4008:	0c f4       	brge	.+2      	; 0x400c <handleIRRemoteCommands+0x2e0>
    400a:	72 c0       	rjmp	.+228    	; 0x40f0 <handleIRRemoteCommands+0x3c4>
    400c:	8f e7       	ldi	r24, 0x7F	; 127
    400e:	90 e0       	ldi	r25, 0x00	; 0
    4010:	90 93 18 03 	sts	0x0318, r25	; 0x800318 <pwm_left_desired+0x1>
    4014:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <pwm_left_desired>
    4018:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <pwm_right_desired>
    401c:	90 91 1a 03 	lds	r25, 0x031A	; 0x80031a <pwm_right_desired+0x1>
    4020:	2f e7       	ldi	r18, 0x7F	; 127
    4022:	30 e0       	ldi	r19, 0x00	; 0
    4024:	c1 ce       	rjmp	.-638    	; 0x3da8 <handleIRRemoteCommands+0x7c>
					break;

				case 1:	// right motor forward
					pwm_right_desired += STEP_MOTORS;
    4026:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <pwm_right_desired>
    402a:	90 91 1a 03 	lds	r25, 0x031A	; 0x80031a <pwm_right_desired+0x1>
    402e:	02 96       	adiw	r24, 0x02	; 2
    4030:	90 93 1a 03 	sts	0x031A, r25	; 0x80031a <pwm_right_desired+0x1>
    4034:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <pwm_right_desired>
	                if (pwm_right_desired>127) pwm_right_desired=127;
    4038:	80 38       	cpi	r24, 0x80	; 128
    403a:	91 05       	cpc	r25, r1
    403c:	0c f4       	brge	.+2      	; 0x4040 <handleIRRemoteCommands+0x314>
    403e:	b0 ce       	rjmp	.-672    	; 0x3da0 <handleIRRemoteCommands+0x74>
    4040:	8f e7       	ldi	r24, 0x7F	; 127
    4042:	90 e0       	ldi	r25, 0x00	; 0
    4044:	90 93 1a 03 	sts	0x031A, r25	; 0x80031a <pwm_right_desired+0x1>
    4048:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <pwm_right_desired>
    404c:	20 91 17 03 	lds	r18, 0x0317	; 0x800317 <pwm_left_desired>
    4050:	30 91 18 03 	lds	r19, 0x0318	; 0x800318 <pwm_left_desired+0x1>
    4054:	ab ce       	rjmp	.-682    	; 0x3dac <handleIRRemoteCommands+0x80>
	               	if (pwm_right_desired<-127) pwm_right_desired=-127;
					break;

	           	case 0:	// colors
				case 50:
					colorState = (colorState+1)%5;
    4056:	80 91 f2 02 	lds	r24, 0x02F2	; 0x8002f2 <colorState>
    405a:	90 e0       	ldi	r25, 0x00	; 0
    405c:	01 96       	adiw	r24, 0x01	; 1
    405e:	65 e0       	ldi	r22, 0x05	; 5
    4060:	70 e0       	ldi	r23, 0x00	; 0
    4062:	0e 94 30 51 	call	0xa260	; 0xa260 <__divmodhi4>
    4066:	80 93 f2 02 	sts	0x02F2, r24	; 0x8002f2 <colorState>

					if(colorState==0) {			// turn on blue and off all IRs
    406a:	81 11       	cpse	r24, r1
    406c:	53 c0       	rjmp	.+166    	; 0x4114 <handleIRRemoteCommands+0x3e8>
						LED_IR1_HIGH;
    406e:	44 9a       	sbi	0x08, 4	; 8
						LED_IR2_HIGH;
    4070:	45 9a       	sbi	0x08, 5	; 8
						pwm_blue = 0;
    4072:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <pwm_blue>
						pwm_green = MAX_LEDS_PWM;
    4076:	8f ef       	ldi	r24, 0xFF	; 255
    4078:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <pwm_green>
						pwm_red = MAX_LEDS_PWM;
    407c:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <pwm_red>
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					}

					updateRedLed(pwm_red);
    4080:	0e 94 0e 46 	call	0x8c1c	; 0x8c1c <updateRedLed>
					updateGreenLed(pwm_green);
    4084:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <pwm_green>
    4088:	0e 94 22 46 	call	0x8c44	; 0x8c44 <updateGreenLed>
					updateBlueLed(pwm_blue);
    408c:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <pwm_blue>
    4090:	0e 94 36 46 	call	0x8c6c	; 0x8c6c <updateBlueLed>
    4094:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <pwm_right_desired>
    4098:	90 91 1a 03 	lds	r25, 0x031A	; 0x80031a <pwm_right_desired+0x1>
    409c:	20 91 17 03 	lds	r18, 0x0317	; 0x800317 <pwm_left_desired>
    40a0:	30 91 18 03 	lds	r19, 0x0318	; 0x800318 <pwm_left_desired+0x1>

	               	break;
    40a4:	81 ce       	rjmp	.-766    	; 0x3da8 <handleIRRemoteCommands+0x7c>
					}
					break;

				case 2:	// both motors forward
				case 31:
					if(pwm_right_desired > pwm_left_desired) {
    40a6:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <pwm_right_desired>
    40aa:	90 91 1a 03 	lds	r25, 0x031A	; 0x80031a <pwm_right_desired+0x1>
    40ae:	20 91 17 03 	lds	r18, 0x0317	; 0x800317 <pwm_left_desired>
    40b2:	30 91 18 03 	lds	r19, 0x0318	; 0x800318 <pwm_left_desired+0x1>
    40b6:	28 17       	cp	r18, r24
    40b8:	39 07       	cpc	r19, r25
    40ba:	0c f0       	brlt	.+2      	; 0x40be <handleIRRemoteCommands+0x392>
    40bc:	c9 01       	movw	r24, r18
						pwm_left_desired = pwm_right_desired;
					} else {
						pwm_right_desired = pwm_left_desired;
					}
					pwm_right_desired += STEP_MOTORS;
    40be:	02 96       	adiw	r24, 0x02	; 2
    40c0:	90 93 1a 03 	sts	0x031A, r25	; 0x80031a <pwm_right_desired+0x1>
    40c4:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <pwm_right_desired>
					pwm_left_desired += STEP_MOTORS;
    40c8:	90 93 18 03 	sts	0x0318, r25	; 0x800318 <pwm_left_desired+0x1>
    40cc:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <pwm_left_desired>
	                if (pwm_right_desired > 127) pwm_right_desired = 127;
    40d0:	80 38       	cpi	r24, 0x80	; 128
    40d2:	91 05       	cpc	r25, r1
    40d4:	94 f0       	brlt	.+36     	; 0x40fa <handleIRRemoteCommands+0x3ce>
    40d6:	8f e7       	ldi	r24, 0x7F	; 127
    40d8:	90 e0       	ldi	r25, 0x00	; 0
    40da:	90 93 1a 03 	sts	0x031A, r25	; 0x80031a <pwm_right_desired+0x1>
    40de:	80 93 19 03 	sts	0x0319, r24	; 0x800319 <pwm_right_desired>
    	            if (pwm_left_desired > 127) pwm_left_desired = 127;
    40e2:	90 93 18 03 	sts	0x0318, r25	; 0x800318 <pwm_left_desired+0x1>
    40e6:	80 93 17 03 	sts	0x0317, r24	; 0x800317 <pwm_left_desired>
    40ea:	2f e7       	ldi	r18, 0x7F	; 127
    40ec:	30 e0       	ldi	r19, 0x00	; 0
    40ee:	5e ce       	rjmp	.-836    	; 0x3dac <handleIRRemoteCommands+0x80>
    40f0:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <pwm_right_desired>
    40f4:	90 91 1a 03 	lds	r25, 0x031A	; 0x80031a <pwm_right_desired+0x1>
    40f8:	57 ce       	rjmp	.-850    	; 0x3da8 <handleIRRemoteCommands+0x7c>
    40fa:	9c 01       	movw	r18, r24
    40fc:	55 ce       	rjmp	.-854    	; 0x3da8 <handleIRRemoteCommands+0x7c>
				case 6:	// both motors right
				case 47:
					pwm_right_desired -= STEP_MOTORS;
					pwm_left_desired += STEP_MOTORS;
                	if (pwm_right_desired<-127) pwm_right_desired=-127;
                	if (pwm_left_desired>127) pwm_left_desired=127;
    40fe:	20 38       	cpi	r18, 0x80	; 128
    4100:	31 05       	cpc	r19, r1
    4102:	0c f4       	brge	.+2      	; 0x4106 <handleIRRemoteCommands+0x3da>
    4104:	51 ce       	rjmp	.-862    	; 0x3da8 <handleIRRemoteCommands+0x7c>
    4106:	30 cf       	rjmp	.-416    	; 0x3f68 <handleIRRemoteCommands+0x23c>
				case 4:	// both motors left
				case 46:
					pwm_right_desired += STEP_MOTORS;
					pwm_left_desired -= STEP_MOTORS;
	                if (pwm_right_desired>127) pwm_right_desired=127;
	   	            if (pwm_left_desired<-127) pwm_left_desired=-127;
    4108:	21 38       	cpi	r18, 0x81	; 129
    410a:	4f ef       	ldi	r20, 0xFF	; 255
    410c:	34 07       	cpc	r19, r20
    410e:	0c f0       	brlt	.+2      	; 0x4112 <handleIRRemoteCommands+0x3e6>
    4110:	4b ce       	rjmp	.-874    	; 0x3da8 <handleIRRemoteCommands+0x7c>
    4112:	67 cf       	rjmp	.-306    	; 0x3fe2 <handleIRRemoteCommands+0x2b6>
						LED_IR1_HIGH;
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
    4114:	81 30       	cpi	r24, 0x01	; 1
    4116:	f1 f1       	breq	.+124    	; 0x4194 <handleIRRemoteCommands+0x468>
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = 0;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==2) {	// turn on red and on all IRs
    4118:	82 30       	cpi	r24, 0x02	; 2
    411a:	09 f4       	brne	.+2      	; 0x411e <handleIRRemoteCommands+0x3f2>
    411c:	43 c0       	rjmp	.+134    	; 0x41a4 <handleIRRemoteCommands+0x478>
						LED_IR1_LOW;
						LED_IR2_LOW;
						pwm_blue = MAX_LEDS_PWM;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = 0;
					} else if(colorState==3) {	// turn on white
    411e:	83 30       	cpi	r24, 0x03	; 3
    4120:	09 f4       	brne	.+2      	; 0x4124 <handleIRRemoteCommands+0x3f8>
    4122:	4b c0       	rjmp	.+150    	; 0x41ba <handleIRRemoteCommands+0x48e>
						pwm_blue = 0;
						pwm_green = 0;
						pwm_red = 0;
					} else if(colorState==4) {	// turn off all leds
						pwm_blue = MAX_LEDS_PWM;
    4124:	8f ef       	ldi	r24, 0xFF	; 255
    4126:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <pwm_blue>
						pwm_green = MAX_LEDS_PWM;
    412a:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <pwm_green>
						pwm_red = MAX_LEDS_PWM;
    412e:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <pwm_red>
    4132:	a6 cf       	rjmp	.-180    	; 0x4080 <handleIRRemoteCommands+0x354>
						case 2:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 1;
							break;
						case 3:
							obstacleAvoidanceEnabled = 1;
    4134:	81 e0       	ldi	r24, 0x01	; 1
    4136:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <obstacleAvoidanceEnabled>
							cliffAvoidanceEnabled = 1;
    413a:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <cliffAvoidanceEnabled>
    413e:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <pwm_right_desired>
    4142:	90 91 1a 03 	lds	r25, 0x031A	; 0x80031a <pwm_right_desired+0x1>
    4146:	20 91 17 03 	lds	r18, 0x0317	; 0x800317 <pwm_left_desired>
    414a:	30 91 18 03 	lds	r19, 0x0318	; 0x800318 <pwm_left_desired+0x1>
							break;
    414e:	2c ce       	rjmp	.-936    	; 0x3da8 <handleIRRemoteCommands+0x7c>
						case 0:
							obstacleAvoidanceEnabled = 0;
							cliffAvoidanceEnabled = 0;
							break;
						case 1:
							obstacleAvoidanceEnabled = 1;
    4150:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <obstacleAvoidanceEnabled>
							cliffAvoidanceEnabled = 0;
    4154:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <cliffAvoidanceEnabled>
    4158:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <pwm_right_desired>
    415c:	90 91 1a 03 	lds	r25, 0x031A	; 0x80031a <pwm_right_desired+0x1>
    4160:	20 91 17 03 	lds	r18, 0x0317	; 0x800317 <pwm_left_desired>
    4164:	30 91 18 03 	lds	r19, 0x0318	; 0x800318 <pwm_left_desired+0x1>
							break;
    4168:	1f ce       	rjmp	.-962    	; 0x3da8 <handleIRRemoteCommands+0x7c>
				case 5:	// stop motors
				case 51:
					pwm_right_desired = 0;
					pwm_left_desired = 0;
					if(currentSelector == 8) {
						calibrateSensors();
    416a:	0e 94 a6 47 	call	0x8f4c	; 0x8f4c <calibrateSensors>
						proximityResult[8] = 1023;	// because the first time this value could be low after calibration
    416e:	8f ef       	ldi	r24, 0xFF	; 255
    4170:	93 e0       	ldi	r25, 0x03	; 3
    4172:	90 93 a8 03 	sts	0x03A8, r25	; 0x8003a8 <proximityResult+0x11>
    4176:	80 93 a7 03 	sts	0x03A7, r24	; 0x8003a7 <proximityResult+0x10>
						proximityResult[11] = 1023;	// and in that case a false black line will be detected
    417a:	90 93 ae 03 	sts	0x03AE, r25	; 0x8003ae <proximityResult+0x17>
    417e:	80 93 ad 03 	sts	0x03AD, r24	; 0x8003ad <proximityResult+0x16>
						calibState = CALIBRATION_STATE_FIND_THRS_0;
    4182:	86 e0       	ldi	r24, 0x06	; 6
    4184:	80 93 46 15 	sts	0x1546, r24	; 0x801546 <calibState>
						calibVelIndex = 1;
    4188:	81 e0       	ldi	r24, 0x01	; 1
    418a:	80 93 a0 12 	sts	0x12A0, r24	; 0x8012a0 <calibVelIndex>
						calibrateOdomFlag = 1;
    418e:	80 93 53 0f 	sts	0x0F53, r24	; 0x800f53 <calibrateOdomFlag>
    4192:	02 ce       	rjmp	.-1020   	; 0x3d98 <handleIRRemoteCommands+0x6c>
						LED_IR2_HIGH;
						pwm_blue = 0;
						pwm_green = MAX_LEDS_PWM;
						pwm_red = MAX_LEDS_PWM;
					} else if(colorState==1) {	// turn on green
						pwm_blue = MAX_LEDS_PWM;
    4194:	8f ef       	ldi	r24, 0xFF	; 255
    4196:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <pwm_blue>
						pwm_green = 0;
    419a:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <pwm_green>
						pwm_red = MAX_LEDS_PWM;
    419e:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <pwm_red>
    41a2:	6e cf       	rjmp	.-292    	; 0x4080 <handleIRRemoteCommands+0x354>
					} else if(colorState==2) {	// turn on red and on all IRs
						LED_IR1_LOW;
    41a4:	44 98       	cbi	0x08, 4	; 8
						LED_IR2_LOW;
    41a6:	45 98       	cbi	0x08, 5	; 8
						pwm_blue = MAX_LEDS_PWM;
    41a8:	8f ef       	ldi	r24, 0xFF	; 255
    41aa:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <pwm_blue>
						pwm_green = MAX_LEDS_PWM;
    41ae:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <pwm_green>
						pwm_red = 0;
    41b2:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <pwm_red>
    41b6:	80 e0       	ldi	r24, 0x00	; 0
    41b8:	63 cf       	rjmp	.-314    	; 0x4080 <handleIRRemoteCommands+0x354>
					} else if(colorState==3) {	// turn on white
						pwm_blue = 0;
    41ba:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <pwm_blue>
						pwm_green = 0;
    41be:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <pwm_green>
						pwm_red = 0;
    41c2:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <pwm_red>
    41c6:	80 e0       	ldi	r24, 0x00	; 0
    41c8:	5b cf       	rjmp	.-330    	; 0x4080 <handleIRRemoteCommands+0x354>

000041ca <start_speed_control_right>:
	//i_limit_speed_control = 3200;
	//k_ff_speed_control_left = INIT_KFF;
	//k_ff_speed_control_right = INIT_KFF;
}

void start_speed_control_right(signed int *pwm_right) {
    41ca:	8f 92       	push	r8
    41cc:	9f 92       	push	r9
    41ce:	af 92       	push	r10
    41d0:	bf 92       	push	r11
    41d2:	cf 92       	push	r12
    41d4:	df 92       	push	r13
    41d6:	ef 92       	push	r14
    41d8:	ff 92       	push	r15
    41da:	0f 93       	push	r16
    41dc:	1f 93       	push	r17
    41de:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
    41e0:	80 81       	ld	r24, Z
    41e2:	91 81       	ldd	r25, Z+1	; 0x01
    41e4:	89 2b       	or	r24, r25
    41e6:	09 f4       	brne	.+2      	; 0x41ea <start_speed_control_right+0x20>
    41e8:	a7 c0       	rjmp	.+334    	; 0x4338 <start_speed_control_right+0x16e>
		delta_right_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
    41ea:	20 91 0c 15 	lds	r18, 0x150C	; 0x80150c <delta_right_speed_current>
    41ee:	30 91 0d 15 	lds	r19, 0x150D	; 0x80150d <delta_right_speed_current+0x1>
    41f2:	30 93 a6 12 	sts	0x12A6, r19	; 0x8012a6 <delta_right_speed_prev+0x1>
    41f6:	20 93 a5 12 	sts	0x12A5, r18	; 0x8012a5 <delta_right_speed_prev>
	if(*pwm_right >= 0) {
    41fa:	00 81       	ld	r16, Z
    41fc:	11 81       	ldd	r17, Z+1	; 0x01
    41fe:	17 fd       	sbrc	r17, 7
    4200:	d7 c0       	rjmp	.+430    	; 0x43b0 <start_speed_control_right+0x1e6>
		delta_right_speed_current = (*pwm_right) - last_right_vel;
    4202:	80 91 1f 03 	lds	r24, 0x031F	; 0x80031f <last_right_vel>
    4206:	90 91 20 03 	lds	r25, 0x0320	; 0x800320 <last_right_vel+0x1>
    420a:	08 1b       	sub	r16, r24
    420c:	19 0b       	sbc	r17, r25
    420e:	10 93 0d 15 	sts	0x150D, r17	; 0x80150d <delta_right_speed_current+0x1>
    4212:	00 93 0c 15 	sts	0x150C, r16	; 0x80150c <delta_right_speed_current>
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
	}

	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    4216:	40 91 07 03 	lds	r20, 0x0307	; 0x800307 <delta_right_speed_sum>
    421a:	50 91 08 03 	lds	r21, 0x0308	; 0x800308 <delta_right_speed_sum+0x1>
    421e:	40 0f       	add	r20, r16
    4220:	51 1f       	adc	r21, r17

	if(delta_right_speed_sum > I_LIMIT) {
    4222:	41 34       	cpi	r20, 0x41	; 65
    4224:	86 e0       	ldi	r24, 0x06	; 6
    4226:	58 07       	cpc	r21, r24
    4228:	0c f4       	brge	.+2      	; 0x422c <start_speed_control_right+0x62>
    422a:	9b c0       	rjmp	.+310    	; 0x4362 <start_speed_control_right+0x198>
		delta_right_speed_sum = I_LIMIT;
    422c:	80 e4       	ldi	r24, 0x40	; 64
    422e:	96 e0       	ldi	r25, 0x06	; 6
    4230:	90 93 08 03 	sts	0x0308, r25	; 0x800308 <delta_right_speed_sum+0x1>
    4234:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <delta_right_speed_sum>
    4238:	90 ec       	ldi	r25, 0xC0	; 192
    423a:	c9 2e       	mov	r12, r25
    423c:	92 e1       	ldi	r25, 0x12	; 18
    423e:	d9 2e       	mov	r13, r25
    4240:	e1 2c       	mov	r14, r1
    4242:	f1 2c       	mov	r15, r1
		delta_right_speed_sum = -I_LIMIT;
	}		

	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_right_speed_controller = (signed long int)((*pwm_right) << 3);
    4244:	80 81       	ld	r24, Z
    4246:	91 81       	ldd	r25, Z+1	; 0x01
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_PART);
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_PART);
	pwm_right_speed_controller += (signed long int)(delta_right_speed_sum*I_PART);
    4248:	ac 01       	movw	r20, r24
    424a:	44 0f       	add	r20, r20
    424c:	55 1f       	adc	r21, r21
    424e:	44 0f       	add	r20, r20
    4250:	55 1f       	adc	r21, r21
    4252:	44 0f       	add	r20, r20
    4254:	55 1f       	adc	r21, r21
    4256:	4a 01       	movw	r8, r20
    4258:	55 0f       	add	r21, r21
    425a:	aa 08       	sbc	r10, r10
    425c:	bb 08       	sbc	r11, r11
    425e:	d8 01       	movw	r26, r16
    4260:	aa 0f       	add	r26, r26
    4262:	bb 1f       	adc	r27, r27
    4264:	b8 01       	movw	r22, r16
    4266:	66 0f       	add	r22, r22
    4268:	77 1f       	adc	r23, r23
    426a:	66 0f       	add	r22, r22
    426c:	77 1f       	adc	r23, r23
    426e:	66 0f       	add	r22, r22
    4270:	77 1f       	adc	r23, r23
    4272:	ad 01       	movw	r20, r26
    4274:	46 0f       	add	r20, r22
    4276:	57 1f       	adc	r21, r23
    4278:	05 2e       	mov	r0, r21
    427a:	00 0c       	add	r0, r0
    427c:	66 0b       	sbc	r22, r22
    427e:	77 0b       	sbc	r23, r23
    4280:	48 0d       	add	r20, r8
    4282:	59 1d       	adc	r21, r9
    4284:	6a 1d       	adc	r22, r10
    4286:	7b 1d       	adc	r23, r11
    4288:	02 1b       	sub	r16, r18
    428a:	13 0b       	sbc	r17, r19
    428c:	00 0f       	add	r16, r16
    428e:	11 1f       	adc	r17, r17
    4290:	01 2e       	mov	r0, r17
    4292:	00 0c       	add	r0, r0
    4294:	22 0b       	sbc	r18, r18
    4296:	33 0b       	sbc	r19, r19
    4298:	40 0f       	add	r20, r16
    429a:	51 1f       	adc	r21, r17
    429c:	62 1f       	adc	r22, r18
    429e:	73 1f       	adc	r23, r19
    42a0:	4c 0d       	add	r20, r12
    42a2:	5d 1d       	adc	r21, r13
    42a4:	6e 1d       	adc	r22, r14
    42a6:	7f 1d       	adc	r23, r15
    42a8:	40 93 0f 03 	sts	0x030F, r20	; 0x80030f <pwm_right_speed_controller>
    42ac:	50 93 10 03 	sts	0x0310, r21	; 0x800310 <pwm_right_speed_controller+0x1>
    42b0:	60 93 11 03 	sts	0x0311, r22	; 0x800311 <pwm_right_speed_controller+0x2>
    42b4:	70 93 12 03 	sts	0x0312, r23	; 0x800312 <pwm_right_speed_controller+0x3>

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    42b8:	77 fd       	sbrc	r23, 7
    42ba:	65 c0       	rjmp	.+202    	; 0x4386 <start_speed_control_right+0x1bc>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
    42bc:	41 15       	cp	r20, r1
    42be:	51 05       	cpc	r21, r1
    42c0:	61 05       	cpc	r22, r1
    42c2:	71 05       	cpc	r23, r1
    42c4:	09 f4       	brne	.+2      	; 0x42c8 <start_speed_control_right+0xfe>
    42c6:	92 c0       	rjmp	.+292    	; 0x43ec <start_speed_control_right+0x222>
    42c8:	97 fd       	sbrc	r25, 7
    42ca:	5f c0       	rjmp	.+190    	; 0x438a <start_speed_control_right+0x1c0>
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
    42cc:	41 3c       	cpi	r20, 0xC1	; 193
    42ce:	8d e5       	ldi	r24, 0x5D	; 93
    42d0:	58 07       	cpc	r21, r24
    42d2:	61 05       	cpc	r22, r1
    42d4:	71 05       	cpc	r23, r1
    42d6:	0c f4       	brge	.+2      	; 0x42da <start_speed_control_right+0x110>
    42d8:	89 c0       	rjmp	.+274    	; 0x43ec <start_speed_control_right+0x222>
    42da:	80 ec       	ldi	r24, 0xC0	; 192
    42dc:	9d e5       	ldi	r25, 0x5D	; 93
    42de:	a0 e0       	ldi	r26, 0x00	; 0
    42e0:	b0 e0       	ldi	r27, 0x00	; 0
    42e2:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <pwm_right_speed_controller>
    42e6:	90 93 10 03 	sts	0x0310, r25	; 0x800310 <pwm_right_speed_controller+0x1>
    42ea:	a0 93 11 03 	sts	0x0311, r26	; 0x800311 <pwm_right_speed_controller+0x2>
    42ee:	b0 93 12 03 	sts	0x0312, r27	; 0x800312 <pwm_right_speed_controller+0x3>
    42f2:	4c ed       	ldi	r20, 0xDC	; 220
    42f4:	55 e0       	ldi	r21, 0x05	; 5
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_right = (signed int)(pwm_right_speed_controller>>4);
    42f6:	51 83       	std	Z+1, r21	; 0x01
    42f8:	40 83       	st	Z, r20

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
    42fa:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <pwm_right_desired_to_control>
    42fe:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <pwm_right_desired_to_control+0x1>
    4302:	18 16       	cp	r1, r24
    4304:	19 06       	cpc	r1, r25
    4306:	0c f0       	brlt	.+2      	; 0x430a <start_speed_control_right+0x140>
    4308:	6c c0       	rjmp	.+216    	; 0x43e2 <start_speed_control_right+0x218>
		*pwm_right += 1;
    430a:	4f 5f       	subi	r20, 0xFF	; 255
    430c:	5f 4f       	sbci	r21, 0xFF	; 255
    430e:	51 83       	std	Z+1, r21	; 0x01
    4310:	40 83       	st	Z, r20
	} else if(*pwm_right < 0) {
		*pwm_right -= 30;
	}
	*/

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    4312:	41 15       	cp	r20, r1
    4314:	82 e0       	ldi	r24, 0x02	; 2
    4316:	58 07       	cpc	r21, r24
    4318:	e4 f0       	brlt	.+56     	; 0x4352 <start_speed_control_right+0x188>
    431a:	8f ef       	ldi	r24, 0xFF	; 255
    431c:	91 e0       	ldi	r25, 0x01	; 1
    431e:	91 83       	std	Z+1, r25	; 0x01
    4320:	80 83       	st	Z, r24
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}
    4322:	1f 91       	pop	r17
    4324:	0f 91       	pop	r16
    4326:	ff 90       	pop	r15
    4328:	ef 90       	pop	r14
    432a:	df 90       	pop	r13
    432c:	cf 90       	pop	r12
    432e:	bf 90       	pop	r11
    4330:	af 90       	pop	r10
    4332:	9f 90       	pop	r9
    4334:	8f 90       	pop	r8
    4336:	08 95       	ret
void start_speed_control_right(signed int *pwm_right) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_right==0) {
		delta_right_speed_sum = 0;		// reset the sum of the error for the I parameter
    4338:	10 92 08 03 	sts	0x0308, r1	; 0x800308 <delta_right_speed_sum+0x1>
    433c:	10 92 07 03 	sts	0x0307, r1	; 0x800307 <delta_right_speed_sum>
		delta_right_speed_current = 0;
    4340:	10 92 0d 15 	sts	0x150D, r1	; 0x80150d <delta_right_speed_current+0x1>
    4344:	10 92 0c 15 	sts	0x150C, r1	; 0x80150c <delta_right_speed_current>
		delta_right_speed_prev = 0;
    4348:	10 92 a6 12 	sts	0x12A6, r1	; 0x8012a6 <delta_right_speed_prev+0x1>
    434c:	10 92 a5 12 	sts	0x12A5, r1	; 0x8012a5 <delta_right_speed_prev>
		return;
    4350:	e8 cf       	rjmp	.-48     	; 0x4322 <start_speed_control_right+0x158>
		*pwm_right -= 30;
	}
	*/

	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);
    4352:	41 30       	cpi	r20, 0x01	; 1
    4354:	5e 4f       	sbci	r21, 0xFE	; 254
    4356:	2c f7       	brge	.-54     	; 0x4322 <start_speed_control_right+0x158>
    4358:	81 e0       	ldi	r24, 0x01	; 1
    435a:	9e ef       	ldi	r25, 0xFE	; 254
    435c:	91 83       	std	Z+1, r25	; 0x01
    435e:	80 83       	st	Z, r24
    4360:	e0 cf       	rjmp	.-64     	; 0x4322 <start_speed_control_right+0x158>
	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;

	if(delta_right_speed_sum > I_LIMIT) {
		delta_right_speed_sum = I_LIMIT;
	}else if(delta_right_speed_sum < -I_LIMIT) {
    4362:	40 3c       	cpi	r20, 0xC0	; 192
    4364:	89 ef       	ldi	r24, 0xF9	; 249
    4366:	58 07       	cpc	r21, r24
    4368:	74 f5       	brge	.+92     	; 0x43c6 <start_speed_control_right+0x1fc>
		delta_right_speed_sum = -I_LIMIT;
    436a:	80 ec       	ldi	r24, 0xC0	; 192
    436c:	99 ef       	ldi	r25, 0xF9	; 249
    436e:	90 93 08 03 	sts	0x0308, r25	; 0x800308 <delta_right_speed_sum+0x1>
    4372:	80 93 07 03 	sts	0x0307, r24	; 0x800307 <delta_right_speed_sum>
    4376:	b0 e4       	ldi	r27, 0x40	; 64
    4378:	cb 2e       	mov	r12, r27
    437a:	bd ee       	ldi	r27, 0xED	; 237
    437c:	db 2e       	mov	r13, r27
    437e:	ee 24       	eor	r14, r14
    4380:	ea 94       	dec	r14
    4382:	fe 2c       	mov	r15, r14
    4384:	5f cf       	rjmp	.-322    	; 0x4244 <start_speed_control_right+0x7a>
	pwm_right_speed_controller += (signed long int)(delta_right_speed_current*P_PART);
	pwm_right_speed_controller += (signed long int)((delta_right_speed_current-delta_right_speed_prev)*D_PART);
	pwm_right_speed_controller += (signed long int)(delta_right_speed_sum*I_PART);

	// avoid changing motion direction
	if(pwm_right_speed_controller < 0 && *pwm_right >= 0) {	
    4386:	97 fd       	sbrc	r25, 7
    4388:	31 c0       	rjmp	.+98     	; 0x43ec <start_speed_control_right+0x222>
		pwm_right_speed_controller = 0;
	}
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
    438a:	10 92 0f 03 	sts	0x030F, r1	; 0x80030f <pwm_right_speed_controller>
    438e:	10 92 10 03 	sts	0x0310, r1	; 0x800310 <pwm_right_speed_controller+0x1>
    4392:	10 92 11 03 	sts	0x0311, r1	; 0x800311 <pwm_right_speed_controller+0x2>
    4396:	10 92 12 03 	sts	0x0312, r1	; 0x800312 <pwm_right_speed_controller+0x3>
    439a:	40 e0       	ldi	r20, 0x00	; 0
    439c:	50 e0       	ldi	r21, 0x00	; 0
    439e:	ba 01       	movw	r22, r20
    43a0:	84 e0       	ldi	r24, 0x04	; 4
    43a2:	75 95       	asr	r23
    43a4:	67 95       	ror	r22
    43a6:	57 95       	ror	r21
    43a8:	47 95       	ror	r20
    43aa:	8a 95       	dec	r24
    43ac:	d1 f7       	brne	.-12     	; 0x43a2 <start_speed_control_right+0x1d8>
    43ae:	a3 cf       	rjmp	.-186    	; 0x42f6 <start_speed_control_right+0x12c>
	// compute the current error between the desired and measured speed
	delta_right_speed_prev = delta_right_speed_current;
	if(*pwm_right >= 0) {
		delta_right_speed_current = (*pwm_right) - last_right_vel;
	} else {
		delta_right_speed_current = (*pwm_right) + last_right_vel;
    43b0:	40 91 1f 03 	lds	r20, 0x031F	; 0x80031f <last_right_vel>
    43b4:	50 91 20 03 	lds	r21, 0x0320	; 0x800320 <last_right_vel+0x1>
    43b8:	04 0f       	add	r16, r20
    43ba:	15 1f       	adc	r17, r21
    43bc:	10 93 0d 15 	sts	0x150D, r17	; 0x80150d <delta_right_speed_current+0x1>
    43c0:	00 93 0c 15 	sts	0x150C, r16	; 0x80150c <delta_right_speed_current>
    43c4:	28 cf       	rjmp	.-432    	; 0x4216 <start_speed_control_right+0x4c>
	}

	// sum the errors
	delta_right_speed_sum += delta_right_speed_current;
    43c6:	50 93 08 03 	sts	0x0308, r21	; 0x800308 <delta_right_speed_sum+0x1>
    43ca:	40 93 07 03 	sts	0x0307, r20	; 0x800307 <delta_right_speed_sum>
    43ce:	6a 01       	movw	r12, r20
    43d0:	cc 0c       	add	r12, r12
    43d2:	dd 1c       	adc	r13, r13
    43d4:	4c 0d       	add	r20, r12
    43d6:	5d 1d       	adc	r21, r13
    43d8:	6a 01       	movw	r12, r20
    43da:	55 0f       	add	r21, r21
    43dc:	ee 08       	sbc	r14, r14
    43de:	ff 08       	sbc	r15, r15
    43e0:	31 cf       	rjmp	.-414    	; 0x4244 <start_speed_control_right+0x7a>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_right_desired_to_control > 0) {
		*pwm_right += 1;
	} else {
		*pwm_right -= 1;
    43e2:	41 50       	subi	r20, 0x01	; 1
    43e4:	51 09       	sbc	r21, r1
    43e6:	51 83       	std	Z+1, r21	; 0x01
    43e8:	40 83       	st	Z, r20
    43ea:	93 cf       	rjmp	.-218    	; 0x4312 <start_speed_control_right+0x148>
	if(pwm_right_speed_controller > 0 && *pwm_right < 0 ) {
		pwm_right_speed_controller = 0;
	}

	if (pwm_right_speed_controller>MAX_PWM) pwm_right_speed_controller=MAX_PWM;
	if (pwm_right_speed_controller<-MAX_PWM) pwm_right_speed_controller=-MAX_PWM;
    43ec:	40 34       	cpi	r20, 0x40	; 64
    43ee:	82 ea       	ldi	r24, 0xA2	; 162
    43f0:	58 07       	cpc	r21, r24
    43f2:	8f ef       	ldi	r24, 0xFF	; 255
    43f4:	68 07       	cpc	r22, r24
    43f6:	78 07       	cpc	r23, r24
    43f8:	9c f6       	brge	.-90     	; 0x43a0 <start_speed_control_right+0x1d6>
    43fa:	80 e4       	ldi	r24, 0x40	; 64
    43fc:	92 ea       	ldi	r25, 0xA2	; 162
    43fe:	af ef       	ldi	r26, 0xFF	; 255
    4400:	bf ef       	ldi	r27, 0xFF	; 255
    4402:	80 93 0f 03 	sts	0x030F, r24	; 0x80030f <pwm_right_speed_controller>
    4406:	90 93 10 03 	sts	0x0310, r25	; 0x800310 <pwm_right_speed_controller+0x1>
    440a:	a0 93 11 03 	sts	0x0311, r26	; 0x800311 <pwm_right_speed_controller+0x2>
    440e:	b0 93 12 03 	sts	0x0312, r27	; 0x800312 <pwm_right_speed_controller+0x3>
    4412:	44 e2       	ldi	r20, 0x24	; 36
    4414:	5a ef       	ldi	r21, 0xFA	; 250
    4416:	6f cf       	rjmp	.-290    	; 0x42f6 <start_speed_control_right+0x12c>

00004418 <start_speed_control_left>:
	if (*pwm_right>(MAX_MOTORS_PWM/2)) *pwm_right=(MAX_MOTORS_PWM/2);
    if (*pwm_right<-(MAX_MOTORS_PWM/2)) *pwm_right=-(MAX_MOTORS_PWM/2);

}

void start_speed_control_left(signed int *pwm_left) {
    4418:	8f 92       	push	r8
    441a:	9f 92       	push	r9
    441c:	af 92       	push	r10
    441e:	bf 92       	push	r11
    4420:	cf 92       	push	r12
    4422:	df 92       	push	r13
    4424:	ef 92       	push	r14
    4426:	ff 92       	push	r15
    4428:	0f 93       	push	r16
    442a:	1f 93       	push	r17
    442c:	fc 01       	movw	r30, r24

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
    442e:	80 81       	ld	r24, Z
    4430:	91 81       	ldd	r25, Z+1	; 0x01
    4432:	89 2b       	or	r24, r25
    4434:	09 f4       	brne	.+2      	; 0x4438 <start_speed_control_left+0x20>
    4436:	a7 c0       	rjmp	.+334    	; 0x4586 <start_speed_control_left+0x16e>
		delta_left_speed_prev = 0;
		return;
	}

	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
    4438:	20 91 58 0f 	lds	r18, 0x0F58	; 0x800f58 <delta_left_speed_current>
    443c:	30 91 59 0f 	lds	r19, 0x0F59	; 0x800f59 <delta_left_speed_current+0x1>
    4440:	30 93 6e 13 	sts	0x136E, r19	; 0x80136e <delta_left_speed_prev+0x1>
    4444:	20 93 6d 13 	sts	0x136D, r18	; 0x80136d <delta_left_speed_prev>
	if(*pwm_left >= 0) {
    4448:	00 81       	ld	r16, Z
    444a:	11 81       	ldd	r17, Z+1	; 0x01
    444c:	17 fd       	sbrc	r17, 7
    444e:	d7 c0       	rjmp	.+430    	; 0x45fe <start_speed_control_left+0x1e6>
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
    4450:	80 91 21 03 	lds	r24, 0x0321	; 0x800321 <last_left_vel>
    4454:	90 91 22 03 	lds	r25, 0x0322	; 0x800322 <last_left_vel+0x1>
    4458:	08 1b       	sub	r16, r24
    445a:	19 0b       	sbc	r17, r25
    445c:	10 93 59 0f 	sts	0x0F59, r17	; 0x800f59 <delta_left_speed_current+0x1>
    4460:	00 93 58 0f 	sts	0x0F58, r16	; 0x800f58 <delta_left_speed_current>
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
	}
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;
    4464:	40 91 09 03 	lds	r20, 0x0309	; 0x800309 <delta_left_speed_sum>
    4468:	50 91 0a 03 	lds	r21, 0x030A	; 0x80030a <delta_left_speed_sum+0x1>
    446c:	40 0f       	add	r20, r16
    446e:	51 1f       	adc	r21, r17

	if(delta_left_speed_sum > I_LIMIT) {
    4470:	41 34       	cpi	r20, 0x41	; 65
    4472:	86 e0       	ldi	r24, 0x06	; 6
    4474:	58 07       	cpc	r21, r24
    4476:	0c f4       	brge	.+2      	; 0x447a <start_speed_control_left+0x62>
    4478:	9b c0       	rjmp	.+310    	; 0x45b0 <start_speed_control_left+0x198>
		delta_left_speed_sum = I_LIMIT;
    447a:	80 e4       	ldi	r24, 0x40	; 64
    447c:	96 e0       	ldi	r25, 0x06	; 6
    447e:	90 93 0a 03 	sts	0x030A, r25	; 0x80030a <delta_left_speed_sum+0x1>
    4482:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <delta_left_speed_sum>
    4486:	90 ec       	ldi	r25, 0xC0	; 192
    4488:	c9 2e       	mov	r12, r25
    448a:	92 e1       	ldi	r25, 0x12	; 18
    448c:	d9 2e       	mov	r13, r25
    448e:	e1 2c       	mov	r14, r1
    4490:	f1 2c       	mov	r15, r1
		delta_left_speed_sum = -I_LIMIT;
	}
	    
	// pwm out = feed forward * desired speed + P * current error - D * (current error - previous error) + I * error sum
	// in this case feed forward = 8
	pwm_left_speed_controller = (signed long int)((*pwm_left) << 3);
    4492:	80 81       	ld	r24, Z
    4494:	91 81       	ldd	r25, Z+1	; 0x01
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_PART);
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_PART);
	pwm_left_speed_controller += (signed long int)(delta_left_speed_sum*I_PART);
    4496:	ac 01       	movw	r20, r24
    4498:	44 0f       	add	r20, r20
    449a:	55 1f       	adc	r21, r21
    449c:	44 0f       	add	r20, r20
    449e:	55 1f       	adc	r21, r21
    44a0:	44 0f       	add	r20, r20
    44a2:	55 1f       	adc	r21, r21
    44a4:	4a 01       	movw	r8, r20
    44a6:	55 0f       	add	r21, r21
    44a8:	aa 08       	sbc	r10, r10
    44aa:	bb 08       	sbc	r11, r11
    44ac:	d8 01       	movw	r26, r16
    44ae:	aa 0f       	add	r26, r26
    44b0:	bb 1f       	adc	r27, r27
    44b2:	b8 01       	movw	r22, r16
    44b4:	66 0f       	add	r22, r22
    44b6:	77 1f       	adc	r23, r23
    44b8:	66 0f       	add	r22, r22
    44ba:	77 1f       	adc	r23, r23
    44bc:	66 0f       	add	r22, r22
    44be:	77 1f       	adc	r23, r23
    44c0:	ad 01       	movw	r20, r26
    44c2:	46 0f       	add	r20, r22
    44c4:	57 1f       	adc	r21, r23
    44c6:	05 2e       	mov	r0, r21
    44c8:	00 0c       	add	r0, r0
    44ca:	66 0b       	sbc	r22, r22
    44cc:	77 0b       	sbc	r23, r23
    44ce:	48 0d       	add	r20, r8
    44d0:	59 1d       	adc	r21, r9
    44d2:	6a 1d       	adc	r22, r10
    44d4:	7b 1d       	adc	r23, r11
    44d6:	02 1b       	sub	r16, r18
    44d8:	13 0b       	sbc	r17, r19
    44da:	00 0f       	add	r16, r16
    44dc:	11 1f       	adc	r17, r17
    44de:	01 2e       	mov	r0, r17
    44e0:	00 0c       	add	r0, r0
    44e2:	22 0b       	sbc	r18, r18
    44e4:	33 0b       	sbc	r19, r19
    44e6:	40 0f       	add	r20, r16
    44e8:	51 1f       	adc	r21, r17
    44ea:	62 1f       	adc	r22, r18
    44ec:	73 1f       	adc	r23, r19
    44ee:	4c 0d       	add	r20, r12
    44f0:	5d 1d       	adc	r21, r13
    44f2:	6e 1d       	adc	r22, r14
    44f4:	7f 1d       	adc	r23, r15
    44f6:	40 93 0b 03 	sts	0x030B, r20	; 0x80030b <pwm_left_speed_controller>
    44fa:	50 93 0c 03 	sts	0x030C, r21	; 0x80030c <pwm_left_speed_controller+0x1>
    44fe:	60 93 0d 03 	sts	0x030D, r22	; 0x80030d <pwm_left_speed_controller+0x2>
    4502:	70 93 0e 03 	sts	0x030E, r23	; 0x80030e <pwm_left_speed_controller+0x3>

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    4506:	77 fd       	sbrc	r23, 7
    4508:	65 c0       	rjmp	.+202    	; 0x45d4 <start_speed_control_left+0x1bc>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
    450a:	41 15       	cp	r20, r1
    450c:	51 05       	cpc	r21, r1
    450e:	61 05       	cpc	r22, r1
    4510:	71 05       	cpc	r23, r1
    4512:	09 f4       	brne	.+2      	; 0x4516 <start_speed_control_left+0xfe>
    4514:	92 c0       	rjmp	.+292    	; 0x463a <start_speed_control_left+0x222>
    4516:	97 fd       	sbrc	r25, 7
    4518:	5f c0       	rjmp	.+190    	; 0x45d8 <start_speed_control_left+0x1c0>
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
    451a:	41 3c       	cpi	r20, 0xC1	; 193
    451c:	8d e5       	ldi	r24, 0x5D	; 93
    451e:	58 07       	cpc	r21, r24
    4520:	61 05       	cpc	r22, r1
    4522:	71 05       	cpc	r23, r1
    4524:	0c f4       	brge	.+2      	; 0x4528 <start_speed_control_left+0x110>
    4526:	89 c0       	rjmp	.+274    	; 0x463a <start_speed_control_left+0x222>
    4528:	80 ec       	ldi	r24, 0xC0	; 192
    452a:	9d e5       	ldi	r25, 0x5D	; 93
    452c:	a0 e0       	ldi	r26, 0x00	; 0
    452e:	b0 e0       	ldi	r27, 0x00	; 0
    4530:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <pwm_left_speed_controller>
    4534:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <pwm_left_speed_controller+0x1>
    4538:	a0 93 0d 03 	sts	0x030D, r26	; 0x80030d <pwm_left_speed_controller+0x2>
    453c:	b0 93 0e 03 	sts	0x030E, r27	; 0x80030e <pwm_left_speed_controller+0x3>
    4540:	4c ed       	ldi	r20, 0xDC	; 220
    4542:	55 e0       	ldi	r21, 0x05	; 5
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;

	// since the pwm_left_speed_controller goes from -24000 to 24000 then the pwm_left 
	// has to be scaled to remain in the range -512..512
	*pwm_left = (signed int)(pwm_left_speed_controller>>4);
    4544:	51 83       	std	Z+1, r21	; 0x01
    4546:	40 83       	st	Z, r20

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
    4548:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <pwm_left_desired_to_control>
    454c:	90 91 28 03 	lds	r25, 0x0328	; 0x800328 <pwm_left_desired_to_control+0x1>
    4550:	18 16       	cp	r1, r24
    4552:	19 06       	cpc	r1, r25
    4554:	0c f0       	brlt	.+2      	; 0x4558 <start_speed_control_left+0x140>
    4556:	6c c0       	rjmp	.+216    	; 0x4630 <start_speed_control_left+0x218>
		*pwm_left += 1;
    4558:	4f 5f       	subi	r20, 0xFF	; 255
    455a:	5f 4f       	sbci	r21, 0xFF	; 255
    455c:	51 83       	std	Z+1, r21	; 0x01
    455e:	40 83       	st	Z, r20
	} else if(*pwm_left < 0) {
		*pwm_left -= 30;
	}
	*/

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    4560:	41 15       	cp	r20, r1
    4562:	82 e0       	ldi	r24, 0x02	; 2
    4564:	58 07       	cpc	r21, r24
    4566:	e4 f0       	brlt	.+56     	; 0x45a0 <start_speed_control_left+0x188>
    4568:	8f ef       	ldi	r24, 0xFF	; 255
    456a:	91 e0       	ldi	r25, 0x01	; 1
    456c:	91 83       	std	Z+1, r25	; 0x01
    456e:	80 83       	st	Z, r24
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);

}
    4570:	1f 91       	pop	r17
    4572:	0f 91       	pop	r16
    4574:	ff 90       	pop	r15
    4576:	ef 90       	pop	r14
    4578:	df 90       	pop	r13
    457a:	cf 90       	pop	r12
    457c:	bf 90       	pop	r11
    457e:	af 90       	pop	r10
    4580:	9f 90       	pop	r9
    4582:	8f 90       	pop	r8
    4584:	08 95       	ret
void start_speed_control_left(signed int *pwm_left) {

	// the input paramter is the current desired speed, expressed in the pwm range (-512..512).

	if(*pwm_left==0) {
		delta_left_speed_sum = 0;		// reset the sum of the error for the I parameter
    4586:	10 92 0a 03 	sts	0x030A, r1	; 0x80030a <delta_left_speed_sum+0x1>
    458a:	10 92 09 03 	sts	0x0309, r1	; 0x800309 <delta_left_speed_sum>
		delta_left_speed_current = 0;
    458e:	10 92 59 0f 	sts	0x0F59, r1	; 0x800f59 <delta_left_speed_current+0x1>
    4592:	10 92 58 0f 	sts	0x0F58, r1	; 0x800f58 <delta_left_speed_current>
		delta_left_speed_prev = 0;
    4596:	10 92 6e 13 	sts	0x136E, r1	; 0x80136e <delta_left_speed_prev+0x1>
    459a:	10 92 6d 13 	sts	0x136D, r1	; 0x80136d <delta_left_speed_prev>
		return;
    459e:	e8 cf       	rjmp	.-48     	; 0x4570 <start_speed_control_left+0x158>
		*pwm_left -= 30;
	}
	*/

	if (*pwm_left>(MAX_MOTORS_PWM/2)) *pwm_left=(MAX_MOTORS_PWM/2);
    if (*pwm_left<-(MAX_MOTORS_PWM/2)) *pwm_left=-(MAX_MOTORS_PWM/2);
    45a0:	41 30       	cpi	r20, 0x01	; 1
    45a2:	5e 4f       	sbci	r21, 0xFE	; 254
    45a4:	2c f7       	brge	.-54     	; 0x4570 <start_speed_control_left+0x158>
    45a6:	81 e0       	ldi	r24, 0x01	; 1
    45a8:	9e ef       	ldi	r25, 0xFE	; 254
    45aa:	91 83       	std	Z+1, r25	; 0x01
    45ac:	80 83       	st	Z, r24
    45ae:	e0 cf       	rjmp	.-64     	; 0x4570 <start_speed_control_left+0x158>
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;

	if(delta_left_speed_sum > I_LIMIT) {
		delta_left_speed_sum = I_LIMIT;
	} else if(delta_left_speed_sum < -I_LIMIT) {
    45b0:	40 3c       	cpi	r20, 0xC0	; 192
    45b2:	89 ef       	ldi	r24, 0xF9	; 249
    45b4:	58 07       	cpc	r21, r24
    45b6:	74 f5       	brge	.+92     	; 0x4614 <start_speed_control_left+0x1fc>
		delta_left_speed_sum = -I_LIMIT;
    45b8:	80 ec       	ldi	r24, 0xC0	; 192
    45ba:	99 ef       	ldi	r25, 0xF9	; 249
    45bc:	90 93 0a 03 	sts	0x030A, r25	; 0x80030a <delta_left_speed_sum+0x1>
    45c0:	80 93 09 03 	sts	0x0309, r24	; 0x800309 <delta_left_speed_sum>
    45c4:	b0 e4       	ldi	r27, 0x40	; 64
    45c6:	cb 2e       	mov	r12, r27
    45c8:	bd ee       	ldi	r27, 0xED	; 237
    45ca:	db 2e       	mov	r13, r27
    45cc:	ee 24       	eor	r14, r14
    45ce:	ea 94       	dec	r14
    45d0:	fe 2c       	mov	r15, r14
    45d2:	5f cf       	rjmp	.-322    	; 0x4492 <start_speed_control_left+0x7a>
	pwm_left_speed_controller += (signed long int)(delta_left_speed_current*P_PART);
	pwm_left_speed_controller += (signed long int)((delta_left_speed_current-delta_left_speed_prev)*D_PART);
	pwm_left_speed_controller += (signed long int)(delta_left_speed_sum*I_PART);

	// avoid changing motion direction
	if(pwm_left_speed_controller < 0 && *pwm_left >= 0) {
    45d4:	97 fd       	sbrc	r25, 7
    45d6:	31 c0       	rjmp	.+98     	; 0x463a <start_speed_control_left+0x222>
		pwm_left_speed_controller = 0;
	}
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
    45d8:	10 92 0b 03 	sts	0x030B, r1	; 0x80030b <pwm_left_speed_controller>
    45dc:	10 92 0c 03 	sts	0x030C, r1	; 0x80030c <pwm_left_speed_controller+0x1>
    45e0:	10 92 0d 03 	sts	0x030D, r1	; 0x80030d <pwm_left_speed_controller+0x2>
    45e4:	10 92 0e 03 	sts	0x030E, r1	; 0x80030e <pwm_left_speed_controller+0x3>
    45e8:	40 e0       	ldi	r20, 0x00	; 0
    45ea:	50 e0       	ldi	r21, 0x00	; 0
    45ec:	ba 01       	movw	r22, r20
    45ee:	84 e0       	ldi	r24, 0x04	; 4
    45f0:	75 95       	asr	r23
    45f2:	67 95       	ror	r22
    45f4:	57 95       	ror	r21
    45f6:	47 95       	ror	r20
    45f8:	8a 95       	dec	r24
    45fa:	d1 f7       	brne	.-12     	; 0x45f0 <start_speed_control_left+0x1d8>
    45fc:	a3 cf       	rjmp	.-186    	; 0x4544 <start_speed_control_left+0x12c>
	// compute the current error between the desired and measured speed
	delta_left_speed_prev = delta_left_speed_current; 
	if(*pwm_left >= 0) {
		delta_left_speed_current = (*pwm_left) - last_left_vel; 
	} else {
		delta_left_speed_current = (*pwm_left) + last_left_vel; 
    45fe:	40 91 21 03 	lds	r20, 0x0321	; 0x800321 <last_left_vel>
    4602:	50 91 22 03 	lds	r21, 0x0322	; 0x800322 <last_left_vel+0x1>
    4606:	04 0f       	add	r16, r20
    4608:	15 1f       	adc	r17, r21
    460a:	10 93 59 0f 	sts	0x0F59, r17	; 0x800f59 <delta_left_speed_current+0x1>
    460e:	00 93 58 0f 	sts	0x0F58, r16	; 0x800f58 <delta_left_speed_current>
    4612:	28 cf       	rjmp	.-432    	; 0x4464 <start_speed_control_left+0x4c>
	}
	// sum the errors
	delta_left_speed_sum += delta_left_speed_current;
    4614:	50 93 0a 03 	sts	0x030A, r21	; 0x80030a <delta_left_speed_sum+0x1>
    4618:	40 93 09 03 	sts	0x0309, r20	; 0x800309 <delta_left_speed_sum>
    461c:	6a 01       	movw	r12, r20
    461e:	cc 0c       	add	r12, r12
    4620:	dd 1c       	adc	r13, r13
    4622:	4c 0d       	add	r20, r12
    4624:	5d 1d       	adc	r21, r13
    4626:	6a 01       	movw	r12, r20
    4628:	55 0f       	add	r21, r21
    462a:	ee 08       	sbc	r14, r14
    462c:	ff 08       	sbc	r15, r15
    462e:	31 cf       	rjmp	.-414    	; 0x4492 <start_speed_control_left+0x7a>

	// avoid stopping the motors if desired speed is different from zero
	if(pwm_left_desired_to_control > 0) {
		*pwm_left += 1;
	} else {
		*pwm_left -= 1;
    4630:	41 50       	subi	r20, 0x01	; 1
    4632:	51 09       	sbc	r21, r1
    4634:	51 83       	std	Z+1, r21	; 0x01
    4636:	40 83       	st	Z, r20
    4638:	93 cf       	rjmp	.-218    	; 0x4560 <start_speed_control_left+0x148>
	if(pwm_left_speed_controller > 0 && *pwm_left < 0 ) {
		pwm_left_speed_controller = 0;
	}

	if (pwm_left_speed_controller>MAX_PWM) pwm_left_speed_controller=MAX_PWM;
	if (pwm_left_speed_controller<-MAX_PWM) pwm_left_speed_controller=-MAX_PWM;
    463a:	40 34       	cpi	r20, 0x40	; 64
    463c:	82 ea       	ldi	r24, 0xA2	; 162
    463e:	58 07       	cpc	r21, r24
    4640:	8f ef       	ldi	r24, 0xFF	; 255
    4642:	68 07       	cpc	r22, r24
    4644:	78 07       	cpc	r23, r24
    4646:	9c f6       	brge	.-90     	; 0x45ee <start_speed_control_left+0x1d6>
    4648:	80 e4       	ldi	r24, 0x40	; 64
    464a:	92 ea       	ldi	r25, 0xA2	; 162
    464c:	af ef       	ldi	r26, 0xFF	; 255
    464e:	bf ef       	ldi	r27, 0xFF	; 255
    4650:	80 93 0b 03 	sts	0x030B, r24	; 0x80030b <pwm_left_speed_controller>
    4654:	90 93 0c 03 	sts	0x030C, r25	; 0x80030c <pwm_left_speed_controller+0x1>
    4658:	a0 93 0d 03 	sts	0x030D, r26	; 0x80030d <pwm_left_speed_controller+0x2>
    465c:	b0 93 0e 03 	sts	0x030E, r27	; 0x80030e <pwm_left_speed_controller+0x3>
    4660:	44 e2       	ldi	r20, 0x24	; 36
    4662:	5a ef       	ldi	r21, 0xFA	; 250
    4664:	6f cf       	rjmp	.-290    	; 0x4544 <start_speed_control_left+0x12c>

00004666 <initPortsIO>:
#include "ports_io.h"


void initPortsIO(void) {

	MCUCR |= (1 << PUD);	// pull-up disable for all ports
    4666:	85 b7       	in	r24, 0x35	; 53
    4668:	80 61       	ori	r24, 0x10	; 16
    466a:	85 bf       	out	0x35, r24	; 53

	DDRA = 0xFF;			// proximity pulses as output
    466c:	8f ef       	ldi	r24, 0xFF	; 255
    466e:	81 b9       	out	0x01, r24	; 1
	PORTA = 0x00;			// proximity pulses turned off
    4670:	12 b8       	out	0x02, r1	; 2
	
	DDRB = 0xF7;			// pwm for led r/g/b as output; CE, MOSI, SCK, SS as output (master) 
    4672:	97 ef       	ldi	r25, 0xF7	; 247
    4674:	94 b9       	out	0x04, r25	; 4
	PORTB = 0xE0;			// r,g,b leds turned off on high state
    4676:	90 ee       	ldi	r25, 0xE0	; 224
    4678:	95 b9       	out	0x05, r25	; 5

	DDRC = 0xF0;			// selector as input; IR leds as output; sens-enable, sleep as output
    467a:	90 ef       	ldi	r25, 0xF0	; 240
    467c:	97 b9       	out	0x07, r25	; 7
	PORTC = 0xB0;			// sleep = 1 (no sleep), sense_enable=0, IR leds = 1
    467e:	90 eb       	ldi	r25, 0xB0	; 176
    4680:	98 b9       	out	0x08, r25	; 8

	DDRD = 0xFC;			// all pins to output; when usart and i2c peripherals are activated they change the pins direction accordingly
    4682:	9c ef       	ldi	r25, 0xFC	; 252
    4684:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0x03;			// default for unused pins is 0
    4686:	93 e0       	ldi	r25, 0x03	; 3
    4688:	9b b9       	out	0x0b, r25	; 11

	DDRE = 0xFF;			// all pins to output (pwm and dir for motor right as output; when usart is activated it changes the pins direction accordingly)
    468a:	8d b9       	out	0x0d, r24	; 13
	PORTE = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    468c:	1e b8       	out	0x0e, r1	; 14

	DDRF = 0x00;			// adc channel pins as input		
    468e:	10 ba       	out	0x10, r1	; 16

	DDRG = 0xFF;			// unused pins as output
    4690:	83 bb       	out	0x13, r24	; 19
	if(hardwareRevision == HW_REV_3_0) {
    4692:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <hardwareRevision>
    4696:	81 11       	cpse	r24, r1
    4698:	03 c0       	rjmp	.+6      	; 0x46a0 <initPortsIO+0x3a>
		PORTG = 0x00;		// default for unused pins is 0
    469a:	14 ba       	out	0x14, r1	; 20
    469c:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <hardwareRevision>
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    46a0:	81 30       	cpi	r24, 0x01	; 1
    46a2:	09 f4       	brne	.+2      	; 0x46a6 <initPortsIO+0x40>
    46a4:	40 c0       	rjmp	.+128    	; 0x4726 <initPortsIO+0xc0>
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    46a6:	82 30       	cpi	r24, 0x02	; 2
    46a8:	d9 f1       	breq	.+118    	; 0x4720 <initPortsIO+0xba>
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
	}	

	DDRH = 0xFF;			// all pins to output; when usart is activated it changes the pins direction accordingly
    46aa:	8f ef       	ldi	r24, 0xFF	; 255
    46ac:	80 93 01 01 	sts	0x0101, r24	; 0x800101 <__TEXT_REGION_LENGTH__+0x7c0101>
	PORTH = 0x00;			// default for unused pins is 0; pwm for motors set to 0 when stopped
    46b0:	10 92 02 01 	sts	0x0102, r1	; 0x800102 <__TEXT_REGION_LENGTH__+0x7c0102>

	DDRJ = 0x0F;			// cliff pulses as output; charge-on, button0, remote, charge status as input
    46b4:	8f e0       	ldi	r24, 0x0F	; 15
    46b6:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <__TEXT_REGION_LENGTH__+0x7c0104>
	if(hardwareRevision == HW_REV_3_0) {
    46ba:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <hardwareRevision>
    46be:	81 11       	cpse	r24, r1
    46c0:	06 c0       	rjmp	.+12     	; 0x46ce <initPortsIO+0x68>
		PORTJ &= 0x00;		// cliff pulse turned off
    46c2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__TEXT_REGION_LENGTH__+0x7c0105>
    46c6:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <__TEXT_REGION_LENGTH__+0x7c0105>
    46ca:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <hardwareRevision>
		//#warning "Normal logic for ground sensors (hw rev 3.0)"
	}
	if(hardwareRevision == HW_REV_3_0_1) {
    46ce:	81 30       	cpi	r24, 0x01	; 1
    46d0:	09 f1       	breq	.+66     	; 0x4714 <initPortsIO+0xae>
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.0.1)"
	}
	if(hardwareRevision == HW_REV_3_1) {
    46d2:	82 30       	cpi	r24, 0x02	; 2
    46d4:	d9 f0       	breq	.+54     	; 0x470c <initPortsIO+0xa6>
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.1)"
	}	

	DDRK = 0x00;			// adc channel pins as input
    46d6:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <__TEXT_REGION_LENGTH__+0x7c0107>

	DDRL = 0xFF;			// all pins to output
    46da:	8f ef       	ldi	r24, 0xFF	; 255
    46dc:	80 93 0a 01 	sts	0x010A, r24	; 0x80010a <__TEXT_REGION_LENGTH__+0x7c010a>
	if(hardwareRevision == HW_REV_3_0) {
    46e0:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <hardwareRevision>
    46e4:	81 11       	cpse	r24, r1
    46e6:	04 c0       	rjmp	.+8      	; 0x46f0 <initPortsIO+0x8a>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
    46e8:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
    46ec:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <hardwareRevision>
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
    46f0:	81 30       	cpi	r24, 0x01	; 1
    46f2:	39 f0       	breq	.+14     	; 0x4702 <initPortsIO+0x9c>
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_1) {
    46f4:	82 30       	cpi	r24, 0x02	; 2
    46f6:	09 f0       	breq	.+2      	; 0x46fa <initPortsIO+0x94>
    46f8:	08 95       	ret
		PORTL = 0xF7;		// pwm (unused) to 0, leds turned off on high state
    46fa:	87 ef       	ldi	r24, 0xF7	; 247
    46fc:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
    4700:	08 95       	ret
	DDRL = 0xFF;			// all pins to output
	if(hardwareRevision == HW_REV_3_0) {
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {	
		PORTL = 0x00;		// pwm (unused) and unused pins to 0
    4702:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <__TEXT_REGION_LENGTH__+0x7c010b>
    4706:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <hardwareRevision>
    470a:	f4 cf       	rjmp	.-24     	; 0x46f4 <initPortsIO+0x8e>
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTJ = 0x0F;
		//#warning "Inverse logic for ground sensors (hw rev 3.0.1)"
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTJ = 0x0F;
    470c:	8f e0       	ldi	r24, 0x0F	; 15
    470e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x7c0105>
    4712:	e1 cf       	rjmp	.-62     	; 0x46d6 <initPortsIO+0x70>
	if(hardwareRevision == HW_REV_3_0) {
		PORTJ &= 0x00;		// cliff pulse turned off
		//#warning "Normal logic for ground sensors (hw rev 3.0)"
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTJ = 0x0F;
    4714:	8f e0       	ldi	r24, 0x0F	; 15
    4716:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x7c0105>
    471a:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <hardwareRevision>
    471e:	d9 cf       	rjmp	.-78     	; 0x46d2 <initPortsIO+0x6c>
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_1) {
		PORTG = 0x08;		// default for unused pins is 0, led3 to 1
    4720:	88 e0       	ldi	r24, 0x08	; 8
    4722:	84 bb       	out	0x14, r24	; 20
    4724:	c2 cf       	rjmp	.-124    	; 0x46aa <initPortsIO+0x44>
	DDRG = 0xFF;			// unused pins as output
	if(hardwareRevision == HW_REV_3_0) {
		PORTG = 0x00;		// default for unused pins is 0
	}
	if(hardwareRevision == HW_REV_3_0_1) {
		PORTG = 0x00;		// default for unused pins is 0
    4726:	14 ba       	out	0x14, r1	; 20
    4728:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <hardwareRevision>
    472c:	bc cf       	rjmp	.-136    	; 0x46a6 <initPortsIO+0x40>

0000472e <i2c_init>:
    	{    	    
    	    /* device busy, send stop condition to terminate write operation */
	        TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
	        
	        // wait until stop condition is executed and bus released
	        while(TWCR & (1<<TWSTO));
    472e:	58 9a       	sbi	0x0b, 0	; 11
    4730:	59 9a       	sbi	0x0b, 1	; 11
    4732:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4736:	81 e0       	ldi	r24, 0x01	; 1
    4738:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7c00b8>
    473c:	08 95       	ret

0000473e <i2c_start>:
    473e:	94 ea       	ldi	r25, 0xA4	; 164
    4740:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4744:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4748:	97 ff       	sbrs	r25, 7
    474a:	fc cf       	rjmp	.-8      	; 0x4744 <i2c_start+0x6>
    474c:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4750:	98 7f       	andi	r25, 0xF8	; 248
    4752:	98 30       	cpi	r25, 0x08	; 8
    4754:	21 f0       	breq	.+8      	; 0x475e <i2c_start+0x20>
    4756:	90 31       	cpi	r25, 0x10	; 16
    4758:	11 f0       	breq	.+4      	; 0x475e <i2c_start+0x20>
    475a:	81 e0       	ldi	r24, 0x01	; 1
    475c:	08 95       	ret
    475e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
    4762:	84 e8       	ldi	r24, 0x84	; 132
    4764:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4768:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    476c:	87 ff       	sbrs	r24, 7
    476e:	fc cf       	rjmp	.-8      	; 0x4768 <i2c_start+0x2a>
    4770:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4774:	88 7f       	andi	r24, 0xF8	; 248
    4776:	88 31       	cpi	r24, 0x18	; 24
    4778:	11 f0       	breq	.+4      	; 0x477e <i2c_start+0x40>
    477a:	80 34       	cpi	r24, 0x40	; 64
    477c:	71 f7       	brne	.-36     	; 0x475a <i2c_start+0x1c>
    477e:	80 e0       	ldi	r24, 0x00	; 0
    4780:	08 95       	ret

00004782 <i2c_rep_start>:
unsigned char i2c_start(unsigned char address)
{
    uint8_t   twst;

	// send START condition
	TWCR = (1<<TWINT) | (1<<TWSTA) | (1<<TWEN);
    4782:	94 ea       	ldi	r25, 0xA4	; 164
    4784:	90 93 bc 00 	sts	0x00BC, r25	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    4788:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    478c:	97 ff       	sbrs	r25, 7
    478e:	fc cf       	rjmp	.-8      	; 0x4788 <i2c_rep_start+0x6>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    4790:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    4794:	98 7f       	andi	r25, 0xF8	; 248
	if ( (twst != TW_START) && (twst != TW_REP_START)) {
    4796:	98 30       	cpi	r25, 0x08	; 8
    4798:	21 f0       	breq	.+8      	; 0x47a2 <i2c_rep_start+0x20>
    479a:	90 31       	cpi	r25, 0x10	; 16
    479c:	11 f0       	breq	.+4      	; 0x47a2 <i2c_rep_start+0x20>
		//usartTransmit(twst);
		return 1;
    479e:	81 e0       	ldi	r24, 0x01	; 1
    47a0:	08 95       	ret
	}

	// send device address
	TWDR = address;
    47a2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
    47a6:	84 e8       	ldi	r24, 0x84	; 132
    47a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>

	// wail until transmission completed and ACK/NACK has been received
	while(!(TWCR & (1<<TWINT)));
    47ac:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    47b0:	87 ff       	sbrs	r24, 7
    47b2:	fc cf       	rjmp	.-8      	; 0x47ac <i2c_rep_start+0x2a>

	// check value of TWI Status Register. Mask prescaler bits.
	twst = TW_STATUS & 0xF8;
    47b4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    47b8:	88 7f       	andi	r24, 0xF8	; 248
	if ( (twst != TW_MT_SLA_ACK) && (twst != TW_MR_SLA_ACK) ) {
    47ba:	88 31       	cpi	r24, 0x18	; 24
    47bc:	11 f0       	breq	.+4      	; 0x47c2 <i2c_rep_start+0x40>
    47be:	80 34       	cpi	r24, 0x40	; 64
    47c0:	71 f7       	brne	.-36     	; 0x479e <i2c_rep_start+0x1c>
		//usartTransmit(twst);		
		return 1;
	}

	return 0;
    47c2:	80 e0       	ldi	r24, 0x00	; 0
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
    47c4:	08 95       	ret

000047c6 <i2c_stop>:
 Terminates the data transfer and releases the I2C bus
*************************************************************************/
void i2c_stop(void)
{
    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
    47c6:	84 e9       	ldi	r24, 0x94	; 148
    47c8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
	
	// wait until stop condition is executed and bus released
	while(TWCR & (1<<TWSTO));
    47cc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    47d0:	84 fd       	sbrc	r24, 4
    47d2:	fc cf       	rjmp	.-8      	; 0x47cc <i2c_stop+0x6>

}/* i2c_stop */
    47d4:	08 95       	ret

000047d6 <i2c_write>:
unsigned char i2c_write( unsigned char data )
{	
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
    47d6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>
	TWCR = (1<<TWINT) | (1<<TWEN);
    47da:	84 e8       	ldi	r24, 0x84	; 132
    47dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>

	// wait until transmission completed
	while(!(TWCR & (1<<TWINT)));
    47e0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    47e4:	87 ff       	sbrs	r24, 7
    47e6:	fc cf       	rjmp	.-8      	; 0x47e0 <i2c_write+0xa>

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
    47e8:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7c00b9>
    47ec:	98 7f       	andi	r25, 0xF8	; 248
    47ee:	81 e0       	ldi	r24, 0x01	; 1
    47f0:	98 32       	cpi	r25, 0x28	; 40
    47f2:	09 f0       	breq	.+2      	; 0x47f6 <i2c_write+0x20>
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
    47f4:	08 95       	ret
    47f6:	80 e0       	ldi	r24, 0x00	; 0
    47f8:	08 95       	ret

000047fa <i2c_readAck>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readAck(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWEA);
    47fa:	84 ec       	ldi	r24, 0xC4	; 196
    47fc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
	while(!(TWCR & (1<<TWINT)));    
    4800:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4804:	87 ff       	sbrs	r24, 7
    4806:	fc cf       	rjmp	.-8      	; 0x4800 <i2c_readAck+0x6>

    return TWDR;
    4808:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>

}/* i2c_readAck */
    480c:	08 95       	ret

0000480e <i2c_readNak>:
 
 Return:  byte read from I2C device
*************************************************************************/
unsigned char i2c_readNak(void)
{
	TWCR = (1<<TWINT) | (1<<TWEN);
    480e:	84 e8       	ldi	r24, 0x84	; 132
    4810:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
	while(!(TWCR & (1<<TWINT)));
    4814:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7c00bc>
    4818:	87 ff       	sbrs	r24, 7
    481a:	fc cf       	rjmp	.-8      	; 0x4814 <i2c_readNak+0x6>
	
    return TWDR;
    481c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7c00bb>

}/* i2c_readNak */
    4820:	08 95       	ret

00004822 <initUsart0>:
			/*
			if(UCSR0A & (1<<3)) {	// overflow flag
			}
			*/
			commError = 1;
			return 0;				// timeout
    4822:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7c00c5>
    4826:	80 e1       	ldi	r24, 0x10	; 16
    4828:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7c00c4>
    482c:	e0 ec       	ldi	r30, 0xC0	; 192
    482e:	f0 e0       	ldi	r31, 0x00	; 0
    4830:	80 81       	ld	r24, Z
    4832:	82 60       	ori	r24, 0x02	; 2
    4834:	80 83       	st	Z, r24
    4836:	e1 ec       	ldi	r30, 0xC1	; 193
    4838:	f0 e0       	ldi	r31, 0x00	; 0
    483a:	80 81       	ld	r24, Z
    483c:	88 69       	ori	r24, 0x98	; 152
    483e:	80 83       	st	Z, r24
    4840:	e2 ec       	ldi	r30, 0xC2	; 194
    4842:	f0 e0       	ldi	r31, 0x00	; 0
    4844:	80 81       	ld	r24, Z
    4846:	86 60       	ori	r24, 0x06	; 6
    4848:	80 83       	st	Z, r24
    484a:	08 95       	ret

0000484c <__vector_25>:
		}
	}
}
*/

ISR(USART0_RX_vect) {
    484c:	1f 92       	push	r1
    484e:	0f 92       	push	r0
    4850:	0f b6       	in	r0, 0x3f	; 63
    4852:	0f 92       	push	r0
    4854:	11 24       	eor	r1, r1
    4856:	0b b6       	in	r0, 0x3b	; 59
    4858:	0f 92       	push	r0
    485a:	2f 93       	push	r18
    485c:	3f 93       	push	r19
    485e:	4f 93       	push	r20
    4860:	5f 93       	push	r21
    4862:	6f 93       	push	r22
    4864:	7f 93       	push	r23
    4866:	8f 93       	push	r24
    4868:	9f 93       	push	r25
    486a:	af 93       	push	r26
    486c:	bf 93       	push	r27
    486e:	ef 93       	push	r30
    4870:	ff 93       	push	r31

	char receivedByte = UDR0;
    4872:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>


	if(currentSelector==14) {
    4876:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <currentSelector>
    487a:	8e 30       	cpi	r24, 0x0E	; 14
    487c:	e1 f1       	breq	.+120    	; 0x48f6 <__vector_25+0xaa>
		if(receivedByte == 0xAA) {
			irCommSendValues = 1;
		}
	} else if(currentSelector==15) {
    487e:	8f 30       	cpi	r24, 0x0F	; 15
    4880:	09 f4       	brne	.+2      	; 0x4884 <__vector_25+0x38>
    4882:	3f c0       	rjmp	.+126    	; 0x4902 <__vector_25+0xb6>
			eeprom_write_byte((uint8_t*) 4093, currentOsccal); 
		}

	} else {

		if(chooseMenu) {
    4884:	80 91 0c 02 	lds	r24, 0x020C	; 0x80020c <chooseMenu>
    4888:	81 11       	cpse	r24, r1
    488a:	1e c0       	rjmp	.+60     	; 0x48c8 <__vector_25+0x7c>
			chooseMenu = 0;
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
    488c:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <menuChoice>
    4890:	81 30       	cpi	r24, 0x01	; 1
    4892:	09 f4       	brne	.+2      	; 0x4896 <__vector_25+0x4a>
    4894:	62 c0       	rjmp	.+196    	; 0x495a <__vector_25+0x10e>
    4896:	82 30       	cpi	r24, 0x02	; 2
    4898:	d9 f4       	brne	.+54     	; 0x48d0 <__vector_25+0x84>
						menuChoice = 0;
					}
					break;

				case 2:	// address writing in eeprom
					if(menuState == 0) { // receive rf address LSB:
    489a:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <menuState>
    489e:	88 23       	and	r24, r24
    48a0:	09 f4       	brne	.+2      	; 0x48a4 <__vector_25+0x58>
    48a2:	6d c0       	rjmp	.+218    	; 0x497e <__vector_25+0x132>
						rfAddress = (unsigned int)receivedByte&0x00FF;
						menuState = 1;
					} else if(menuState == 1) { // receive rf address MSB
    48a4:	81 30       	cpi	r24, 0x01	; 1
    48a6:	a1 f4       	brne	.+40     	; 0x48d0 <__vector_25+0x84>
						rfAddress |= ((unsigned int)receivedByte<<8);
    48a8:	20 91 fd 02 	lds	r18, 0x02FD	; 0x8002fd <rfAddress>
    48ac:	30 91 fe 02 	lds	r19, 0x02FE	; 0x8002fe <rfAddress+0x1>
    48b0:	39 2b       	or	r19, r25
    48b2:	30 93 fe 02 	sts	0x02FE, r19	; 0x8002fe <rfAddress+0x1>
    48b6:	20 93 fd 02 	sts	0x02FD, r18	; 0x8002fd <rfAddress>
						addressReceived = 1;
    48ba:	80 93 f7 02 	sts	0x02F7, r24	; 0x8002f7 <addressReceived>
						menuState = 0;
    48be:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <menuState>
						chooseMenu = 1;
    48c2:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <chooseMenu>
			}
		}

	}

}
    48c6:	04 c0       	rjmp	.+8      	; 0x48d0 <__vector_25+0x84>
		}

	} else {

		if(chooseMenu) {
			chooseMenu = 0;
    48c8:	10 92 0c 02 	sts	0x020C, r1	; 0x80020c <chooseMenu>
			menuChoice = receivedByte;
    48cc:	90 93 f8 02 	sts	0x02F8, r25	; 0x8002f8 <menuChoice>
			}
		}

	}

}
    48d0:	ff 91       	pop	r31
    48d2:	ef 91       	pop	r30
    48d4:	bf 91       	pop	r27
    48d6:	af 91       	pop	r26
    48d8:	9f 91       	pop	r25
    48da:	8f 91       	pop	r24
    48dc:	7f 91       	pop	r23
    48de:	6f 91       	pop	r22
    48e0:	5f 91       	pop	r21
    48e2:	4f 91       	pop	r20
    48e4:	3f 91       	pop	r19
    48e6:	2f 91       	pop	r18
    48e8:	0f 90       	pop	r0
    48ea:	0b be       	out	0x3b, r0	; 59
    48ec:	0f 90       	pop	r0
    48ee:	0f be       	out	0x3f, r0	; 63
    48f0:	0f 90       	pop	r0
    48f2:	1f 90       	pop	r1
    48f4:	18 95       	reti

	char receivedByte = UDR0;


	if(currentSelector==14) {
		if(receivedByte == 0xAA) {
    48f6:	9a 3a       	cpi	r25, 0xAA	; 170
    48f8:	59 f7       	brne	.-42     	; 0x48d0 <__vector_25+0x84>
			irCommSendValues = 1;
    48fa:	81 e0       	ldi	r24, 0x01	; 1
    48fc:	80 93 63 02 	sts	0x0263, r24	; 0x800263 <irCommSendValues>
    4900:	e7 cf       	rjmp	.-50     	; 0x48d0 <__vector_25+0x84>
		}
	} else if(currentSelector==15) {

		if(receivedByte == '+') {
    4902:	9b 32       	cpi	r25, 0x2B	; 43
    4904:	01 f1       	breq	.+64     	; 0x4946 <__vector_25+0xfa>
				currentOsccal++;
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
    4906:	9d 32       	cpi	r25, 0x2D	; 45
    4908:	91 f1       	breq	.+100    	; 0x496e <__vector_25+0x122>
				currentOsccal--;	
			}
			OSCCAL = currentOsccal;;
		}

		if(receivedByte == 'g') {
    490a:	97 36       	cpi	r25, 0x67	; 103
    490c:	09 f0       	breq	.+2      	; 0x4910 <__vector_25+0xc4>
    490e:	41 c0       	rjmp	.+130    	; 0x4992 <__vector_25+0x146>
			usart0Transmit(irCommand,1);
    4910:	90 91 f4 02 	lds	r25, 0x02F4	; 0x8002f4 <irCommand>

}

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    4914:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    4918:	85 ff       	sbrs	r24, 5
    491a:	fc cf       	rjmp	.-8      	; 0x4914 <__vector_25+0xc8>
	UDR0 = data;						// put data into buffer, sends the data
    491c:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	if(isBlocking) {
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    4920:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    4924:	86 ff       	sbrs	r24, 6
    4926:	fc cf       	rjmp	.-8      	; 0x4920 <__vector_25+0xd4>
			OSCCAL = currentOsccal;;
		}

		if(receivedByte == 'g') {
			usart0Transmit(irCommand,1);
			currentOsccal = OSCCAL;
    4928:	90 91 66 00 	lds	r25, 0x0066	; 0x800066 <__TEXT_REGION_LENGTH__+0x7c0066>
    492c:	90 93 35 0f 	sts	0x0F35, r25	; 0x800f35 <currentOsccal>

}

void usart0Transmit(unsigned char data, unsigned char isBlocking) {

	while (!(UCSR0A & (1<<UDRE0)));		// wait for empty transmit buffer
    4930:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    4934:	85 ff       	sbrs	r24, 5
    4936:	fc cf       	rjmp	.-8      	; 0x4930 <__vector_25+0xe4>
	UDR0 = data;						// put data into buffer, sends the data
    4938:	90 93 c6 00 	sts	0x00C6, r25	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7c00c6>
	if(isBlocking) {
		while (!(UCSR0A & (1<<TXC0)));	// wait transmission complete
    493c:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7c00c0>
    4940:	86 ff       	sbrs	r24, 6
    4942:	fc cf       	rjmp	.-8      	; 0x493c <__vector_25+0xf0>
    4944:	c5 cf       	rjmp	.-118    	; 0x48d0 <__vector_25+0x84>
			irCommSendValues = 1;
		}
	} else if(currentSelector==15) {

		if(receivedByte == '+') {
			if(currentOsccal<255) {
    4946:	80 91 35 0f 	lds	r24, 0x0F35	; 0x800f35 <currentOsccal>
    494a:	8f 3f       	cpi	r24, 0xFF	; 255
    494c:	19 f0       	breq	.+6      	; 0x4954 <__vector_25+0x108>
				currentOsccal++;
    494e:	8f 5f       	subi	r24, 0xFF	; 255
    4950:	80 93 35 0f 	sts	0x0F35, r24	; 0x800f35 <currentOsccal>

		if(receivedByte == '-') {
			if(currentOsccal>0) {
				currentOsccal--;	
			}
			OSCCAL = currentOsccal;;
    4954:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__TEXT_REGION_LENGTH__+0x7c0066>
    4958:	bb cf       	rjmp	.-138    	; 0x48d0 <__vector_25+0x84>
			chooseMenu = 0;
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
				case 1: // send sensors data and activate actuators
					if(receivedByte == 0xAA) {
    495a:	9a 3a       	cpi	r25, 0xAA	; 170
    495c:	21 f1       	breq	.+72     	; 0x49a6 <__vector_25+0x15a>
						getDataNow = 1;
					} else if(receivedByte == 0x55) {
    495e:	95 35       	cpi	r25, 0x55	; 85
    4960:	09 f0       	breq	.+2      	; 0x4964 <__vector_25+0x118>
    4962:	b6 cf       	rjmp	.-148    	; 0x48d0 <__vector_25+0x84>
						chooseMenu = 1;
    4964:	80 93 0c 02 	sts	0x020C, r24	; 0x80020c <chooseMenu>
						menuChoice = 0;
    4968:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <menuChoice>
    496c:	b1 cf       	rjmp	.-158    	; 0x48d0 <__vector_25+0x84>
			}
			OSCCAL = currentOsccal;
		}

		if(receivedByte == '-') {
			if(currentOsccal>0) {
    496e:	80 91 35 0f 	lds	r24, 0x0F35	; 0x800f35 <currentOsccal>
    4972:	88 23       	and	r24, r24
    4974:	79 f3       	breq	.-34     	; 0x4954 <__vector_25+0x108>
				currentOsccal--;	
    4976:	81 50       	subi	r24, 0x01	; 1
    4978:	80 93 35 0f 	sts	0x0F35, r24	; 0x800f35 <currentOsccal>
    497c:	eb cf       	rjmp	.-42     	; 0x4954 <__vector_25+0x108>
					}
					break;

				case 2:	// address writing in eeprom
					if(menuState == 0) { // receive rf address LSB:
						rfAddress = (unsigned int)receivedByte&0x00FF;
    497e:	89 2f       	mov	r24, r25
    4980:	90 e0       	ldi	r25, 0x00	; 0
    4982:	90 93 fe 02 	sts	0x02FE, r25	; 0x8002fe <rfAddress+0x1>
    4986:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <rfAddress>
						menuState = 1;
    498a:	81 e0       	ldi	r24, 0x01	; 1
    498c:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <menuState>
    4990:	9f cf       	rjmp	.-194    	; 0x48d0 <__vector_25+0x84>
			usart0Transmit(irCommand,1);
			currentOsccal = OSCCAL;
			usart0Transmit(currentOsccal,1);
		}

		if(receivedByte == 's') {
    4992:	93 37       	cpi	r25, 0x73	; 115
    4994:	09 f0       	breq	.+2      	; 0x4998 <__vector_25+0x14c>
    4996:	9c cf       	rjmp	.-200    	; 0x48d0 <__vector_25+0x84>
			eeprom_write_byte((uint8_t*) 4093, currentOsccal); 
    4998:	60 91 35 0f 	lds	r22, 0x0F35	; 0x800f35 <currentOsccal>
    499c:	8d ef       	ldi	r24, 0xFD	; 253
    499e:	9f e0       	ldi	r25, 0x0F	; 15
    49a0:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <eeprom_write_byte>
    49a4:	95 cf       	rjmp	.-214    	; 0x48d0 <__vector_25+0x84>
			menuChoice = receivedByte;
		} else {
			switch(menuChoice) {
				case 1: // send sensors data and activate actuators
					if(receivedByte == 0xAA) {
						getDataNow = 1;
    49a6:	80 93 f5 02 	sts	0x02F5, r24	; 0x8002f5 <getDataNow>
    49aa:	92 cf       	rjmp	.-220    	; 0x48d0 <__vector_25+0x84>

000049ac <getSelector>:
	pwm_red = 255;
	pwm_green = 255;
	pwm_blue = 255;
	pwm_right = 0;
	pwm_left = 0;
	initPeripherals();
    49ac:	86 b1       	in	r24, 0x06	; 6
    49ae:	36 b1       	in	r19, 0x06	; 6
    49b0:	96 b1       	in	r25, 0x06	; 6
    49b2:	26 b1       	in	r18, 0x06	; 6
    49b4:	93 fb       	bst	r25, 3
    49b6:	99 27       	eor	r25, r25
    49b8:	90 f9       	bld	r25, 0
    49ba:	99 0f       	add	r25, r25
    49bc:	32 fb       	bst	r19, 2
    49be:	33 27       	eor	r19, r19
    49c0:	30 f9       	bld	r19, 0
    49c2:	93 0f       	add	r25, r19
    49c4:	99 0f       	add	r25, r25
    49c6:	26 95       	lsr	r18
    49c8:	21 70       	andi	r18, 0x01	; 1
    49ca:	92 0f       	add	r25, r18
    49cc:	99 0f       	add	r25, r25
    49ce:	81 70       	andi	r24, 0x01	; 1
    49d0:	89 0f       	add	r24, r25
    49d2:	08 95       	ret

000049d4 <initPeripherals>:
    49d4:	f8 94       	cli
    49d6:	14 bc       	out	0x24, r1	; 36
    49d8:	15 bc       	out	0x25, r1	; 37
    49da:	10 92 6e 00 	sts	0x006E, r1	; 0x80006e <__TEXT_REGION_LENGTH__+0x7c006e>
    49de:	10 92 20 01 	sts	0x0120, r1	; 0x800120 <__TEXT_REGION_LENGTH__+0x7c0120>
    49e2:	10 92 21 01 	sts	0x0121, r1	; 0x800121 <__TEXT_REGION_LENGTH__+0x7c0121>
    49e6:	8e ef       	ldi	r24, 0xFE	; 254
    49e8:	9f e0       	ldi	r25, 0x0F	; 15
    49ea:	0e 94 3d 52 	call	0xa47a	; 0xa47a <eeprom_read_word>
    49ee:	90 93 fe 02 	sts	0x02FE, r25	; 0x8002fe <rfAddress+0x1>
    49f2:	80 93 fd 02 	sts	0x02FD, r24	; 0x8002fd <rfAddress>
    49f6:	8d ef       	ldi	r24, 0xFD	; 253
    49f8:	9f e0       	ldi	r25, 0x0F	; 15
    49fa:	0e 94 35 52 	call	0xa46a	; 0xa46a <eeprom_read_byte>
    49fe:	80 93 35 0f 	sts	0x0F35, r24	; 0x800f35 <currentOsccal>
    4a02:	9f ef       	ldi	r25, 0xFF	; 255
    4a04:	98 0f       	add	r25, r24
    4a06:	9e 3f       	cpi	r25, 0xFE	; 254
    4a08:	e0 f5       	brcc	.+120    	; 0x4a82 <initPeripherals+0xae>
    4a0a:	80 93 66 00 	sts	0x0066, r24	; 0x800066 <__TEXT_REGION_LENGTH__+0x7c0066>
    4a0e:	80 91 fd 02 	lds	r24, 0x02FD	; 0x8002fd <rfAddress>
    4a12:	90 91 fe 02 	lds	r25, 0x02FE	; 0x8002fe <rfAddress+0x1>
    4a16:	9c 01       	movw	r18, r24
    4a18:	21 58       	subi	r18, 0x81	; 129
    4a1a:	3c 40       	sbci	r19, 0x0C	; 12
    4a1c:	23 30       	cpi	r18, 0x03	; 3
    4a1e:	31 05       	cpc	r19, r1
    4a20:	08 f5       	brcc	.+66     	; 0x4a64 <initPeripherals+0x90>
    4a22:	10 92 c9 02 	sts	0x02C9, r1	; 0x8002c9 <hardwareRevision>
    4a26:	0e 94 5c 42 	call	0x84b8	; 0x84b8 <initCalibration>
    4a2a:	0e 94 33 23 	call	0x4666	; 0x4666 <initPortsIO>
    4a2e:	0e 94 b2 25 	call	0x4b64	; 0x4b64 <initAdc>
    4a32:	0e 94 24 2c 	call	0x5848	; 0x5848 <initMotors>
    4a36:	0e 94 ec 45 	call	0x8bd8	; 0x8bd8 <initRGBleds>
    4a3a:	0e 94 dc 14 	call	0x29b8	; 0x29b8 <initSPI>
    4a3e:	0e 94 c5 15 	call	0x2b8a	; 0x2b8a <mirf_init>
    4a42:	80 91 fb 02 	lds	r24, 0x02FB	; 0x8002fb <spiCommError>
    4a46:	81 11       	cpse	r24, r1
    4a48:	05 c0       	rjmp	.+10     	; 0x4a54 <initPeripherals+0x80>
    4a4a:	80 91 fc 02 	lds	r24, 0x02FC	; 0x8002fc <rfFlags>
    4a4e:	81 60       	ori	r24, 0x01	; 1
    4a50:	80 93 fc 02 	sts	0x02FC, r24	; 0x8002fc <rfFlags>
    4a54:	0e 94 11 24 	call	0x4822	; 0x4822 <initUsart0>
    4a58:	0e 94 4a 46 	call	0x8c94	; 0x8c94 <initAccelerometer>
    4a5c:	0e 94 38 1d 	call	0x3a70	; 0x3a70 <init_ir_remote_control>
    4a60:	78 94       	sei
    4a62:	08 95       	ret
    4a64:	80 38       	cpi	r24, 0x80	; 128
    4a66:	2c e0       	ldi	r18, 0x0C	; 12
    4a68:	92 07       	cpc	r25, r18
    4a6a:	21 f4       	brne	.+8      	; 0x4a74 <initPeripherals+0xa0>
    4a6c:	81 e0       	ldi	r24, 0x01	; 1
    4a6e:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <hardwareRevision>
    4a72:	d9 cf       	rjmp	.-78     	; 0x4a26 <initPeripherals+0x52>
    4a74:	84 38       	cpi	r24, 0x84	; 132
    4a76:	9c 40       	sbci	r25, 0x0C	; 12
    4a78:	b0 f2       	brcs	.-84     	; 0x4a26 <initPeripherals+0x52>
    4a7a:	82 e0       	ldi	r24, 0x02	; 2
    4a7c:	80 93 c9 02 	sts	0x02C9, r24	; 0x8002c9 <hardwareRevision>
    4a80:	d2 cf       	rjmp	.-92     	; 0x4a26 <initPeripherals+0x52>
    4a82:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <__TEXT_REGION_LENGTH__+0x7c0066>
    4a86:	60 93 35 0f 	sts	0x0F35, r22	; 0x800f35 <currentOsccal>
    4a8a:	8d ef       	ldi	r24, 0xFD	; 253
    4a8c:	9f e0       	ldi	r25, 0x0F	; 15
    4a8e:	0e 94 6b 52 	call	0xa4d6	; 0xa4d6 <eeprom_write_byte>
    4a92:	bd cf       	rjmp	.-134    	; 0x4a0e <initPeripherals+0x3a>

00004a94 <__vector_15>:
    4a94:	1f 92       	push	r1
    4a96:	0f 92       	push	r0
    4a98:	0f b6       	in	r0, 0x3f	; 63
    4a9a:	0f 92       	push	r0
    4a9c:	11 24       	eor	r1, r1
    4a9e:	0f 90       	pop	r0
    4aa0:	0f be       	out	0x3f, r0	; 63
    4aa2:	0f 90       	pop	r0
    4aa4:	1f 90       	pop	r1
    4aa6:	18 95       	reti

00004aa8 <getTime100MicroSec>:

}

unsigned long int getTime100MicroSec() {
	return clockTick;
    4aa8:	60 91 cd 02 	lds	r22, 0x02CD	; 0x8002cd <clockTick>
    4aac:	70 91 ce 02 	lds	r23, 0x02CE	; 0x8002ce <clockTick+0x1>
    4ab0:	80 91 cf 02 	lds	r24, 0x02CF	; 0x8002cf <clockTick+0x2>
    4ab4:	90 91 d0 02 	lds	r25, 0x02D0	; 0x8002d0 <clockTick+0x3>
}
    4ab8:	08 95       	ret

00004aba <readBatteryLevel>:

void readBatteryLevel() {
	measBattery = 1;
    4aba:	81 e0       	ldi	r24, 0x01	; 1
    4abc:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <measBattery>
    4ac0:	08 95       	ret

00004ac2 <resetOdometry>:
}

void resetOdometry() {
	leftMotSteps = 0;
    4ac2:	10 92 2f 03 	sts	0x032F, r1	; 0x80032f <leftMotSteps>
    4ac6:	10 92 30 03 	sts	0x0330, r1	; 0x800330 <leftMotSteps+0x1>
    4aca:	10 92 31 03 	sts	0x0331, r1	; 0x800331 <leftMotSteps+0x2>
    4ace:	10 92 32 03 	sts	0x0332, r1	; 0x800332 <leftMotSteps+0x3>
	rightMotSteps = 0;
    4ad2:	10 92 33 03 	sts	0x0333, r1	; 0x800333 <rightMotSteps>
    4ad6:	10 92 34 03 	sts	0x0334, r1	; 0x800334 <rightMotSteps+0x1>
    4ada:	10 92 35 03 	sts	0x0335, r1	; 0x800335 <rightMotSteps+0x2>
    4ade:	10 92 36 03 	sts	0x0336, r1	; 0x800336 <rightMotSteps+0x3>
	theta = 0;
    4ae2:	10 92 af 02 	sts	0x02AF, r1	; 0x8002af <theta>
    4ae6:	10 92 b0 02 	sts	0x02B0, r1	; 0x8002b0 <theta+0x1>
    4aea:	10 92 b1 02 	sts	0x02B1, r1	; 0x8002b1 <theta+0x2>
    4aee:	10 92 b2 02 	sts	0x02B2, r1	; 0x8002b2 <theta+0x3>
	currentAngle = 0.0;
    4af2:	10 92 d4 02 	sts	0x02D4, r1	; 0x8002d4 <currentAngle+0x1>
    4af6:	10 92 d3 02 	sts	0x02D3, r1	; 0x8002d3 <currentAngle>
	thetaAcc = 0.0;
    4afa:	10 92 8a 02 	sts	0x028A, r1	; 0x80028a <thetaAcc>
    4afe:	10 92 8b 02 	sts	0x028B, r1	; 0x80028b <thetaAcc+0x1>
    4b02:	10 92 8c 02 	sts	0x028C, r1	; 0x80028c <thetaAcc+0x2>
    4b06:	10 92 8d 02 	sts	0x028D, r1	; 0x80028d <thetaAcc+0x3>
	accX = 0;
    4b0a:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <accX+0x1>
    4b0e:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <accX>
	accY = 0;
    4b12:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <accY+0x1>
    4b16:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <accY>
	accZ = 0;
    4b1a:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <accZ+0x1>
    4b1e:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <accZ>
	xPos = 0;
    4b22:	10 92 a7 02 	sts	0x02A7, r1	; 0x8002a7 <xPos>
    4b26:	10 92 a8 02 	sts	0x02A8, r1	; 0x8002a8 <xPos+0x1>
    4b2a:	10 92 a9 02 	sts	0x02A9, r1	; 0x8002a9 <xPos+0x2>
    4b2e:	10 92 aa 02 	sts	0x02AA, r1	; 0x8002aa <xPos+0x3>
	yPos = 0;
    4b32:	10 92 a3 02 	sts	0x02A3, r1	; 0x8002a3 <yPos>
    4b36:	10 92 a4 02 	sts	0x02A4, r1	; 0x8002a4 <yPos+0x1>
    4b3a:	10 92 a5 02 	sts	0x02A5, r1	; 0x8002a5 <yPos+0x2>
    4b3e:	10 92 a6 02 	sts	0x02A6, r1	; 0x8002a6 <yPos+0x3>
	rightDist = 0;
    4b42:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <rightDist>
    4b46:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <rightDist+0x1>
    4b4a:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <rightDist+0x2>
    4b4e:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <rightDist+0x3>
	leftDist = 0;
    4b52:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <leftDist>
    4b56:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <leftDist+0x1>
    4b5a:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <leftDist+0x2>
    4b5e:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <leftDist+0x3>
    4b62:	08 95       	ret

00004b64 <initAdc>:

#include "adc.h"


void initAdc(void) {
    4b64:	cf 93       	push	r28
    4b66:	df 93       	push	r29
	// ADMUX  -----> REFS1	REFS0	 ADLAR	MUX4	MUX3 	 MUX2	MUX1	MUX0
	// default		 0		0		 0		0		0		 0		0		0
	// ADCSRB -----> -		ACME	 - 		- 		MUX5 	 ADTS2 	ADTS1 	ADTS0
	// default		 0		0		 0		0		0		 0		0		0

	ADCSRA = 0;
    4b68:	ea e7       	ldi	r30, 0x7A	; 122
    4b6a:	f0 e0       	ldi	r31, 0x00	; 0
    4b6c:	10 82       	st	Z, r1
	ADCSRB = 0;
    4b6e:	ab e7       	ldi	r26, 0x7B	; 123
    4b70:	b0 e0       	ldi	r27, 0x00	; 0
    4b72:	1c 92       	st	X, r1
	ADMUX = 0;
    4b74:	cc e7       	ldi	r28, 0x7C	; 124
    4b76:	d0 e0       	ldi	r29, 0x00	; 0
    4b78:	18 82       	st	Y, r1

	ADCSRA |= (1 << ADPS2) | (1 << ADPS1);	// 1/64 prescaler => 8 MHz/64=125 KHz => Tad (adc clock)
    4b7a:	80 81       	ld	r24, Z
    4b7c:	86 60       	ori	r24, 0x06	; 6
    4b7e:	80 83       	st	Z, r24
											// one sample need 13 Tad in free running mode, so interrupt 
											// frequency is 125/13=9.6 KHz (104 us between adc interrupts)
	ADMUX |= (1 << REFS0); 	// voltage reference to AVCC (external)
    4b80:	88 81       	ld	r24, Y
    4b82:	80 64       	ori	r24, 0x40	; 64
    4b84:	88 83       	st	Y, r24
	ADCSRA |= (1 << ADATE); // auto-trigger mode: the new sampling is started just after the last one is completed
    4b86:	80 81       	ld	r24, Z
    4b88:	80 62       	ori	r24, 0x20	; 32
    4b8a:	80 83       	st	Z, r24
	ADCSRB &= 0xF8;			// for safety...ADTS2:0 in ADCSRB should be already set to free running by default (0b000)
    4b8c:	8c 91       	ld	r24, X
    4b8e:	88 7f       	andi	r24, 0xF8	; 248
    4b90:	8c 93       	st	X, r24
	ADCSRA |= (1 << ADIE);	// enable interrupt on conversion completion
    4b92:	80 81       	ld	r24, Z
    4b94:	88 60       	ori	r24, 0x08	; 8
    4b96:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADEN);	// enable ADC
    4b98:	80 81       	ld	r24, Z
    4b9a:	80 68       	ori	r24, 0x80	; 128
    4b9c:	80 83       	st	Z, r24
	ADCSRA |= (1 << ADSC);	// start first conversion (start from channel 0)
    4b9e:	80 81       	ld	r24, Z
    4ba0:	80 64       	ori	r24, 0x40	; 64
    4ba2:	80 83       	st	Z, r24

}
    4ba4:	df 91       	pop	r29
    4ba6:	cf 91       	pop	r28
    4ba8:	08 95       	ret

00004baa <__vector_29>:

ISR(ADC_vect) {
    4baa:	1f 92       	push	r1
    4bac:	0f 92       	push	r0
    4bae:	0f b6       	in	r0, 0x3f	; 63
    4bb0:	0f 92       	push	r0
    4bb2:	11 24       	eor	r1, r1
    4bb4:	0b b6       	in	r0, 0x3b	; 59
    4bb6:	0f 92       	push	r0
    4bb8:	2f 93       	push	r18
    4bba:	3f 93       	push	r19
    4bbc:	4f 93       	push	r20
    4bbe:	5f 93       	push	r21
    4bc0:	6f 93       	push	r22
    4bc2:	7f 93       	push	r23
    4bc4:	8f 93       	push	r24
    4bc6:	9f 93       	push	r25
    4bc8:	af 93       	push	r26
    4bca:	bf 93       	push	r27
    4bcc:	cf 93       	push	r28
    4bce:	ef 93       	push	r30
    4bd0:	ff 93       	push	r31
	// channel 15:    active phase when going forward: motor left current; passive phase when going backward: motor left velocity


	//LED_BLUE_ON;

	if(clockTick == MAX_U32) {
    4bd2:	80 91 cd 02 	lds	r24, 0x02CD	; 0x8002cd <clockTick>
    4bd6:	90 91 ce 02 	lds	r25, 0x02CE	; 0x8002ce <clockTick+0x1>
    4bda:	a0 91 cf 02 	lds	r26, 0x02CF	; 0x8002cf <clockTick+0x2>
    4bde:	b0 91 d0 02 	lds	r27, 0x02D0	; 0x8002d0 <clockTick+0x3>
    4be2:	8f 3f       	cpi	r24, 0xFF	; 255
    4be4:	2f ef       	ldi	r18, 0xFF	; 255
    4be6:	92 07       	cpc	r25, r18
    4be8:	a2 07       	cpc	r26, r18
    4bea:	b2 07       	cpc	r27, r18
    4bec:	09 f4       	brne	.+2      	; 0x4bf0 <__vector_29+0x46>
    4bee:	22 c1       	rjmp	.+580    	; 0x4e34 <__vector_29+0x28a>
		clockTick = 0;
	} else {
		clockTick++;				// this variable is used as base time for timed processes/functions (e,g, delay); 
    4bf0:	01 96       	adiw	r24, 0x01	; 1
    4bf2:	a1 1d       	adc	r26, r1
    4bf4:	b1 1d       	adc	r27, r1
    4bf6:	80 93 cd 02 	sts	0x02CD, r24	; 0x8002cd <clockTick>
    4bfa:	90 93 ce 02 	sts	0x02CE, r25	; 0x8002ce <clockTick+0x1>
    4bfe:	a0 93 cf 02 	sts	0x02CF, r26	; 0x8002cf <clockTick+0x2>
    4c02:	b0 93 d0 02 	sts	0x02D0, r27	; 0x8002d0 <clockTick+0x3>
	}								// resolution of 104 us based on adc interrupts

	unsigned int value = ADCL;			// get the sample; low byte must be read first!!
    4c06:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7c0078>
	value = (ADCH<<8) | value;
    4c0a:	20 91 79 00 	lds	r18, 0x0079	; 0x800079 <__TEXT_REGION_LENGTH__+0x7c0079>
    4c0e:	90 e0       	ldi	r25, 0x00	; 0
    4c10:	92 2b       	or	r25, r18
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    4c12:	20 91 4e 03 	lds	r18, 0x034E	; 0x80034e <adcSaveDataTo>
    4c16:	22 30       	cpi	r18, 0x02	; 2
    4c18:	09 f4       	brne	.+2      	; 0x4c1c <__vector_29+0x72>
    4c1a:	1c c2       	rjmp	.+1080   	; 0x5054 <__vector_29+0x4aa>
    4c1c:	08 f4       	brcc	.+2      	; 0x4c20 <__vector_29+0x76>
    4c1e:	c1 c0       	rjmp	.+386    	; 0x4da2 <__vector_29+0x1f8>
    4c20:	24 30       	cpi	r18, 0x04	; 4
    4c22:	09 f4       	brne	.+2      	; 0x4c26 <__vector_29+0x7c>
    4c24:	1e c1       	rjmp	.+572    	; 0x4e62 <__vector_29+0x2b8>
    4c26:	08 f4       	brcc	.+2      	; 0x4c2a <__vector_29+0x80>
    4c28:	3d c2       	rjmp	.+1146   	; 0x50a4 <__vector_29+0x4fa>
    4c2a:	26 30       	cpi	r18, 0x06	; 6
    4c2c:	a9 f5       	brne	.+106    	; 0x4c98 <__vector_29+0xee>
		case SAVE_TO_PROX_IRCOMM:
			irCommProxValuesAdc[currentProx+irCommRxWindowSamples*8] = value;
    4c2e:	40 91 e3 03 	lds	r20, 0x03E3	; 0x8003e3 <currentProx>
    4c32:	50 91 61 02 	lds	r21, 0x0261	; 0x800261 <irCommRxWindowSamples>
    4c36:	24 2f       	mov	r18, r20
    4c38:	30 e0       	ldi	r19, 0x00	; 0
    4c3a:	f9 01       	movw	r30, r18
    4c3c:	68 e0       	ldi	r22, 0x08	; 8
    4c3e:	56 9f       	mul	r21, r22
    4c40:	e0 0d       	add	r30, r0
    4c42:	f1 1d       	adc	r31, r1
    4c44:	11 24       	eor	r1, r1
    4c46:	ee 0f       	add	r30, r30
    4c48:	ff 1f       	adc	r31, r31
    4c4a:	60 91 4e 12 	lds	r22, 0x124E	; 0x80124e <irCommProxValuesAdc>
    4c4e:	70 91 4f 12 	lds	r23, 0x124F	; 0x80124f <irCommProxValuesAdc+0x1>
    4c52:	e6 0f       	add	r30, r22
    4c54:	f7 1f       	adc	r31, r23
    4c56:	91 83       	std	Z+1, r25	; 0x01
    4c58:	80 83       	st	Z, r24
			// get the min and max values in the sampling window for all the sensors
			if(irCommMaxSensorValueAdc[currentProx] < value) {
    4c5a:	22 0f       	add	r18, r18
    4c5c:	33 1f       	adc	r19, r19
    4c5e:	e0 91 1c 15 	lds	r30, 0x151C	; 0x80151c <irCommMaxSensorValueAdc>
    4c62:	f0 91 1d 15 	lds	r31, 0x151D	; 0x80151d <irCommMaxSensorValueAdc+0x1>
    4c66:	e2 0f       	add	r30, r18
    4c68:	f3 1f       	adc	r31, r19
    4c6a:	60 81       	ld	r22, Z
    4c6c:	71 81       	ldd	r23, Z+1	; 0x01
    4c6e:	68 17       	cp	r22, r24
    4c70:	79 07       	cpc	r23, r25
    4c72:	10 f4       	brcc	.+4      	; 0x4c78 <__vector_29+0xce>
				irCommMaxSensorValueAdc[currentProx] = value;
    4c74:	91 83       	std	Z+1, r25	; 0x01
    4c76:	80 83       	st	Z, r24
			}
			if(irCommMinSensorValueAdc[currentProx] > value) {
    4c78:	e0 91 ac 0f 	lds	r30, 0x0FAC	; 0x800fac <irCommMinSensorValueAdc>
    4c7c:	f0 91 ad 0f 	lds	r31, 0x0FAD	; 0x800fad <irCommMinSensorValueAdc+0x1>
    4c80:	e2 0f       	add	r30, r18
    4c82:	f3 1f       	adc	r31, r19
    4c84:	20 81       	ld	r18, Z
    4c86:	31 81       	ldd	r19, Z+1	; 0x01
    4c88:	82 17       	cp	r24, r18
    4c8a:	93 07       	cpc	r25, r19
    4c8c:	10 f4       	brcc	.+4      	; 0x4c92 <__vector_29+0xe8>
				irCommMinSensorValueAdc[currentProx] = value;
    4c8e:	91 83       	std	Z+1, r25	; 0x01
    4c90:	80 83       	st	Z, r24
			}
			currentProx++;
    4c92:	4f 5f       	subi	r20, 0xFF	; 255
    4c94:	40 93 e3 03 	sts	0x03E3, r20	; 0x8003e3 <currentProx>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
    4c98:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <irCommMode>
    4c9c:	82 30       	cpi	r24, 0x02	; 2
    4c9e:	09 f4       	brne	.+2      	; 0x4ca2 <__vector_29+0xf8>
    4ca0:	97 c0       	rjmp	.+302    	; 0x4dd0 <__vector_29+0x226>
					irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
    4ca2:	81 30       	cpi	r24, 0x01	; 1
    4ca4:	09 f4       	brne	.+2      	; 0x4ca8 <__vector_29+0xfe>
    4ca6:	cf c0       	rjmp	.+414    	; 0x4e46 <__vector_29+0x29c>
			case 12:
				adcSaveDataTo = SKIP_SAMPLE;
				break;

		}
	} else if(irCommMode==IRCOMM_MODE_SENSORS_SAMPLING) {
    4ca8:	81 11       	cpse	r24, r1
    4caa:	2d c0       	rjmp	.+90     	; 0x4d06 <__vector_29+0x15c>
		switch(adcSamplingState) {
    4cac:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <adcSamplingState>
    4cb0:	82 30       	cpi	r24, 0x02	; 2
    4cb2:	09 f4       	brne	.+2      	; 0x4cb6 <__vector_29+0x10c>
    4cb4:	95 c3       	rjmp	.+1834   	; 0x53e0 <__vector_29+0x836>
    4cb6:	08 f0       	brcs	.+2      	; 0x4cba <__vector_29+0x110>
    4cb8:	00 c1       	rjmp	.+512    	; 0x4eba <__vector_29+0x310>
    4cba:	88 23       	and	r24, r24
    4cbc:	09 f4       	brne	.+2      	; 0x4cc0 <__vector_29+0x116>
    4cbe:	a3 c3       	rjmp	.+1862   	; 0x5406 <__vector_29+0x85c>
    4cc0:	81 30       	cpi	r24, 0x01	; 1
    4cc2:	09 f5       	brne	.+66     	; 0x4d06 <__vector_29+0x15c>
				}
				adcSamplingState = 1;
				break;

			case 1:	// left motor
				currentAdChannel = currentMotLeftChannel;
    4cc4:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <currentMotLeftChannel>
    4cc8:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <currentAdChannel>
				leftChannelPhase = leftMotorPhase;
    4ccc:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <leftMotorPhase>
    4cd0:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <leftChannelPhase>
				adcSaveDataTo = SAVE_TO_PROX;
    4cd4:	10 92 4e 03 	sts	0x034E, r1	; 0x80034e <adcSaveDataTo>
				adcSamplingState = 2;
    4cd8:	82 e0       	ldi	r24, 0x02	; 2
    4cda:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <adcSamplingState>
				if(irCommEnabled==IRCOMM_MODE_RECEIVE && currentProx==23) {					
    4cde:	c0 91 67 02 	lds	r28, 0x0267	; 0x800267 <irCommEnabled>
    4ce2:	c1 30       	cpi	r28, 0x01	; 1
    4ce4:	09 f4       	brne	.+2      	; 0x4ce8 <__vector_29+0x13e>
    4ce6:	d7 c3       	rjmp	.+1966   	; 0x5496 <__vector_29+0x8ec>
					irCommRxWindowSamples = 0;
					memset(irCommMaxSensorValueAdc, 0x00, 16);
					memset(irCommMinSensorValueAdc, 0xFF, 16);
					irCommMode = IRCOMM_MODE_RECEIVE;					
				}
				if(irCommEnabled==IRCOMM_MODE_TRANSMIT && currentProx==23) {
    4ce8:	c2 30       	cpi	r28, 0x02	; 2
    4cea:	69 f4       	brne	.+26     	; 0x4d06 <__vector_29+0x15c>
    4cec:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <currentProx>
    4cf0:	87 31       	cpi	r24, 0x17	; 23
    4cf2:	49 f4       	brne	.+18     	; 0x4d06 <__vector_29+0x15c>
					irCommMode = IRCOMM_MODE_TRANSMIT;
    4cf4:	c0 93 65 02 	sts	0x0265, r28	; 0x800265 <irCommMode>
					if(irCommTxByteEnqueued==1) {
    4cf8:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <irCommTxByteEnqueued>
    4cfc:	81 30       	cpi	r24, 0x01	; 1
    4cfe:	09 f4       	brne	.+2      	; 0x4d02 <__vector_29+0x158>
    4d00:	14 c1       	rjmp	.+552    	; 0x4f2a <__vector_29+0x380>
						irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
					} else {
						irCommMode=IRCOMM_MODE_SENSORS_SAMPLING; // no data to be transmitted, restart sensors sampling
    4d02:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <irCommMode>
	
	}

	// channel selection in the adc register; continuously manually change the channel 
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
    4d06:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <currentAdChannel>
    4d0a:	88 30       	cpi	r24, 0x08	; 8
    4d0c:	10 f5       	brcc	.+68     	; 0x4d52 <__vector_29+0x1a8>
		ADCSRB &= ~(1 << MUX5);
    4d0e:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
    4d12:	87 7f       	andi	r24, 0xF7	; 247
    4d14:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
		ADMUX = 0x40 + currentAdChannel;
    4d18:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <currentAdChannel>
    4d1c:	80 5c       	subi	r24, 0xC0	; 192
    4d1e:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
		ADCSRB |= (1 << MUX5);
		ADMUX = 0x40 + (currentAdChannel-8);
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if((adcSamplingState==2) && (irCommMode==IRCOMM_MODE_SENSORS_SAMPLING)) {
    4d22:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <adcSamplingState>
    4d26:	82 30       	cpi	r24, 0x02	; 2
    4d28:	11 f1       	breq	.+68     	; 0x4d6e <__vector_29+0x1c4>

	}

	//LED_BLUE_OFF;

}
    4d2a:	ff 91       	pop	r31
    4d2c:	ef 91       	pop	r30
    4d2e:	cf 91       	pop	r28
    4d30:	bf 91       	pop	r27
    4d32:	af 91       	pop	r26
    4d34:	9f 91       	pop	r25
    4d36:	8f 91       	pop	r24
    4d38:	7f 91       	pop	r23
    4d3a:	6f 91       	pop	r22
    4d3c:	5f 91       	pop	r21
    4d3e:	4f 91       	pop	r20
    4d40:	3f 91       	pop	r19
    4d42:	2f 91       	pop	r18
    4d44:	0f 90       	pop	r0
    4d46:	0b be       	out	0x3b, r0	; 59
    4d48:	0f 90       	pop	r0
    4d4a:	0f be       	out	0x3f, r0	; 63
    4d4c:	0f 90       	pop	r0
    4d4e:	1f 90       	pop	r1
    4d50:	18 95       	reti
	// sampled since there is no automatic way of doing it
	if(currentAdChannel < 8) {		// MUX5=0 + ADMUX=0..7 => adc channel=0..7
		ADCSRB &= ~(1 << MUX5);
		ADMUX = 0x40 + currentAdChannel;
	} else {						// MUX5=1 + ADMUX=0..7 => adc channel=8..15
		ADCSRB |= (1 << MUX5);
    4d52:	80 91 7b 00 	lds	r24, 0x007B	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
    4d56:	88 60       	ori	r24, 0x08	; 8
    4d58:	80 93 7b 00 	sts	0x007B, r24	; 0x80007b <__TEXT_REGION_LENGTH__+0x7c007b>
		ADMUX = 0x40 + (currentAdChannel-8);
    4d5c:	80 91 e4 03 	lds	r24, 0x03E4	; 0x8003e4 <currentAdChannel>
    4d60:	88 5c       	subi	r24, 0xC8	; 200
    4d62:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7c007c>
	}

	// turn off the proximity IR pulses in order to have 200 us of pulse
	if((adcSamplingState==2) && (irCommMode==IRCOMM_MODE_SENSORS_SAMPLING)) {
    4d66:	80 91 4d 03 	lds	r24, 0x034D	; 0x80034d <adcSamplingState>
    4d6a:	82 30       	cpi	r24, 0x02	; 2
    4d6c:	f1 f6       	brne	.-68     	; 0x4d2a <__vector_29+0x180>
    4d6e:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <irCommMode>
    4d72:	81 11       	cpse	r24, r1
    4d74:	da cf       	rjmp	.-76     	; 0x4d2a <__vector_29+0x180>

		if(hardwareRevision == HW_REV_3_0) {
    4d76:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <hardwareRevision>
    4d7a:	81 11       	cpse	r24, r1
    4d7c:	08 c0       	rjmp	.+16     	; 0x4d8e <__vector_29+0x1e4>
			PORTJ &= 0xF0;
    4d7e:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__TEXT_REGION_LENGTH__+0x7c0105>
    4d82:	80 7f       	andi	r24, 0xF0	; 240
    4d84:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x7c0105>
			PORTA = 0x00;
    4d88:	12 b8       	out	0x02, r1	; 2
    4d8a:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <hardwareRevision>
			//#warning "turn off pulse with 0 (hw rev 3.0)"
		}

		if(hardwareRevision == HW_REV_3_0_1) {
    4d8e:	81 30       	cpi	r24, 0x01	; 1
    4d90:	09 f4       	brne	.+2      	; 0x4d94 <__vector_29+0x1ea>
    4d92:	bf c0       	rjmp	.+382    	; 0x4f12 <__vector_29+0x368>
			PORTJ = 0xFF;
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0.1)"
		}

		if(hardwareRevision == HW_REV_3_1) {
    4d94:	82 30       	cpi	r24, 0x02	; 2
    4d96:	49 f6       	brne	.-110    	; 0x4d2a <__vector_29+0x180>
			PORTJ = 0xFF;
    4d98:	8f ef       	ldi	r24, 0xFF	; 255
    4d9a:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x7c0105>
			PORTA = 0x00;
    4d9e:	12 b8       	out	0x02, r1	; 2

	}

	//LED_BLUE_OFF;

}
    4da0:	c4 cf       	rjmp	.-120    	; 0x4d2a <__vector_29+0x180>
	// prox1 passive phase | ...
	// motor left and motor right indicate either the sampling of the current consumption or 
	// the velocity respectively for the left and right motor; discrimination between the 
	// current and velocity is done in the motors timers interrupts in which is flagged the pwm 
	// phase (active=>current or passive=>velocity) of the motors
	switch(adcSaveDataTo) {
    4da2:	22 23       	and	r18, r18
    4da4:	09 f4       	brne	.+2      	; 0x4da8 <__vector_29+0x1fe>
    4da6:	c5 c0       	rjmp	.+394    	; 0x4f32 <__vector_29+0x388>
    4da8:	21 30       	cpi	r18, 0x01	; 1
    4daa:	09 f0       	breq	.+2      	; 0x4dae <__vector_29+0x204>
    4dac:	75 cf       	rjmp	.-278    	; 0x4c98 <__vector_29+0xee>
			}											// is sampled; thus 12 sensors x 2 phases = 24 samples
			break;

		case SAVE_TO_RIGHT_MOTOR_CURRENT:
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
    4dae:	20 91 2b 03 	lds	r18, 0x032B	; 0x80032b <right_current_avg>
    4db2:	30 91 2c 03 	lds	r19, 0x032C	; 0x80032c <right_current_avg+0x1>
    4db6:	82 0f       	add	r24, r18
    4db8:	93 1f       	adc	r25, r19
    4dba:	96 95       	lsr	r25
    4dbc:	87 95       	ror	r24
    4dbe:	90 93 2c 03 	sts	0x032C, r25	; 0x80032c <right_current_avg+0x1>
    4dc2:	80 93 2b 03 	sts	0x032B, r24	; 0x80032b <right_current_avg>
			break;										// when the desired speed was zero. Now the speed is always sampled independently 
														// of the desired velocity.
	}			

	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
    4dc6:	80 91 65 02 	lds	r24, 0x0265	; 0x800265 <irCommMode>
    4dca:	82 30       	cpi	r24, 0x02	; 2
    4dcc:	09 f0       	breq	.+2      	; 0x4dd0 <__vector_29+0x226>
    4dce:	69 cf       	rjmp	.-302    	; 0x4ca2 <__vector_29+0xf8>
		switch(irCommAdcTxState) {
    4dd0:	80 91 5e 02 	lds	r24, 0x025E	; 0x80025e <irCommAdcTxState>
    4dd4:	81 30       	cpi	r24, 0x01	; 1
    4dd6:	09 f4       	brne	.+2      	; 0x4dda <__vector_29+0x230>
    4dd8:	78 c1       	rjmp	.+752    	; 0x50ca <__vector_29+0x520>
    4dda:	08 f4       	brcc	.+2      	; 0x4dde <__vector_29+0x234>
    4ddc:	a1 c0       	rjmp	.+322    	; 0x4f20 <__vector_29+0x376>
    4dde:	83 30       	cpi	r24, 0x03	; 3
    4de0:	09 f4       	brne	.+2      	; 0x4de4 <__vector_29+0x23a>
    4de2:	9d c1       	rjmp	.+826    	; 0x511e <__vector_29+0x574>
    4de4:	84 30       	cpi	r24, 0x04	; 4
    4de6:	09 f0       	breq	.+2      	; 0x4dea <__vector_29+0x240>
    4de8:	8e cf       	rjmp	.-228    	; 0x4d06 <__vector_29+0x15c>
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ2;
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ2:
				irCommTxDurationCycle++;
    4dea:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <irCommTxDurationCycle>
    4dee:	8f 5f       	subi	r24, 0xFF	; 255
    4df0:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <irCommTxDurationCycle>
				if(irCommTxDurationCycle == irCommTxDuration) {
    4df4:	90 e0       	ldi	r25, 0x00	; 0
    4df6:	20 91 55 02 	lds	r18, 0x0255	; 0x800255 <irCommTxDuration>
    4dfa:	30 91 56 02 	lds	r19, 0x0256	; 0x800256 <irCommTxDuration+0x1>
    4dfe:	82 17       	cp	r24, r18
    4e00:	93 07       	cpc	r25, r19
    4e02:	09 f4       	brne	.+2      	; 0x4e06 <__vector_29+0x25c>
    4e04:	cd c1       	rjmp	.+922    	; 0x51a0 <__vector_29+0x5f6>
						irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
						adcSaveDataTo = SKIP_SAMPLE;
						break;
					}
				}
				currentAdChannel = currentMotLeftChannel;
    4e06:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <currentMotLeftChannel>
    4e0a:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <currentAdChannel>
				leftChannelPhase = leftMotorPhase;
    4e0e:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <leftMotorPhase>
    4e12:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <leftChannelPhase>
				if(rightChannelPhase == ACTIVE_PHASE) {
    4e16:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <rightChannelPhase>
    4e1a:	88 23       	and	r24, r24
    4e1c:	09 f4       	brne	.+2      	; 0x4e20 <__vector_29+0x276>
    4e1e:	aa c1       	rjmp	.+852    	; 0x5174 <__vector_29+0x5ca>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    4e20:	81 30       	cpi	r24, 0x01	; 1
    4e22:	09 f4       	brne	.+2      	; 0x4e26 <__vector_29+0x27c>
    4e24:	c1 c3       	rjmp	.+1922   	; 0x55a8 <__vector_29+0x9fe>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    4e26:	85 e0       	ldi	r24, 0x05	; 5
    4e28:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <adcSaveDataTo>
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ1;
    4e2c:	83 e0       	ldi	r24, 0x03	; 3
    4e2e:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <irCommAdcTxState>
				break;
    4e32:	69 cf       	rjmp	.-302    	; 0x4d06 <__vector_29+0x15c>


	//LED_BLUE_ON;

	if(clockTick == MAX_U32) {
		clockTick = 0;
    4e34:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <clockTick>
    4e38:	10 92 ce 02 	sts	0x02CE, r1	; 0x8002ce <clockTick+0x1>
    4e3c:	10 92 cf 02 	sts	0x02CF, r1	; 0x8002cf <clockTick+0x2>
    4e40:	10 92 d0 02 	sts	0x02D0, r1	; 0x8002d0 <clockTick+0x3>
    4e44:	e0 ce       	rjmp	.-576    	; 0x4c06 <__vector_29+0x5c>
				}
				break;

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
    4e46:	80 91 62 02 	lds	r24, 0x0262	; 0x800262 <irCommAdcRxState>
    4e4a:	90 e0       	ldi	r25, 0x00	; 0
    4e4c:	8d 30       	cpi	r24, 0x0D	; 13
    4e4e:	91 05       	cpc	r25, r1
    4e50:	08 f0       	brcs	.+2      	; 0x4e54 <__vector_29+0x2aa>
    4e52:	59 cf       	rjmp	.-334    	; 0x4d06 <__vector_29+0x15c>
    4e54:	fc 01       	movw	r30, r24
    4e56:	88 27       	eor	r24, r24
    4e58:	e2 54       	subi	r30, 0x42	; 66
    4e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    4e5c:	8f 4f       	sbci	r24, 0xFF	; 255
    4e5e:	0c 94 85 51 	jmp	0xa30a	; 0xa30a <__tablejump2__>
			left_current_avg += value;
			left_current_avg = left_current_avg >> 1;
			break;

		case SAVE_TO_LEFT_MOTOR_VEL:
			if(firstSampleLeft > 0) {
    4e62:	20 91 11 02 	lds	r18, 0x0211	; 0x800211 <firstSampleLeft>
    4e66:	22 23       	and	r18, r18
    4e68:	09 f4       	brne	.+2      	; 0x4e6c <__vector_29+0x2c2>
    4e6a:	16 cf       	rjmp	.-468    	; 0x4c98 <__vector_29+0xee>
				if(((PINH & _BV(PH3))>>3) || ((PINH & _BV(PH4))>>4)) {
    4e6c:	30 91 00 01 	lds	r19, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7c0100>
    4e70:	33 fd       	sbrc	r19, 3
    4e72:	12 cf       	rjmp	.-476    	; 0x4c98 <__vector_29+0xee>
    4e74:	30 91 00 01 	lds	r19, 0x0100	; 0x800100 <__TEXT_REGION_LENGTH__+0x7c0100>
    4e78:	34 fd       	sbrc	r19, 4
    4e7a:	0e cf       	rjmp	.-484    	; 0x4c98 <__vector_29+0xee>
					//LED_RED_ON;
					break;
				}
				firstSampleLeft++;
    4e7c:	2f 5f       	subi	r18, 0xFF	; 255
    4e7e:	20 93 11 02 	sts	0x0211, r18	; 0x800211 <firstSampleLeft>
				if(firstSampleLeft > 4) {
    4e82:	25 30       	cpi	r18, 0x05	; 5
    4e84:	08 f4       	brcc	.+2      	; 0x4e88 <__vector_29+0x2de>
    4e86:	08 cf       	rjmp	.-496    	; 0x4c98 <__vector_29+0xee>
					if(pwm_left != 0) {
    4e88:	40 91 1b 03 	lds	r20, 0x031B	; 0x80031b <pwm_left>
    4e8c:	50 91 1c 03 	lds	r21, 0x031C	; 0x80031c <pwm_left+0x1>
    4e90:	45 2b       	or	r20, r21
    4e92:	51 f0       	breq	.+20     	; 0x4ea8 <__vector_29+0x2fe>
						left_vel_sum += value;
    4e94:	40 91 25 03 	lds	r20, 0x0325	; 0x800325 <left_vel_sum>
    4e98:	50 91 26 03 	lds	r21, 0x0326	; 0x800326 <left_vel_sum+0x1>
    4e9c:	84 0f       	add	r24, r20
    4e9e:	95 1f       	adc	r25, r21
    4ea0:	90 93 26 03 	sts	0x0326, r25	; 0x800326 <left_vel_sum+0x1>
    4ea4:	80 93 25 03 	sts	0x0325, r24	; 0x800325 <left_vel_sum>
					}
					if(firstSampleLeft==8) {
    4ea8:	28 30       	cpi	r18, 0x08	; 8
    4eaa:	09 f0       	breq	.+2      	; 0x4eae <__vector_29+0x304>
    4eac:	f5 ce       	rjmp	.-534    	; 0x4c98 <__vector_29+0xee>
						firstSampleLeft = 0;
    4eae:	10 92 11 02 	sts	0x0211, r1	; 0x800211 <firstSampleLeft>
						compute_left_vel = 1;
    4eb2:	81 e0       	ldi	r24, 0x01	; 1
    4eb4:	80 93 14 02 	sts	0x0214, r24	; 0x800214 <compute_left_vel>
    4eb8:	ef ce       	rjmp	.-546    	; 0x4c98 <__vector_29+0xee>
				adcSaveDataTo = SKIP_SAMPLE;
				break;

		}
	} else if(irCommMode==IRCOMM_MODE_SENSORS_SAMPLING) {
		switch(adcSamplingState) {
    4eba:	83 30       	cpi	r24, 0x03	; 3
    4ebc:	09 f4       	brne	.+2      	; 0x4ec0 <__vector_29+0x316>
    4ebe:	7d c2       	rjmp	.+1274   	; 0x53ba <__vector_29+0x810>
    4ec0:	84 30       	cpi	r24, 0x04	; 4
    4ec2:	09 f0       	breq	.+2      	; 0x4ec6 <__vector_29+0x31c>
    4ec4:	20 cf       	rjmp	.-448    	; 0x4d06 <__vector_29+0x15c>
				}
				adcSamplingState = 4;
				break;

			case 4:	// right motor
				currentAdChannel = currentMotRightChannel;
    4ec6:	90 91 e1 03 	lds	r25, 0x03E1	; 0x8003e1 <currentMotRightChannel>
    4eca:	90 93 e4 03 	sts	0x03E4, r25	; 0x8003e4 <currentAdChannel>
				rightChannelPhase = rightMotorPhase;
    4ece:	90 91 e0 03 	lds	r25, 0x03E0	; 0x8003e0 <rightMotorPhase>
    4ed2:	90 93 4c 03 	sts	0x034C, r25	; 0x80034c <rightChannelPhase>
				if(leftChannelPhase == ACTIVE_PHASE) {
    4ed6:	90 91 4b 03 	lds	r25, 0x034B	; 0x80034b <leftChannelPhase>
    4eda:	91 11       	cpse	r25, r1
    4edc:	c4 c2       	rjmp	.+1416   	; 0x5466 <__vector_29+0x8bc>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    4ede:	83 e0       	ldi	r24, 0x03	; 3
    4ee0:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <adcSaveDataTo>
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 0;
    4ee4:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <adcSamplingState>

				if(currentProx==14 && measBattery==1) {
    4ee8:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <currentProx>
    4eec:	8e 30       	cpi	r24, 0x0E	; 14
    4eee:	09 f4       	brne	.+2      	; 0x4ef2 <__vector_29+0x348>
    4ef0:	f7 c2       	rjmp	.+1518   	; 0x54e0 <__vector_29+0x936>
					measBattery=2;
					SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
				}

				// turn on the IR pulses for the proximities only in their active phases
				if(currentProx & 0x01) {
    4ef2:	80 ff       	sbrs	r24, 0
    4ef4:	08 cf       	rjmp	.-496    	; 0x4d06 <__vector_29+0x15c>
					if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
    4ef6:	80 31       	cpi	r24, 0x10	; 16
    4ef8:	08 f0       	brcs	.+2      	; 0x4efc <__vector_29+0x352>
    4efa:	fe c2       	rjmp	.+1532   	; 0x54f8 <__vector_29+0x94e>
											// PORTA for proximity sensors, PORTJ for ground sensors
						PORTA = (1 << (currentProx>>1));	// pulse on
    4efc:	86 95       	lsr	r24
    4efe:	21 e0       	ldi	r18, 0x01	; 1
    4f00:	30 e0       	ldi	r19, 0x00	; 0
    4f02:	a9 01       	movw	r20, r18
    4f04:	02 c0       	rjmp	.+4      	; 0x4f0a <__vector_29+0x360>
    4f06:	44 0f       	add	r20, r20
    4f08:	55 1f       	adc	r21, r21
    4f0a:	8a 95       	dec	r24
    4f0c:	e2 f7       	brpl	.-8      	; 0x4f06 <__vector_29+0x35c>
    4f0e:	42 b9       	out	0x02, r20	; 2
    4f10:	fa ce       	rjmp	.-524    	; 0x4d06 <__vector_29+0x15c>
			PORTA = 0x00;
			//#warning "turn off pulse with 0 (hw rev 3.0)"
		}

		if(hardwareRevision == HW_REV_3_0_1) {
			PORTJ = 0xFF;
    4f12:	8f ef       	ldi	r24, 0xFF	; 255
    4f14:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x7c0105>
			PORTA = 0x00;
    4f18:	12 b8       	out	0x02, r1	; 2
    4f1a:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <hardwareRevision>
    4f1e:	3a cf       	rjmp	.-396    	; 0x4d94 <__vector_29+0x1ea>
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ1;
				break;

			case IRCOMM_TX_ADC_IDLE:
				if(irCommTxByteEnqueued==1) {					
    4f20:	80 91 5d 02 	lds	r24, 0x025D	; 0x80025d <irCommTxByteEnqueued>
    4f24:	81 30       	cpi	r24, 0x01	; 1
    4f26:	09 f0       	breq	.+2      	; 0x4f2a <__vector_29+0x380>
    4f28:	ee ce       	rjmp	.-548    	; 0x4d06 <__vector_29+0x15c>
					irCommAdcTxState = IRCOMM_TX_ADC_TURN_OFF_SENSORS;
    4f2a:	81 e0       	ldi	r24, 0x01	; 1
    4f2c:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <irCommAdcTxState>
    4f30:	ea ce       	rjmp	.-556    	; 0x4d06 <__vector_29+0x15c>
			}
			currentProx++;
			break;

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    4f32:	20 91 e3 03 	lds	r18, 0x03E3	; 0x8003e3 <currentProx>
    4f36:	2e 30       	cpi	r18, 0x0E	; 14
    4f38:	09 f4       	brne	.+2      	; 0x4f3c <__vector_29+0x392>
    4f3a:	75 c2       	rjmp	.+1258   	; 0x5426 <__vector_29+0x87c>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
				measBattery = 0;
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
			} else {
				proximityValue[currentProx] = value;	// even indexes contain ambient values; odd indexes contains "reflected" values
    4f3c:	e2 2f       	mov	r30, r18
    4f3e:	f0 e0       	ldi	r31, 0x00	; 0
    4f40:	ee 0f       	add	r30, r30
    4f42:	ff 1f       	adc	r31, r31
    4f44:	e1 55       	subi	r30, 0x51	; 81
    4f46:	fc 4f       	sbci	r31, 0xFC	; 252
    4f48:	91 83       	std	Z+1, r25	; 0x01
    4f4a:	80 83       	st	Z, r24
			}

			if(currentProx & 0x01) {
    4f4c:	20 ff       	sbrs	r18, 0
    4f4e:	7c c0       	rjmp	.+248    	; 0x5048 <__vector_29+0x49e>
				//if(currentProx < 16) {	// prox
					proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
    4f50:	42 2f       	mov	r20, r18
    4f52:	50 e0       	ldi	r21, 0x00	; 0
    4f54:	fa 01       	movw	r30, r20
    4f56:	ee 0f       	add	r30, r30
    4f58:	ff 1f       	adc	r31, r31
    4f5a:	e3 55       	subi	r30, 0x53	; 83
    4f5c:	fc 4f       	sbci	r31, 0xFC	; 252
    4f5e:	80 81       	ld	r24, Z
    4f60:	91 81       	ldd	r25, Z+1	; 0x01
    4f62:	44 0f       	add	r20, r20
    4f64:	55 1f       	adc	r21, r21
    4f66:	fa 01       	movw	r30, r20
    4f68:	e1 55       	subi	r30, 0x51	; 81
    4f6a:	fc 4f       	sbci	r31, 0xFC	; 252
    4f6c:	60 81       	ld	r22, Z
    4f6e:	71 81       	ldd	r23, Z+1	; 0x01
    4f70:	42 2f       	mov	r20, r18
    4f72:	46 95       	lsr	r20
    4f74:	50 e0       	ldi	r21, 0x00	; 0
    4f76:	86 1b       	sub	r24, r22
    4f78:	97 0b       	sbc	r25, r23
    4f7a:	44 0f       	add	r20, r20
    4f7c:	55 1f       	adc	r21, r21
    4f7e:	fa 01       	movw	r30, r20
    4f80:	e1 58       	subi	r30, 0x81	; 129
    4f82:	fc 4f       	sbci	r31, 0xFC	; 252
    4f84:	60 81       	ld	r22, Z
    4f86:	71 81       	ldd	r23, Z+1	; 0x01
    4f88:	86 1b       	sub	r24, r22
    4f8a:	97 0b       	sbc	r25, r23
				//} else {	// ground
				//	proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx];
				//}
				if(proximityResult[currentProx>>1] < 0) {
    4f8c:	97 fd       	sbrc	r25, 7
    4f8e:	78 c2       	rjmp	.+1264   	; 0x5480 <__vector_29+0x8d6>
					proximityResult[currentProx>>1] = 0;
				}
				if(proximityResult[currentProx>>1] > 1024) {
    4f90:	81 30       	cpi	r24, 0x01	; 1
    4f92:	74 e0       	ldi	r23, 0x04	; 4
    4f94:	97 07       	cpc	r25, r23
    4f96:	0c f4       	brge	.+2      	; 0x4f9a <__vector_29+0x3f0>
    4f98:	f1 c0       	rjmp	.+482    	; 0x517c <__vector_29+0x5d2>
					proximityResult[currentProx>>1] = 1024;
    4f9a:	80 e0       	ldi	r24, 0x00	; 0
    4f9c:	94 e0       	ldi	r25, 0x04	; 4
    4f9e:	fa 01       	movw	r30, r20
    4fa0:	e9 56       	subi	r30, 0x69	; 105
    4fa2:	fc 4f       	sbci	r31, 0xFC	; 252
    4fa4:	91 83       	std	Z+1, r25	; 0x01
    4fa6:	80 83       	st	Z, r24
				// 1) from 0 to PHASE1: y = x (where x = proximity value9
				// 2) from PHASE1 to PHASE2: y = x/2 + 30
				// 3) from PHASE2 to PHASE3: y = x/4 + 75
				// 4) from PHASE3 upwards: y = x/8 + 127.5
				// The linearized values are used for the obstacles avoidance.
				if(currentProx < 16) {	// only for proximity (not ground sensors)
    4fa8:	20 31       	cpi	r18, 0x10	; 16
    4faa:	88 f4       	brcc	.+34     	; 0x4fce <__vector_29+0x424>
					
					if(proximityResult[currentProx>>1] < PHASE1) {
    4fac:	80 e0       	ldi	r24, 0x00	; 0
    4fae:	94 e0       	ldi	r25, 0x04	; 4

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;

					} else {

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-420)>>3) + PHASE3;
    4fb0:	fa 01       	movw	r30, r20
    4fb2:	e9 5c       	subi	r30, 0xC9	; 201
    4fb4:	fc 4f       	sbci	r31, 0xFC	; 252
    4fb6:	84 5a       	subi	r24, 0xA4	; 164
    4fb8:	91 40       	sbci	r25, 0x01	; 1
    4fba:	95 95       	asr	r25
    4fbc:	87 95       	ror	r24
    4fbe:	95 95       	asr	r25
    4fc0:	87 95       	ror	r24
    4fc2:	95 95       	asr	r25
    4fc4:	87 95       	ror	r24
    4fc6:	8c 54       	subi	r24, 0x4C	; 76
    4fc8:	9f 4f       	sbci	r25, 0xFF	; 255
    4fca:	91 83       	std	Z+1, r25	; 0x01
    4fcc:	80 83       	st	Z, r24
				}

				// the cliff avoidance behavior is inserted within this interrupt service routine in order to react
				// as fast as possible; the maximum speed usable with cliff avoidance is 30 in all kind of surface 
				// (apart from black ones) after calibration.
				if(cliffAvoidanceEnabled) {
    4fce:	80 91 b4 02 	lds	r24, 0x02B4	; 0x8002b4 <cliffAvoidanceEnabled>
    4fd2:	88 23       	and	r24, r24
    4fd4:	09 f4       	brne	.+2      	; 0x4fd8 <__vector_29+0x42e>
    4fd6:	36 c2       	rjmp	.+1132   	; 0x5444 <__vector_29+0x89a>
					if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
    4fd8:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <proximityResult+0x10>
    4fdc:	90 91 a8 03 	lds	r25, 0x03A8	; 0x8003a8 <proximityResult+0x11>
    4fe0:	84 3a       	cpi	r24, 0xA4	; 164
    4fe2:	91 40       	sbci	r25, 0x01	; 1
    4fe4:	b4 f0       	brlt	.+44     	; 0x5012 <__vector_29+0x468>
    4fe6:	80 91 a9 03 	lds	r24, 0x03A9	; 0x8003a9 <proximityResult+0x12>
    4fea:	90 91 aa 03 	lds	r25, 0x03AA	; 0x8003aa <proximityResult+0x13>
    4fee:	84 3a       	cpi	r24, 0xA4	; 164
    4ff0:	91 40       	sbci	r25, 0x01	; 1
    4ff2:	7c f0       	brlt	.+30     	; 0x5012 <__vector_29+0x468>
    4ff4:	80 91 ab 03 	lds	r24, 0x03AB	; 0x8003ab <proximityResult+0x14>
    4ff8:	90 91 ac 03 	lds	r25, 0x03AC	; 0x8003ac <proximityResult+0x15>
    4ffc:	84 3a       	cpi	r24, 0xA4	; 164
    4ffe:	91 40       	sbci	r25, 0x01	; 1
    5000:	44 f0       	brlt	.+16     	; 0x5012 <__vector_29+0x468>
    5002:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <proximityResult+0x16>
    5006:	90 91 ae 03 	lds	r25, 0x03AE	; 0x8003ae <proximityResult+0x17>
    500a:	84 3a       	cpi	r24, 0xA4	; 164
    500c:	91 40       	sbci	r25, 0x01	; 1
    500e:	0c f0       	brlt	.+2      	; 0x5012 <__vector_29+0x468>
    5010:	19 c2       	rjmp	.+1074   	; 0x5444 <__vector_29+0x89a>
					//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
						cliffDetectedFlag = 1;
    5012:	81 e0       	ldi	r24, 0x01	; 1
    5014:	80 93 b3 02 	sts	0x02B3, r24	; 0x8002b3 <cliffDetectedFlag>
						//LED_RED_ON;			
						// set resulting velocity to 0 and change the pwm registers directly to be able
						// to stop as fast as possible (the next pwm cycle)
						// left motor
						pwm_left = 0;
    5018:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <pwm_left+0x1>
    501c:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <pwm_left>
						OCR4A = 0;
    5020:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
    5024:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
						OCR4B = 0;
    5028:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7c00ab>
    502c:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7c00aa>
						// right motor
						pwm_right = 0;
    5030:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <pwm_right+0x1>
    5034:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <pwm_right>
						OCR3A = 0;
    5038:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
    503c:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
						OCR3B = 0;
    5040:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7c009b>
    5044:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <__TEXT_REGION_LENGTH__+0x7c009a>
				} else {
					cliffDetectedFlag = 0;
				}

			}			
			currentProx++;
    5048:	2f 5f       	subi	r18, 0xFF	; 255
			if(currentProx > 23) {						// in total there are 8 proximity sensors and 4 ground sensors => 12 sensors
    504a:	28 31       	cpi	r18, 0x18	; 24
    504c:	c0 f5       	brcc	.+112    	; 0x50be <__vector_29+0x514>
				} else {
					cliffDetectedFlag = 0;
				}

			}			
			currentProx++;
    504e:	20 93 e3 03 	sts	0x03E3, r18	; 0x8003e3 <currentProx>
    5052:	22 ce       	rjmp	.-956    	; 0x4c98 <__vector_29+0xee>
			right_current_avg += value;
			right_current_avg = right_current_avg >> 1;	// the current consumption is an estimate, not really an average of the samples
			break;

		case SAVE_TO_RIGHT_MOTOR_VEL:
			if(firstSampleRight > 0) {
    5054:	20 91 12 02 	lds	r18, 0x0212	; 0x800212 <firstSampleRight>
    5058:	22 23       	and	r18, r18
    505a:	09 f4       	brne	.+2      	; 0x505e <__vector_29+0x4b4>
    505c:	1d ce       	rjmp	.-966    	; 0x4c98 <__vector_29+0xee>
			    // sometimes it was noticed that the velocity is sampled even if the pwm
			    // is in its active phase; as a workaround simply skip the samples in these
			    // cases
				if(((PINE & _BV(PE3))>>3) || ((PINE & _BV(PE4))>>4)) {  // if active phase for either forward or backward direction
    505e:	63 99       	sbic	0x0c, 3	; 12
    5060:	1b ce       	rjmp	.-970    	; 0x4c98 <__vector_29+0xee>
    5062:	64 99       	sbic	0x0c, 4	; 12
    5064:	19 ce       	rjmp	.-974    	; 0x4c98 <__vector_29+0xee>
					//LED_RED_ON;
					break;
				}
				firstSampleRight++;
    5066:	2f 5f       	subi	r18, 0xFF	; 255
    5068:	20 93 12 02 	sts	0x0212, r18	; 0x800212 <firstSampleRight>
				if(firstSampleRight > 4) {				// to skip undesired samples (3 samples skipped) in which there could be glitches
    506c:	25 30       	cpi	r18, 0x05	; 5
    506e:	08 f4       	brcc	.+2      	; 0x5072 <__vector_29+0x4c8>
    5070:	13 ce       	rjmp	.-986    	; 0x4c98 <__vector_29+0xee>
					if(pwm_right != 0) {
    5072:	40 91 1d 03 	lds	r20, 0x031D	; 0x80031d <pwm_right>
    5076:	50 91 1e 03 	lds	r21, 0x031E	; 0x80031e <pwm_right+0x1>
    507a:	45 2b       	or	r20, r21
    507c:	51 f0       	breq	.+20     	; 0x5092 <__vector_29+0x4e8>
						right_vel_sum += value;
    507e:	40 91 23 03 	lds	r20, 0x0323	; 0x800323 <right_vel_sum>
    5082:	50 91 24 03 	lds	r21, 0x0324	; 0x800324 <right_vel_sum+0x1>
    5086:	84 0f       	add	r24, r20
    5088:	95 1f       	adc	r25, r21
    508a:	90 93 24 03 	sts	0x0324, r25	; 0x800324 <right_vel_sum+0x1>
    508e:	80 93 23 03 	sts	0x0323, r24	; 0x800323 <right_vel_sum>
					}
					if(firstSampleRight==8) {			// number of samples to take for the speed computation (average of 4 samples)
    5092:	28 30       	cpi	r18, 0x08	; 8
    5094:	09 f0       	breq	.+2      	; 0x5098 <__vector_29+0x4ee>
    5096:	00 ce       	rjmp	.-1024   	; 0x4c98 <__vector_29+0xee>
						firstSampleRight = 0;
    5098:	10 92 12 02 	sts	0x0212, r1	; 0x800212 <firstSampleRight>
						compute_right_vel = 1;
    509c:	81 e0       	ldi	r24, 0x01	; 1
    509e:	80 93 13 02 	sts	0x0213, r24	; 0x800213 <compute_right_vel>
    50a2:	fa cd       	rjmp	.-1036   	; 0x4c98 <__vector_29+0xee>
			}
			break;

		case SAVE_TO_LEFT_MOTOR_CURRENT:
			left_current_avg += value;
			left_current_avg = left_current_avg >> 1;
    50a4:	20 91 2d 03 	lds	r18, 0x032D	; 0x80032d <left_current_avg>
    50a8:	30 91 2e 03 	lds	r19, 0x032E	; 0x80032e <left_current_avg+0x1>
    50ac:	82 0f       	add	r24, r18
    50ae:	93 1f       	adc	r25, r19
    50b0:	96 95       	lsr	r25
    50b2:	87 95       	ror	r24
    50b4:	90 93 2e 03 	sts	0x032E, r25	; 0x80032e <left_current_avg+0x1>
    50b8:	80 93 2d 03 	sts	0x032D, r24	; 0x80032d <left_current_avg>
			break;
    50bc:	ed cd       	rjmp	.-1062   	; 0x4c98 <__vector_29+0xee>
				}

			}			
			currentProx++;
			if(currentProx > 23) {						// in total there are 8 proximity sensors and 4 ground sensors => 12 sensors
				currentProx = 0;						// for each one there is a passive phase in which the ambient light is sampled,
    50be:	10 92 e3 03 	sts	0x03E3, r1	; 0x8003e3 <currentProx>
				proxUpdated = 1;							// and an active phase in which an IR pulse is turned on and the reflected light 
    50c2:	81 e0       	ldi	r24, 0x01	; 1
    50c4:	80 93 47 03 	sts	0x0347, r24	; 0x800347 <proxUpdated>
    50c8:	e7 cd       	rjmp	.-1074   	; 0x4c98 <__vector_29+0xee>
	// select next channel to sample based on the previous sequence and actual motors pwm phase
	if(irCommMode == IRCOMM_MODE_TRANSMIT) {
		switch(irCommAdcTxState) {
			case IRCOMM_TX_ADC_TURN_OFF_SENSORS:
				// turn off all proximity
				if(hardwareRevision == HW_REV_3_0) {
    50ca:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <hardwareRevision>
    50ce:	81 11       	cpse	r24, r1
    50d0:	08 c0       	rjmp	.+16     	; 0x50e2 <__vector_29+0x538>
					PORTJ &= 0xF0;	// ground
    50d2:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <__TEXT_REGION_LENGTH__+0x7c0105>
    50d6:	80 7f       	andi	r24, 0xF0	; 240
    50d8:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x7c0105>
					PORTA = 0x00;	// proximity
    50dc:	12 b8       	out	0x02, r1	; 2
    50de:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <hardwareRevision>
				}

				if(hardwareRevision == HW_REV_3_0_1) {
    50e2:	81 30       	cpi	r24, 0x01	; 1
    50e4:	09 f4       	brne	.+2      	; 0x50e8 <__vector_29+0x53e>
    50e6:	a4 c0       	rjmp	.+328    	; 0x5230 <__vector_29+0x686>
					PORTJ = 0xFF;	// ground
					PORTA = 0x00;	// proximity
				}

				if(hardwareRevision == HW_REV_3_1) {
    50e8:	82 30       	cpi	r24, 0x02	; 2
    50ea:	09 f4       	brne	.+2      	; 0x50ee <__vector_29+0x544>
    50ec:	9c c0       	rjmp	.+312    	; 0x5226 <__vector_29+0x67c>
					PORTJ = 0xFF;	// ground
					PORTA = 0x00;	// proximtiy
				}
				currentAdChannel = currentMotLeftChannel;
    50ee:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <currentMotLeftChannel>
    50f2:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <currentAdChannel>
				leftChannelPhase = leftMotorPhase;
    50f6:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <leftMotorPhase>
    50fa:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <leftChannelPhase>
				adcSaveDataTo = SKIP_SAMPLE;				
    50fe:	85 e0       	ldi	r24, 0x05	; 5
    5100:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <adcSaveDataTo>
				irCommState = IRCOMM_TX_PREPARE_TRANSMISSION;
    5104:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <irCommState>
				irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
    5108:	82 e0       	ldi	r24, 0x02	; 2
    510a:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <irCommAdcTxState>
				if(irCommTxSensorGroup==0) {
    510e:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <irCommTxSensorGroup>
    5112:	81 11       	cpse	r24, r1
    5114:	25 c0       	rjmp	.+74     	; 0x5160 <__vector_29+0x5b6>
					irCommTxSensorGroup = 1;
    5116:	81 e0       	ldi	r24, 0x01	; 1
    5118:	80 93 51 02 	sts	0x0251, r24	; 0x800251 <irCommTxSensorGroup>
    511c:	f4 cd       	rjmp	.-1048   	; 0x4d06 <__vector_29+0x15c>

			case IRCOMM_TX_ADC_WAIT_PREPARATION:
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ1:
				irCommTxDurationCycle++;
    511e:	80 91 52 02 	lds	r24, 0x0252	; 0x800252 <irCommTxDurationCycle>
    5122:	8f 5f       	subi	r24, 0xFF	; 255
    5124:	80 93 52 02 	sts	0x0252, r24	; 0x800252 <irCommTxDurationCycle>
				if(irCommTxDurationCycle == irCommTxDuration) {
    5128:	90 e0       	ldi	r25, 0x00	; 0
    512a:	20 91 55 02 	lds	r18, 0x0255	; 0x800255 <irCommTxDuration>
    512e:	30 91 56 02 	lds	r19, 0x0256	; 0x800256 <irCommTxDuration+0x1>
    5132:	82 17       	cp	r24, r18
    5134:	93 07       	cpc	r25, r19
    5136:	09 f4       	brne	.+2      	; 0x513a <__vector_29+0x590>
    5138:	5d c0       	rjmp	.+186    	; 0x51f4 <__vector_29+0x64a>
						irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;						
						adcSaveDataTo = SKIP_SAMPLE;
						break;
					}
				}	
				currentAdChannel = currentMotRightChannel;
    513a:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <currentMotRightChannel>
    513e:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <currentAdChannel>
				rightChannelPhase = rightMotorPhase;
    5142:	80 91 e0 03 	lds	r24, 0x03E0	; 0x8003e0 <rightMotorPhase>
    5146:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <rightChannelPhase>
				if(leftChannelPhase == ACTIVE_PHASE) {
    514a:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <leftChannelPhase>
    514e:	81 11       	cpse	r24, r1
    5150:	0a c0       	rjmp	.+20     	; 0x5166 <__vector_29+0x5bc>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    5152:	83 e0       	ldi	r24, 0x03	; 3
    5154:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <adcSaveDataTo>
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				irCommAdcTxState = IRCOMM_TX_ADC_TRANSMISSION_SEQ2;
    5158:	84 e0       	ldi	r24, 0x04	; 4
    515a:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <irCommAdcTxState>
				break;
    515e:	d3 cd       	rjmp	.-1114   	; 0x4d06 <__vector_29+0x15c>
				irCommState = IRCOMM_TX_PREPARE_TRANSMISSION;
				irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;
				if(irCommTxSensorGroup==0) {
					irCommTxSensorGroup = 1;
				} else {
					irCommTxSensorGroup = 0;
    5160:	10 92 51 02 	sts	0x0251, r1	; 0x800251 <irCommTxSensorGroup>
    5164:	d0 cd       	rjmp	.-1120   	; 0x4d06 <__vector_29+0x15c>
				}	
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    5166:	81 30       	cpi	r24, 0x01	; 1
    5168:	09 f4       	brne	.+2      	; 0x516c <__vector_29+0x5c2>
    516a:	05 c2       	rjmp	.+1034   	; 0x5576 <__vector_29+0x9cc>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    516c:	85 e0       	ldi	r24, 0x05	; 5
    516e:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <adcSaveDataTo>
    5172:	f2 cf       	rjmp	.-28     	; 0x5158 <__vector_29+0x5ae>
					}
				}
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    5174:	81 e0       	ldi	r24, 0x01	; 1
    5176:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <adcSaveDataTo>
    517a:	58 ce       	rjmp	.-848    	; 0x4e2c <__vector_29+0x282>
				proximityValue[currentProx] = value;	// even indexes contain ambient values; odd indexes contains "reflected" values
			}

			if(currentProx & 0x01) {
				//if(currentProx < 16) {	// prox
					proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
    517c:	fa 01       	movw	r30, r20
    517e:	e9 56       	subi	r30, 0x69	; 105
    5180:	fc 4f       	sbci	r31, 0xFC	; 252
    5182:	91 83       	std	Z+1, r25	; 0x01
    5184:	80 83       	st	Z, r24
				// 1) from 0 to PHASE1: y = x (where x = proximity value9
				// 2) from PHASE1 to PHASE2: y = x/2 + 30
				// 3) from PHASE2 to PHASE3: y = x/4 + 75
				// 4) from PHASE3 upwards: y = x/8 + 127.5
				// The linearized values are used for the obstacles avoidance.
				if(currentProx < 16) {	// only for proximity (not ground sensors)
    5186:	20 31       	cpi	r18, 0x10	; 16
    5188:	08 f0       	brcs	.+2      	; 0x518c <__vector_29+0x5e2>
    518a:	21 cf       	rjmp	.-446    	; 0x4fce <__vector_29+0x424>
					
					if(proximityResult[currentProx>>1] < PHASE1) {
    518c:	8c 33       	cpi	r24, 0x3C	; 60
    518e:	91 05       	cpc	r25, r1
    5190:	0c f0       	brlt	.+2      	; 0x5194 <__vector_29+0x5ea>
    5192:	c2 c2       	rjmp	.+1412   	; 0x5718 <__vector_29+0xb6e>

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];
    5194:	fa 01       	movw	r30, r20
    5196:	e9 5c       	subi	r30, 0xC9	; 201
    5198:	fc 4f       	sbci	r31, 0xFC	; 252
    519a:	91 83       	std	Z+1, r25	; 0x01
    519c:	80 83       	st	Z, r24
    519e:	17 cf       	rjmp	.-466    	; 0x4fce <__vector_29+0x424>
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ2:
				irCommTxDurationCycle++;
				if(irCommTxDurationCycle == irCommTxDuration) {
					irCommTxDurationCycle = 0;
    51a0:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <irCommTxDurationCycle>
					if(irCommTxPulseState == 0) {
    51a4:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <irCommTxPulseState>
    51a8:	81 11       	cpse	r24, r1
    51aa:	da c1       	rjmp	.+948    	; 0x5560 <__vector_29+0x9b6>
						irCommTxPulseState = 1;
    51ac:	81 e0       	ldi	r24, 0x01	; 1
    51ae:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <irCommTxPulseState>
						//PORTA = 0xFF;
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
    51b2:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <irCommTxSensorGroup>
    51b6:	81 11       	cpse	r24, r1
    51b8:	15 c2       	rjmp	.+1066   	; 0x55e4 <__vector_29+0xa3a>
							PORTA = 0xAA;
    51ba:	8a ea       	ldi	r24, 0xAA	; 170
    51bc:	82 b9       	out	0x02, r24	; 2
						}
					} else {
						irCommTxPulseState = 0;
						PORTA = 0x00;
					}
					irCommTxSwitchCounter++;
    51be:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <irCommTxSwitchCounter>
    51c2:	8f 5f       	subi	r24, 0xFF	; 255
    51c4:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <irCommTxSwitchCounter>
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
    51c8:	90 91 54 02 	lds	r25, 0x0254	; 0x800254 <irCommTxSwitchCount>
    51cc:	89 13       	cpse	r24, r25
    51ce:	1b ce       	rjmp	.-970    	; 0x4e06 <__vector_29+0x25c>
						irCommTxBitCount++;
    51d0:	80 91 58 02 	lds	r24, 0x0258	; 0x800258 <irCommTxBitCount>
    51d4:	8f 5f       	subi	r24, 0xFF	; 255
    51d6:	80 93 58 02 	sts	0x0258, r24	; 0x800258 <irCommTxBitCount>
						if(irCommTxBitCount==12) {
    51da:	8c 30       	cpi	r24, 0x0C	; 12
    51dc:	09 f4       	brne	.+2      	; 0x51e0 <__vector_29+0x636>
    51de:	7f c2       	rjmp	.+1278   	; 0x56de <__vector_29+0xb34>
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
							irCommInitReceiver();
							PORTA = 0x00;
							irCommTxLastTransmissionTime = getTime100MicroSec();
						} else {
							irCommState = IRCOMM_TX_COMPUTE_TIMINGS;
    51e0:	82 e0       	ldi	r24, 0x02	; 2
    51e2:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <irCommState>
						}
						irCommAdcTxState = IRCOMM_TX_ADC_WAIT_PREPARATION;						
    51e6:	82 e0       	ldi	r24, 0x02	; 2
    51e8:	80 93 5e 02 	sts	0x025E, r24	; 0x80025e <irCommAdcTxState>
						adcSaveDataTo = SKIP_SAMPLE;
    51ec:	85 e0       	ldi	r24, 0x05	; 5
    51ee:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <adcSaveDataTo>
						break;
    51f2:	89 cd       	rjmp	.-1262   	; 0x4d06 <__vector_29+0x15c>
				break;

			case IRCOMM_TX_ADC_TRANSMISSION_SEQ1:
				irCommTxDurationCycle++;
				if(irCommTxDurationCycle == irCommTxDuration) {
					irCommTxDurationCycle = 0;
    51f4:	10 92 52 02 	sts	0x0252, r1	; 0x800252 <irCommTxDurationCycle>
					if(irCommTxPulseState == 0) {
    51f8:	80 91 57 02 	lds	r24, 0x0257	; 0x800257 <irCommTxPulseState>
    51fc:	81 11       	cpse	r24, r1
    51fe:	ac c1       	rjmp	.+856    	; 0x5558 <__vector_29+0x9ae>
						irCommTxPulseState = 1;
    5200:	81 e0       	ldi	r24, 0x01	; 1
    5202:	80 93 57 02 	sts	0x0257, r24	; 0x800257 <irCommTxPulseState>
						//PORTA = 0xFF;
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
    5206:	80 91 51 02 	lds	r24, 0x0251	; 0x800251 <irCommTxSensorGroup>
    520a:	81 11       	cpse	r24, r1
    520c:	e8 c1       	rjmp	.+976    	; 0x55de <__vector_29+0xa34>
							PORTA = 0xAA;
    520e:	8a ea       	ldi	r24, 0xAA	; 170
    5210:	82 b9       	out	0x02, r24	; 2
						}
					} else {
						irCommTxPulseState = 0;
						PORTA = 0x00;
					}
					irCommTxSwitchCounter++;
    5212:	80 91 53 02 	lds	r24, 0x0253	; 0x800253 <irCommTxSwitchCounter>
    5216:	8f 5f       	subi	r24, 0xFF	; 255
    5218:	80 93 53 02 	sts	0x0253, r24	; 0x800253 <irCommTxSwitchCounter>
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
    521c:	90 91 54 02 	lds	r25, 0x0254	; 0x800254 <irCommTxSwitchCount>
    5220:	89 13       	cpse	r24, r25
    5222:	8b cf       	rjmp	.-234    	; 0x513a <__vector_29+0x590>
    5224:	d5 cf       	rjmp	.-86     	; 0x51d0 <__vector_29+0x626>
					PORTJ = 0xFF;	// ground
					PORTA = 0x00;	// proximity
				}

				if(hardwareRevision == HW_REV_3_1) {
					PORTJ = 0xFF;	// ground
    5226:	8f ef       	ldi	r24, 0xFF	; 255
    5228:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x7c0105>
					PORTA = 0x00;	// proximtiy
    522c:	12 b8       	out	0x02, r1	; 2
    522e:	5f cf       	rjmp	.-322    	; 0x50ee <__vector_29+0x544>
					PORTJ &= 0xF0;	// ground
					PORTA = 0x00;	// proximity
				}

				if(hardwareRevision == HW_REV_3_0_1) {
					PORTJ = 0xFF;	// ground
    5230:	8f ef       	ldi	r24, 0xFF	; 255
    5232:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x7c0105>
					PORTA = 0x00;	// proximity
    5236:	12 b8       	out	0x02, r1	; 2
    5238:	80 91 c9 02 	lds	r24, 0x02C9	; 0x8002c9 <hardwareRevision>
    523c:	55 cf       	rjmp	.-342    	; 0x50e8 <__vector_29+0x53e>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 6;
				break;

			case 6:
				currentAdChannel = currentProx+1;
    523e:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <currentProx>
    5242:	8f 5f       	subi	r24, 0xFF	; 255
    5244:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <currentAdChannel>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    5248:	86 e0       	ldi	r24, 0x06	; 6
    524a:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <adcSaveDataTo>
				irCommAdcRxState = 7;
    524e:	87 e0       	ldi	r24, 0x07	; 7
    5250:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <irCommAdcRxState>
				break;
    5254:	58 cd       	rjmp	.-1360   	; 0x4d06 <__vector_29+0x15c>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 5;
				break;

			case 5:
				currentAdChannel = currentProx+1;
    5256:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <currentProx>
    525a:	8f 5f       	subi	r24, 0xFF	; 255
    525c:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <currentAdChannel>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    5260:	86 e0       	ldi	r24, 0x06	; 6
    5262:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <adcSaveDataTo>
				irCommAdcRxState = 6;
    5266:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <irCommAdcRxState>
				break;
    526a:	4d cd       	rjmp	.-1382   	; 0x4d06 <__vector_29+0x15c>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 4;
				break;

			case 4:
				currentAdChannel = currentProx+1;
    526c:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <currentProx>
    5270:	8f 5f       	subi	r24, 0xFF	; 255
    5272:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <currentAdChannel>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    5276:	86 e0       	ldi	r24, 0x06	; 6
    5278:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <adcSaveDataTo>
				irCommAdcRxState = 5;
    527c:	85 e0       	ldi	r24, 0x05	; 5
    527e:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <irCommAdcRxState>
				break;
    5282:	41 cd       	rjmp	.-1406   	; 0x4d06 <__vector_29+0x15c>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 3;
				break;

			case 3:
				currentAdChannel = currentProx+1;
    5284:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <currentProx>
    5288:	8f 5f       	subi	r24, 0xFF	; 255
    528a:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <currentAdChannel>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    528e:	86 e0       	ldi	r24, 0x06	; 6
    5290:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <adcSaveDataTo>
				irCommAdcRxState = 4;
    5294:	84 e0       	ldi	r24, 0x04	; 4
    5296:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <irCommAdcRxState>
				break;
    529a:	35 cd       	rjmp	.-1430   	; 0x4d06 <__vector_29+0x15c>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 2;
				break;

			case 2:
				currentAdChannel = currentProx+1;
    529c:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <currentProx>
    52a0:	8f 5f       	subi	r24, 0xFF	; 255
    52a2:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <currentAdChannel>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    52a6:	86 e0       	ldi	r24, 0x06	; 6
    52a8:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <adcSaveDataTo>
				irCommAdcRxState = 3;
    52ac:	83 e0       	ldi	r24, 0x03	; 3
    52ae:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <irCommAdcRxState>
				break;
    52b2:	29 cd       	rjmp	.-1454   	; 0x4d06 <__vector_29+0x15c>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 1;
				break;

			case 1:
				currentAdChannel = currentProx+1;
    52b4:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <currentProx>
    52b8:	8f 5f       	subi	r24, 0xFF	; 255
    52ba:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <currentAdChannel>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    52be:	86 e0       	ldi	r24, 0x06	; 6
    52c0:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <adcSaveDataTo>
				irCommAdcRxState = 2;
    52c4:	82 e0       	ldi	r24, 0x02	; 2
    52c6:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <irCommAdcRxState>
				break;
    52ca:	1d cd       	rjmp	.-1478   	; 0x4d06 <__vector_29+0x15c>

		}
	} else if(irCommMode == IRCOMM_MODE_RECEIVE) {
		switch(irCommAdcRxState) {
			case 0:				
				currentProx = 0;
    52cc:	10 92 e3 03 	sts	0x03E3, r1	; 0x8003e3 <currentProx>
				currentAdChannel = currentProx+1;				
    52d0:	81 e0       	ldi	r24, 0x01	; 1
    52d2:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <currentAdChannel>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    52d6:	96 e0       	ldi	r25, 0x06	; 6
    52d8:	90 93 4e 03 	sts	0x034E, r25	; 0x80034e <adcSaveDataTo>
				irCommAdcRxState = 1;
    52dc:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <irCommAdcRxState>
				break;
    52e0:	12 cd       	rjmp	.-1500   	; 0x4d06 <__vector_29+0x15c>
				}
				irCommAdcRxState = 0;
				break;

			case 12:
				adcSaveDataTo = SKIP_SAMPLE;
    52e2:	85 e0       	ldi	r24, 0x05	; 5
    52e4:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <adcSaveDataTo>
				break;
    52e8:	0e cd       	rjmp	.-1508   	; 0x4d06 <__vector_29+0x15c>
				}
				irCommAdcRxState = 10;
				break;

			case 10:
				currentAdChannel = currentMotRightChannel;
    52ea:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <currentMotRightChannel>
    52ee:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <currentAdChannel>
				rightChannelPhase = rightMotorPhase;
    52f2:	80 91 e0 03 	lds	r24, 0x03E0	; 0x8003e0 <rightMotorPhase>
    52f6:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <rightChannelPhase>
				if(leftChannelPhase == ACTIVE_PHASE) {
    52fa:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <leftChannelPhase>
    52fe:	81 11       	cpse	r24, r1
    5300:	33 c1       	rjmp	.+614    	; 0x5568 <__vector_29+0x9be>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    5302:	83 e0       	ldi	r24, 0x03	; 3
    5304:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <adcSaveDataTo>
					}
				} else {
					irCommRxWindowSamples++;
				}
				*/
				if(irCommRxBitSkipped < 254) {	// safety check
    5308:	90 91 5f 02 	lds	r25, 0x025F	; 0x80025f <irCommRxBitSkipped>
    530c:	9e 3f       	cpi	r25, 0xFE	; 254
    530e:	18 f4       	brcc	.+6      	; 0x5316 <__vector_29+0x76c>
					irCommRxBitSkipped++;
    5310:	9f 5f       	subi	r25, 0xFF	; 255
    5312:	90 93 5f 02 	sts	0x025F, r25	; 0x80025f <irCommRxBitSkipped>
				}
				irCommRxWindowSamples++;
    5316:	80 91 61 02 	lds	r24, 0x0261	; 0x800261 <irCommRxWindowSamples>
    531a:	8f 5f       	subi	r24, 0xFF	; 255
    531c:	80 93 61 02 	sts	0x0261, r24	; 0x800261 <irCommRxWindowSamples>
				if(irCommState==IRCOMM_RX_SYNC_SIGNAL) {
    5320:	20 91 64 02 	lds	r18, 0x0264	; 0x800264 <irCommState>
    5324:	24 30       	cpi	r18, 0x04	; 4
    5326:	09 f4       	brne	.+2      	; 0x532a <__vector_29+0x780>
    5328:	4f c1       	rjmp	.+670    	; 0x55c8 <__vector_29+0xa1e>
					if(irCommRxBitSkipped >= irCommShiftCount) {
						irCommState = IRCOMM_RX_WAITING_BIT;
					}
				}

				if(irCommRxWindowSamples == IRCOMM_SAMPLING_WINDOW) {					
    532a:	84 31       	cpi	r24, 0x14	; 20
    532c:	09 f4       	brne	.+2      	; 0x5330 <__vector_29+0x786>
    532e:	79 c1       	rjmp	.+754    	; 0x5622 <__vector_29+0xa78>
				} else {
					irCommTickCounter = 0;
					updateBlueLed(0);
				}
				*/
				irCommAdcRxState = 11;
    5330:	8b e0       	ldi	r24, 0x0B	; 11
    5332:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <irCommAdcRxState>
				break;
    5336:	e7 cc       	rjmp	.-1586   	; 0x4d06 <__vector_29+0x15c>
				}
				irCommAdcRxState = 9;
				break;

			case 9:
				currentAdChannel = currentMotLeftChannel;
    5338:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <currentMotLeftChannel>
    533c:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <currentAdChannel>
				leftChannelPhase = leftMotorPhase;
    5340:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <leftMotorPhase>
    5344:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <leftChannelPhase>
				if(rightChannelPhase == ACTIVE_PHASE) {
    5348:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <rightChannelPhase>
    534c:	81 11       	cpse	r24, r1
    534e:	25 c1       	rjmp	.+586    	; 0x559a <__vector_29+0x9f0>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    5350:	81 e0       	ldi	r24, 0x01	; 1
    5352:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <adcSaveDataTo>
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				irCommAdcRxState = 10;
    5356:	8a e0       	ldi	r24, 0x0A	; 10
    5358:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <irCommAdcRxState>
				break;
    535c:	d4 cc       	rjmp	.-1624   	; 0x4d06 <__vector_29+0x15c>
				*/
				irCommAdcRxState = 11;
				break;

			case 11:
				currentAdChannel = 0;	// prox0
    535e:	10 92 e4 03 	sts	0x03E4, r1	; 0x8003e4 <currentAdChannel>
				if(rightChannelPhase == ACTIVE_PHASE) {
    5362:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <rightChannelPhase>
    5366:	81 11       	cpse	r24, r1
    5368:	0a c1       	rjmp	.+532    	; 0x557e <__vector_29+0x9d4>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    536a:	81 e0       	ldi	r24, 0x01	; 1
    536c:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <adcSaveDataTo>
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				irCommAdcRxState = 0;
    5370:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <irCommAdcRxState>
				break;
    5374:	c8 cc       	rjmp	.-1648   	; 0x4d06 <__vector_29+0x15c>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 8;
				break;

			case 8:
				currentAdChannel = currentMotRightChannel;
    5376:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <currentMotRightChannel>
    537a:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <currentAdChannel>
				rightChannelPhase = rightMotorPhase;
    537e:	80 91 e0 03 	lds	r24, 0x03E0	; 0x8003e0 <rightMotorPhase>
    5382:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <rightChannelPhase>
				if(leftChannelPhase == ACTIVE_PHASE) {
    5386:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <leftChannelPhase>
    538a:	81 11       	cpse	r24, r1
    538c:	ff c0       	rjmp	.+510    	; 0x558c <__vector_29+0x9e2>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    538e:	83 e0       	ldi	r24, 0x03	; 3
    5390:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <adcSaveDataTo>
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				irCommAdcRxState = 9;
    5394:	89 e0       	ldi	r24, 0x09	; 9
    5396:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <irCommAdcRxState>
				break;
    539a:	b5 cc       	rjmp	.-1686   	; 0x4d06 <__vector_29+0x15c>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
				irCommAdcRxState = 7;
				break;

			case 7:
				currentAdChannel = currentMotLeftChannel;
    539c:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <currentMotLeftChannel>
    53a0:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <currentAdChannel>
				leftChannelPhase = leftMotorPhase;
    53a4:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <leftMotorPhase>
    53a8:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <leftChannelPhase>
				adcSaveDataTo = SAVE_TO_PROX_IRCOMM;
    53ac:	86 e0       	ldi	r24, 0x06	; 6
    53ae:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <adcSaveDataTo>
				irCommAdcRxState = 8;
    53b2:	88 e0       	ldi	r24, 0x08	; 8
    53b4:	80 93 62 02 	sts	0x0262, r24	; 0x800262 <irCommAdcRxState>
				break;
    53b8:	a6 cc       	rjmp	.-1716   	; 0x4d06 <__vector_29+0x15c>
				}
				adcSamplingState = 3;
				break;

			case 3:	// left motor
				currentAdChannel = currentMotLeftChannel;
    53ba:	80 91 e2 03 	lds	r24, 0x03E2	; 0x8003e2 <currentMotLeftChannel>
    53be:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <currentAdChannel>
				leftChannelPhase = leftMotorPhase;
    53c2:	80 91 df 03 	lds	r24, 0x03DF	; 0x8003df <leftMotorPhase>
    53c6:	80 93 4b 03 	sts	0x034B, r24	; 0x80034b <leftChannelPhase>
				if(rightChannelPhase == ACTIVE_PHASE) {
    53ca:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <rightChannelPhase>
    53ce:	81 11       	cpse	r24, r1
    53d0:	3c c0       	rjmp	.+120    	; 0x544a <__vector_29+0x8a0>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    53d2:	81 e0       	ldi	r24, 0x01	; 1
    53d4:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <adcSaveDataTo>
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 4;
    53d8:	84 e0       	ldi	r24, 0x04	; 4
    53da:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <adcSamplingState>
				break;
    53de:	93 cc       	rjmp	.-1754   	; 0x4d06 <__vector_29+0x15c>
					}
				}
				break;

			case 2:	// right motor
				currentAdChannel = currentMotRightChannel;
    53e0:	80 91 e1 03 	lds	r24, 0x03E1	; 0x8003e1 <currentMotRightChannel>
    53e4:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <currentAdChannel>
				rightChannelPhase = rightMotorPhase;
    53e8:	80 91 e0 03 	lds	r24, 0x03E0	; 0x8003e0 <rightMotorPhase>
    53ec:	80 93 4c 03 	sts	0x034C, r24	; 0x80034c <rightChannelPhase>
				if(leftChannelPhase == ACTIVE_PHASE) {
    53f0:	80 91 4b 03 	lds	r24, 0x034B	; 0x80034b <leftChannelPhase>
    53f4:	81 11       	cpse	r24, r1
    53f6:	3d c0       	rjmp	.+122    	; 0x5472 <__vector_29+0x8c8>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
    53f8:	83 e0       	ldi	r24, 0x03	; 3
    53fa:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <adcSaveDataTo>
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 3;
    53fe:	83 e0       	ldi	r24, 0x03	; 3
    5400:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <adcSamplingState>
				break;
    5404:	80 cc       	rjmp	.-1792   	; 0x4d06 <__vector_29+0x15c>
		}
	} else if(irCommMode==IRCOMM_MODE_SENSORS_SAMPLING) {
		switch(adcSamplingState) {

			case 0:	// proximity
				currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
    5406:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <currentProx>
    540a:	86 95       	lsr	r24
    540c:	80 93 e4 03 	sts	0x03E4, r24	; 0x8003e4 <currentAdChannel>
																// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
				if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
    5410:	80 91 4c 03 	lds	r24, 0x034C	; 0x80034c <rightChannelPhase>
    5414:	81 11       	cpse	r24, r1
    5416:	20 c0       	rjmp	.+64     	; 0x5458 <__vector_29+0x8ae>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
    5418:	81 e0       	ldi	r24, 0x01	; 1
    541a:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <adcSaveDataTo>
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 1;
    541e:	81 e0       	ldi	r24, 0x01	; 1
    5420:	80 93 4d 03 	sts	0x034D, r24	; 0x80034d <adcSamplingState>
				break;
    5424:	70 cc       	rjmp	.-1824   	; 0x4d06 <__vector_29+0x15c>
			}
			currentProx++;
			break;

		case SAVE_TO_PROX:
			if(currentProx==14 && measBattery==2) {		// about every 2 seconds the battery level is sampled; both
    5426:	30 91 48 03 	lds	r19, 0x0348	; 0x800348 <measBattery>
    542a:	32 30       	cpi	r19, 0x02	; 2
    542c:	09 f0       	breq	.+2      	; 0x5430 <__vector_29+0x886>
    542e:	86 cd       	rjmp	.-1268   	; 0x4f3c <__vector_29+0x392>
				batteryLevel = value;					// the proximity 7 and battery are connected to the same adc channel
    5430:	90 93 4a 03 	sts	0x034A, r25	; 0x80034a <batteryLevel+0x1>
    5434:	80 93 49 03 	sts	0x0349, r24	; 0x800349 <batteryLevel>
				measBattery = 0;
    5438:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <measBattery>
				SENS_ENABLE_OFF;						// the adc channel is connected to proximity
    543c:	46 98       	cbi	0x08, 6	; 8
    543e:	20 91 e3 03 	lds	r18, 0x03E3	; 0x8003e3 <currentProx>
    5442:	84 cd       	rjmp	.-1272   	; 0x4f4c <__vector_29+0x3a2>
						// right motor
						pwm_right = 0;
						OCR3A = 0;
						OCR3B = 0;
					} else {
						cliffDetectedFlag = 0;
    5444:	10 92 b3 02 	sts	0x02B3, r1	; 0x8002b3 <cliffDetectedFlag>
    5448:	ff cd       	rjmp	.-1026   	; 0x5048 <__vector_29+0x49e>
			case 3:	// left motor
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    544a:	81 30       	cpi	r24, 0x01	; 1
    544c:	09 f4       	brne	.+2      	; 0x5450 <__vector_29+0x8a6>
    544e:	b0 c0       	rjmp	.+352    	; 0x55b0 <__vector_29+0xa06>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    5450:	85 e0       	ldi	r24, 0x05	; 5
    5452:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <adcSaveDataTo>
    5456:	c0 cf       	rjmp	.-128    	; 0x53d8 <__vector_29+0x82e>
			case 0:	// proximity
				currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
																// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
				if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    5458:	81 30       	cpi	r24, 0x01	; 1
    545a:	09 f4       	brne	.+2      	; 0x545e <__vector_29+0x8b4>
    545c:	b1 c0       	rjmp	.+354    	; 0x55c0 <__vector_29+0xa16>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    545e:	85 e0       	ldi	r24, 0x05	; 5
    5460:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <adcSaveDataTo>
    5464:	dc cf       	rjmp	.-72     	; 0x541e <__vector_29+0x874>
			case 4:	// right motor
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    5466:	91 30       	cpi	r25, 0x01	; 1
    5468:	09 f0       	breq	.+2      	; 0x546c <__vector_29+0x8c2>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    546a:	85 e0       	ldi	r24, 0x05	; 5
    546c:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <adcSaveDataTo>
    5470:	39 cd       	rjmp	.-1422   	; 0x4ee4 <__vector_29+0x33a>
			case 2:	// right motor
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    5472:	81 30       	cpi	r24, 0x01	; 1
    5474:	09 f4       	brne	.+2      	; 0x5478 <__vector_29+0x8ce>
    5476:	a0 c0       	rjmp	.+320    	; 0x55b8 <__vector_29+0xa0e>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    5478:	85 e0       	ldi	r24, 0x05	; 5
    547a:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <adcSaveDataTo>
    547e:	bf cf       	rjmp	.-130    	; 0x53fe <__vector_29+0x854>
					proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx] - proximityOffset[currentProx>>1];	// ambient - (ambient+reflected) - offset
				//} else {	// ground
				//	proximityResult[currentProx>>1] = proximityValue[currentProx-1] - proximityValue[currentProx];
				//}
				if(proximityResult[currentProx>>1] < 0) {
					proximityResult[currentProx>>1] = 0;
    5480:	fa 01       	movw	r30, r20
    5482:	e9 56       	subi	r30, 0x69	; 105
    5484:	fc 4f       	sbci	r31, 0xFC	; 252
    5486:	11 82       	std	Z+1, r1	; 0x01
    5488:	10 82       	st	Z, r1
				// 1) from 0 to PHASE1: y = x (where x = proximity value9
				// 2) from PHASE1 to PHASE2: y = x/2 + 30
				// 3) from PHASE2 to PHASE3: y = x/4 + 75
				// 4) from PHASE3 upwards: y = x/8 + 127.5
				// The linearized values are used for the obstacles avoidance.
				if(currentProx < 16) {	// only for proximity (not ground sensors)
    548a:	20 31       	cpi	r18, 0x10	; 16
    548c:	08 f0       	brcs	.+2      	; 0x5490 <__vector_29+0x8e6>
    548e:	9f cd       	rjmp	.-1218   	; 0x4fce <__vector_29+0x424>
    5490:	80 e0       	ldi	r24, 0x00	; 0
    5492:	90 e0       	ldi	r25, 0x00	; 0
    5494:	7f ce       	rjmp	.-770    	; 0x5194 <__vector_29+0x5ea>
			case 1:	// left motor
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				adcSaveDataTo = SAVE_TO_PROX;
				adcSamplingState = 2;
				if(irCommEnabled==IRCOMM_MODE_RECEIVE && currentProx==23) {					
    5496:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <currentProx>
    549a:	87 31       	cpi	r24, 0x17	; 23
    549c:	09 f0       	breq	.+2      	; 0x54a0 <__vector_29+0x8f6>
    549e:	33 cc       	rjmp	.-1946   	; 0x4d06 <__vector_29+0x15c>
					currentAdChannel = 0;	// prox0					
    54a0:	10 92 e4 03 	sts	0x03E4, r1	; 0x8003e4 <currentAdChannel>
					measBattery = 0;
    54a4:	10 92 48 03 	sts	0x0348, r1	; 0x800348 <measBattery>
					irCommAdcRxState = 0;					
    54a8:	10 92 62 02 	sts	0x0262, r1	; 0x800262 <irCommAdcRxState>
					irCommRxWindowSamples = 0;
    54ac:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <irCommRxWindowSamples>
					memset(irCommMaxSensorValueAdc, 0x00, 16);
    54b0:	e0 91 1c 15 	lds	r30, 0x151C	; 0x80151c <irCommMaxSensorValueAdc>
    54b4:	f0 91 1d 15 	lds	r31, 0x151D	; 0x80151d <irCommMaxSensorValueAdc+0x1>
    54b8:	80 e1       	ldi	r24, 0x10	; 16
    54ba:	df 01       	movw	r26, r30
    54bc:	1d 92       	st	X+, r1
    54be:	8a 95       	dec	r24
    54c0:	e9 f7       	brne	.-6      	; 0x54bc <__vector_29+0x912>
					memset(irCommMinSensorValueAdc, 0xFF, 16);
    54c2:	40 e1       	ldi	r20, 0x10	; 16
    54c4:	50 e0       	ldi	r21, 0x00	; 0
    54c6:	6f ef       	ldi	r22, 0xFF	; 255
    54c8:	70 e0       	ldi	r23, 0x00	; 0
    54ca:	80 91 ac 0f 	lds	r24, 0x0FAC	; 0x800fac <irCommMinSensorValueAdc>
    54ce:	90 91 ad 0f 	lds	r25, 0x0FAD	; 0x800fad <irCommMinSensorValueAdc+0x1>
    54d2:	0e 94 1e 52 	call	0xa43c	; 0xa43c <memset>
					irCommMode = IRCOMM_MODE_RECEIVE;					
    54d6:	c0 93 65 02 	sts	0x0265, r28	; 0x800265 <irCommMode>
    54da:	c0 91 67 02 	lds	r28, 0x0267	; 0x800267 <irCommEnabled>
    54de:	04 cc       	rjmp	.-2040   	; 0x4ce8 <__vector_29+0x13e>
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
				}
				adcSamplingState = 0;

				if(currentProx==14 && measBattery==1) {
    54e0:	80 91 48 03 	lds	r24, 0x0348	; 0x800348 <measBattery>
    54e4:	81 30       	cpi	r24, 0x01	; 1
    54e6:	09 f0       	breq	.+2      	; 0x54ea <__vector_29+0x940>
    54e8:	0e cc       	rjmp	.-2020   	; 0x4d06 <__vector_29+0x15c>
					measBattery=2;
    54ea:	82 e0       	ldi	r24, 0x02	; 2
    54ec:	80 93 48 03 	sts	0x0348, r24	; 0x800348 <measBattery>
					SENS_ENABLE_ON;			// next time measure battery instead of proximity 7
    54f0:	46 9a       	sbi	0x08, 6	; 8
    54f2:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <currentProx>
    54f6:	fd cc       	rjmp	.-1542   	; 0x4ef2 <__vector_29+0x348>
				if(currentProx & 0x01) {
					if(currentProx < 16) {	// pulse for proximity and ground sensors are placed in different ports;
											// PORTA for proximity sensors, PORTJ for ground sensors
						PORTA = (1 << (currentProx>>1));	// pulse on
					} else {
						if(hardwareRevision == HW_REV_3_0) {
    54f8:	90 91 c9 02 	lds	r25, 0x02C9	; 0x8002c9 <hardwareRevision>
    54fc:	91 11       	cpse	r25, r1
    54fe:	10 c0       	rjmp	.+32     	; 0x5520 <__vector_29+0x976>
							PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
    5500:	90 e0       	ldi	r25, 0x00	; 0
    5502:	40 97       	sbiw	r24, 0x10	; 16
    5504:	95 95       	asr	r25
    5506:	87 95       	ror	r24
    5508:	21 e0       	ldi	r18, 0x01	; 1
    550a:	30 e0       	ldi	r19, 0x00	; 0
    550c:	b9 01       	movw	r22, r18
    550e:	02 c0       	rjmp	.+4      	; 0x5514 <__vector_29+0x96a>
    5510:	66 0f       	add	r22, r22
    5512:	77 1f       	adc	r23, r23
    5514:	8a 95       	dec	r24
    5516:	e2 f7       	brpl	.-8      	; 0x5510 <__vector_29+0x966>
    5518:	60 93 05 01 	sts	0x0105, r22	; 0x800105 <__TEXT_REGION_LENGTH__+0x7c0105>
    551c:	90 91 c9 02 	lds	r25, 0x02C9	; 0x8002c9 <hardwareRevision>
						}

						if(hardwareRevision == HW_REV_3_0_1) {
    5520:	91 30       	cpi	r25, 0x01	; 1
    5522:	09 f4       	brne	.+2      	; 0x5526 <__vector_29+0x97c>
    5524:	62 c0       	rjmp	.+196    	; 0x55ea <__vector_29+0xa40>
							PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
						}

						if(hardwareRevision == HW_REV_3_1) {
    5526:	92 30       	cpi	r25, 0x02	; 2
    5528:	09 f0       	breq	.+2      	; 0x552c <__vector_29+0x982>
    552a:	ed cb       	rjmp	.-2086   	; 0x4d06 <__vector_29+0x15c>
							PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
    552c:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <__TEXT_REGION_LENGTH__+0x7c0105>
    5530:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <currentProx>
    5534:	90 e0       	ldi	r25, 0x00	; 0
    5536:	40 97       	sbiw	r24, 0x10	; 16
    5538:	95 95       	asr	r25
    553a:	87 95       	ror	r24
    553c:	21 e0       	ldi	r18, 0x01	; 1
    553e:	30 e0       	ldi	r19, 0x00	; 0
    5540:	b9 01       	movw	r22, r18
    5542:	02 c0       	rjmp	.+4      	; 0x5548 <__vector_29+0x99e>
    5544:	66 0f       	add	r22, r22
    5546:	77 1f       	adc	r23, r23
    5548:	8a 95       	dec	r24
    554a:	e2 f7       	brpl	.-8      	; 0x5544 <__vector_29+0x99a>
    554c:	cb 01       	movw	r24, r22
    554e:	80 95       	com	r24
    5550:	84 23       	and	r24, r20
    5552:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x7c0105>
    5556:	d7 cb       	rjmp	.-2130   	; 0x4d06 <__vector_29+0x15c>
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
						}
					} else {
						irCommTxPulseState = 0;
    5558:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <irCommTxPulseState>
						PORTA = 0x00;
    555c:	12 b8       	out	0x02, r1	; 2
    555e:	59 ce       	rjmp	.-846    	; 0x5212 <__vector_29+0x668>
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
						}
					} else {
						irCommTxPulseState = 0;
    5560:	10 92 57 02 	sts	0x0257, r1	; 0x800257 <irCommTxPulseState>
						PORTA = 0x00;
    5564:	12 b8       	out	0x02, r1	; 2
    5566:	2b ce       	rjmp	.-938    	; 0x51be <__vector_29+0x614>
			case 10:
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    5568:	81 30       	cpi	r24, 0x01	; 1
    556a:	09 f4       	brne	.+2      	; 0x556e <__vector_29+0x9c4>
    556c:	b0 c0       	rjmp	.+352    	; 0x56ce <__vector_29+0xb24>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    556e:	85 e0       	ldi	r24, 0x05	; 5
    5570:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <adcSaveDataTo>
    5574:	c9 ce       	rjmp	.-622    	; 0x5308 <__vector_29+0x75e>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    5576:	84 e0       	ldi	r24, 0x04	; 4
    5578:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <adcSaveDataTo>
    557c:	ed cd       	rjmp	.-1062   	; 0x5158 <__vector_29+0x5ae>

			case 11:
				currentAdChannel = 0;	// prox0
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    557e:	81 30       	cpi	r24, 0x01	; 1
    5580:	09 f4       	brne	.+2      	; 0x5584 <__vector_29+0x9da>
    5582:	4b c0       	rjmp	.+150    	; 0x561a <__vector_29+0xa70>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    5584:	85 e0       	ldi	r24, 0x05	; 5
    5586:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <adcSaveDataTo>
    558a:	f2 ce       	rjmp	.-540    	; 0x5370 <__vector_29+0x7c6>
			case 8:
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
    558c:	81 30       	cpi	r24, 0x01	; 1
    558e:	09 f4       	brne	.+2      	; 0x5592 <__vector_29+0x9e8>
    5590:	9a c0       	rjmp	.+308    	; 0x56c6 <__vector_29+0xb1c>
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    5592:	85 e0       	ldi	r24, 0x05	; 5
    5594:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <adcSaveDataTo>
    5598:	fd ce       	rjmp	.-518    	; 0x5394 <__vector_29+0x7ea>
			case 9:
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
    559a:	81 30       	cpi	r24, 0x01	; 1
    559c:	09 f4       	brne	.+2      	; 0x55a0 <__vector_29+0x9f6>
    559e:	9b c0       	rjmp	.+310    	; 0x56d6 <__vector_29+0xb2c>
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
				} else {
					adcSaveDataTo = SKIP_SAMPLE;
    55a0:	85 e0       	ldi	r24, 0x05	; 5
    55a2:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <adcSaveDataTo>
    55a6:	d7 ce       	rjmp	.-594    	; 0x5356 <__vector_29+0x7ac>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    55a8:	82 e0       	ldi	r24, 0x02	; 2
    55aa:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <adcSaveDataTo>
    55ae:	3e cc       	rjmp	.-1924   	; 0x4e2c <__vector_29+0x282>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    55b0:	82 e0       	ldi	r24, 0x02	; 2
    55b2:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <adcSaveDataTo>
    55b6:	10 cf       	rjmp	.-480    	; 0x53d8 <__vector_29+0x82e>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    55b8:	84 e0       	ldi	r24, 0x04	; 4
    55ba:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <adcSaveDataTo>
    55be:	1f cf       	rjmp	.-450    	; 0x53fe <__vector_29+0x854>
				currentAdChannel = currentProx>>1;				// select the channel to sample after next interrupt (in which the adc register is updated with the new channel)
																// currentProx goes from 0 to 23, currentAdChannel from 0 to 11
				if(rightChannelPhase == ACTIVE_PHASE) {			// select where to save the data that we're sampling
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    55c0:	82 e0       	ldi	r24, 0x02	; 2
    55c2:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <adcSaveDataTo>
    55c6:	2b cf       	rjmp	.-426    	; 0x541e <__vector_29+0x874>
				if(irCommRxBitSkipped < 254) {	// safety check
					irCommRxBitSkipped++;
				}
				irCommRxWindowSamples++;
				if(irCommState==IRCOMM_RX_SYNC_SIGNAL) {
					irCommRxWindowSamples = 0;
    55c8:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <irCommRxWindowSamples>
					if(irCommRxBitSkipped >= irCommShiftCount) {
    55cc:	80 91 60 02 	lds	r24, 0x0260	; 0x800260 <irCommShiftCount>
    55d0:	98 17       	cp	r25, r24
    55d2:	08 f4       	brcc	.+2      	; 0x55d6 <__vector_29+0xa2c>
    55d4:	ad ce       	rjmp	.-678    	; 0x5330 <__vector_29+0x786>
						irCommState = IRCOMM_RX_WAITING_BIT;
    55d6:	85 e0       	ldi	r24, 0x05	; 5
    55d8:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <irCommState>
    55dc:	a9 ce       	rjmp	.-686    	; 0x5330 <__vector_29+0x786>
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
    55de:	85 e5       	ldi	r24, 0x55	; 85
    55e0:	82 b9       	out	0x02, r24	; 2
    55e2:	17 ce       	rjmp	.-978    	; 0x5212 <__vector_29+0x668>
						//PORTA = 0x01;
						//PORTA = irCommTxSensorMask;
						if(irCommTxSensorGroup==0) {
							PORTA = 0xAA;
						} else {
							PORTA = 0x55;
    55e4:	85 e5       	ldi	r24, 0x55	; 85
    55e6:	82 b9       	out	0x02, r24	; 2
    55e8:	ea cd       	rjmp	.-1068   	; 0x51be <__vector_29+0x614>
						if(hardwareRevision == HW_REV_3_0) {
							PORTJ = (1 << ((currentProx-16)>>1));	// pulse on
						}

						if(hardwareRevision == HW_REV_3_0_1) {
							PORTJ &= ~(1 << ((currentProx-16)>>1));	// pulse on (inverse logic)
    55ea:	40 91 05 01 	lds	r20, 0x0105	; 0x800105 <__TEXT_REGION_LENGTH__+0x7c0105>
    55ee:	80 91 e3 03 	lds	r24, 0x03E3	; 0x8003e3 <currentProx>
    55f2:	90 e0       	ldi	r25, 0x00	; 0
    55f4:	40 97       	sbiw	r24, 0x10	; 16
    55f6:	95 95       	asr	r25
    55f8:	87 95       	ror	r24
    55fa:	21 e0       	ldi	r18, 0x01	; 1
    55fc:	30 e0       	ldi	r19, 0x00	; 0
    55fe:	d9 01       	movw	r26, r18
    5600:	02 c0       	rjmp	.+4      	; 0x5606 <__vector_29+0xa5c>
    5602:	aa 0f       	add	r26, r26
    5604:	bb 1f       	adc	r27, r27
    5606:	8a 95       	dec	r24
    5608:	e2 f7       	brpl	.-8      	; 0x5602 <__vector_29+0xa58>
    560a:	cd 01       	movw	r24, r26
    560c:	80 95       	com	r24
    560e:	84 23       	and	r24, r20
    5610:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <__TEXT_REGION_LENGTH__+0x7c0105>
    5614:	90 91 c9 02 	lds	r25, 0x02C9	; 0x8002c9 <hardwareRevision>
    5618:	86 cf       	rjmp	.-244    	; 0x5526 <__vector_29+0x97c>
			case 11:
				currentAdChannel = 0;	// prox0
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    561a:	82 e0       	ldi	r24, 0x02	; 2
    561c:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <adcSaveDataTo>
    5620:	a7 ce       	rjmp	.-690    	; 0x5370 <__vector_29+0x7c6>
						irCommState = IRCOMM_RX_WAITING_BIT;
					}
				}

				if(irCommRxWindowSamples == IRCOMM_SAMPLING_WINDOW) {					
					irCommRxWindowSamples = 0;
    5622:	10 92 61 02 	sts	0x0261, r1	; 0x800261 <irCommRxWindowSamples>
					irCommTempPointer = irCommProxValuesCurr;
    5626:	80 91 32 12 	lds	r24, 0x1232	; 0x801232 <irCommProxValuesCurr>
    562a:	90 91 33 12 	lds	r25, 0x1233	; 0x801233 <irCommProxValuesCurr+0x1>
					irCommProxValuesCurr = irCommProxValuesAdc;
    562e:	20 91 4e 12 	lds	r18, 0x124E	; 0x80124e <irCommProxValuesAdc>
    5632:	30 91 4f 12 	lds	r19, 0x124F	; 0x80124f <irCommProxValuesAdc+0x1>
    5636:	30 93 33 12 	sts	0x1233, r19	; 0x801233 <irCommProxValuesCurr+0x1>
    563a:	20 93 32 12 	sts	0x1232, r18	; 0x801232 <irCommProxValuesCurr>
					irCommProxValuesAdc = irCommTempPointer;
    563e:	90 93 4f 12 	sts	0x124F, r25	; 0x80124f <irCommProxValuesAdc+0x1>
    5642:	80 93 4e 12 	sts	0x124E, r24	; 0x80124e <irCommProxValuesAdc>
					irCommTempPointer = irCommMaxSensorValueCurr;
    5646:	e0 91 2f 0f 	lds	r30, 0x0F2F	; 0x800f2f <irCommMaxSensorValueCurr>
    564a:	f0 91 30 0f 	lds	r31, 0x0F30	; 0x800f30 <irCommMaxSensorValueCurr+0x1>
					irCommMaxSensorValueCurr = irCommMaxSensorValueAdc;
    564e:	80 91 1c 15 	lds	r24, 0x151C	; 0x80151c <irCommMaxSensorValueAdc>
    5652:	90 91 1d 15 	lds	r25, 0x151D	; 0x80151d <irCommMaxSensorValueAdc+0x1>
    5656:	90 93 30 0f 	sts	0x0F30, r25	; 0x800f30 <irCommMaxSensorValueCurr+0x1>
    565a:	80 93 2f 0f 	sts	0x0F2F, r24	; 0x800f2f <irCommMaxSensorValueCurr>
					irCommMaxSensorValueAdc = irCommTempPointer;
    565e:	f0 93 1d 15 	sts	0x151D, r31	; 0x80151d <irCommMaxSensorValueAdc+0x1>
    5662:	e0 93 1c 15 	sts	0x151C, r30	; 0x80151c <irCommMaxSensorValueAdc>
					irCommTempPointer = irCommMinSensorValueCurr;
    5666:	80 91 1b 0f 	lds	r24, 0x0F1B	; 0x800f1b <irCommMinSensorValueCurr>
    566a:	90 91 1c 0f 	lds	r25, 0x0F1C	; 0x800f1c <irCommMinSensorValueCurr+0x1>
    566e:	90 93 5e 15 	sts	0x155E, r25	; 0x80155e <irCommTempPointer+0x1>
    5672:	80 93 5d 15 	sts	0x155D, r24	; 0x80155d <irCommTempPointer>
					irCommMinSensorValueCurr = irCommMinSensorValueAdc;
    5676:	20 91 ac 0f 	lds	r18, 0x0FAC	; 0x800fac <irCommMinSensorValueAdc>
    567a:	30 91 ad 0f 	lds	r19, 0x0FAD	; 0x800fad <irCommMinSensorValueAdc+0x1>
    567e:	30 93 1c 0f 	sts	0x0F1C, r19	; 0x800f1c <irCommMinSensorValueCurr+0x1>
    5682:	20 93 1b 0f 	sts	0x0F1B, r18	; 0x800f1b <irCommMinSensorValueCurr>
					irCommMinSensorValueAdc = irCommTempPointer;
    5686:	90 93 ad 0f 	sts	0x0FAD, r25	; 0x800fad <irCommMinSensorValueAdc+0x1>
    568a:	80 93 ac 0f 	sts	0x0FAC, r24	; 0x800fac <irCommMinSensorValueAdc>
					memset(irCommMaxSensorValueAdc, 0x00, 16);
    568e:	80 e1       	ldi	r24, 0x10	; 16
    5690:	df 01       	movw	r26, r30
    5692:	1d 92       	st	X+, r1
    5694:	8a 95       	dec	r24
    5696:	e9 f7       	brne	.-6      	; 0x5692 <__vector_29+0xae8>
					memset(irCommMinSensorValueAdc, 0xFF, 16);
    5698:	40 e1       	ldi	r20, 0x10	; 16
    569a:	50 e0       	ldi	r21, 0x00	; 0
    569c:	6f ef       	ldi	r22, 0xFF	; 255
    569e:	70 e0       	ldi	r23, 0x00	; 0
    56a0:	80 91 ac 0f 	lds	r24, 0x0FAC	; 0x800fac <irCommMinSensorValueAdc>
    56a4:	90 91 ad 0f 	lds	r25, 0x0FAD	; 0x800fad <irCommMinSensorValueAdc+0x1>
    56a8:	0e 94 1e 52 	call	0xa43c	; 0xa43c <memset>
					if(irCommState == IRCOMM_RX_IDLE_STATE) {
    56ac:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <irCommState>
    56b0:	81 30       	cpi	r24, 0x01	; 1
    56b2:	61 f1       	breq	.+88     	; 0x570c <__vector_29+0xb62>
						irCommRxBitSkipped = 0;
					}
					//if(irCommState == IRCOMM_RX_SYNC_SIGNAL) {
					//	irCommSecondBitSkipped = 1;	// the second start bit is just sampled, skip it and sync with the received signal						
					//}
					if(irCommState == IRCOMM_RX_WAITING_BIT) {
    56b4:	80 91 64 02 	lds	r24, 0x0264	; 0x800264 <irCommState>
    56b8:	85 30       	cpi	r24, 0x05	; 5
    56ba:	09 f0       	breq	.+2      	; 0x56be <__vector_29+0xb14>
    56bc:	39 ce       	rjmp	.-910    	; 0x5330 <__vector_29+0x786>
						irCommState = IRCOMM_RX_READ_BIT;
    56be:	86 e0       	ldi	r24, 0x06	; 6
    56c0:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <irCommState>
    56c4:	35 ce       	rjmp	.-918    	; 0x5330 <__vector_29+0x786>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    56c6:	84 e0       	ldi	r24, 0x04	; 4
    56c8:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <adcSaveDataTo>
    56cc:	63 ce       	rjmp	.-826    	; 0x5394 <__vector_29+0x7ea>
				currentAdChannel = currentMotRightChannel;
				rightChannelPhase = rightMotorPhase;
				if(leftChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_CURRENT;
				} else if(leftChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_LEFT_MOTOR_VEL;
    56ce:	84 e0       	ldi	r24, 0x04	; 4
    56d0:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <adcSaveDataTo>
    56d4:	19 ce       	rjmp	.-974    	; 0x5308 <__vector_29+0x75e>
				currentAdChannel = currentMotLeftChannel;
				leftChannelPhase = leftMotorPhase;
				if(rightChannelPhase == ACTIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_CURRENT;
				} else if(rightChannelPhase == PASSIVE_PHASE) {
					adcSaveDataTo = SAVE_TO_RIGHT_MOTOR_VEL;
    56d6:	82 e0       	ldi	r24, 0x02	; 2
    56d8:	80 93 4e 03 	sts	0x034E, r24	; 0x80034e <adcSaveDataTo>
    56dc:	3c ce       	rjmp	.-904    	; 0x5356 <__vector_29+0x7ac>
					}
					irCommTxSwitchCounter++;
					if(irCommTxSwitchCounter == irCommTxSwitchCount) {
						irCommTxBitCount++;
						if(irCommTxBitCount==12) {
							irCommState = IRCOMM_TX_IDLE_STATE;
    56de:	81 e0       	ldi	r24, 0x01	; 1
    56e0:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <irCommState>
							irCommTxByteEnqueued = 0;
    56e4:	10 92 5d 02 	sts	0x025D, r1	; 0x80025d <irCommTxByteEnqueued>
							adcSamplingState = 0;
    56e8:	10 92 4d 03 	sts	0x034D, r1	; 0x80034d <adcSamplingState>
							irCommMode=IRCOMM_MODE_SENSORS_SAMPLING;
    56ec:	10 92 65 02 	sts	0x0265, r1	; 0x800265 <irCommMode>
							irCommInitReceiver();
    56f0:	0e 94 d2 4c 	call	0x99a4	; 0x99a4 <irCommInitReceiver>
							PORTA = 0x00;
    56f4:	12 b8       	out	0x02, r1	; 2
							irCommTxLastTransmissionTime = getTime100MicroSec();
    56f6:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    56fa:	60 93 59 02 	sts	0x0259, r22	; 0x800259 <irCommTxLastTransmissionTime>
    56fe:	70 93 5a 02 	sts	0x025A, r23	; 0x80025a <irCommTxLastTransmissionTime+0x1>
    5702:	80 93 5b 02 	sts	0x025B, r24	; 0x80025b <irCommTxLastTransmissionTime+0x2>
    5706:	90 93 5c 02 	sts	0x025C, r25	; 0x80025c <irCommTxLastTransmissionTime+0x3>
    570a:	6d cd       	rjmp	.-1318   	; 0x51e6 <__vector_29+0x63c>
					irCommMinSensorValueCurr = irCommMinSensorValueAdc;
					irCommMinSensorValueAdc = irCommTempPointer;
					memset(irCommMaxSensorValueAdc, 0x00, 16);
					memset(irCommMinSensorValueAdc, 0xFF, 16);
					if(irCommState == IRCOMM_RX_IDLE_STATE) {
						irCommState = IRCOMM_RX_MAX_SENSOR_STATE;
    570c:	82 e0       	ldi	r24, 0x02	; 2
    570e:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <irCommState>
						irCommRxBitSkipped = 0;
    5712:	10 92 5f 02 	sts	0x025F, r1	; 0x80025f <irCommRxBitSkipped>
    5716:	ce cf       	rjmp	.-100    	; 0x56b4 <__vector_29+0xb0a>
					
					if(proximityResult[currentProx>>1] < PHASE1) {

						proximityResultLinear[currentProx>>1] = proximityResult[currentProx>>1];

					} else if(((proximityResult[currentProx>>1]+60)>>1) < PHASE2) {
    5718:	bc 01       	movw	r22, r24
    571a:	64 5c       	subi	r22, 0xC4	; 196
    571c:	7f 4f       	sbci	r23, 0xFF	; 255
    571e:	60 3f       	cpi	r22, 0xF0	; 240
    5720:	71 05       	cpc	r23, r1
    5722:	54 f4       	brge	.+20     	; 0x5738 <__vector_29+0xb8e>
				
						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-60)>>1) + PHASE1;
    5724:	fa 01       	movw	r30, r20
    5726:	e9 5c       	subi	r30, 0xC9	; 201
    5728:	fc 4f       	sbci	r31, 0xFC	; 252
    572a:	cc 97       	sbiw	r24, 0x3c	; 60
    572c:	95 95       	asr	r25
    572e:	87 95       	ror	r24
    5730:	cc 96       	adiw	r24, 0x3c	; 60
    5732:	91 83       	std	Z+1, r25	; 0x01
    5734:	80 83       	st	Z, r24
    5736:	4b cc       	rjmp	.-1898   	; 0x4fce <__vector_29+0x424>

					} else if(((proximityResult[currentProx>>1]+300)>>2) < PHASE3) {
    5738:	bc 01       	movw	r22, r24
    573a:	64 5d       	subi	r22, 0xD4	; 212
    573c:	7e 4f       	sbci	r23, 0xFE	; 254
    573e:	60 3d       	cpi	r22, 0xD0	; 208
    5740:	72 40       	sbci	r23, 0x02	; 2
    5742:	0c f0       	brlt	.+2      	; 0x5746 <__vector_29+0xb9c>
    5744:	35 cc       	rjmp	.-1942   	; 0x4fb0 <__vector_29+0x406>

						proximityResultLinear[currentProx>>1] = ((proximityResult[currentProx>>1]-180)>>2) + PHASE2;
    5746:	fa 01       	movw	r30, r20
    5748:	e9 5c       	subi	r30, 0xC9	; 201
    574a:	fc 4f       	sbci	r31, 0xFC	; 252
    574c:	84 5b       	subi	r24, 0xB4	; 180
    574e:	91 09       	sbc	r25, r1
    5750:	95 95       	asr	r25
    5752:	87 95       	ror	r24
    5754:	95 95       	asr	r25
    5756:	87 95       	ror	r24
    5758:	88 58       	subi	r24, 0x88	; 136
    575a:	9f 4f       	sbci	r25, 0xFF	; 255
    575c:	91 83       	std	Z+1, r25	; 0x01
    575e:	80 83       	st	Z, r24
    5760:	36 cc       	rjmp	.-1940   	; 0x4fce <__vector_29+0x424>

00005762 <handleSoftAcceleration.part.0>:
			}

		}
	}

}
    5762:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <pwm_right_desired>
    5766:	90 91 1a 03 	lds	r25, 0x031A	; 0x80031a <pwm_right_desired+0x1>
    576a:	00 97       	sbiw	r24, 0x00	; 0
    576c:	41 f1       	breq	.+80     	; 0x57be <handleSoftAcceleration.part.0+0x5c>
    576e:	20 91 15 03 	lds	r18, 0x0315	; 0x800315 <pwm_intermediate_right_desired>
    5772:	30 91 16 03 	lds	r19, 0x0316	; 0x800316 <pwm_intermediate_right_desired+0x1>
    5776:	82 9f       	mul	r24, r18
    5778:	a0 01       	movw	r20, r0
    577a:	83 9f       	mul	r24, r19
    577c:	50 0d       	add	r21, r0
    577e:	92 9f       	mul	r25, r18
    5780:	50 0d       	add	r21, r0
    5782:	11 24       	eor	r1, r1
    5784:	57 fd       	sbrc	r21, 7
    5786:	1b c0       	rjmp	.+54     	; 0x57be <handleSoftAcceleration.part.0+0x5c>
    5788:	28 17       	cp	r18, r24
    578a:	39 07       	cpc	r19, r25
    578c:	0c f0       	brlt	.+2      	; 0x5790 <handleSoftAcceleration.part.0+0x2e>
    578e:	4c c0       	rjmp	.+152    	; 0x5828 <handleSoftAcceleration.part.0+0xc6>
    5790:	40 91 07 02 	lds	r20, 0x0207	; 0x800207 <speedStep>
    5794:	24 0f       	add	r18, r20
    5796:	31 1d       	adc	r19, r1
    5798:	82 17       	cp	r24, r18
    579a:	93 07       	cpc	r25, r19
    579c:	0c f0       	brlt	.+2      	; 0x57a0 <handleSoftAcceleration.part.0+0x3e>
    579e:	4f c0       	rjmp	.+158    	; 0x583e <handleSoftAcceleration.part.0+0xdc>
    57a0:	90 93 16 03 	sts	0x0316, r25	; 0x800316 <pwm_intermediate_right_desired+0x1>
    57a4:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <pwm_intermediate_right_desired>
    57a8:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <pwm_left_desired>
    57ac:	90 91 18 03 	lds	r25, 0x0318	; 0x800318 <pwm_left_desired+0x1>
    57b0:	00 97       	sbiw	r24, 0x00	; 0
    57b2:	79 f4       	brne	.+30     	; 0x57d2 <handleSoftAcceleration.part.0+0x70>
    57b4:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <pwm_intermediate_left_desired+0x1>
    57b8:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <pwm_intermediate_left_desired>
    57bc:	08 95       	ret
    57be:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <pwm_intermediate_right_desired+0x1>
    57c2:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <pwm_intermediate_right_desired>
    57c6:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <pwm_left_desired>
    57ca:	90 91 18 03 	lds	r25, 0x0318	; 0x800318 <pwm_left_desired+0x1>
    57ce:	00 97       	sbiw	r24, 0x00	; 0
    57d0:	89 f3       	breq	.-30     	; 0x57b4 <handleSoftAcceleration.part.0+0x52>
    57d2:	20 91 13 03 	lds	r18, 0x0313	; 0x800313 <pwm_intermediate_left_desired>
    57d6:	30 91 14 03 	lds	r19, 0x0314	; 0x800314 <pwm_intermediate_left_desired+0x1>
    57da:	82 9f       	mul	r24, r18
    57dc:	a0 01       	movw	r20, r0
    57de:	83 9f       	mul	r24, r19
    57e0:	50 0d       	add	r21, r0
    57e2:	92 9f       	mul	r25, r18
    57e4:	50 0d       	add	r21, r0
    57e6:	11 24       	eor	r1, r1
    57e8:	57 fd       	sbrc	r21, 7
    57ea:	e4 cf       	rjmp	.-56     	; 0x57b4 <handleSoftAcceleration.part.0+0x52>
    57ec:	28 17       	cp	r18, r24
    57ee:	39 07       	cpc	r19, r25
    57f0:	64 f4       	brge	.+24     	; 0x580a <handleSoftAcceleration.part.0+0xa8>
    57f2:	40 91 07 02 	lds	r20, 0x0207	; 0x800207 <speedStep>
    57f6:	24 0f       	add	r18, r20
    57f8:	31 1d       	adc	r19, r1
    57fa:	82 17       	cp	r24, r18
    57fc:	93 07       	cpc	r25, r19
    57fe:	7c f4       	brge	.+30     	; 0x581e <handleSoftAcceleration.part.0+0xbc>
    5800:	90 93 14 03 	sts	0x0314, r25	; 0x800314 <pwm_intermediate_left_desired+0x1>
    5804:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <pwm_intermediate_left_desired>
    5808:	08 95       	ret
    580a:	82 17       	cp	r24, r18
    580c:	93 07       	cpc	r25, r19
    580e:	e4 f7       	brge	.-8      	; 0x5808 <handleSoftAcceleration.part.0+0xa6>
    5810:	40 91 07 02 	lds	r20, 0x0207	; 0x800207 <speedStep>
    5814:	24 1b       	sub	r18, r20
    5816:	31 09       	sbc	r19, r1
    5818:	28 17       	cp	r18, r24
    581a:	39 07       	cpc	r19, r25
    581c:	8c f3       	brlt	.-30     	; 0x5800 <handleSoftAcceleration.part.0+0x9e>
    581e:	30 93 14 03 	sts	0x0314, r19	; 0x800314 <pwm_intermediate_left_desired+0x1>
    5822:	20 93 13 03 	sts	0x0313, r18	; 0x800313 <pwm_intermediate_left_desired>
    5826:	08 95       	ret
    5828:	82 17       	cp	r24, r18
    582a:	93 07       	cpc	r25, r19
    582c:	64 f6       	brge	.-104    	; 0x57c6 <handleSoftAcceleration.part.0+0x64>
    582e:	40 91 07 02 	lds	r20, 0x0207	; 0x800207 <speedStep>
    5832:	24 1b       	sub	r18, r20
    5834:	31 09       	sbc	r19, r1
    5836:	28 17       	cp	r18, r24
    5838:	39 07       	cpc	r19, r25
    583a:	0c f4       	brge	.+2      	; 0x583e <handleSoftAcceleration.part.0+0xdc>
    583c:	b1 cf       	rjmp	.-158    	; 0x57a0 <handleSoftAcceleration.part.0+0x3e>
    583e:	30 93 16 03 	sts	0x0316, r19	; 0x800316 <pwm_intermediate_right_desired+0x1>
    5842:	20 93 15 03 	sts	0x0315, r18	; 0x800315 <pwm_intermediate_right_desired>
    5846:	bf cf       	rjmp	.-130    	; 0x57c6 <handleSoftAcceleration.part.0+0x64>

00005848 <initMotors>:
    5848:	0f 93       	push	r16
    584a:	1f 93       	push	r17
    584c:	cf 93       	push	r28
    584e:	df 93       	push	r29
    5850:	e0 e9       	ldi	r30, 0x90	; 144
    5852:	f0 e0       	ldi	r31, 0x00	; 0
    5854:	10 82       	st	Z, r1
    5856:	41 e9       	ldi	r20, 0x91	; 145
    5858:	50 e0       	ldi	r21, 0x00	; 0
    585a:	da 01       	movw	r26, r20
    585c:	1c 92       	st	X, r1
    585e:	21 e7       	ldi	r18, 0x71	; 113
    5860:	30 e0       	ldi	r19, 0x00	; 0
    5862:	e9 01       	movw	r28, r18
    5864:	18 82       	st	Y, r1
    5866:	a0 ea       	ldi	r26, 0xA0	; 160
    5868:	b0 e0       	ldi	r27, 0x00	; 0
    586a:	1c 92       	st	X, r1
    586c:	81 ea       	ldi	r24, 0xA1	; 161
    586e:	90 e0       	ldi	r25, 0x00	; 0
    5870:	ec 01       	movw	r28, r24
    5872:	18 82       	st	Y, r1
    5874:	02 e7       	ldi	r16, 0x72	; 114
    5876:	10 e0       	ldi	r17, 0x00	; 0
    5878:	e8 01       	movw	r28, r16
    587a:	18 82       	st	Y, r1
    587c:	60 81       	ld	r22, Z
    587e:	63 68       	ori	r22, 0x83	; 131
    5880:	60 83       	st	Z, r22
    5882:	60 81       	ld	r22, Z
    5884:	63 60       	ori	r22, 0x03	; 3
    5886:	60 83       	st	Z, r22
    5888:	ea 01       	movw	r28, r20
    588a:	68 81       	ld	r22, Y
    588c:	6b 60       	ori	r22, 0x0B	; 11
    588e:	68 83       	st	Y, r22
    5890:	40 91 1d 03 	lds	r20, 0x031D	; 0x80031d <pwm_right>
    5894:	50 91 1e 03 	lds	r21, 0x031E	; 0x80031e <pwm_right+0x1>
    5898:	50 93 99 00 	sts	0x0099, r21	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
    589c:	40 93 98 00 	sts	0x0098, r20	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
    58a0:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7c009b>
    58a4:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <__TEXT_REGION_LENGTH__+0x7c009a>
    58a8:	e9 01       	movw	r28, r18
    58aa:	48 81       	ld	r20, Y
    58ac:	41 60       	ori	r20, 0x01	; 1
    58ae:	48 83       	st	Y, r20
    58b0:	20 81       	ld	r18, Z
    58b2:	2f 75       	andi	r18, 0x5F	; 95
    58b4:	20 83       	st	Z, r18
    58b6:	2e b1       	in	r18, 0x0e	; 14
    58b8:	27 7e       	andi	r18, 0xE7	; 231
    58ba:	2e b9       	out	0x0e, r18	; 14
    58bc:	2c 91       	ld	r18, X
    58be:	23 68       	ori	r18, 0x83	; 131
    58c0:	2c 93       	st	X, r18
    58c2:	fc 01       	movw	r30, r24
    58c4:	20 81       	ld	r18, Z
    58c6:	2b 60       	ori	r18, 0x0B	; 11
    58c8:	20 83       	st	Z, r18
    58ca:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <pwm_left>
    58ce:	90 91 1c 03 	lds	r25, 0x031C	; 0x80031c <pwm_left+0x1>
    58d2:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
    58d6:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
    58da:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7c00ab>
    58de:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7c00aa>
    58e2:	e8 01       	movw	r28, r16
    58e4:	88 81       	ld	r24, Y
    58e6:	81 60       	ori	r24, 0x01	; 1
    58e8:	88 83       	st	Y, r24
    58ea:	8c 91       	ld	r24, X
    58ec:	8f 75       	andi	r24, 0x5F	; 95
    58ee:	8c 93       	st	X, r24
    58f0:	e2 e0       	ldi	r30, 0x02	; 2
    58f2:	f1 e0       	ldi	r31, 0x01	; 1
    58f4:	80 81       	ld	r24, Z
    58f6:	87 7e       	andi	r24, 0xE7	; 231
    58f8:	80 83       	st	Z, r24
    58fa:	df 91       	pop	r29
    58fc:	cf 91       	pop	r28
    58fe:	1f 91       	pop	r17
    5900:	0f 91       	pop	r16
    5902:	08 95       	ret

00005904 <handleMotorsWithNoController>:
    5904:	af 92       	push	r10
    5906:	bf 92       	push	r11
    5908:	cf 92       	push	r12
    590a:	df 92       	push	r13
    590c:	ef 92       	push	r14
    590e:	ff 92       	push	r15
    5910:	0f 93       	push	r16
    5912:	1f 93       	push	r17
    5914:	cf 93       	push	r28
    5916:	df 93       	push	r29
    5918:	80 91 53 0f 	lds	r24, 0x0F53	; 0x800f53 <calibrateOdomFlag>
    591c:	88 23       	and	r24, r24
    591e:	09 f4       	brne	.+2      	; 0x5922 <handleMotorsWithNoController+0x1e>
    5920:	c1 c0       	rjmp	.+386    	; 0x5aa4 <handleMotorsWithNoController+0x1a0>
    5922:	c0 91 15 03 	lds	r28, 0x0315	; 0x800315 <pwm_intermediate_right_desired>
    5926:	d0 91 16 03 	lds	r29, 0x0316	; 0x800316 <pwm_intermediate_right_desired+0x1>
    592a:	00 91 13 03 	lds	r16, 0x0313	; 0x800313 <pwm_intermediate_left_desired>
    592e:	10 91 14 03 	lds	r17, 0x0314	; 0x800314 <pwm_intermediate_left_desired+0x1>
    5932:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <compute_left_vel>
    5936:	88 23       	and	r24, r24
    5938:	c1 f1       	breq	.+112    	; 0x59aa <handleMotorsWithNoController+0xa6>
    593a:	60 91 25 03 	lds	r22, 0x0325	; 0x800325 <left_vel_sum>
    593e:	70 91 26 03 	lds	r23, 0x0326	; 0x800326 <left_vel_sum+0x1>
    5942:	76 95       	lsr	r23
    5944:	67 95       	ror	r22
    5946:	76 95       	lsr	r23
    5948:	67 95       	ror	r22
    594a:	70 93 22 03 	sts	0x0322, r23	; 0x800322 <last_left_vel+0x1>
    594e:	60 93 21 03 	sts	0x0321, r22	; 0x800321 <last_left_vel>
    5952:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <compute_left_vel>
    5956:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <left_vel_sum+0x1>
    595a:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <left_vel_sum>
    595e:	80 91 17 03 	lds	r24, 0x0317	; 0x800317 <pwm_left_desired>
    5962:	90 91 18 03 	lds	r25, 0x0318	; 0x800318 <pwm_left_desired+0x1>
    5966:	75 95       	asr	r23
    5968:	67 95       	ror	r22
    596a:	75 95       	asr	r23
    596c:	67 95       	ror	r22
    596e:	75 95       	asr	r23
    5970:	67 95       	ror	r22
    5972:	97 fd       	sbrc	r25, 7
    5974:	1c c1       	rjmp	.+568    	; 0x5bae <handleMotorsWithNoController+0x2aa>
    5976:	07 2e       	mov	r0, r23
    5978:	00 0c       	add	r0, r0
    597a:	88 0b       	sbc	r24, r24
    597c:	99 0b       	sbc	r25, r25
    597e:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    5982:	9b 01       	movw	r18, r22
    5984:	ac 01       	movw	r20, r24
    5986:	60 91 2f 03 	lds	r22, 0x032F	; 0x80032f <leftMotSteps>
    598a:	70 91 30 03 	lds	r23, 0x0330	; 0x800330 <leftMotSteps+0x1>
    598e:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <leftMotSteps+0x2>
    5992:	90 91 32 03 	lds	r25, 0x0332	; 0x800332 <leftMotSteps+0x3>
    5996:	0e 94 db 4c 	call	0x99b6	; 0x99b6 <__addsf3>
    599a:	60 93 2f 03 	sts	0x032F, r22	; 0x80032f <leftMotSteps>
    599e:	70 93 30 03 	sts	0x0330, r23	; 0x800330 <leftMotSteps+0x1>
    59a2:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <leftMotSteps+0x2>
    59a6:	90 93 32 03 	sts	0x0332, r25	; 0x800332 <leftMotSteps+0x3>
    59aa:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <compute_right_vel>
    59ae:	88 23       	and	r24, r24
    59b0:	c1 f1       	breq	.+112    	; 0x5a22 <handleMotorsWithNoController+0x11e>
    59b2:	60 91 23 03 	lds	r22, 0x0323	; 0x800323 <right_vel_sum>
    59b6:	70 91 24 03 	lds	r23, 0x0324	; 0x800324 <right_vel_sum+0x1>
    59ba:	76 95       	lsr	r23
    59bc:	67 95       	ror	r22
    59be:	76 95       	lsr	r23
    59c0:	67 95       	ror	r22
    59c2:	70 93 20 03 	sts	0x0320, r23	; 0x800320 <last_right_vel+0x1>
    59c6:	60 93 1f 03 	sts	0x031F, r22	; 0x80031f <last_right_vel>
    59ca:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <compute_right_vel>
    59ce:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <right_vel_sum+0x1>
    59d2:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <right_vel_sum>
    59d6:	80 91 19 03 	lds	r24, 0x0319	; 0x800319 <pwm_right_desired>
    59da:	90 91 1a 03 	lds	r25, 0x031A	; 0x80031a <pwm_right_desired+0x1>
    59de:	75 95       	asr	r23
    59e0:	67 95       	ror	r22
    59e2:	75 95       	asr	r23
    59e4:	67 95       	ror	r22
    59e6:	75 95       	asr	r23
    59e8:	67 95       	ror	r22
    59ea:	97 fd       	sbrc	r25, 7
    59ec:	c5 c0       	rjmp	.+394    	; 0x5b78 <handleMotorsWithNoController+0x274>
    59ee:	07 2e       	mov	r0, r23
    59f0:	00 0c       	add	r0, r0
    59f2:	88 0b       	sbc	r24, r24
    59f4:	99 0b       	sbc	r25, r25
    59f6:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    59fa:	9b 01       	movw	r18, r22
    59fc:	ac 01       	movw	r20, r24
    59fe:	60 91 33 03 	lds	r22, 0x0333	; 0x800333 <rightMotSteps>
    5a02:	70 91 34 03 	lds	r23, 0x0334	; 0x800334 <rightMotSteps+0x1>
    5a06:	80 91 35 03 	lds	r24, 0x0335	; 0x800335 <rightMotSteps+0x2>
    5a0a:	90 91 36 03 	lds	r25, 0x0336	; 0x800336 <rightMotSteps+0x3>
    5a0e:	0e 94 db 4c 	call	0x99b6	; 0x99b6 <__addsf3>
    5a12:	60 93 33 03 	sts	0x0333, r22	; 0x800333 <rightMotSteps>
    5a16:	70 93 34 03 	sts	0x0334, r23	; 0x800334 <rightMotSteps+0x1>
    5a1a:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <rightMotSteps+0x2>
    5a1e:	90 93 36 03 	sts	0x0336, r25	; 0x800336 <rightMotSteps+0x3>
    5a22:	ce 01       	movw	r24, r28
    5a24:	88 0f       	add	r24, r24
    5a26:	99 1f       	adc	r25, r25
    5a28:	88 0f       	add	r24, r24
    5a2a:	99 1f       	adc	r25, r25
    5a2c:	8c 0f       	add	r24, r28
    5a2e:	9d 1f       	adc	r25, r29
    5a30:	90 93 06 03 	sts	0x0306, r25	; 0x800306 <pwm_right_working+0x1>
    5a34:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <pwm_right_working>
    5a38:	98 01       	movw	r18, r16
    5a3a:	22 0f       	add	r18, r18
    5a3c:	33 1f       	adc	r19, r19
    5a3e:	22 0f       	add	r18, r18
    5a40:	33 1f       	adc	r19, r19
    5a42:	20 0f       	add	r18, r16
    5a44:	31 1f       	adc	r19, r17
    5a46:	30 93 04 03 	sts	0x0304, r19	; 0x800304 <pwm_left_working+0x1>
    5a4a:	20 93 03 03 	sts	0x0303, r18	; 0x800303 <pwm_left_working>
    5a4e:	40 91 b5 02 	lds	r20, 0x02B5	; 0x8002b5 <obstacleAvoidanceEnabled>
    5a52:	41 11       	cpse	r20, r1
    5a54:	76 c0       	rjmp	.+236    	; 0x5b42 <handleMotorsWithNoController+0x23e>
    5a56:	30 93 1c 03 	sts	0x031C, r19	; 0x80031c <pwm_left+0x1>
    5a5a:	20 93 1b 03 	sts	0x031B, r18	; 0x80031b <pwm_left>
    5a5e:	90 93 1e 03 	sts	0x031E, r25	; 0x80031e <pwm_right+0x1>
    5a62:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <pwm_right>
    5a66:	18 16       	cp	r1, r24
    5a68:	19 06       	cpc	r1, r25
    5a6a:	0c f0       	brlt	.+2      	; 0x5a6e <handleMotorsWithNoController+0x16a>
    5a6c:	79 c0       	rjmp	.+242    	; 0x5b60 <handleMotorsWithNoController+0x25c>
    5a6e:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
    5a72:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
    5a76:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <pwm_left>
    5a7a:	90 91 1c 03 	lds	r25, 0x031C	; 0x80031c <pwm_left+0x1>
    5a7e:	18 16       	cp	r1, r24
    5a80:	19 06       	cpc	r1, r25
    5a82:	0c f0       	brlt	.+2      	; 0x5a86 <handleMotorsWithNoController+0x182>
    5a84:	52 c0       	rjmp	.+164    	; 0x5b2a <handleMotorsWithNoController+0x226>
    5a86:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
    5a8a:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
    5a8e:	df 91       	pop	r29
    5a90:	cf 91       	pop	r28
    5a92:	1f 91       	pop	r17
    5a94:	0f 91       	pop	r16
    5a96:	ff 90       	pop	r15
    5a98:	ef 90       	pop	r14
    5a9a:	df 90       	pop	r13
    5a9c:	cf 90       	pop	r12
    5a9e:	bf 90       	pop	r11
    5aa0:	af 90       	pop	r10
    5aa2:	08 95       	ret
    5aa4:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    5aa8:	dc 01       	movw	r26, r24
    5aaa:	cb 01       	movw	r24, r22
    5aac:	9c 01       	movw	r18, r24
    5aae:	ad 01       	movw	r20, r26
    5ab0:	60 e0       	ldi	r22, 0x00	; 0
    5ab2:	70 e0       	ldi	r23, 0x00	; 0
    5ab4:	80 e0       	ldi	r24, 0x00	; 0
    5ab6:	90 e0       	ldi	r25, 0x00	; 0
    5ab8:	a0 90 bc 02 	lds	r10, 0x02BC	; 0x8002bc <speedStepCounter>
    5abc:	b0 90 bd 02 	lds	r11, 0x02BD	; 0x8002bd <speedStepCounter+0x1>
    5ac0:	c0 90 be 02 	lds	r12, 0x02BE	; 0x8002be <speedStepCounter+0x2>
    5ac4:	d0 90 bf 02 	lds	r13, 0x02BF	; 0x8002bf <speedStepCounter+0x3>
    5ac8:	e0 90 c0 02 	lds	r14, 0x02C0	; 0x8002c0 <speedStepCounter+0x4>
    5acc:	f0 90 c1 02 	lds	r15, 0x02C1	; 0x8002c1 <speedStepCounter+0x5>
    5ad0:	00 91 c2 02 	lds	r16, 0x02C2	; 0x8002c2 <speedStepCounter+0x6>
    5ad4:	10 91 c3 02 	lds	r17, 0x02C3	; 0x8002c3 <speedStepCounter+0x7>
    5ad8:	0e 94 98 51 	call	0xa330	; 0xa330 <__subdi3>
    5adc:	2f 38       	cpi	r18, 0x8F	; 143
    5ade:	31 40       	sbci	r19, 0x01	; 1
    5ae0:	41 05       	cpc	r20, r1
    5ae2:	51 05       	cpc	r21, r1
    5ae4:	61 05       	cpc	r22, r1
    5ae6:	71 05       	cpc	r23, r1
    5ae8:	81 05       	cpc	r24, r1
    5aea:	91 05       	cpc	r25, r1
    5aec:	09 f0       	breq	.+2      	; 0x5af0 <handleMotorsWithNoController+0x1ec>
    5aee:	08 f4       	brcc	.+2      	; 0x5af2 <handleMotorsWithNoController+0x1ee>
    5af0:	18 cf       	rjmp	.-464    	; 0x5922 <handleMotorsWithNoController+0x1e>
    5af2:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    5af6:	dc 01       	movw	r26, r24
    5af8:	cb 01       	movw	r24, r22
    5afa:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <speedStepCounter>
    5afe:	90 93 bd 02 	sts	0x02BD, r25	; 0x8002bd <speedStepCounter+0x1>
    5b02:	a0 93 be 02 	sts	0x02BE, r26	; 0x8002be <speedStepCounter+0x2>
    5b06:	b0 93 bf 02 	sts	0x02BF, r27	; 0x8002bf <speedStepCounter+0x3>
    5b0a:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <speedStepCounter+0x4>
    5b0e:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <speedStepCounter+0x5>
    5b12:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <speedStepCounter+0x6>
    5b16:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <speedStepCounter+0x7>
    5b1a:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <softAccEnabled>
    5b1e:	88 23       	and	r24, r24
    5b20:	09 f4       	brne	.+2      	; 0x5b24 <handleMotorsWithNoController+0x220>
    5b22:	68 c0       	rjmp	.+208    	; 0x5bf4 <handleMotorsWithNoController+0x2f0>
    5b24:	0e 94 b1 2b 	call	0x5762	; 0x5762 <handleSoftAcceleration.part.0>
    5b28:	fc ce       	rjmp	.-520    	; 0x5922 <handleMotorsWithNoController+0x1e>
    5b2a:	00 97       	sbiw	r24, 0x00	; 0
    5b2c:	09 f0       	breq	.+2      	; 0x5b30 <handleMotorsWithNoController+0x22c>
    5b2e:	73 c0       	rjmp	.+230    	; 0x5c16 <handleMotorsWithNoController+0x312>
    5b30:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
    5b34:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
    5b38:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7c00ab>
    5b3c:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7c00aa>
    5b40:	a6 cf       	rjmp	.-180    	; 0x5a8e <handleMotorsWithNoController+0x18a>
    5b42:	65 e0       	ldi	r22, 0x05	; 5
    5b44:	73 e0       	ldi	r23, 0x03	; 3
    5b46:	83 e0       	ldi	r24, 0x03	; 3
    5b48:	93 e0       	ldi	r25, 0x03	; 3
    5b4a:	0e 94 e5 43 	call	0x87ca	; 0x87ca <obstacleAvoidance>
    5b4e:	20 91 03 03 	lds	r18, 0x0303	; 0x800303 <pwm_left_working>
    5b52:	30 91 04 03 	lds	r19, 0x0304	; 0x800304 <pwm_left_working+0x1>
    5b56:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <pwm_right_working>
    5b5a:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <pwm_right_working+0x1>
    5b5e:	7b cf       	rjmp	.-266    	; 0x5a56 <handleMotorsWithNoController+0x152>
    5b60:	00 97       	sbiw	r24, 0x00	; 0
    5b62:	09 f0       	breq	.+2      	; 0x5b66 <handleMotorsWithNoController+0x262>
    5b64:	3f c0       	rjmp	.+126    	; 0x5be4 <handleMotorsWithNoController+0x2e0>
    5b66:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
    5b6a:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
    5b6e:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7c009b>
    5b72:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <__TEXT_REGION_LENGTH__+0x7c009a>
    5b76:	7f cf       	rjmp	.-258    	; 0x5a76 <handleMotorsWithNoController+0x172>
    5b78:	07 2e       	mov	r0, r23
    5b7a:	00 0c       	add	r0, r0
    5b7c:	88 0b       	sbc	r24, r24
    5b7e:	99 0b       	sbc	r25, r25
    5b80:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    5b84:	9b 01       	movw	r18, r22
    5b86:	ac 01       	movw	r20, r24
    5b88:	60 91 33 03 	lds	r22, 0x0333	; 0x800333 <rightMotSteps>
    5b8c:	70 91 34 03 	lds	r23, 0x0334	; 0x800334 <rightMotSteps+0x1>
    5b90:	80 91 35 03 	lds	r24, 0x0335	; 0x800335 <rightMotSteps+0x2>
    5b94:	90 91 36 03 	lds	r25, 0x0336	; 0x800336 <rightMotSteps+0x3>
    5b98:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <__subsf3>
    5b9c:	60 93 33 03 	sts	0x0333, r22	; 0x800333 <rightMotSteps>
    5ba0:	70 93 34 03 	sts	0x0334, r23	; 0x800334 <rightMotSteps+0x1>
    5ba4:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <rightMotSteps+0x2>
    5ba8:	90 93 36 03 	sts	0x0336, r25	; 0x800336 <rightMotSteps+0x3>
    5bac:	3a cf       	rjmp	.-396    	; 0x5a22 <handleMotorsWithNoController+0x11e>
    5bae:	07 2e       	mov	r0, r23
    5bb0:	00 0c       	add	r0, r0
    5bb2:	88 0b       	sbc	r24, r24
    5bb4:	99 0b       	sbc	r25, r25
    5bb6:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    5bba:	9b 01       	movw	r18, r22
    5bbc:	ac 01       	movw	r20, r24
    5bbe:	60 91 2f 03 	lds	r22, 0x032F	; 0x80032f <leftMotSteps>
    5bc2:	70 91 30 03 	lds	r23, 0x0330	; 0x800330 <leftMotSteps+0x1>
    5bc6:	80 91 31 03 	lds	r24, 0x0331	; 0x800331 <leftMotSteps+0x2>
    5bca:	90 91 32 03 	lds	r25, 0x0332	; 0x800332 <leftMotSteps+0x3>
    5bce:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <__subsf3>
    5bd2:	60 93 2f 03 	sts	0x032F, r22	; 0x80032f <leftMotSteps>
    5bd6:	70 93 30 03 	sts	0x0330, r23	; 0x800330 <leftMotSteps+0x1>
    5bda:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <leftMotSteps+0x2>
    5bde:	90 93 32 03 	sts	0x0332, r25	; 0x800332 <leftMotSteps+0x3>
    5be2:	e3 ce       	rjmp	.-570    	; 0x59aa <handleMotorsWithNoController+0xa6>
    5be4:	91 95       	neg	r25
    5be6:	81 95       	neg	r24
    5be8:	91 09       	sbc	r25, r1
    5bea:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7c009b>
    5bee:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7c009a>
    5bf2:	41 cf       	rjmp	.-382    	; 0x5a76 <handleMotorsWithNoController+0x172>
    5bf4:	c0 91 19 03 	lds	r28, 0x0319	; 0x800319 <pwm_right_desired>
    5bf8:	d0 91 1a 03 	lds	r29, 0x031A	; 0x80031a <pwm_right_desired+0x1>
    5bfc:	d0 93 16 03 	sts	0x0316, r29	; 0x800316 <pwm_intermediate_right_desired+0x1>
    5c00:	c0 93 15 03 	sts	0x0315, r28	; 0x800315 <pwm_intermediate_right_desired>
    5c04:	00 91 17 03 	lds	r16, 0x0317	; 0x800317 <pwm_left_desired>
    5c08:	10 91 18 03 	lds	r17, 0x0318	; 0x800318 <pwm_left_desired+0x1>
    5c0c:	10 93 14 03 	sts	0x0314, r17	; 0x800314 <pwm_intermediate_left_desired+0x1>
    5c10:	00 93 13 03 	sts	0x0313, r16	; 0x800313 <pwm_intermediate_left_desired>
    5c14:	8e ce       	rjmp	.-740    	; 0x5932 <handleMotorsWithNoController+0x2e>
    5c16:	91 95       	neg	r25
    5c18:	81 95       	neg	r24
    5c1a:	91 09       	sbc	r25, r1
    5c1c:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7c00ab>
    5c20:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7c00aa>
    5c24:	34 cf       	rjmp	.-408    	; 0x5a8e <handleMotorsWithNoController+0x18a>

00005c26 <setLeftSpeed>:
    5c26:	28 2f       	mov	r18, r24
    5c28:	08 2e       	mov	r0, r24
    5c2a:	00 0c       	add	r0, r0
    5c2c:	33 0b       	sbc	r19, r19
    5c2e:	37 fd       	sbrc	r19, 7
    5c30:	13 c0       	rjmp	.+38     	; 0x5c58 <setLeftSpeed+0x32>
    5c32:	30 93 02 03 	sts	0x0302, r19	; 0x800302 <speedl+0x1>
    5c36:	20 93 01 03 	sts	0x0301, r18	; 0x800301 <speedl>
    5c3a:	87 fd       	sbrc	r24, 7
    5c3c:	05 c0       	rjmp	.+10     	; 0x5c48 <setLeftSpeed+0x22>
    5c3e:	30 93 18 03 	sts	0x0318, r19	; 0x800318 <pwm_left_desired+0x1>
    5c42:	20 93 17 03 	sts	0x0317, r18	; 0x800317 <pwm_left_desired>
    5c46:	08 95       	ret
    5c48:	31 95       	neg	r19
    5c4a:	21 95       	neg	r18
    5c4c:	31 09       	sbc	r19, r1
    5c4e:	30 93 18 03 	sts	0x0318, r19	; 0x800318 <pwm_left_desired+0x1>
    5c52:	20 93 17 03 	sts	0x0317, r18	; 0x800317 <pwm_left_desired>
    5c56:	08 95       	ret
    5c58:	31 95       	neg	r19
    5c5a:	21 95       	neg	r18
    5c5c:	31 09       	sbc	r19, r1
    5c5e:	e9 cf       	rjmp	.-46     	; 0x5c32 <setLeftSpeed+0xc>

00005c60 <setRightSpeed>:
    5c60:	28 2f       	mov	r18, r24
    5c62:	08 2e       	mov	r0, r24
    5c64:	00 0c       	add	r0, r0
    5c66:	33 0b       	sbc	r19, r19
    5c68:	37 fd       	sbrc	r19, 7
    5c6a:	13 c0       	rjmp	.+38     	; 0x5c92 <setRightSpeed+0x32>
    5c6c:	30 93 00 03 	sts	0x0300, r19	; 0x800300 <speedr+0x1>
    5c70:	20 93 ff 02 	sts	0x02FF, r18	; 0x8002ff <speedr>
    5c74:	87 fd       	sbrc	r24, 7
    5c76:	05 c0       	rjmp	.+10     	; 0x5c82 <setRightSpeed+0x22>
    5c78:	30 93 1a 03 	sts	0x031A, r19	; 0x80031a <pwm_right_desired+0x1>
    5c7c:	20 93 19 03 	sts	0x0319, r18	; 0x800319 <pwm_right_desired>
    5c80:	08 95       	ret
    5c82:	31 95       	neg	r19
    5c84:	21 95       	neg	r18
    5c86:	31 09       	sbc	r19, r1
    5c88:	30 93 1a 03 	sts	0x031A, r19	; 0x80031a <pwm_right_desired+0x1>
    5c8c:	20 93 19 03 	sts	0x0319, r18	; 0x800319 <pwm_right_desired>
    5c90:	08 95       	ret
    5c92:	31 95       	neg	r19
    5c94:	21 95       	neg	r18
    5c96:	31 09       	sbc	r19, r1
    5c98:	e9 cf       	rjmp	.-46     	; 0x5c6c <setRightSpeed+0xc>

00005c9a <updateOdomData>:
    5c9a:	80 91 38 0f 	lds	r24, 0x0F38	; 0x800f38 <calibWheel>
    5c9e:	81 11       	cpse	r24, r1
    5ca0:	31 c0       	rjmp	.+98     	; 0x5d04 <updateOdomData+0x6a>
    5ca2:	e0 91 a0 12 	lds	r30, 0x12A0	; 0x8012a0 <calibVelIndex>
    5ca6:	e2 30       	cpi	r30, 0x02	; 2
    5ca8:	08 f4       	brcc	.+2      	; 0x5cac <updateOdomData+0x12>
    5caa:	96 c0       	rjmp	.+300    	; 0x5dd8 <updateOdomData+0x13e>
    5cac:	f0 e0       	ldi	r31, 0x00	; 0
    5cae:	df 01       	movw	r26, r30
    5cb0:	a2 95       	swap	r26
    5cb2:	b2 95       	swap	r27
    5cb4:	b0 7f       	andi	r27, 0xF0	; 240
    5cb6:	ba 27       	eor	r27, r26
    5cb8:	a0 7f       	andi	r26, 0xF0	; 240
    5cba:	ba 27       	eor	r27, r26
    5cbc:	a9 55       	subi	r26, 0x59	; 89
    5cbe:	bd 4e       	sbci	r27, 0xED	; 237
    5cc0:	12 96       	adiw	r26, 0x02	; 2
    5cc2:	2d 91       	ld	r18, X+
    5cc4:	3c 91       	ld	r19, X
    5cc6:	13 97       	sbiw	r26, 0x03	; 3
    5cc8:	80 91 5b 15 	lds	r24, 0x155B	; 0x80155b <tempVel>
    5ccc:	90 91 5c 15 	lds	r25, 0x155C	; 0x80155c <tempVel+0x1>
    5cd0:	28 17       	cp	r18, r24
    5cd2:	39 07       	cpc	r19, r25
    5cd4:	34 f0       	brlt	.+12     	; 0x5ce2 <updateOdomData+0x48>
    5cd6:	c9 01       	movw	r24, r18
    5cd8:	01 96       	adiw	r24, 0x01	; 1
    5cda:	90 93 5c 15 	sts	0x155C, r25	; 0x80155c <tempVel+0x1>
    5cde:	80 93 5b 15 	sts	0x155B, r24	; 0x80155b <tempVel>
    5ce2:	e2 95       	swap	r30
    5ce4:	f2 95       	swap	r31
    5ce6:	f0 7f       	andi	r31, 0xF0	; 240
    5ce8:	fe 27       	eor	r31, r30
    5cea:	e0 7f       	andi	r30, 0xF0	; 240
    5cec:	fe 27       	eor	r31, r30
    5cee:	e9 54       	subi	r30, 0x49	; 73
    5cf0:	fd 4e       	sbci	r31, 0xED	; 237
    5cf2:	20 91 7c 02 	lds	r18, 0x027C	; 0x80027c <avgLeftSpeed>
    5cf6:	30 91 7d 02 	lds	r19, 0x027D	; 0x80027d <avgLeftSpeed+0x1>
    5cfa:	31 83       	std	Z+1, r19	; 0x01
    5cfc:	20 83       	st	Z, r18
    5cfe:	93 83       	std	Z+3, r25	; 0x03
    5d00:	82 83       	std	Z+2, r24	; 0x02
    5d02:	08 95       	ret
    5d04:	81 30       	cpi	r24, 0x01	; 1
    5d06:	31 f0       	breq	.+12     	; 0x5d14 <updateOdomData+0x7a>
    5d08:	82 30       	cpi	r24, 0x02	; 2
    5d0a:	09 f4       	brne	.+2      	; 0x5d0e <updateOdomData+0x74>
    5d0c:	6b c0       	rjmp	.+214    	; 0x5de4 <updateOdomData+0x14a>
    5d0e:	83 30       	cpi	r24, 0x03	; 3
    5d10:	91 f1       	breq	.+100    	; 0x5d76 <updateOdomData+0xdc>
    5d12:	08 95       	ret
    5d14:	e0 91 a0 12 	lds	r30, 0x12A0	; 0x8012a0 <calibVelIndex>
    5d18:	e2 30       	cpi	r30, 0x02	; 2
    5d1a:	08 f4       	brcc	.+2      	; 0x5d1e <updateOdomData+0x84>
    5d1c:	93 c0       	rjmp	.+294    	; 0x5e44 <updateOdomData+0x1aa>
    5d1e:	f0 e0       	ldi	r31, 0x00	; 0
    5d20:	df 01       	movw	r26, r30
    5d22:	a2 95       	swap	r26
    5d24:	b2 95       	swap	r27
    5d26:	b0 7f       	andi	r27, 0xF0	; 240
    5d28:	ba 27       	eor	r27, r26
    5d2a:	a0 7f       	andi	r26, 0xF0	; 240
    5d2c:	ba 27       	eor	r27, r26
    5d2e:	a9 55       	subi	r26, 0x59	; 89
    5d30:	bd 4e       	sbci	r27, 0xED	; 237
    5d32:	16 96       	adiw	r26, 0x06	; 6
    5d34:	2d 91       	ld	r18, X+
    5d36:	3c 91       	ld	r19, X
    5d38:	17 97       	sbiw	r26, 0x07	; 7
    5d3a:	80 91 5b 15 	lds	r24, 0x155B	; 0x80155b <tempVel>
    5d3e:	90 91 5c 15 	lds	r25, 0x155C	; 0x80155c <tempVel+0x1>
    5d42:	28 17       	cp	r18, r24
    5d44:	39 07       	cpc	r19, r25
    5d46:	34 f0       	brlt	.+12     	; 0x5d54 <updateOdomData+0xba>
    5d48:	c9 01       	movw	r24, r18
    5d4a:	01 96       	adiw	r24, 0x01	; 1
    5d4c:	90 93 5c 15 	sts	0x155C, r25	; 0x80155c <tempVel+0x1>
    5d50:	80 93 5b 15 	sts	0x155B, r24	; 0x80155b <tempVel>
    5d54:	e2 95       	swap	r30
    5d56:	f2 95       	swap	r31
    5d58:	f0 7f       	andi	r31, 0xF0	; 240
    5d5a:	fe 27       	eor	r31, r30
    5d5c:	e0 7f       	andi	r30, 0xF0	; 240
    5d5e:	fe 27       	eor	r31, r30
    5d60:	e9 54       	subi	r30, 0x49	; 73
    5d62:	fd 4e       	sbci	r31, 0xED	; 237
    5d64:	20 91 7a 02 	lds	r18, 0x027A	; 0x80027a <avgRightSpeed>
    5d68:	30 91 7b 02 	lds	r19, 0x027B	; 0x80027b <avgRightSpeed+0x1>
    5d6c:	35 83       	std	Z+5, r19	; 0x05
    5d6e:	24 83       	std	Z+4, r18	; 0x04
    5d70:	97 83       	std	Z+7, r25	; 0x07
    5d72:	86 83       	std	Z+6, r24	; 0x06
    5d74:	08 95       	ret
    5d76:	e0 91 a0 12 	lds	r30, 0x12A0	; 0x8012a0 <calibVelIndex>
    5d7a:	e2 30       	cpi	r30, 0x02	; 2
    5d7c:	08 f4       	brcc	.+2      	; 0x5d80 <updateOdomData+0xe6>
    5d7e:	68 c0       	rjmp	.+208    	; 0x5e50 <updateOdomData+0x1b6>
    5d80:	f0 e0       	ldi	r31, 0x00	; 0
    5d82:	df 01       	movw	r26, r30
    5d84:	a2 95       	swap	r26
    5d86:	b2 95       	swap	r27
    5d88:	b0 7f       	andi	r27, 0xF0	; 240
    5d8a:	ba 27       	eor	r27, r26
    5d8c:	a0 7f       	andi	r26, 0xF0	; 240
    5d8e:	ba 27       	eor	r27, r26
    5d90:	a9 55       	subi	r26, 0x59	; 89
    5d92:	bd 4e       	sbci	r27, 0xED	; 237
    5d94:	1e 96       	adiw	r26, 0x0e	; 14
    5d96:	2d 91       	ld	r18, X+
    5d98:	3c 91       	ld	r19, X
    5d9a:	1f 97       	sbiw	r26, 0x0f	; 15
    5d9c:	80 91 5b 15 	lds	r24, 0x155B	; 0x80155b <tempVel>
    5da0:	90 91 5c 15 	lds	r25, 0x155C	; 0x80155c <tempVel+0x1>
    5da4:	28 17       	cp	r18, r24
    5da6:	39 07       	cpc	r19, r25
    5da8:	34 f0       	brlt	.+12     	; 0x5db6 <updateOdomData+0x11c>
    5daa:	c9 01       	movw	r24, r18
    5dac:	01 96       	adiw	r24, 0x01	; 1
    5dae:	90 93 5c 15 	sts	0x155C, r25	; 0x80155c <tempVel+0x1>
    5db2:	80 93 5b 15 	sts	0x155B, r24	; 0x80155b <tempVel>
    5db6:	e2 95       	swap	r30
    5db8:	f2 95       	swap	r31
    5dba:	f0 7f       	andi	r31, 0xF0	; 240
    5dbc:	fe 27       	eor	r31, r30
    5dbe:	e0 7f       	andi	r30, 0xF0	; 240
    5dc0:	fe 27       	eor	r31, r30
    5dc2:	e9 54       	subi	r30, 0x49	; 73
    5dc4:	fd 4e       	sbci	r31, 0xED	; 237
    5dc6:	20 91 7a 02 	lds	r18, 0x027A	; 0x80027a <avgRightSpeed>
    5dca:	30 91 7b 02 	lds	r19, 0x027B	; 0x80027b <avgRightSpeed+0x1>
    5dce:	35 87       	std	Z+13, r19	; 0x0d
    5dd0:	24 87       	std	Z+12, r18	; 0x0c
    5dd2:	97 87       	std	Z+15, r25	; 0x0f
    5dd4:	86 87       	std	Z+14, r24	; 0x0e
    5dd6:	08 95       	ret
    5dd8:	f0 e0       	ldi	r31, 0x00	; 0
    5dda:	80 91 5b 15 	lds	r24, 0x155B	; 0x80155b <tempVel>
    5dde:	90 91 5c 15 	lds	r25, 0x155C	; 0x80155c <tempVel+0x1>
    5de2:	7f cf       	rjmp	.-258    	; 0x5ce2 <updateOdomData+0x48>
    5de4:	e0 91 a0 12 	lds	r30, 0x12A0	; 0x8012a0 <calibVelIndex>
    5de8:	e2 30       	cpi	r30, 0x02	; 2
    5dea:	c0 f1       	brcs	.+112    	; 0x5e5c <updateOdomData+0x1c2>
    5dec:	f0 e0       	ldi	r31, 0x00	; 0
    5dee:	df 01       	movw	r26, r30
    5df0:	a2 95       	swap	r26
    5df2:	b2 95       	swap	r27
    5df4:	b0 7f       	andi	r27, 0xF0	; 240
    5df6:	ba 27       	eor	r27, r26
    5df8:	a0 7f       	andi	r26, 0xF0	; 240
    5dfa:	ba 27       	eor	r27, r26
    5dfc:	a9 55       	subi	r26, 0x59	; 89
    5dfe:	bd 4e       	sbci	r27, 0xED	; 237
    5e00:	1a 96       	adiw	r26, 0x0a	; 10
    5e02:	2d 91       	ld	r18, X+
    5e04:	3c 91       	ld	r19, X
    5e06:	1b 97       	sbiw	r26, 0x0b	; 11
    5e08:	80 91 5b 15 	lds	r24, 0x155B	; 0x80155b <tempVel>
    5e0c:	90 91 5c 15 	lds	r25, 0x155C	; 0x80155c <tempVel+0x1>
    5e10:	28 17       	cp	r18, r24
    5e12:	39 07       	cpc	r19, r25
    5e14:	34 f0       	brlt	.+12     	; 0x5e22 <updateOdomData+0x188>
    5e16:	c9 01       	movw	r24, r18
    5e18:	01 96       	adiw	r24, 0x01	; 1
    5e1a:	90 93 5c 15 	sts	0x155C, r25	; 0x80155c <tempVel+0x1>
    5e1e:	80 93 5b 15 	sts	0x155B, r24	; 0x80155b <tempVel>
    5e22:	e2 95       	swap	r30
    5e24:	f2 95       	swap	r31
    5e26:	f0 7f       	andi	r31, 0xF0	; 240
    5e28:	fe 27       	eor	r31, r30
    5e2a:	e0 7f       	andi	r30, 0xF0	; 240
    5e2c:	fe 27       	eor	r31, r30
    5e2e:	e9 54       	subi	r30, 0x49	; 73
    5e30:	fd 4e       	sbci	r31, 0xED	; 237
    5e32:	20 91 7c 02 	lds	r18, 0x027C	; 0x80027c <avgLeftSpeed>
    5e36:	30 91 7d 02 	lds	r19, 0x027D	; 0x80027d <avgLeftSpeed+0x1>
    5e3a:	31 87       	std	Z+9, r19	; 0x09
    5e3c:	20 87       	std	Z+8, r18	; 0x08
    5e3e:	93 87       	std	Z+11, r25	; 0x0b
    5e40:	82 87       	std	Z+10, r24	; 0x0a
    5e42:	08 95       	ret
    5e44:	f0 e0       	ldi	r31, 0x00	; 0
    5e46:	80 91 5b 15 	lds	r24, 0x155B	; 0x80155b <tempVel>
    5e4a:	90 91 5c 15 	lds	r25, 0x155C	; 0x80155c <tempVel+0x1>
    5e4e:	82 cf       	rjmp	.-252    	; 0x5d54 <updateOdomData+0xba>
    5e50:	f0 e0       	ldi	r31, 0x00	; 0
    5e52:	80 91 5b 15 	lds	r24, 0x155B	; 0x80155b <tempVel>
    5e56:	90 91 5c 15 	lds	r25, 0x155C	; 0x80155c <tempVel+0x1>
    5e5a:	ad cf       	rjmp	.-166    	; 0x5db6 <updateOdomData+0x11c>
    5e5c:	f0 e0       	ldi	r31, 0x00	; 0
    5e5e:	80 91 5b 15 	lds	r24, 0x155B	; 0x80155b <tempVel>
    5e62:	90 91 5c 15 	lds	r25, 0x155C	; 0x80155c <tempVel+0x1>
    5e66:	dd cf       	rjmp	.-70     	; 0x5e22 <updateOdomData+0x188>

00005e68 <handleCalibration>:
    5e68:	0f 93       	push	r16
    5e6a:	1f 93       	push	r17
    5e6c:	80 91 46 15 	lds	r24, 0x1546	; 0x801546 <calibState>
    5e70:	90 e0       	ldi	r25, 0x00	; 0
    5e72:	89 30       	cpi	r24, 0x09	; 9
    5e74:	91 05       	cpc	r25, r1
    5e76:	08 f0       	brcs	.+2      	; 0x5e7a <handleCalibration+0x12>
    5e78:	4a c0       	rjmp	.+148    	; 0x5f0e <handleCalibration+0xa6>
    5e7a:	fc 01       	movw	r30, r24
    5e7c:	88 27       	eor	r24, r24
    5e7e:	e5 53       	subi	r30, 0x35	; 53
    5e80:	ff 4f       	sbci	r31, 0xFF	; 255
    5e82:	8f 4f       	sbci	r24, 0xFF	; 255
    5e84:	0c 94 85 51 	jmp	0xa30a	; 0xa30a <__tablejump2__>
    5e88:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    5e8c:	00 91 16 15 	lds	r16, 0x1516	; 0x801516 <timeoutOdometry>
    5e90:	10 91 17 15 	lds	r17, 0x1517	; 0x801517 <timeoutOdometry+0x1>
    5e94:	20 91 18 15 	lds	r18, 0x1518	; 0x801518 <timeoutOdometry+0x2>
    5e98:	30 91 19 15 	lds	r19, 0x1519	; 0x801519 <timeoutOdometry+0x3>
    5e9c:	dc 01       	movw	r26, r24
    5e9e:	cb 01       	movw	r24, r22
    5ea0:	80 1b       	sub	r24, r16
    5ea2:	91 0b       	sbc	r25, r17
    5ea4:	a2 0b       	sbc	r26, r18
    5ea6:	b3 0b       	sbc	r27, r19
    5ea8:	80 39       	cpi	r24, 0x90	; 144
    5eaa:	95 42       	sbci	r25, 0x25	; 37
    5eac:	a1 05       	cpc	r26, r1
    5eae:	b1 05       	cpc	r27, r1
    5eb0:	70 f1       	brcs	.+92     	; 0x5f0e <handleCalibration+0xa6>
    5eb2:	80 91 38 0f 	lds	r24, 0x0F38	; 0x800f38 <calibWheel>
    5eb6:	88 23       	and	r24, r24
    5eb8:	09 f4       	brne	.+2      	; 0x5ebc <handleCalibration+0x54>
    5eba:	6d c2       	rjmp	.+1242   	; 0x6396 <handleCalibration+0x52e>
    5ebc:	81 30       	cpi	r24, 0x01	; 1
    5ebe:	09 f4       	brne	.+2      	; 0x5ec2 <handleCalibration+0x5a>
    5ec0:	c4 c2       	rjmp	.+1416   	; 0x644a <handleCalibration+0x5e2>
    5ec2:	82 30       	cpi	r24, 0x02	; 2
    5ec4:	09 f4       	brne	.+2      	; 0x5ec8 <handleCalibration+0x60>
    5ec6:	cc c2       	rjmp	.+1432   	; 0x6460 <handleCalibration+0x5f8>
    5ec8:	83 30       	cpi	r24, 0x03	; 3
    5eca:	51 f4       	brne	.+20     	; 0x5ee0 <handleCalibration+0x78>
    5ecc:	84 ec       	ldi	r24, 0xC4	; 196
    5ece:	9f ef       	ldi	r25, 0xFF	; 255
    5ed0:	90 93 16 03 	sts	0x0316, r25	; 0x800316 <pwm_intermediate_right_desired+0x1>
    5ed4:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <pwm_intermediate_right_desired>
    5ed8:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <pwm_intermediate_left_desired+0x1>
    5edc:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <pwm_intermediate_left_desired>
    5ee0:	8f ef       	ldi	r24, 0xFF	; 255
    5ee2:	93 e0       	ldi	r25, 0x03	; 3
    5ee4:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <minGround+0x1>
    5ee8:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <minGround>
    5eec:	10 92 6b 02 	sts	0x026B, r1	; 0x80026b <maxGround+0x1>
    5ef0:	10 92 6a 02 	sts	0x026A, r1	; 0x80026a <maxGround>
    5ef4:	88 e0       	ldi	r24, 0x08	; 8
    5ef6:	80 93 46 15 	sts	0x1546, r24	; 0x801546 <calibState>
    5efa:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    5efe:	60 93 16 15 	sts	0x1516, r22	; 0x801516 <timeoutOdometry>
    5f02:	70 93 17 15 	sts	0x1517, r23	; 0x801517 <timeoutOdometry+0x1>
    5f06:	80 93 18 15 	sts	0x1518, r24	; 0x801518 <timeoutOdometry+0x2>
    5f0a:	90 93 19 15 	sts	0x1519, r25	; 0x801519 <timeoutOdometry+0x3>
    5f0e:	1f 91       	pop	r17
    5f10:	0f 91       	pop	r16
    5f12:	08 95       	ret
    5f14:	80 91 38 0f 	lds	r24, 0x0F38	; 0x800f38 <calibWheel>
    5f18:	8d 7f       	andi	r24, 0xFD	; 253
    5f1a:	09 f4       	brne	.+2      	; 0x5f1e <handleCalibration+0xb6>
    5f1c:	6e c1       	rjmp	.+732    	; 0x61fa <handleCalibration+0x392>
    5f1e:	80 91 ad 03 	lds	r24, 0x03AD	; 0x8003ad <proximityResult+0x16>
    5f22:	90 91 ae 03 	lds	r25, 0x03AE	; 0x8003ae <proximityResult+0x17>
    5f26:	20 91 6c 02 	lds	r18, 0x026C	; 0x80026c <minGround>
    5f2a:	30 91 6d 02 	lds	r19, 0x026D	; 0x80026d <minGround+0x1>
    5f2e:	82 17       	cp	r24, r18
    5f30:	93 07       	cpc	r25, r19
    5f32:	0c f4       	brge	.+2      	; 0x5f36 <handleCalibration+0xce>
    5f34:	6e c1       	rjmp	.+732    	; 0x6212 <handleCalibration+0x3aa>
    5f36:	20 91 6a 02 	lds	r18, 0x026A	; 0x80026a <maxGround>
    5f3a:	30 91 6b 02 	lds	r19, 0x026B	; 0x80026b <maxGround+0x1>
    5f3e:	28 17       	cp	r18, r24
    5f40:	39 07       	cpc	r19, r25
    5f42:	24 f4       	brge	.+8      	; 0x5f4c <handleCalibration+0xe4>
    5f44:	90 93 6b 02 	sts	0x026B, r25	; 0x80026b <maxGround+0x1>
    5f48:	80 93 6a 02 	sts	0x026A, r24	; 0x80026a <maxGround>
    5f4c:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    5f50:	00 91 16 15 	lds	r16, 0x1516	; 0x801516 <timeoutOdometry>
    5f54:	10 91 17 15 	lds	r17, 0x1517	; 0x801517 <timeoutOdometry+0x1>
    5f58:	20 91 18 15 	lds	r18, 0x1518	; 0x801518 <timeoutOdometry+0x2>
    5f5c:	30 91 19 15 	lds	r19, 0x1519	; 0x801519 <timeoutOdometry+0x3>
    5f60:	dc 01       	movw	r26, r24
    5f62:	cb 01       	movw	r24, r22
    5f64:	80 1b       	sub	r24, r16
    5f66:	91 0b       	sbc	r25, r17
    5f68:	a2 0b       	sbc	r26, r18
    5f6a:	b3 0b       	sbc	r27, r19
    5f6c:	8e 3c       	cpi	r24, 0xCE	; 206
    5f6e:	9b 4b       	sbci	r25, 0xBB	; 187
    5f70:	a1 05       	cpc	r26, r1
    5f72:	b1 05       	cpc	r27, r1
    5f74:	60 f2       	brcs	.-104    	; 0x5f0e <handleCalibration+0xa6>
    5f76:	20 91 6c 02 	lds	r18, 0x026C	; 0x80026c <minGround>
    5f7a:	30 91 6d 02 	lds	r19, 0x026D	; 0x80026d <minGround+0x1>
    5f7e:	80 91 6a 02 	lds	r24, 0x026A	; 0x80026a <maxGround>
    5f82:	90 91 6b 02 	lds	r25, 0x026B	; 0x80026b <maxGround+0x1>
    5f86:	82 0f       	add	r24, r18
    5f88:	93 1f       	adc	r25, r19
    5f8a:	95 95       	asr	r25
    5f8c:	87 95       	ror	r24
    5f8e:	90 93 69 02 	sts	0x0269, r25	; 0x800269 <calibrationThr+0x1>
    5f92:	80 93 68 02 	sts	0x0268, r24	; 0x800268 <calibrationThr>
    5f96:	10 92 46 15 	sts	0x1546, r1	; 0x801546 <calibState>
    5f9a:	b9 cf       	rjmp	.-142    	; 0x5f0e <handleCalibration+0xa6>
    5f9c:	80 91 38 0f 	lds	r24, 0x0F38	; 0x800f38 <calibWheel>
    5fa0:	81 11       	cpse	r24, r1
    5fa2:	db c1       	rjmp	.+950    	; 0x635a <handleCalibration+0x4f2>
    5fa4:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <pwm_intermediate_right_desired+0x1>
    5fa8:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <pwm_intermediate_right_desired>
    5fac:	80 91 a0 12 	lds	r24, 0x12A0	; 0x8012a0 <calibVelIndex>
    5fb0:	25 e0       	ldi	r18, 0x05	; 5
    5fb2:	82 9f       	mul	r24, r18
    5fb4:	c0 01       	movw	r24, r0
    5fb6:	11 24       	eor	r1, r1
    5fb8:	88 0f       	add	r24, r24
    5fba:	99 1f       	adc	r25, r25
    5fbc:	88 0f       	add	r24, r24
    5fbe:	99 1f       	adc	r25, r25
    5fc0:	90 93 14 03 	sts	0x0314, r25	; 0x800314 <pwm_intermediate_left_desired+0x1>
    5fc4:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <pwm_intermediate_left_desired>
    5fc8:	81 e0       	ldi	r24, 0x01	; 1
    5fca:	80 93 46 15 	sts	0x1546, r24	; 0x801546 <calibState>
    5fce:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    5fd2:	60 93 16 15 	sts	0x1516, r22	; 0x801516 <timeoutOdometry>
    5fd6:	70 93 17 15 	sts	0x1517, r23	; 0x801517 <timeoutOdometry+0x1>
    5fda:	80 93 18 15 	sts	0x1518, r24	; 0x801518 <timeoutOdometry+0x2>
    5fde:	90 93 19 15 	sts	0x1519, r25	; 0x801519 <timeoutOdometry+0x3>
    5fe2:	1f 91       	pop	r17
    5fe4:	0f 91       	pop	r16
    5fe6:	08 95       	ret
    5fe8:	80 91 38 0f 	lds	r24, 0x0F38	; 0x800f38 <calibWheel>
    5fec:	8d 7f       	andi	r24, 0xFD	; 253
    5fee:	09 f4       	brne	.+2      	; 0x5ff2 <handleCalibration+0x18a>
    5ff0:	84 c1       	rjmp	.+776    	; 0x62fa <handleCalibration+0x492>
    5ff2:	20 91 ad 03 	lds	r18, 0x03AD	; 0x8003ad <proximityResult+0x16>
    5ff6:	30 91 ae 03 	lds	r19, 0x03AE	; 0x8003ae <proximityResult+0x17>
    5ffa:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <calibrationThr>
    5ffe:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <calibrationThr+0x1>
    6002:	28 17       	cp	r18, r24
    6004:	39 07       	cpc	r19, r25
    6006:	0c f4       	brge	.+2      	; 0x600a <handleCalibration+0x1a2>
    6008:	e4 c1       	rjmp	.+968    	; 0x63d2 <handleCalibration+0x56a>
    600a:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    600e:	00 91 16 15 	lds	r16, 0x1516	; 0x801516 <timeoutOdometry>
    6012:	10 91 17 15 	lds	r17, 0x1517	; 0x801517 <timeoutOdometry+0x1>
    6016:	20 91 18 15 	lds	r18, 0x1518	; 0x801518 <timeoutOdometry+0x2>
    601a:	30 91 19 15 	lds	r19, 0x1519	; 0x801519 <timeoutOdometry+0x3>
    601e:	dc 01       	movw	r26, r24
    6020:	cb 01       	movw	r24, r22
    6022:	80 1b       	sub	r24, r16
    6024:	91 0b       	sbc	r25, r17
    6026:	a2 0b       	sbc	r26, r18
    6028:	b3 0b       	sbc	r27, r19
    602a:	8c 39       	cpi	r24, 0x9C	; 156
    602c:	9d 4c       	sbci	r25, 0xCD	; 205
    602e:	a8 40       	sbci	r26, 0x08	; 8
    6030:	b1 05       	cpc	r27, r1
    6032:	08 f4       	brcc	.+2      	; 0x6036 <handleCalibration+0x1ce>
    6034:	6c cf       	rjmp	.-296    	; 0x5f0e <handleCalibration+0xa6>
    6036:	10 92 5c 15 	sts	0x155C, r1	; 0x80155c <tempVel+0x1>
    603a:	10 92 5b 15 	sts	0x155B, r1	; 0x80155b <tempVel>
    603e:	10 92 7d 02 	sts	0x027D, r1	; 0x80027d <avgLeftSpeed+0x1>
    6042:	10 92 7c 02 	sts	0x027C, r1	; 0x80027c <avgLeftSpeed>
    6046:	10 92 7b 02 	sts	0x027B, r1	; 0x80027b <avgRightSpeed+0x1>
    604a:	10 92 7a 02 	sts	0x027A, r1	; 0x80027a <avgRightSpeed>
    604e:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <updateOdomData>
    6052:	85 e0       	ldi	r24, 0x05	; 5
    6054:	80 93 46 15 	sts	0x1546, r24	; 0x801546 <calibState>
    6058:	5a cf       	rjmp	.-332    	; 0x5f0e <handleCalibration+0xa6>
    605a:	80 91 38 0f 	lds	r24, 0x0F38	; 0x800f38 <calibWheel>
    605e:	8d 7f       	andi	r24, 0xFD	; 253
    6060:	09 f4       	brne	.+2      	; 0x6064 <handleCalibration+0x1fc>
    6062:	dc c0       	rjmp	.+440    	; 0x621c <handleCalibration+0x3b4>
    6064:	20 91 ad 03 	lds	r18, 0x03AD	; 0x8003ad <proximityResult+0x16>
    6068:	30 91 ae 03 	lds	r19, 0x03AE	; 0x8003ae <proximityResult+0x17>
    606c:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <calibrationThr>
    6070:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <calibrationThr+0x1>
    6074:	28 17       	cp	r18, r24
    6076:	39 07       	cpc	r19, r25
    6078:	44 f6       	brge	.-112    	; 0x600a <handleCalibration+0x1a2>
    607a:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    607e:	00 91 31 0f 	lds	r16, 0x0F31	; 0x800f31 <timeOdometry>
    6082:	10 91 32 0f 	lds	r17, 0x0F32	; 0x800f32 <timeOdometry+0x1>
    6086:	20 91 33 0f 	lds	r18, 0x0F33	; 0x800f33 <timeOdometry+0x2>
    608a:	30 91 34 0f 	lds	r19, 0x0F34	; 0x800f34 <timeOdometry+0x3>
    608e:	60 1b       	sub	r22, r16
    6090:	71 0b       	sbc	r23, r17
    6092:	82 0b       	sbc	r24, r18
    6094:	93 0b       	sbc	r25, r19
    6096:	60 93 31 0f 	sts	0x0F31, r22	; 0x800f31 <timeOdometry>
    609a:	70 93 32 0f 	sts	0x0F32, r23	; 0x800f32 <timeOdometry+0x1>
    609e:	80 93 33 0f 	sts	0x0F33, r24	; 0x800f33 <timeOdometry+0x2>
    60a2:	90 93 34 0f 	sts	0x0F34, r25	; 0x800f34 <timeOdometry+0x3>
    60a6:	0e 94 a5 4e 	call	0x9d4a	; 0x9d4a <__floatunsisf>
    60aa:	20 e0       	ldi	r18, 0x00	; 0
    60ac:	30 e0       	ldi	r19, 0x00	; 0
    60ae:	40 ed       	ldi	r20, 0xD0	; 208
    60b0:	52 e4       	ldi	r21, 0x42	; 66
    60b2:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    60b6:	20 e0       	ldi	r18, 0x00	; 0
    60b8:	34 e2       	ldi	r19, 0x24	; 36
    60ba:	44 e7       	ldi	r20, 0x74	; 116
    60bc:	59 e4       	ldi	r21, 0x49	; 73
    60be:	0e 94 c3 4d 	call	0x9b86	; 0x9b86 <__divsf3>
    60c2:	9b 01       	movw	r18, r22
    60c4:	ac 01       	movw	r20, r24
    60c6:	64 e1       	ldi	r22, 0x14	; 20
    60c8:	7e e2       	ldi	r23, 0x2E	; 46
    60ca:	88 e7       	ldi	r24, 0x78	; 120
    60cc:	93 e4       	ldi	r25, 0x43	; 67
    60ce:	0e 94 c3 4d 	call	0x9b86	; 0x9b86 <__divsf3>
    60d2:	0e 94 76 4e 	call	0x9cec	; 0x9cec <__fixunssfsi>
    60d6:	70 93 5c 15 	sts	0x155C, r23	; 0x80155c <tempVel+0x1>
    60da:	60 93 5b 15 	sts	0x155B, r22	; 0x80155b <tempVel>
    60de:	20 91 7e 02 	lds	r18, 0x027E	; 0x80027e <rightSumCount>
    60e2:	30 91 7f 02 	lds	r19, 0x027F	; 0x80027f <rightSumCount+0x1>
    60e6:	40 e0       	ldi	r20, 0x00	; 0
    60e8:	50 e0       	ldi	r21, 0x00	; 0
    60ea:	60 91 82 02 	lds	r22, 0x0282	; 0x800282 <rightSpeedSumOdom>
    60ee:	70 91 83 02 	lds	r23, 0x0283	; 0x800283 <rightSpeedSumOdom+0x1>
    60f2:	80 91 84 02 	lds	r24, 0x0284	; 0x800284 <rightSpeedSumOdom+0x2>
    60f6:	90 91 85 02 	lds	r25, 0x0285	; 0x800285 <rightSpeedSumOdom+0x3>
    60fa:	0e 94 66 51 	call	0xa2cc	; 0xa2cc <__divmodsi4>
    60fe:	30 93 7b 02 	sts	0x027B, r19	; 0x80027b <avgRightSpeed+0x1>
    6102:	20 93 7a 02 	sts	0x027A, r18	; 0x80027a <avgRightSpeed>
    6106:	dc c0       	rjmp	.+440    	; 0x62c0 <handleCalibration+0x458>
    6108:	80 91 38 0f 	lds	r24, 0x0F38	; 0x800f38 <calibWheel>
    610c:	8d 7f       	andi	r24, 0xFD	; 253
    610e:	09 f4       	brne	.+2      	; 0x6112 <handleCalibration+0x2aa>
    6110:	64 c0       	rjmp	.+200    	; 0x61da <handleCalibration+0x372>
    6112:	20 91 ad 03 	lds	r18, 0x03AD	; 0x8003ad <proximityResult+0x16>
    6116:	30 91 ae 03 	lds	r19, 0x03AE	; 0x8003ae <proximityResult+0x17>
    611a:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <calibrationThr>
    611e:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <calibrationThr+0x1>
    6122:	82 17       	cp	r24, r18
    6124:	93 07       	cpc	r25, r19
    6126:	0c f4       	brge	.+2      	; 0x612a <handleCalibration+0x2c2>
    6128:	64 c0       	rjmp	.+200    	; 0x61f2 <handleCalibration+0x38a>
    612a:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    612e:	00 91 16 15 	lds	r16, 0x1516	; 0x801516 <timeoutOdometry>
    6132:	10 91 17 15 	lds	r17, 0x1517	; 0x801517 <timeoutOdometry+0x1>
    6136:	20 91 18 15 	lds	r18, 0x1518	; 0x801518 <timeoutOdometry+0x2>
    613a:	30 91 19 15 	lds	r19, 0x1519	; 0x801519 <timeoutOdometry+0x3>
    613e:	dc 01       	movw	r26, r24
    6140:	cb 01       	movw	r24, r22
    6142:	80 1b       	sub	r24, r16
    6144:	91 0b       	sbc	r25, r17
    6146:	a2 0b       	sbc	r26, r18
    6148:	b3 0b       	sbc	r27, r19
    614a:	8c 39       	cpi	r24, 0x9C	; 156
    614c:	9d 4c       	sbci	r25, 0xCD	; 205
    614e:	a8 40       	sbci	r26, 0x08	; 8
    6150:	b1 05       	cpc	r27, r1
    6152:	08 f4       	brcc	.+2      	; 0x6156 <handleCalibration+0x2ee>
    6154:	dc ce       	rjmp	.-584    	; 0x5f0e <handleCalibration+0xa6>
    6156:	10 92 5c 15 	sts	0x155C, r1	; 0x80155c <tempVel+0x1>
    615a:	10 92 5b 15 	sts	0x155B, r1	; 0x80155b <tempVel>
    615e:	85 e0       	ldi	r24, 0x05	; 5
    6160:	80 93 46 15 	sts	0x1546, r24	; 0x801546 <calibState>
    6164:	d4 ce       	rjmp	.-600    	; 0x5f0e <handleCalibration+0xa6>
    6166:	80 91 38 0f 	lds	r24, 0x0F38	; 0x800f38 <calibWheel>
    616a:	8d 7f       	andi	r24, 0xFD	; 253
    616c:	09 f4       	brne	.+2      	; 0x6170 <handleCalibration+0x308>
    616e:	b8 c0       	rjmp	.+368    	; 0x62e0 <handleCalibration+0x478>
    6170:	20 91 ad 03 	lds	r18, 0x03AD	; 0x8003ad <proximityResult+0x16>
    6174:	30 91 ae 03 	lds	r19, 0x03AE	; 0x8003ae <proximityResult+0x17>
    6178:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <calibrationThr>
    617c:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <calibrationThr+0x1>
    6180:	82 17       	cp	r24, r18
    6182:	93 07       	cpc	r25, r19
    6184:	0c f0       	brlt	.+2      	; 0x6188 <handleCalibration+0x320>
    6186:	41 cf       	rjmp	.-382    	; 0x600a <handleCalibration+0x1a2>
    6188:	83 e0       	ldi	r24, 0x03	; 3
    618a:	80 93 46 15 	sts	0x1546, r24	; 0x801546 <calibState>
    618e:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    6192:	60 93 16 15 	sts	0x1516, r22	; 0x801516 <timeoutOdometry>
    6196:	70 93 17 15 	sts	0x1517, r23	; 0x801517 <timeoutOdometry+0x1>
    619a:	80 93 18 15 	sts	0x1518, r24	; 0x801518 <timeoutOdometry+0x2>
    619e:	90 93 19 15 	sts	0x1519, r25	; 0x801519 <timeoutOdometry+0x3>
    61a2:	33 cf       	rjmp	.-410    	; 0x600a <handleCalibration+0x1a2>
    61a4:	80 91 a0 12 	lds	r24, 0x12A0	; 0x8012a0 <calibVelIndex>
    61a8:	8f 5f       	subi	r24, 0xFF	; 255
    61aa:	8a 30       	cpi	r24, 0x0A	; 10
    61ac:	09 f4       	brne	.+2      	; 0x61b0 <handleCalibration+0x348>
    61ae:	1e c1       	rjmp	.+572    	; 0x63ec <handleCalibration+0x584>
    61b0:	80 93 a0 12 	sts	0x12A0, r24	; 0x8012a0 <calibVelIndex>
    61b4:	10 92 46 15 	sts	0x1546, r1	; 0x801546 <calibState>
    61b8:	aa ce       	rjmp	.-684    	; 0x5f0e <handleCalibration+0xa6>
    61ba:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    61be:	60 93 16 15 	sts	0x1516, r22	; 0x801516 <timeoutOdometry>
    61c2:	70 93 17 15 	sts	0x1517, r23	; 0x801517 <timeoutOdometry+0x1>
    61c6:	80 93 18 15 	sts	0x1518, r24	; 0x801518 <timeoutOdometry+0x2>
    61ca:	90 93 19 15 	sts	0x1519, r25	; 0x801519 <timeoutOdometry+0x3>
    61ce:	87 e0       	ldi	r24, 0x07	; 7
    61d0:	80 93 46 15 	sts	0x1546, r24	; 0x801546 <calibState>
    61d4:	1f 91       	pop	r17
    61d6:	0f 91       	pop	r16
    61d8:	08 95       	ret
    61da:	20 91 a7 03 	lds	r18, 0x03A7	; 0x8003a7 <proximityResult+0x10>
    61de:	30 91 a8 03 	lds	r19, 0x03A8	; 0x8003a8 <proximityResult+0x11>
    61e2:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <calibrationThr>
    61e6:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <calibrationThr+0x1>
    61ea:	82 17       	cp	r24, r18
    61ec:	93 07       	cpc	r25, r19
    61ee:	0c f0       	brlt	.+2      	; 0x61f2 <handleCalibration+0x38a>
    61f0:	9c cf       	rjmp	.-200    	; 0x612a <handleCalibration+0x2c2>
    61f2:	85 e0       	ldi	r24, 0x05	; 5
    61f4:	80 93 46 15 	sts	0x1546, r24	; 0x801546 <calibState>
    61f8:	98 cf       	rjmp	.-208    	; 0x612a <handleCalibration+0x2c2>
    61fa:	80 91 a7 03 	lds	r24, 0x03A7	; 0x8003a7 <proximityResult+0x10>
    61fe:	90 91 a8 03 	lds	r25, 0x03A8	; 0x8003a8 <proximityResult+0x11>
    6202:	20 91 6c 02 	lds	r18, 0x026C	; 0x80026c <minGround>
    6206:	30 91 6d 02 	lds	r19, 0x026D	; 0x80026d <minGround+0x1>
    620a:	82 17       	cp	r24, r18
    620c:	93 07       	cpc	r25, r19
    620e:	0c f0       	brlt	.+2      	; 0x6212 <handleCalibration+0x3aa>
    6210:	92 ce       	rjmp	.-732    	; 0x5f36 <handleCalibration+0xce>
    6212:	90 93 6d 02 	sts	0x026D, r25	; 0x80026d <minGround+0x1>
    6216:	80 93 6c 02 	sts	0x026C, r24	; 0x80026c <minGround>
    621a:	8d ce       	rjmp	.-742    	; 0x5f36 <handleCalibration+0xce>
    621c:	20 91 a7 03 	lds	r18, 0x03A7	; 0x8003a7 <proximityResult+0x10>
    6220:	30 91 a8 03 	lds	r19, 0x03A8	; 0x8003a8 <proximityResult+0x11>
    6224:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <calibrationThr>
    6228:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <calibrationThr+0x1>
    622c:	28 17       	cp	r18, r24
    622e:	39 07       	cpc	r19, r25
    6230:	0c f0       	brlt	.+2      	; 0x6234 <handleCalibration+0x3cc>
    6232:	eb ce       	rjmp	.-554    	; 0x600a <handleCalibration+0x1a2>
    6234:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    6238:	00 91 31 0f 	lds	r16, 0x0F31	; 0x800f31 <timeOdometry>
    623c:	10 91 32 0f 	lds	r17, 0x0F32	; 0x800f32 <timeOdometry+0x1>
    6240:	20 91 33 0f 	lds	r18, 0x0F33	; 0x800f33 <timeOdometry+0x2>
    6244:	30 91 34 0f 	lds	r19, 0x0F34	; 0x800f34 <timeOdometry+0x3>
    6248:	60 1b       	sub	r22, r16
    624a:	71 0b       	sbc	r23, r17
    624c:	82 0b       	sbc	r24, r18
    624e:	93 0b       	sbc	r25, r19
    6250:	60 93 31 0f 	sts	0x0F31, r22	; 0x800f31 <timeOdometry>
    6254:	70 93 32 0f 	sts	0x0F32, r23	; 0x800f32 <timeOdometry+0x1>
    6258:	80 93 33 0f 	sts	0x0F33, r24	; 0x800f33 <timeOdometry+0x2>
    625c:	90 93 34 0f 	sts	0x0F34, r25	; 0x800f34 <timeOdometry+0x3>
    6260:	0e 94 a5 4e 	call	0x9d4a	; 0x9d4a <__floatunsisf>
    6264:	20 e0       	ldi	r18, 0x00	; 0
    6266:	30 e0       	ldi	r19, 0x00	; 0
    6268:	40 ed       	ldi	r20, 0xD0	; 208
    626a:	52 e4       	ldi	r21, 0x42	; 66
    626c:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    6270:	20 e0       	ldi	r18, 0x00	; 0
    6272:	34 e2       	ldi	r19, 0x24	; 36
    6274:	44 e7       	ldi	r20, 0x74	; 116
    6276:	59 e4       	ldi	r21, 0x49	; 73
    6278:	0e 94 c3 4d 	call	0x9b86	; 0x9b86 <__divsf3>
    627c:	9b 01       	movw	r18, r22
    627e:	ac 01       	movw	r20, r24
    6280:	64 e1       	ldi	r22, 0x14	; 20
    6282:	7e e2       	ldi	r23, 0x2E	; 46
    6284:	88 e7       	ldi	r24, 0x78	; 120
    6286:	93 e4       	ldi	r25, 0x43	; 67
    6288:	0e 94 c3 4d 	call	0x9b86	; 0x9b86 <__divsf3>
    628c:	0e 94 76 4e 	call	0x9cec	; 0x9cec <__fixunssfsi>
    6290:	70 93 5c 15 	sts	0x155C, r23	; 0x80155c <tempVel+0x1>
    6294:	60 93 5b 15 	sts	0x155B, r22	; 0x80155b <tempVel>
    6298:	20 91 80 02 	lds	r18, 0x0280	; 0x800280 <leftSumCount>
    629c:	30 91 81 02 	lds	r19, 0x0281	; 0x800281 <leftSumCount+0x1>
    62a0:	40 e0       	ldi	r20, 0x00	; 0
    62a2:	50 e0       	ldi	r21, 0x00	; 0
    62a4:	60 91 86 02 	lds	r22, 0x0286	; 0x800286 <leftSpeedSumOdom>
    62a8:	70 91 87 02 	lds	r23, 0x0287	; 0x800287 <leftSpeedSumOdom+0x1>
    62ac:	80 91 88 02 	lds	r24, 0x0288	; 0x800288 <leftSpeedSumOdom+0x2>
    62b0:	90 91 89 02 	lds	r25, 0x0289	; 0x800289 <leftSpeedSumOdom+0x3>
    62b4:	0e 94 66 51 	call	0xa2cc	; 0xa2cc <__divmodsi4>
    62b8:	30 93 7d 02 	sts	0x027D, r19	; 0x80027d <avgLeftSpeed+0x1>
    62bc:	20 93 7c 02 	sts	0x027C, r18	; 0x80027c <avgLeftSpeed>
    62c0:	0e 94 4d 2e 	call	0x5c9a	; 0x5c9a <updateOdomData>
    62c4:	84 e0       	ldi	r24, 0x04	; 4
    62c6:	80 93 46 15 	sts	0x1546, r24	; 0x801546 <calibState>
    62ca:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    62ce:	60 93 16 15 	sts	0x1516, r22	; 0x801516 <timeoutOdometry>
    62d2:	70 93 17 15 	sts	0x1517, r23	; 0x801517 <timeoutOdometry+0x1>
    62d6:	80 93 18 15 	sts	0x1518, r24	; 0x801518 <timeoutOdometry+0x2>
    62da:	90 93 19 15 	sts	0x1519, r25	; 0x801519 <timeoutOdometry+0x3>
    62de:	95 ce       	rjmp	.-726    	; 0x600a <handleCalibration+0x1a2>
    62e0:	20 91 a7 03 	lds	r18, 0x03A7	; 0x8003a7 <proximityResult+0x10>
    62e4:	30 91 a8 03 	lds	r19, 0x03A8	; 0x8003a8 <proximityResult+0x11>
    62e8:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <calibrationThr>
    62ec:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <calibrationThr+0x1>
    62f0:	82 17       	cp	r24, r18
    62f2:	93 07       	cpc	r25, r19
    62f4:	0c f0       	brlt	.+2      	; 0x62f8 <handleCalibration+0x490>
    62f6:	89 ce       	rjmp	.-750    	; 0x600a <handleCalibration+0x1a2>
    62f8:	47 cf       	rjmp	.-370    	; 0x6188 <handleCalibration+0x320>
    62fa:	20 91 a7 03 	lds	r18, 0x03A7	; 0x8003a7 <proximityResult+0x10>
    62fe:	30 91 a8 03 	lds	r19, 0x03A8	; 0x8003a8 <proximityResult+0x11>
    6302:	80 91 68 02 	lds	r24, 0x0268	; 0x800268 <calibrationThr>
    6306:	90 91 69 02 	lds	r25, 0x0269	; 0x800269 <calibrationThr+0x1>
    630a:	28 17       	cp	r18, r24
    630c:	39 07       	cpc	r19, r25
    630e:	0c f0       	brlt	.+2      	; 0x6312 <handleCalibration+0x4aa>
    6310:	7c ce       	rjmp	.-776    	; 0x600a <handleCalibration+0x1a2>
    6312:	10 92 81 02 	sts	0x0281, r1	; 0x800281 <leftSumCount+0x1>
    6316:	10 92 80 02 	sts	0x0280, r1	; 0x800280 <leftSumCount>
    631a:	10 92 86 02 	sts	0x0286, r1	; 0x800286 <leftSpeedSumOdom>
    631e:	10 92 87 02 	sts	0x0287, r1	; 0x800287 <leftSpeedSumOdom+0x1>
    6322:	10 92 88 02 	sts	0x0288, r1	; 0x800288 <leftSpeedSumOdom+0x2>
    6326:	10 92 89 02 	sts	0x0289, r1	; 0x800289 <leftSpeedSumOdom+0x3>
    632a:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    632e:	60 93 31 0f 	sts	0x0F31, r22	; 0x800f31 <timeOdometry>
    6332:	70 93 32 0f 	sts	0x0F32, r23	; 0x800f32 <timeOdometry+0x1>
    6336:	80 93 33 0f 	sts	0x0F33, r24	; 0x800f33 <timeOdometry+0x2>
    633a:	90 93 34 0f 	sts	0x0F34, r25	; 0x800f34 <timeOdometry+0x3>
    633e:	82 e0       	ldi	r24, 0x02	; 2
    6340:	80 93 46 15 	sts	0x1546, r24	; 0x801546 <calibState>
    6344:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    6348:	60 93 16 15 	sts	0x1516, r22	; 0x801516 <timeoutOdometry>
    634c:	70 93 17 15 	sts	0x1517, r23	; 0x801517 <timeoutOdometry+0x1>
    6350:	80 93 18 15 	sts	0x1518, r24	; 0x801518 <timeoutOdometry+0x2>
    6354:	90 93 19 15 	sts	0x1519, r25	; 0x801519 <timeoutOdometry+0x3>
    6358:	58 ce       	rjmp	.-848    	; 0x600a <handleCalibration+0x1a2>
    635a:	81 30       	cpi	r24, 0x01	; 1
    635c:	39 f1       	breq	.+78     	; 0x63ac <handleCalibration+0x544>
    635e:	82 30       	cpi	r24, 0x02	; 2
    6360:	09 f4       	brne	.+2      	; 0x6364 <handleCalibration+0x4fc>
    6362:	5d c0       	rjmp	.+186    	; 0x641e <handleCalibration+0x5b6>
    6364:	83 30       	cpi	r24, 0x03	; 3
    6366:	09 f0       	breq	.+2      	; 0x636a <handleCalibration+0x502>
    6368:	2f ce       	rjmp	.-930    	; 0x5fc8 <handleCalibration+0x160>
    636a:	80 91 a0 12 	lds	r24, 0x12A0	; 0x8012a0 <calibVelIndex>
    636e:	25 e0       	ldi	r18, 0x05	; 5
    6370:	82 9f       	mul	r24, r18
    6372:	c0 01       	movw	r24, r0
    6374:	11 24       	eor	r1, r1
    6376:	88 0f       	add	r24, r24
    6378:	99 1f       	adc	r25, r25
    637a:	88 0f       	add	r24, r24
    637c:	99 1f       	adc	r25, r25
    637e:	91 95       	neg	r25
    6380:	81 95       	neg	r24
    6382:	91 09       	sbc	r25, r1
    6384:	90 93 16 03 	sts	0x0316, r25	; 0x800316 <pwm_intermediate_right_desired+0x1>
    6388:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <pwm_intermediate_right_desired>
    638c:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <pwm_intermediate_left_desired+0x1>
    6390:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <pwm_intermediate_left_desired>
    6394:	19 ce       	rjmp	.-974    	; 0x5fc8 <handleCalibration+0x160>
    6396:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <pwm_intermediate_right_desired+0x1>
    639a:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <pwm_intermediate_right_desired>
    639e:	8c e3       	ldi	r24, 0x3C	; 60
    63a0:	90 e0       	ldi	r25, 0x00	; 0
    63a2:	90 93 14 03 	sts	0x0314, r25	; 0x800314 <pwm_intermediate_left_desired+0x1>
    63a6:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <pwm_intermediate_left_desired>
    63aa:	9a cd       	rjmp	.-1228   	; 0x5ee0 <handleCalibration+0x78>
    63ac:	80 91 a0 12 	lds	r24, 0x12A0	; 0x8012a0 <calibVelIndex>
    63b0:	25 e0       	ldi	r18, 0x05	; 5
    63b2:	82 9f       	mul	r24, r18
    63b4:	c0 01       	movw	r24, r0
    63b6:	11 24       	eor	r1, r1
    63b8:	88 0f       	add	r24, r24
    63ba:	99 1f       	adc	r25, r25
    63bc:	88 0f       	add	r24, r24
    63be:	99 1f       	adc	r25, r25
    63c0:	90 93 16 03 	sts	0x0316, r25	; 0x800316 <pwm_intermediate_right_desired+0x1>
    63c4:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <pwm_intermediate_right_desired>
    63c8:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <pwm_intermediate_left_desired+0x1>
    63cc:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <pwm_intermediate_left_desired>
    63d0:	fb cd       	rjmp	.-1034   	; 0x5fc8 <handleCalibration+0x160>
    63d2:	10 92 7f 02 	sts	0x027F, r1	; 0x80027f <rightSumCount+0x1>
    63d6:	10 92 7e 02 	sts	0x027E, r1	; 0x80027e <rightSumCount>
    63da:	10 92 82 02 	sts	0x0282, r1	; 0x800282 <rightSpeedSumOdom>
    63de:	10 92 83 02 	sts	0x0283, r1	; 0x800283 <rightSpeedSumOdom+0x1>
    63e2:	10 92 84 02 	sts	0x0284, r1	; 0x800284 <rightSpeedSumOdom+0x2>
    63e6:	10 92 85 02 	sts	0x0285, r1	; 0x800285 <rightSpeedSumOdom+0x3>
    63ea:	9f cf       	rjmp	.-194    	; 0x632a <handleCalibration+0x4c2>
    63ec:	91 e0       	ldi	r25, 0x01	; 1
    63ee:	90 93 a0 12 	sts	0x12A0, r25	; 0x8012a0 <calibVelIndex>
    63f2:	80 91 38 0f 	lds	r24, 0x0F38	; 0x800f38 <calibWheel>
    63f6:	81 11       	cpse	r24, r1
    63f8:	04 c0       	rjmp	.+8      	; 0x6402 <handleCalibration+0x59a>
    63fa:	82 e0       	ldi	r24, 0x02	; 2
    63fc:	80 93 38 0f 	sts	0x0F38, r24	; 0x800f38 <calibWheel>
    6400:	d9 ce       	rjmp	.-590    	; 0x61b4 <handleCalibration+0x34c>
    6402:	81 30       	cpi	r24, 0x01	; 1
    6404:	c1 f1       	breq	.+112    	; 0x6476 <handleCalibration+0x60e>
    6406:	82 30       	cpi	r24, 0x02	; 2
    6408:	d1 f1       	breq	.+116    	; 0x647e <handleCalibration+0x616>
    640a:	83 30       	cpi	r24, 0x03	; 3
    640c:	09 f0       	breq	.+2      	; 0x6410 <handleCalibration+0x5a8>
    640e:	d2 ce       	rjmp	.-604    	; 0x61b4 <handleCalibration+0x34c>
    6410:	10 92 38 0f 	sts	0x0F38, r1	; 0x800f38 <calibWheel>
    6414:	0e 94 bc 4c 	call	0x9978	; 0x9978 <writeCalibrationToFlash>
    6418:	10 92 53 0f 	sts	0x0F53, r1	; 0x800f53 <calibrateOdomFlag>
    641c:	cb ce       	rjmp	.-618    	; 0x61b4 <handleCalibration+0x34c>
    641e:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <pwm_intermediate_right_desired+0x1>
    6422:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <pwm_intermediate_right_desired>
    6426:	80 91 a0 12 	lds	r24, 0x12A0	; 0x8012a0 <calibVelIndex>
    642a:	25 e0       	ldi	r18, 0x05	; 5
    642c:	82 9f       	mul	r24, r18
    642e:	c0 01       	movw	r24, r0
    6430:	11 24       	eor	r1, r1
    6432:	88 0f       	add	r24, r24
    6434:	99 1f       	adc	r25, r25
    6436:	88 0f       	add	r24, r24
    6438:	99 1f       	adc	r25, r25
    643a:	91 95       	neg	r25
    643c:	81 95       	neg	r24
    643e:	91 09       	sbc	r25, r1
    6440:	90 93 14 03 	sts	0x0314, r25	; 0x800314 <pwm_intermediate_left_desired+0x1>
    6444:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <pwm_intermediate_left_desired>
    6448:	bf cd       	rjmp	.-1154   	; 0x5fc8 <handleCalibration+0x160>
    644a:	8c e3       	ldi	r24, 0x3C	; 60
    644c:	90 e0       	ldi	r25, 0x00	; 0
    644e:	90 93 16 03 	sts	0x0316, r25	; 0x800316 <pwm_intermediate_right_desired+0x1>
    6452:	80 93 15 03 	sts	0x0315, r24	; 0x800315 <pwm_intermediate_right_desired>
    6456:	10 92 14 03 	sts	0x0314, r1	; 0x800314 <pwm_intermediate_left_desired+0x1>
    645a:	10 92 13 03 	sts	0x0313, r1	; 0x800313 <pwm_intermediate_left_desired>
    645e:	40 cd       	rjmp	.-1408   	; 0x5ee0 <handleCalibration+0x78>
    6460:	10 92 16 03 	sts	0x0316, r1	; 0x800316 <pwm_intermediate_right_desired+0x1>
    6464:	10 92 15 03 	sts	0x0315, r1	; 0x800315 <pwm_intermediate_right_desired>
    6468:	84 ec       	ldi	r24, 0xC4	; 196
    646a:	9f ef       	ldi	r25, 0xFF	; 255
    646c:	90 93 14 03 	sts	0x0314, r25	; 0x800314 <pwm_intermediate_left_desired+0x1>
    6470:	80 93 13 03 	sts	0x0313, r24	; 0x800313 <pwm_intermediate_left_desired>
    6474:	35 cd       	rjmp	.-1430   	; 0x5ee0 <handleCalibration+0x78>
    6476:	83 e0       	ldi	r24, 0x03	; 3
    6478:	80 93 38 0f 	sts	0x0F38, r24	; 0x800f38 <calibWheel>
    647c:	9b ce       	rjmp	.-714    	; 0x61b4 <handleCalibration+0x34c>
    647e:	90 93 38 0f 	sts	0x0F38, r25	; 0x800f38 <calibWheel>
    6482:	10 92 53 0f 	sts	0x0F53, r1	; 0x800f53 <calibrateOdomFlag>
    6486:	86 e0       	ldi	r24, 0x06	; 6
    6488:	80 93 46 15 	sts	0x1546, r24	; 0x801546 <calibState>
    648c:	40 cd       	rjmp	.-1408   	; 0x5f0e <handleCalibration+0xa6>

0000648e <getInputFromSpeed>:
    648e:	8f 92       	push	r8
    6490:	9f 92       	push	r9
    6492:	af 92       	push	r10
    6494:	bf 92       	push	r11
    6496:	cf 92       	push	r12
    6498:	df 92       	push	r13
    649a:	ef 92       	push	r14
    649c:	ff 92       	push	r15
    649e:	0f 93       	push	r16
    64a0:	1f 93       	push	r17
    64a2:	cf 93       	push	r28
    64a4:	df 93       	push	r29
    64a6:	ec 01       	movw	r28, r24
    64a8:	cc 0f       	add	r28, r28
    64aa:	dd 1f       	adc	r29, r29
    64ac:	cc 0f       	add	r28, r28
    64ae:	dd 1f       	adc	r29, r29
    64b0:	c8 0f       	add	r28, r24
    64b2:	d9 1f       	adc	r29, r25
    64b4:	20 97       	sbiw	r28, 0x00	; 0
    64b6:	09 f4       	brne	.+2      	; 0x64ba <getInputFromSpeed+0x2c>
    64b8:	84 c0       	rjmp	.+264    	; 0x65c2 <getInputFromSpeed+0x134>
    64ba:	8e ef       	ldi	r24, 0xFE	; 254
    64bc:	86 0f       	add	r24, r22
    64be:	82 30       	cpi	r24, 0x02	; 2
    64c0:	08 f4       	brcc	.+2      	; 0x64c4 <getInputFromSpeed+0x36>
    64c2:	74 c0       	rjmp	.+232    	; 0x65ac <getInputFromSpeed+0x11e>
    64c4:	61 11       	cpse	r22, r1
    64c6:	75 c0       	rjmp	.+234    	; 0x65b2 <getInputFromSpeed+0x124>
    64c8:	60 91 c9 12 	lds	r22, 0x12C9	; 0x8012c9 <calibration+0x2>
    64cc:	70 91 ca 12 	lds	r23, 0x12CA	; 0x8012ca <calibration+0x3>
    64d0:	6c 17       	cp	r22, r28
    64d2:	7d 07       	cpc	r23, r29
    64d4:	0c f0       	brlt	.+2      	; 0x64d8 <getInputFromSpeed+0x4a>
    64d6:	84 c0       	rjmp	.+264    	; 0x65e0 <getInputFromSpeed+0x152>
    64d8:	80 91 d9 12 	lds	r24, 0x12D9	; 0x8012d9 <calibration+0x12>
    64dc:	90 91 da 12 	lds	r25, 0x12DA	; 0x8012da <calibration+0x13>
    64e0:	8c 17       	cp	r24, r28
    64e2:	9d 07       	cpc	r25, r29
    64e4:	0c f0       	brlt	.+2      	; 0x64e8 <getInputFromSpeed+0x5a>
    64e6:	cd c1       	rjmp	.+922    	; 0x6882 <getInputFromSpeed+0x3f4>
    64e8:	80 91 e9 12 	lds	r24, 0x12E9	; 0x8012e9 <calibration+0x22>
    64ec:	90 91 ea 12 	lds	r25, 0x12EA	; 0x8012ea <calibration+0x23>
    64f0:	8c 17       	cp	r24, r28
    64f2:	9d 07       	cpc	r25, r29
    64f4:	0c f0       	brlt	.+2      	; 0x64f8 <getInputFromSpeed+0x6a>
    64f6:	10 c2       	rjmp	.+1056   	; 0x6918 <getInputFromSpeed+0x48a>
    64f8:	80 91 f9 12 	lds	r24, 0x12F9	; 0x8012f9 <calibration+0x32>
    64fc:	90 91 fa 12 	lds	r25, 0x12FA	; 0x8012fa <calibration+0x33>
    6500:	8c 17       	cp	r24, r28
    6502:	9d 07       	cpc	r25, r29
    6504:	0c f0       	brlt	.+2      	; 0x6508 <getInputFromSpeed+0x7a>
    6506:	0b c2       	rjmp	.+1046   	; 0x691e <getInputFromSpeed+0x490>
    6508:	80 91 09 13 	lds	r24, 0x1309	; 0x801309 <calibration+0x42>
    650c:	90 91 0a 13 	lds	r25, 0x130A	; 0x80130a <calibration+0x43>
    6510:	8c 17       	cp	r24, r28
    6512:	9d 07       	cpc	r25, r29
    6514:	0c f0       	brlt	.+2      	; 0x6518 <getInputFromSpeed+0x8a>
    6516:	06 c2       	rjmp	.+1036   	; 0x6924 <getInputFromSpeed+0x496>
    6518:	80 91 19 13 	lds	r24, 0x1319	; 0x801319 <calibration+0x52>
    651c:	90 91 1a 13 	lds	r25, 0x131A	; 0x80131a <calibration+0x53>
    6520:	8c 17       	cp	r24, r28
    6522:	9d 07       	cpc	r25, r29
    6524:	0c f0       	brlt	.+2      	; 0x6528 <getInputFromSpeed+0x9a>
    6526:	01 c2       	rjmp	.+1026   	; 0x692a <getInputFromSpeed+0x49c>
    6528:	80 91 29 13 	lds	r24, 0x1329	; 0x801329 <calibration+0x62>
    652c:	90 91 2a 13 	lds	r25, 0x132A	; 0x80132a <calibration+0x63>
    6530:	8c 17       	cp	r24, r28
    6532:	9d 07       	cpc	r25, r29
    6534:	0c f0       	brlt	.+2      	; 0x6538 <getInputFromSpeed+0xaa>
    6536:	ff c1       	rjmp	.+1022   	; 0x6936 <getInputFromSpeed+0x4a8>
    6538:	80 91 39 13 	lds	r24, 0x1339	; 0x801339 <calibration+0x72>
    653c:	90 91 3a 13 	lds	r25, 0x133A	; 0x80133a <calibration+0x73>
    6540:	8c 17       	cp	r24, r28
    6542:	9d 07       	cpc	r25, r29
    6544:	0c f0       	brlt	.+2      	; 0x6548 <getInputFromSpeed+0xba>
    6546:	fa c1       	rjmp	.+1012   	; 0x693c <getInputFromSpeed+0x4ae>
    6548:	00 91 49 13 	lds	r16, 0x1349	; 0x801349 <calibration+0x82>
    654c:	10 91 4a 13 	lds	r17, 0x134A	; 0x80134a <calibration+0x83>
    6550:	0c 17       	cp	r16, r28
    6552:	1d 07       	cpc	r17, r29
    6554:	0c f0       	brlt	.+2      	; 0x6558 <getInputFromSpeed+0xca>
    6556:	ec c1       	rjmp	.+984    	; 0x6930 <getInputFromSpeed+0x4a2>
    6558:	60 91 47 13 	lds	r22, 0x1347	; 0x801347 <calibration+0x80>
    655c:	70 91 48 13 	lds	r23, 0x1348	; 0x801348 <calibration+0x81>
    6560:	07 2e       	mov	r0, r23
    6562:	00 0c       	add	r0, r0
    6564:	88 0b       	sbc	r24, r24
    6566:	99 0b       	sbc	r25, r25
    6568:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    656c:	6b 01       	movw	r12, r22
    656e:	7c 01       	movw	r14, r24
    6570:	be 01       	movw	r22, r28
    6572:	dd 0f       	add	r29, r29
    6574:	88 0b       	sbc	r24, r24
    6576:	99 0b       	sbc	r25, r25
    6578:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    657c:	9b 01       	movw	r18, r22
    657e:	ac 01       	movw	r20, r24
    6580:	c7 01       	movw	r24, r14
    6582:	b6 01       	movw	r22, r12
    6584:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    6588:	6b 01       	movw	r12, r22
    658a:	7c 01       	movw	r14, r24
    658c:	b8 01       	movw	r22, r16
    658e:	11 0f       	add	r17, r17
    6590:	88 0b       	sbc	r24, r24
    6592:	99 0b       	sbc	r25, r25
    6594:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    6598:	9b 01       	movw	r18, r22
    659a:	ac 01       	movw	r20, r24
    659c:	c7 01       	movw	r24, r14
    659e:	b6 01       	movw	r22, r12
    65a0:	0e 94 c3 4d 	call	0x9b86	; 0x9b86 <__divsf3>
    65a4:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__fixsfsi>
    65a8:	cb 01       	movw	r24, r22
    65aa:	0d c0       	rjmp	.+26     	; 0x65c6 <getInputFromSpeed+0x138>
    65ac:	d1 95       	neg	r29
    65ae:	c1 95       	neg	r28
    65b0:	d1 09       	sbc	r29, r1
    65b2:	61 30       	cpi	r22, 0x01	; 1
    65b4:	21 f1       	breq	.+72     	; 0x65fe <getInputFromSpeed+0x170>
    65b6:	63 30       	cpi	r22, 0x03	; 3
    65b8:	09 f4       	brne	.+2      	; 0x65bc <getInputFromSpeed+0x12e>
    65ba:	6e c0       	rjmp	.+220    	; 0x6698 <getInputFromSpeed+0x20a>
    65bc:	62 30       	cpi	r22, 0x02	; 2
    65be:	09 f4       	brne	.+2      	; 0x65c2 <getInputFromSpeed+0x134>
    65c0:	e0 c0       	rjmp	.+448    	; 0x6782 <getInputFromSpeed+0x2f4>
    65c2:	80 e0       	ldi	r24, 0x00	; 0
    65c4:	90 e0       	ldi	r25, 0x00	; 0
    65c6:	df 91       	pop	r29
    65c8:	cf 91       	pop	r28
    65ca:	1f 91       	pop	r17
    65cc:	0f 91       	pop	r16
    65ce:	ff 90       	pop	r15
    65d0:	ef 90       	pop	r14
    65d2:	df 90       	pop	r13
    65d4:	cf 90       	pop	r12
    65d6:	bf 90       	pop	r11
    65d8:	af 90       	pop	r10
    65da:	9f 90       	pop	r9
    65dc:	8f 90       	pop	r8
    65de:	08 95       	ret
    65e0:	20 91 c7 12 	lds	r18, 0x12C7	; 0x8012c7 <calibration>
    65e4:	30 91 c8 12 	lds	r19, 0x12C8	; 0x8012c8 <calibration+0x1>
    65e8:	c2 9f       	mul	r28, r18
    65ea:	c0 01       	movw	r24, r0
    65ec:	c3 9f       	mul	r28, r19
    65ee:	90 0d       	add	r25, r0
    65f0:	d2 9f       	mul	r29, r18
    65f2:	90 0d       	add	r25, r0
    65f4:	11 24       	eor	r1, r1
    65f6:	0e 94 30 51 	call	0xa260	; 0xa260 <__divmodhi4>
    65fa:	cb 01       	movw	r24, r22
    65fc:	e4 cf       	rjmp	.-56     	; 0x65c6 <getInputFromSpeed+0x138>
    65fe:	60 91 cd 12 	lds	r22, 0x12CD	; 0x8012cd <calibration+0x6>
    6602:	70 91 ce 12 	lds	r23, 0x12CE	; 0x8012ce <calibration+0x7>
    6606:	6c 17       	cp	r22, r28
    6608:	7d 07       	cpc	r23, r29
    660a:	0c f0       	brlt	.+2      	; 0x660e <getInputFromSpeed+0x180>
    660c:	07 c1       	rjmp	.+526    	; 0x681c <getInputFromSpeed+0x38e>
    660e:	80 91 dd 12 	lds	r24, 0x12DD	; 0x8012dd <calibration+0x16>
    6612:	90 91 de 12 	lds	r25, 0x12DE	; 0x8012de <calibration+0x17>
    6616:	8c 17       	cp	r24, r28
    6618:	9d 07       	cpc	r25, r29
    661a:	0c f0       	brlt	.+2      	; 0x661e <getInputFromSpeed+0x190>
    661c:	dc c1       	rjmp	.+952    	; 0x69d6 <getInputFromSpeed+0x548>
    661e:	80 91 ed 12 	lds	r24, 0x12ED	; 0x8012ed <calibration+0x26>
    6622:	90 91 ee 12 	lds	r25, 0x12EE	; 0x8012ee <calibration+0x27>
    6626:	8c 17       	cp	r24, r28
    6628:	9d 07       	cpc	r25, r29
    662a:	0c f0       	brlt	.+2      	; 0x662e <getInputFromSpeed+0x1a0>
    662c:	d1 c1       	rjmp	.+930    	; 0x69d0 <getInputFromSpeed+0x542>
    662e:	80 91 fd 12 	lds	r24, 0x12FD	; 0x8012fd <calibration+0x36>
    6632:	90 91 fe 12 	lds	r25, 0x12FE	; 0x8012fe <calibration+0x37>
    6636:	8c 17       	cp	r24, r28
    6638:	9d 07       	cpc	r25, r29
    663a:	0c f0       	brlt	.+2      	; 0x663e <getInputFromSpeed+0x1b0>
    663c:	c6 c1       	rjmp	.+908    	; 0x69ca <getInputFromSpeed+0x53c>
    663e:	80 91 0d 13 	lds	r24, 0x130D	; 0x80130d <calibration+0x46>
    6642:	90 91 0e 13 	lds	r25, 0x130E	; 0x80130e <calibration+0x47>
    6646:	8c 17       	cp	r24, r28
    6648:	9d 07       	cpc	r25, r29
    664a:	0c f0       	brlt	.+2      	; 0x664e <getInputFromSpeed+0x1c0>
    664c:	bb c1       	rjmp	.+886    	; 0x69c4 <getInputFromSpeed+0x536>
    664e:	80 91 1d 13 	lds	r24, 0x131D	; 0x80131d <calibration+0x56>
    6652:	90 91 1e 13 	lds	r25, 0x131E	; 0x80131e <calibration+0x57>
    6656:	8c 17       	cp	r24, r28
    6658:	9d 07       	cpc	r25, r29
    665a:	0c f0       	brlt	.+2      	; 0x665e <getInputFromSpeed+0x1d0>
    665c:	b0 c1       	rjmp	.+864    	; 0x69be <getInputFromSpeed+0x530>
    665e:	80 91 2d 13 	lds	r24, 0x132D	; 0x80132d <calibration+0x66>
    6662:	90 91 2e 13 	lds	r25, 0x132E	; 0x80132e <calibration+0x67>
    6666:	8c 17       	cp	r24, r28
    6668:	9d 07       	cpc	r25, r29
    666a:	0c f0       	brlt	.+2      	; 0x666e <getInputFromSpeed+0x1e0>
    666c:	a5 c1       	rjmp	.+842    	; 0x69b8 <getInputFromSpeed+0x52a>
    666e:	80 91 3d 13 	lds	r24, 0x133D	; 0x80133d <calibration+0x76>
    6672:	90 91 3e 13 	lds	r25, 0x133E	; 0x80133e <calibration+0x77>
    6676:	8c 17       	cp	r24, r28
    6678:	9d 07       	cpc	r25, r29
    667a:	0c f0       	brlt	.+2      	; 0x667e <getInputFromSpeed+0x1f0>
    667c:	9a c1       	rjmp	.+820    	; 0x69b2 <getInputFromSpeed+0x524>
    667e:	00 91 4d 13 	lds	r16, 0x134D	; 0x80134d <calibration+0x86>
    6682:	10 91 4e 13 	lds	r17, 0x134E	; 0x80134e <calibration+0x87>
    6686:	0c 17       	cp	r16, r28
    6688:	1d 07       	cpc	r17, r29
    668a:	0c f0       	brlt	.+2      	; 0x668e <getInputFromSpeed+0x200>
    668c:	5a c1       	rjmp	.+692    	; 0x6942 <getInputFromSpeed+0x4b4>
    668e:	60 91 4b 13 	lds	r22, 0x134B	; 0x80134b <calibration+0x84>
    6692:	70 91 4c 13 	lds	r23, 0x134C	; 0x80134c <calibration+0x85>
    6696:	64 cf       	rjmp	.-312    	; 0x6560 <getInputFromSpeed+0xd2>
    6698:	60 91 d5 12 	lds	r22, 0x12D5	; 0x8012d5 <calibration+0xe>
    669c:	70 91 d6 12 	lds	r23, 0x12D6	; 0x8012d6 <calibration+0xf>
    66a0:	6c 17       	cp	r22, r28
    66a2:	7d 07       	cpc	r23, r29
    66a4:	0c f0       	brlt	.+2      	; 0x66a8 <getInputFromSpeed+0x21a>
    66a6:	c9 c0       	rjmp	.+402    	; 0x683a <getInputFromSpeed+0x3ac>
    66a8:	80 91 e5 12 	lds	r24, 0x12E5	; 0x8012e5 <calibration+0x1e>
    66ac:	90 91 e6 12 	lds	r25, 0x12E6	; 0x8012e6 <calibration+0x1f>
    66b0:	8c 17       	cp	r24, r28
    66b2:	9d 07       	cpc	r25, r29
    66b4:	0c f0       	brlt	.+2      	; 0x66b8 <getInputFromSpeed+0x22a>
    66b6:	27 c2       	rjmp	.+1102   	; 0x6b06 <getInputFromSpeed+0x678>
    66b8:	80 91 f5 12 	lds	r24, 0x12F5	; 0x8012f5 <calibration+0x2e>
    66bc:	90 91 f6 12 	lds	r25, 0x12F6	; 0x8012f6 <calibration+0x2f>
    66c0:	8c 17       	cp	r24, r28
    66c2:	9d 07       	cpc	r25, r29
    66c4:	0c f0       	brlt	.+2      	; 0x66c8 <getInputFromSpeed+0x23a>
    66c6:	13 c2       	rjmp	.+1062   	; 0x6aee <getInputFromSpeed+0x660>
    66c8:	80 91 05 13 	lds	r24, 0x1305	; 0x801305 <calibration+0x3e>
    66cc:	90 91 06 13 	lds	r25, 0x1306	; 0x801306 <calibration+0x3f>
    66d0:	8c 17       	cp	r24, r28
    66d2:	9d 07       	cpc	r25, r29
    66d4:	0c f0       	brlt	.+2      	; 0x66d8 <getInputFromSpeed+0x24a>
    66d6:	08 c2       	rjmp	.+1040   	; 0x6ae8 <getInputFromSpeed+0x65a>
    66d8:	80 91 15 13 	lds	r24, 0x1315	; 0x801315 <calibration+0x4e>
    66dc:	90 91 16 13 	lds	r25, 0x1316	; 0x801316 <calibration+0x4f>
    66e0:	8c 17       	cp	r24, r28
    66e2:	9d 07       	cpc	r25, r29
    66e4:	0c f0       	brlt	.+2      	; 0x66e8 <getInputFromSpeed+0x25a>
    66e6:	0c c2       	rjmp	.+1048   	; 0x6b00 <getInputFromSpeed+0x672>
    66e8:	80 91 25 13 	lds	r24, 0x1325	; 0x801325 <calibration+0x5e>
    66ec:	90 91 26 13 	lds	r25, 0x1326	; 0x801326 <calibration+0x5f>
    66f0:	8c 17       	cp	r24, r28
    66f2:	9d 07       	cpc	r25, r29
    66f4:	0c f0       	brlt	.+2      	; 0x66f8 <getInputFromSpeed+0x26a>
    66f6:	01 c2       	rjmp	.+1026   	; 0x6afa <getInputFromSpeed+0x66c>
    66f8:	80 91 35 13 	lds	r24, 0x1335	; 0x801335 <calibration+0x6e>
    66fc:	90 91 36 13 	lds	r25, 0x1336	; 0x801336 <calibration+0x6f>
    6700:	8c 17       	cp	r24, r28
    6702:	9d 07       	cpc	r25, r29
    6704:	0c f0       	brlt	.+2      	; 0x6708 <getInputFromSpeed+0x27a>
    6706:	f6 c1       	rjmp	.+1004   	; 0x6af4 <getInputFromSpeed+0x666>
    6708:	80 91 45 13 	lds	r24, 0x1345	; 0x801345 <calibration+0x7e>
    670c:	90 91 46 13 	lds	r25, 0x1346	; 0x801346 <calibration+0x7f>
    6710:	8c 17       	cp	r24, r28
    6712:	9d 07       	cpc	r25, r29
    6714:	0c f0       	brlt	.+2      	; 0x6718 <getInputFromSpeed+0x28a>
    6716:	0f c2       	rjmp	.+1054   	; 0x6b36 <getInputFromSpeed+0x6a8>
    6718:	00 91 55 13 	lds	r16, 0x1355	; 0x801355 <calibration+0x8e>
    671c:	10 91 56 13 	lds	r17, 0x1356	; 0x801356 <calibration+0x8f>
    6720:	0c 17       	cp	r16, r28
    6722:	1d 07       	cpc	r17, r29
    6724:	0c f0       	brlt	.+2      	; 0x6728 <getInputFromSpeed+0x29a>
    6726:	5a c1       	rjmp	.+692    	; 0x69dc <getInputFromSpeed+0x54e>
    6728:	60 91 53 13 	lds	r22, 0x1353	; 0x801353 <calibration+0x8c>
    672c:	70 91 54 13 	lds	r23, 0x1354	; 0x801354 <calibration+0x8d>
    6730:	07 2e       	mov	r0, r23
    6732:	00 0c       	add	r0, r0
    6734:	88 0b       	sbc	r24, r24
    6736:	99 0b       	sbc	r25, r25
    6738:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    673c:	6b 01       	movw	r12, r22
    673e:	7c 01       	movw	r14, r24
    6740:	be 01       	movw	r22, r28
    6742:	dd 0f       	add	r29, r29
    6744:	88 0b       	sbc	r24, r24
    6746:	99 0b       	sbc	r25, r25
    6748:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    674c:	9b 01       	movw	r18, r22
    674e:	ac 01       	movw	r20, r24
    6750:	c7 01       	movw	r24, r14
    6752:	b6 01       	movw	r22, r12
    6754:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    6758:	6b 01       	movw	r12, r22
    675a:	7c 01       	movw	r14, r24
    675c:	b8 01       	movw	r22, r16
    675e:	11 0f       	add	r17, r17
    6760:	88 0b       	sbc	r24, r24
    6762:	99 0b       	sbc	r25, r25
    6764:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    6768:	9b 01       	movw	r18, r22
    676a:	ac 01       	movw	r20, r24
    676c:	c7 01       	movw	r24, r14
    676e:	b6 01       	movw	r22, r12
    6770:	0e 94 c3 4d 	call	0x9b86	; 0x9b86 <__divsf3>
    6774:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__fixsfsi>
    6778:	88 27       	eor	r24, r24
    677a:	99 27       	eor	r25, r25
    677c:	86 1b       	sub	r24, r22
    677e:	97 0b       	sbc	r25, r23
    6780:	22 cf       	rjmp	.-444    	; 0x65c6 <getInputFromSpeed+0x138>
    6782:	60 91 d1 12 	lds	r22, 0x12D1	; 0x8012d1 <calibration+0xa>
    6786:	70 91 d2 12 	lds	r23, 0x12D2	; 0x8012d2 <calibration+0xb>
    678a:	6c 17       	cp	r22, r28
    678c:	7d 07       	cpc	r23, r29
    678e:	0c f0       	brlt	.+2      	; 0x6792 <getInputFromSpeed+0x304>
    6790:	66 c0       	rjmp	.+204    	; 0x685e <getInputFromSpeed+0x3d0>
    6792:	80 91 e1 12 	lds	r24, 0x12E1	; 0x8012e1 <calibration+0x1a>
    6796:	90 91 e2 12 	lds	r25, 0x12E2	; 0x8012e2 <calibration+0x1b>
    679a:	8c 17       	cp	r24, r28
    679c:	9d 07       	cpc	r25, r29
    679e:	0c f0       	brlt	.+2      	; 0x67a2 <getInputFromSpeed+0x314>
    67a0:	b5 c1       	rjmp	.+874    	; 0x6b0c <getInputFromSpeed+0x67e>
    67a2:	80 91 f1 12 	lds	r24, 0x12F1	; 0x8012f1 <calibration+0x2a>
    67a6:	90 91 f2 12 	lds	r25, 0x12F2	; 0x8012f2 <calibration+0x2b>
    67aa:	8c 17       	cp	r24, r28
    67ac:	9d 07       	cpc	r25, r29
    67ae:	0c f0       	brlt	.+2      	; 0x67b2 <getInputFromSpeed+0x324>
    67b0:	b3 c1       	rjmp	.+870    	; 0x6b18 <getInputFromSpeed+0x68a>
    67b2:	80 91 01 13 	lds	r24, 0x1301	; 0x801301 <calibration+0x3a>
    67b6:	90 91 02 13 	lds	r25, 0x1302	; 0x801302 <calibration+0x3b>
    67ba:	8c 17       	cp	r24, r28
    67bc:	9d 07       	cpc	r25, r29
    67be:	0c f0       	brlt	.+2      	; 0x67c2 <getInputFromSpeed+0x334>
    67c0:	a8 c1       	rjmp	.+848    	; 0x6b12 <getInputFromSpeed+0x684>
    67c2:	80 91 11 13 	lds	r24, 0x1311	; 0x801311 <calibration+0x4a>
    67c6:	90 91 12 13 	lds	r25, 0x1312	; 0x801312 <calibration+0x4b>
    67ca:	8c 17       	cp	r24, r28
    67cc:	9d 07       	cpc	r25, r29
    67ce:	0c f0       	brlt	.+2      	; 0x67d2 <getInputFromSpeed+0x344>
    67d0:	af c1       	rjmp	.+862    	; 0x6b30 <getInputFromSpeed+0x6a2>
    67d2:	80 91 21 13 	lds	r24, 0x1321	; 0x801321 <calibration+0x5a>
    67d6:	90 91 22 13 	lds	r25, 0x1322	; 0x801322 <calibration+0x5b>
    67da:	8c 17       	cp	r24, r28
    67dc:	9d 07       	cpc	r25, r29
    67de:	0c f0       	brlt	.+2      	; 0x67e2 <getInputFromSpeed+0x354>
    67e0:	a4 c1       	rjmp	.+840    	; 0x6b2a <getInputFromSpeed+0x69c>
    67e2:	80 91 31 13 	lds	r24, 0x1331	; 0x801331 <calibration+0x6a>
    67e6:	90 91 32 13 	lds	r25, 0x1332	; 0x801332 <calibration+0x6b>
    67ea:	8c 17       	cp	r24, r28
    67ec:	9d 07       	cpc	r25, r29
    67ee:	0c f0       	brlt	.+2      	; 0x67f2 <getInputFromSpeed+0x364>
    67f0:	99 c1       	rjmp	.+818    	; 0x6b24 <getInputFromSpeed+0x696>
    67f2:	80 91 41 13 	lds	r24, 0x1341	; 0x801341 <calibration+0x7a>
    67f6:	90 91 42 13 	lds	r25, 0x1342	; 0x801342 <calibration+0x7b>
    67fa:	8c 17       	cp	r24, r28
    67fc:	9d 07       	cpc	r25, r29
    67fe:	0c f0       	brlt	.+2      	; 0x6802 <getInputFromSpeed+0x374>
    6800:	8e c1       	rjmp	.+796    	; 0x6b1e <getInputFromSpeed+0x690>
    6802:	00 91 51 13 	lds	r16, 0x1351	; 0x801351 <calibration+0x8a>
    6806:	10 91 52 13 	lds	r17, 0x1352	; 0x801352 <calibration+0x8b>
    680a:	0c 17       	cp	r16, r28
    680c:	1d 07       	cpc	r17, r29
    680e:	0c f0       	brlt	.+2      	; 0x6812 <getInputFromSpeed+0x384>
    6810:	33 c1       	rjmp	.+614    	; 0x6a78 <getInputFromSpeed+0x5ea>
    6812:	60 91 4f 13 	lds	r22, 0x134F	; 0x80134f <calibration+0x88>
    6816:	70 91 50 13 	lds	r23, 0x1350	; 0x801350 <calibration+0x89>
    681a:	8a cf       	rjmp	.-236    	; 0x6730 <getInputFromSpeed+0x2a2>
    681c:	20 91 cb 12 	lds	r18, 0x12CB	; 0x8012cb <calibration+0x4>
    6820:	30 91 cc 12 	lds	r19, 0x12CC	; 0x8012cc <calibration+0x5>
    6824:	c2 9f       	mul	r28, r18
    6826:	c0 01       	movw	r24, r0
    6828:	c3 9f       	mul	r28, r19
    682a:	90 0d       	add	r25, r0
    682c:	d2 9f       	mul	r29, r18
    682e:	90 0d       	add	r25, r0
    6830:	11 24       	eor	r1, r1
    6832:	0e 94 30 51 	call	0xa260	; 0xa260 <__divmodhi4>
    6836:	cb 01       	movw	r24, r22
    6838:	c6 ce       	rjmp	.-628    	; 0x65c6 <getInputFromSpeed+0x138>
    683a:	20 91 d3 12 	lds	r18, 0x12D3	; 0x8012d3 <calibration+0xc>
    683e:	30 91 d4 12 	lds	r19, 0x12D4	; 0x8012d4 <calibration+0xd>
    6842:	c2 9f       	mul	r28, r18
    6844:	c0 01       	movw	r24, r0
    6846:	c3 9f       	mul	r28, r19
    6848:	90 0d       	add	r25, r0
    684a:	d2 9f       	mul	r29, r18
    684c:	90 0d       	add	r25, r0
    684e:	11 24       	eor	r1, r1
    6850:	0e 94 30 51 	call	0xa260	; 0xa260 <__divmodhi4>
    6854:	88 27       	eor	r24, r24
    6856:	99 27       	eor	r25, r25
    6858:	86 1b       	sub	r24, r22
    685a:	97 0b       	sbc	r25, r23
    685c:	b4 ce       	rjmp	.-664    	; 0x65c6 <getInputFromSpeed+0x138>
    685e:	20 91 cf 12 	lds	r18, 0x12CF	; 0x8012cf <calibration+0x8>
    6862:	30 91 d0 12 	lds	r19, 0x12D0	; 0x8012d0 <calibration+0x9>
    6866:	c2 9f       	mul	r28, r18
    6868:	c0 01       	movw	r24, r0
    686a:	c3 9f       	mul	r28, r19
    686c:	90 0d       	add	r25, r0
    686e:	d2 9f       	mul	r29, r18
    6870:	90 0d       	add	r25, r0
    6872:	11 24       	eor	r1, r1
    6874:	0e 94 30 51 	call	0xa260	; 0xa260 <__divmodhi4>
    6878:	88 27       	eor	r24, r24
    687a:	99 27       	eor	r25, r25
    687c:	86 1b       	sub	r24, r22
    687e:	97 0b       	sbc	r25, r23
    6880:	a2 ce       	rjmp	.-700    	; 0x65c6 <getInputFromSpeed+0x138>
    6882:	01 e0       	ldi	r16, 0x01	; 1
    6884:	10 e0       	ldi	r17, 0x00	; 0
    6886:	f8 01       	movw	r30, r16
    6888:	e2 95       	swap	r30
    688a:	f2 95       	swap	r31
    688c:	f0 7f       	andi	r31, 0xF0	; 240
    688e:	fe 27       	eor	r31, r30
    6890:	e0 7f       	andi	r30, 0xF0	; 240
    6892:	fe 27       	eor	r31, r30
    6894:	e9 54       	subi	r30, 0x49	; 73
    6896:	fd 4e       	sbci	r31, 0xED	; 237
    6898:	c2 80       	ldd	r12, Z+2	; 0x02
    689a:	d3 80       	ldd	r13, Z+3	; 0x03
    689c:	e0 80       	ld	r14, Z
    689e:	f1 80       	ldd	r15, Z+1	; 0x01
    68a0:	02 95       	swap	r16
    68a2:	12 95       	swap	r17
    68a4:	10 7f       	andi	r17, 0xF0	; 240
    68a6:	10 27       	eor	r17, r16
    68a8:	00 7f       	andi	r16, 0xF0	; 240
    68aa:	10 27       	eor	r17, r16
    68ac:	09 53       	subi	r16, 0x39	; 57
    68ae:	1d 4e       	sbci	r17, 0xED	; 237
    68b0:	f8 01       	movw	r30, r16
    68b2:	60 81       	ld	r22, Z
    68b4:	71 81       	ldd	r23, Z+1	; 0x01
    68b6:	6e 19       	sub	r22, r14
    68b8:	7f 09       	sbc	r23, r15
    68ba:	07 2e       	mov	r0, r23
    68bc:	00 0c       	add	r0, r0
    68be:	88 0b       	sbc	r24, r24
    68c0:	99 0b       	sbc	r25, r25
    68c2:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    68c6:	4b 01       	movw	r8, r22
    68c8:	5c 01       	movw	r10, r24
    68ca:	cc 19       	sub	r28, r12
    68cc:	dd 09       	sbc	r29, r13
    68ce:	be 01       	movw	r22, r28
    68d0:	dd 0f       	add	r29, r29
    68d2:	88 0b       	sbc	r24, r24
    68d4:	99 0b       	sbc	r25, r25
    68d6:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    68da:	9b 01       	movw	r18, r22
    68dc:	ac 01       	movw	r20, r24
    68de:	c5 01       	movw	r24, r10
    68e0:	b4 01       	movw	r22, r8
    68e2:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    68e6:	4b 01       	movw	r8, r22
    68e8:	5c 01       	movw	r10, r24
    68ea:	f8 01       	movw	r30, r16
    68ec:	62 81       	ldd	r22, Z+2	; 0x02
    68ee:	73 81       	ldd	r23, Z+3	; 0x03
    68f0:	6c 19       	sub	r22, r12
    68f2:	7d 09       	sbc	r23, r13
    68f4:	07 2e       	mov	r0, r23
    68f6:	00 0c       	add	r0, r0
    68f8:	88 0b       	sbc	r24, r24
    68fa:	99 0b       	sbc	r25, r25
    68fc:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    6900:	9b 01       	movw	r18, r22
    6902:	ac 01       	movw	r20, r24
    6904:	c5 01       	movw	r24, r10
    6906:	b4 01       	movw	r22, r8
    6908:	0e 94 c3 4d 	call	0x9b86	; 0x9b86 <__divsf3>
    690c:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__fixsfsi>
    6910:	c7 01       	movw	r24, r14
    6912:	86 0f       	add	r24, r22
    6914:	97 1f       	adc	r25, r23
    6916:	57 ce       	rjmp	.-850    	; 0x65c6 <getInputFromSpeed+0x138>
    6918:	02 e0       	ldi	r16, 0x02	; 2
    691a:	10 e0       	ldi	r17, 0x00	; 0
    691c:	b4 cf       	rjmp	.-152    	; 0x6886 <getInputFromSpeed+0x3f8>
    691e:	03 e0       	ldi	r16, 0x03	; 3
    6920:	10 e0       	ldi	r17, 0x00	; 0
    6922:	b1 cf       	rjmp	.-158    	; 0x6886 <getInputFromSpeed+0x3f8>
    6924:	04 e0       	ldi	r16, 0x04	; 4
    6926:	10 e0       	ldi	r17, 0x00	; 0
    6928:	ae cf       	rjmp	.-164    	; 0x6886 <getInputFromSpeed+0x3f8>
    692a:	05 e0       	ldi	r16, 0x05	; 5
    692c:	10 e0       	ldi	r17, 0x00	; 0
    692e:	ab cf       	rjmp	.-170    	; 0x6886 <getInputFromSpeed+0x3f8>
    6930:	08 e0       	ldi	r16, 0x08	; 8
    6932:	10 e0       	ldi	r17, 0x00	; 0
    6934:	a8 cf       	rjmp	.-176    	; 0x6886 <getInputFromSpeed+0x3f8>
    6936:	06 e0       	ldi	r16, 0x06	; 6
    6938:	10 e0       	ldi	r17, 0x00	; 0
    693a:	a5 cf       	rjmp	.-182    	; 0x6886 <getInputFromSpeed+0x3f8>
    693c:	07 e0       	ldi	r16, 0x07	; 7
    693e:	10 e0       	ldi	r17, 0x00	; 0
    6940:	a2 cf       	rjmp	.-188    	; 0x6886 <getInputFromSpeed+0x3f8>
    6942:	08 e0       	ldi	r16, 0x08	; 8
    6944:	10 e0       	ldi	r17, 0x00	; 0
    6946:	f8 01       	movw	r30, r16
    6948:	e2 95       	swap	r30
    694a:	f2 95       	swap	r31
    694c:	f0 7f       	andi	r31, 0xF0	; 240
    694e:	fe 27       	eor	r31, r30
    6950:	e0 7f       	andi	r30, 0xF0	; 240
    6952:	fe 27       	eor	r31, r30
    6954:	e9 54       	subi	r30, 0x49	; 73
    6956:	fd 4e       	sbci	r31, 0xED	; 237
    6958:	c6 80       	ldd	r12, Z+6	; 0x06
    695a:	d7 80       	ldd	r13, Z+7	; 0x07
    695c:	e4 80       	ldd	r14, Z+4	; 0x04
    695e:	f5 80       	ldd	r15, Z+5	; 0x05
    6960:	02 95       	swap	r16
    6962:	12 95       	swap	r17
    6964:	10 7f       	andi	r17, 0xF0	; 240
    6966:	10 27       	eor	r17, r16
    6968:	00 7f       	andi	r16, 0xF0	; 240
    696a:	10 27       	eor	r17, r16
    696c:	09 53       	subi	r16, 0x39	; 57
    696e:	1d 4e       	sbci	r17, 0xED	; 237
    6970:	f8 01       	movw	r30, r16
    6972:	64 81       	ldd	r22, Z+4	; 0x04
    6974:	75 81       	ldd	r23, Z+5	; 0x05
    6976:	6e 19       	sub	r22, r14
    6978:	7f 09       	sbc	r23, r15
    697a:	07 2e       	mov	r0, r23
    697c:	00 0c       	add	r0, r0
    697e:	88 0b       	sbc	r24, r24
    6980:	99 0b       	sbc	r25, r25
    6982:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    6986:	4b 01       	movw	r8, r22
    6988:	5c 01       	movw	r10, r24
    698a:	cc 19       	sub	r28, r12
    698c:	dd 09       	sbc	r29, r13
    698e:	be 01       	movw	r22, r28
    6990:	dd 0f       	add	r29, r29
    6992:	88 0b       	sbc	r24, r24
    6994:	99 0b       	sbc	r25, r25
    6996:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    699a:	9b 01       	movw	r18, r22
    699c:	ac 01       	movw	r20, r24
    699e:	c5 01       	movw	r24, r10
    69a0:	b4 01       	movw	r22, r8
    69a2:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    69a6:	4b 01       	movw	r8, r22
    69a8:	5c 01       	movw	r10, r24
    69aa:	f8 01       	movw	r30, r16
    69ac:	66 81       	ldd	r22, Z+6	; 0x06
    69ae:	77 81       	ldd	r23, Z+7	; 0x07
    69b0:	9f cf       	rjmp	.-194    	; 0x68f0 <getInputFromSpeed+0x462>
    69b2:	07 e0       	ldi	r16, 0x07	; 7
    69b4:	10 e0       	ldi	r17, 0x00	; 0
    69b6:	c7 cf       	rjmp	.-114    	; 0x6946 <getInputFromSpeed+0x4b8>
    69b8:	06 e0       	ldi	r16, 0x06	; 6
    69ba:	10 e0       	ldi	r17, 0x00	; 0
    69bc:	c4 cf       	rjmp	.-120    	; 0x6946 <getInputFromSpeed+0x4b8>
    69be:	05 e0       	ldi	r16, 0x05	; 5
    69c0:	10 e0       	ldi	r17, 0x00	; 0
    69c2:	c1 cf       	rjmp	.-126    	; 0x6946 <getInputFromSpeed+0x4b8>
    69c4:	04 e0       	ldi	r16, 0x04	; 4
    69c6:	10 e0       	ldi	r17, 0x00	; 0
    69c8:	be cf       	rjmp	.-132    	; 0x6946 <getInputFromSpeed+0x4b8>
    69ca:	03 e0       	ldi	r16, 0x03	; 3
    69cc:	10 e0       	ldi	r17, 0x00	; 0
    69ce:	bb cf       	rjmp	.-138    	; 0x6946 <getInputFromSpeed+0x4b8>
    69d0:	02 e0       	ldi	r16, 0x02	; 2
    69d2:	10 e0       	ldi	r17, 0x00	; 0
    69d4:	b8 cf       	rjmp	.-144    	; 0x6946 <getInputFromSpeed+0x4b8>
    69d6:	01 e0       	ldi	r16, 0x01	; 1
    69d8:	10 e0       	ldi	r17, 0x00	; 0
    69da:	b5 cf       	rjmp	.-150    	; 0x6946 <getInputFromSpeed+0x4b8>
    69dc:	08 e0       	ldi	r16, 0x08	; 8
    69de:	10 e0       	ldi	r17, 0x00	; 0
    69e0:	f8 01       	movw	r30, r16
    69e2:	e2 95       	swap	r30
    69e4:	f2 95       	swap	r31
    69e6:	f0 7f       	andi	r31, 0xF0	; 240
    69e8:	fe 27       	eor	r31, r30
    69ea:	e0 7f       	andi	r30, 0xF0	; 240
    69ec:	fe 27       	eor	r31, r30
    69ee:	e9 54       	subi	r30, 0x49	; 73
    69f0:	fd 4e       	sbci	r31, 0xED	; 237
    69f2:	c6 84       	ldd	r12, Z+14	; 0x0e
    69f4:	d7 84       	ldd	r13, Z+15	; 0x0f
    69f6:	e4 84       	ldd	r14, Z+12	; 0x0c
    69f8:	f5 84       	ldd	r15, Z+13	; 0x0d
    69fa:	02 95       	swap	r16
    69fc:	12 95       	swap	r17
    69fe:	10 7f       	andi	r17, 0xF0	; 240
    6a00:	10 27       	eor	r17, r16
    6a02:	00 7f       	andi	r16, 0xF0	; 240
    6a04:	10 27       	eor	r17, r16
    6a06:	09 53       	subi	r16, 0x39	; 57
    6a08:	1d 4e       	sbci	r17, 0xED	; 237
    6a0a:	f8 01       	movw	r30, r16
    6a0c:	64 85       	ldd	r22, Z+12	; 0x0c
    6a0e:	75 85       	ldd	r23, Z+13	; 0x0d
    6a10:	6e 19       	sub	r22, r14
    6a12:	7f 09       	sbc	r23, r15
    6a14:	07 2e       	mov	r0, r23
    6a16:	00 0c       	add	r0, r0
    6a18:	88 0b       	sbc	r24, r24
    6a1a:	99 0b       	sbc	r25, r25
    6a1c:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    6a20:	4b 01       	movw	r8, r22
    6a22:	5c 01       	movw	r10, r24
    6a24:	cc 19       	sub	r28, r12
    6a26:	dd 09       	sbc	r29, r13
    6a28:	be 01       	movw	r22, r28
    6a2a:	dd 0f       	add	r29, r29
    6a2c:	88 0b       	sbc	r24, r24
    6a2e:	99 0b       	sbc	r25, r25
    6a30:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    6a34:	9b 01       	movw	r18, r22
    6a36:	ac 01       	movw	r20, r24
    6a38:	c5 01       	movw	r24, r10
    6a3a:	b4 01       	movw	r22, r8
    6a3c:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    6a40:	4b 01       	movw	r8, r22
    6a42:	5c 01       	movw	r10, r24
    6a44:	f8 01       	movw	r30, r16
    6a46:	66 85       	ldd	r22, Z+14	; 0x0e
    6a48:	77 85       	ldd	r23, Z+15	; 0x0f
    6a4a:	6c 19       	sub	r22, r12
    6a4c:	7d 09       	sbc	r23, r13
    6a4e:	07 2e       	mov	r0, r23
    6a50:	00 0c       	add	r0, r0
    6a52:	88 0b       	sbc	r24, r24
    6a54:	99 0b       	sbc	r25, r25
    6a56:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    6a5a:	9b 01       	movw	r18, r22
    6a5c:	ac 01       	movw	r20, r24
    6a5e:	c5 01       	movw	r24, r10
    6a60:	b4 01       	movw	r22, r8
    6a62:	0e 94 c3 4d 	call	0x9b86	; 0x9b86 <__divsf3>
    6a66:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__fixsfsi>
    6a6a:	6e 0d       	add	r22, r14
    6a6c:	7f 1d       	adc	r23, r15
    6a6e:	88 27       	eor	r24, r24
    6a70:	99 27       	eor	r25, r25
    6a72:	86 1b       	sub	r24, r22
    6a74:	97 0b       	sbc	r25, r23
    6a76:	a7 cd       	rjmp	.-1202   	; 0x65c6 <getInputFromSpeed+0x138>
    6a78:	08 e0       	ldi	r16, 0x08	; 8
    6a7a:	10 e0       	ldi	r17, 0x00	; 0
    6a7c:	f8 01       	movw	r30, r16
    6a7e:	e2 95       	swap	r30
    6a80:	f2 95       	swap	r31
    6a82:	f0 7f       	andi	r31, 0xF0	; 240
    6a84:	fe 27       	eor	r31, r30
    6a86:	e0 7f       	andi	r30, 0xF0	; 240
    6a88:	fe 27       	eor	r31, r30
    6a8a:	e9 54       	subi	r30, 0x49	; 73
    6a8c:	fd 4e       	sbci	r31, 0xED	; 237
    6a8e:	c2 84       	ldd	r12, Z+10	; 0x0a
    6a90:	d3 84       	ldd	r13, Z+11	; 0x0b
    6a92:	e0 84       	ldd	r14, Z+8	; 0x08
    6a94:	f1 84       	ldd	r15, Z+9	; 0x09
    6a96:	02 95       	swap	r16
    6a98:	12 95       	swap	r17
    6a9a:	10 7f       	andi	r17, 0xF0	; 240
    6a9c:	10 27       	eor	r17, r16
    6a9e:	00 7f       	andi	r16, 0xF0	; 240
    6aa0:	10 27       	eor	r17, r16
    6aa2:	09 53       	subi	r16, 0x39	; 57
    6aa4:	1d 4e       	sbci	r17, 0xED	; 237
    6aa6:	f8 01       	movw	r30, r16
    6aa8:	60 85       	ldd	r22, Z+8	; 0x08
    6aaa:	71 85       	ldd	r23, Z+9	; 0x09
    6aac:	6e 19       	sub	r22, r14
    6aae:	7f 09       	sbc	r23, r15
    6ab0:	07 2e       	mov	r0, r23
    6ab2:	00 0c       	add	r0, r0
    6ab4:	88 0b       	sbc	r24, r24
    6ab6:	99 0b       	sbc	r25, r25
    6ab8:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    6abc:	4b 01       	movw	r8, r22
    6abe:	5c 01       	movw	r10, r24
    6ac0:	cc 19       	sub	r28, r12
    6ac2:	dd 09       	sbc	r29, r13
    6ac4:	be 01       	movw	r22, r28
    6ac6:	dd 0f       	add	r29, r29
    6ac8:	88 0b       	sbc	r24, r24
    6aca:	99 0b       	sbc	r25, r25
    6acc:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    6ad0:	9b 01       	movw	r18, r22
    6ad2:	ac 01       	movw	r20, r24
    6ad4:	c5 01       	movw	r24, r10
    6ad6:	b4 01       	movw	r22, r8
    6ad8:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    6adc:	4b 01       	movw	r8, r22
    6ade:	5c 01       	movw	r10, r24
    6ae0:	f8 01       	movw	r30, r16
    6ae2:	62 85       	ldd	r22, Z+10	; 0x0a
    6ae4:	73 85       	ldd	r23, Z+11	; 0x0b
    6ae6:	b1 cf       	rjmp	.-158    	; 0x6a4a <getInputFromSpeed+0x5bc>
    6ae8:	03 e0       	ldi	r16, 0x03	; 3
    6aea:	10 e0       	ldi	r17, 0x00	; 0
    6aec:	79 cf       	rjmp	.-270    	; 0x69e0 <getInputFromSpeed+0x552>
    6aee:	02 e0       	ldi	r16, 0x02	; 2
    6af0:	10 e0       	ldi	r17, 0x00	; 0
    6af2:	76 cf       	rjmp	.-276    	; 0x69e0 <getInputFromSpeed+0x552>
    6af4:	06 e0       	ldi	r16, 0x06	; 6
    6af6:	10 e0       	ldi	r17, 0x00	; 0
    6af8:	73 cf       	rjmp	.-282    	; 0x69e0 <getInputFromSpeed+0x552>
    6afa:	05 e0       	ldi	r16, 0x05	; 5
    6afc:	10 e0       	ldi	r17, 0x00	; 0
    6afe:	70 cf       	rjmp	.-288    	; 0x69e0 <getInputFromSpeed+0x552>
    6b00:	04 e0       	ldi	r16, 0x04	; 4
    6b02:	10 e0       	ldi	r17, 0x00	; 0
    6b04:	6d cf       	rjmp	.-294    	; 0x69e0 <getInputFromSpeed+0x552>
    6b06:	01 e0       	ldi	r16, 0x01	; 1
    6b08:	10 e0       	ldi	r17, 0x00	; 0
    6b0a:	6a cf       	rjmp	.-300    	; 0x69e0 <getInputFromSpeed+0x552>
    6b0c:	01 e0       	ldi	r16, 0x01	; 1
    6b0e:	10 e0       	ldi	r17, 0x00	; 0
    6b10:	b5 cf       	rjmp	.-150    	; 0x6a7c <getInputFromSpeed+0x5ee>
    6b12:	03 e0       	ldi	r16, 0x03	; 3
    6b14:	10 e0       	ldi	r17, 0x00	; 0
    6b16:	b2 cf       	rjmp	.-156    	; 0x6a7c <getInputFromSpeed+0x5ee>
    6b18:	02 e0       	ldi	r16, 0x02	; 2
    6b1a:	10 e0       	ldi	r17, 0x00	; 0
    6b1c:	af cf       	rjmp	.-162    	; 0x6a7c <getInputFromSpeed+0x5ee>
    6b1e:	07 e0       	ldi	r16, 0x07	; 7
    6b20:	10 e0       	ldi	r17, 0x00	; 0
    6b22:	ac cf       	rjmp	.-168    	; 0x6a7c <getInputFromSpeed+0x5ee>
    6b24:	06 e0       	ldi	r16, 0x06	; 6
    6b26:	10 e0       	ldi	r17, 0x00	; 0
    6b28:	a9 cf       	rjmp	.-174    	; 0x6a7c <getInputFromSpeed+0x5ee>
    6b2a:	05 e0       	ldi	r16, 0x05	; 5
    6b2c:	10 e0       	ldi	r17, 0x00	; 0
    6b2e:	a6 cf       	rjmp	.-180    	; 0x6a7c <getInputFromSpeed+0x5ee>
    6b30:	04 e0       	ldi	r16, 0x04	; 4
    6b32:	10 e0       	ldi	r17, 0x00	; 0
    6b34:	a3 cf       	rjmp	.-186    	; 0x6a7c <getInputFromSpeed+0x5ee>
    6b36:	07 e0       	ldi	r16, 0x07	; 7
    6b38:	10 e0       	ldi	r17, 0x00	; 0
    6b3a:	52 cf       	rjmp	.-348    	; 0x69e0 <getInputFromSpeed+0x552>

00006b3c <getRightSpeedFromInput>:
    6b3c:	8f 92       	push	r8
    6b3e:	9f 92       	push	r9
    6b40:	af 92       	push	r10
    6b42:	bf 92       	push	r11
    6b44:	cf 92       	push	r12
    6b46:	df 92       	push	r13
    6b48:	ef 92       	push	r14
    6b4a:	ff 92       	push	r15
    6b4c:	0f 93       	push	r16
    6b4e:	1f 93       	push	r17
    6b50:	cf 93       	push	r28
    6b52:	df 93       	push	r29
    6b54:	c0 91 1f 03 	lds	r28, 0x031F	; 0x80031f <last_right_vel>
    6b58:	d0 91 20 03 	lds	r29, 0x0320	; 0x800320 <last_right_vel+0x1>
    6b5c:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <pwm_right>
    6b60:	90 91 1e 03 	lds	r25, 0x031E	; 0x80031e <pwm_right+0x1>
    6b64:	97 fd       	sbrc	r25, 7
    6b66:	1a c1       	rjmp	.+564    	; 0x6d9c <getRightSpeedFromInput+0x260>
    6b68:	60 91 cb 12 	lds	r22, 0x12CB	; 0x8012cb <calibration+0x4>
    6b6c:	70 91 cc 12 	lds	r23, 0x12CC	; 0x8012cc <calibration+0x5>
    6b70:	6c 17       	cp	r22, r28
    6b72:	7d 07       	cpc	r23, r29
    6b74:	0c f0       	brlt	.+2      	; 0x6b78 <getRightSpeedFromInput+0x3c>
    6b76:	a4 c0       	rjmp	.+328    	; 0x6cc0 <getRightSpeedFromInput+0x184>
    6b78:	80 91 db 12 	lds	r24, 0x12DB	; 0x8012db <calibration+0x14>
    6b7c:	90 91 dc 12 	lds	r25, 0x12DC	; 0x8012dc <calibration+0x15>
    6b80:	8c 17       	cp	r24, r28
    6b82:	9d 07       	cpc	r25, r29
    6b84:	0c f0       	brlt	.+2      	; 0x6b88 <getRightSpeedFromInput+0x4c>
    6b86:	6a c2       	rjmp	.+1236   	; 0x705c <getRightSpeedFromInput+0x520>
    6b88:	8f ef       	ldi	r24, 0xFF	; 255
    6b8a:	9f ef       	ldi	r25, 0xFF	; 255
    6b8c:	20 91 eb 12 	lds	r18, 0x12EB	; 0x8012eb <calibration+0x24>
    6b90:	30 91 ec 12 	lds	r19, 0x12EC	; 0x8012ec <calibration+0x25>
    6b94:	2c 17       	cp	r18, r28
    6b96:	3d 07       	cpc	r19, r29
    6b98:	0c f4       	brge	.+2      	; 0x6b9c <getRightSpeedFromInput+0x60>
    6b9a:	a4 c0       	rjmp	.+328    	; 0x6ce4 <getRightSpeedFromInput+0x1a8>
    6b9c:	8f 3f       	cpi	r24, 0xFF	; 255
    6b9e:	ff ef       	ldi	r31, 0xFF	; 255
    6ba0:	9f 07       	cpc	r25, r31
    6ba2:	11 f4       	brne	.+4      	; 0x6ba8 <getRightSpeedFromInput+0x6c>
    6ba4:	82 e0       	ldi	r24, 0x02	; 2
    6ba6:	90 e0       	ldi	r25, 0x00	; 0
    6ba8:	20 91 fb 12 	lds	r18, 0x12FB	; 0x8012fb <calibration+0x34>
    6bac:	30 91 fc 12 	lds	r19, 0x12FC	; 0x8012fc <calibration+0x35>
    6bb0:	2c 17       	cp	r18, r28
    6bb2:	3d 07       	cpc	r19, r29
    6bb4:	0c f0       	brlt	.+2      	; 0x6bb8 <getRightSpeedFromInput+0x7c>
    6bb6:	a4 c0       	rjmp	.+328    	; 0x6d00 <getRightSpeedFromInput+0x1c4>
    6bb8:	20 91 0b 13 	lds	r18, 0x130B	; 0x80130b <calibration+0x44>
    6bbc:	30 91 0c 13 	lds	r19, 0x130C	; 0x80130c <calibration+0x45>
    6bc0:	2c 17       	cp	r18, r28
    6bc2:	3d 07       	cpc	r19, r29
    6bc4:	0c f4       	brge	.+2      	; 0x6bc8 <getRightSpeedFromInput+0x8c>
    6bc6:	a4 c0       	rjmp	.+328    	; 0x6d10 <getRightSpeedFromInput+0x1d4>
    6bc8:	8f 3f       	cpi	r24, 0xFF	; 255
    6bca:	3f ef       	ldi	r19, 0xFF	; 255
    6bcc:	93 07       	cpc	r25, r19
    6bce:	11 f4       	brne	.+4      	; 0x6bd4 <getRightSpeedFromInput+0x98>
    6bd0:	84 e0       	ldi	r24, 0x04	; 4
    6bd2:	90 e0       	ldi	r25, 0x00	; 0
    6bd4:	20 91 1b 13 	lds	r18, 0x131B	; 0x80131b <calibration+0x54>
    6bd8:	30 91 1c 13 	lds	r19, 0x131C	; 0x80131c <calibration+0x55>
    6bdc:	2c 17       	cp	r18, r28
    6bde:	3d 07       	cpc	r19, r29
    6be0:	0c f0       	brlt	.+2      	; 0x6be4 <getRightSpeedFromInput+0xa8>
    6be2:	a4 c0       	rjmp	.+328    	; 0x6d2c <getRightSpeedFromInput+0x1f0>
    6be4:	20 91 2b 13 	lds	r18, 0x132B	; 0x80132b <calibration+0x64>
    6be8:	30 91 2c 13 	lds	r19, 0x132C	; 0x80132c <calibration+0x65>
    6bec:	2c 17       	cp	r18, r28
    6bee:	3d 07       	cpc	r19, r29
    6bf0:	0c f4       	brge	.+2      	; 0x6bf4 <getRightSpeedFromInput+0xb8>
    6bf2:	a4 c0       	rjmp	.+328    	; 0x6d3c <getRightSpeedFromInput+0x200>
    6bf4:	8f 3f       	cpi	r24, 0xFF	; 255
    6bf6:	ff ef       	ldi	r31, 0xFF	; 255
    6bf8:	9f 07       	cpc	r25, r31
    6bfa:	11 f4       	brne	.+4      	; 0x6c00 <getRightSpeedFromInput+0xc4>
    6bfc:	86 e0       	ldi	r24, 0x06	; 6
    6bfe:	90 e0       	ldi	r25, 0x00	; 0
    6c00:	20 91 3b 13 	lds	r18, 0x133B	; 0x80133b <calibration+0x74>
    6c04:	30 91 3c 13 	lds	r19, 0x133C	; 0x80133c <calibration+0x75>
    6c08:	2c 17       	cp	r18, r28
    6c0a:	3d 07       	cpc	r19, r29
    6c0c:	0c f4       	brge	.+2      	; 0x6c10 <getRightSpeedFromInput+0xd4>
    6c0e:	a5 c0       	rjmp	.+330    	; 0x6d5a <getRightSpeedFromInput+0x21e>
    6c10:	20 97       	sbiw	r28, 0x00	; 0
    6c12:	09 f4       	brne	.+2      	; 0x6c16 <getRightSpeedFromInput+0xda>
    6c14:	b2 c0       	rjmp	.+356    	; 0x6d7a <getRightSpeedFromInput+0x23e>
    6c16:	00 97       	sbiw	r24, 0x00	; 0
    6c18:	09 f4       	brne	.+2      	; 0x6c1c <getRightSpeedFromInput+0xe0>
    6c1a:	bf c1       	rjmp	.+894    	; 0x6f9a <getRightSpeedFromInput+0x45e>
    6c1c:	8f 3f       	cpi	r24, 0xFF	; 255
    6c1e:	ef ef       	ldi	r30, 0xFF	; 255
    6c20:	9e 07       	cpc	r25, r30
    6c22:	09 f4       	brne	.+2      	; 0x6c26 <getRightSpeedFromInput+0xea>
    6c24:	3a c1       	rjmp	.+628    	; 0x6e9a <getRightSpeedFromInput+0x35e>
    6c26:	fc 01       	movw	r30, r24
    6c28:	e2 95       	swap	r30
    6c2a:	f2 95       	swap	r31
    6c2c:	f0 7f       	andi	r31, 0xF0	; 240
    6c2e:	fe 27       	eor	r31, r30
    6c30:	e0 7f       	andi	r30, 0xF0	; 240
    6c32:	fe 27       	eor	r31, r30
    6c34:	e9 54       	subi	r30, 0x49	; 73
    6c36:	fd 4e       	sbci	r31, 0xED	; 237
    6c38:	c4 80       	ldd	r12, Z+4	; 0x04
    6c3a:	d5 80       	ldd	r13, Z+5	; 0x05
    6c3c:	e6 80       	ldd	r14, Z+6	; 0x06
    6c3e:	f7 80       	ldd	r15, Z+7	; 0x07
    6c40:	82 95       	swap	r24
    6c42:	92 95       	swap	r25
    6c44:	90 7f       	andi	r25, 0xF0	; 240
    6c46:	98 27       	eor	r25, r24
    6c48:	80 7f       	andi	r24, 0xF0	; 240
    6c4a:	98 27       	eor	r25, r24
    6c4c:	8c 01       	movw	r16, r24
    6c4e:	09 53       	subi	r16, 0x39	; 57
    6c50:	1d 4e       	sbci	r17, 0xED	; 237
    6c52:	f8 01       	movw	r30, r16
    6c54:	66 81       	ldd	r22, Z+6	; 0x06
    6c56:	77 81       	ldd	r23, Z+7	; 0x07
    6c58:	6e 19       	sub	r22, r14
    6c5a:	7f 09       	sbc	r23, r15
    6c5c:	07 2e       	mov	r0, r23
    6c5e:	00 0c       	add	r0, r0
    6c60:	88 0b       	sbc	r24, r24
    6c62:	99 0b       	sbc	r25, r25
    6c64:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    6c68:	4b 01       	movw	r8, r22
    6c6a:	5c 01       	movw	r10, r24
    6c6c:	cc 19       	sub	r28, r12
    6c6e:	dd 09       	sbc	r29, r13
    6c70:	be 01       	movw	r22, r28
    6c72:	dd 0f       	add	r29, r29
    6c74:	88 0b       	sbc	r24, r24
    6c76:	99 0b       	sbc	r25, r25
    6c78:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    6c7c:	9b 01       	movw	r18, r22
    6c7e:	ac 01       	movw	r20, r24
    6c80:	c5 01       	movw	r24, r10
    6c82:	b4 01       	movw	r22, r8
    6c84:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    6c88:	4b 01       	movw	r8, r22
    6c8a:	5c 01       	movw	r10, r24
    6c8c:	f8 01       	movw	r30, r16
    6c8e:	64 81       	ldd	r22, Z+4	; 0x04
    6c90:	75 81       	ldd	r23, Z+5	; 0x05
    6c92:	6c 19       	sub	r22, r12
    6c94:	7d 09       	sbc	r23, r13
    6c96:	07 2e       	mov	r0, r23
    6c98:	00 0c       	add	r0, r0
    6c9a:	88 0b       	sbc	r24, r24
    6c9c:	99 0b       	sbc	r25, r25
    6c9e:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    6ca2:	9b 01       	movw	r18, r22
    6ca4:	ac 01       	movw	r20, r24
    6ca6:	c5 01       	movw	r24, r10
    6ca8:	b4 01       	movw	r22, r8
    6caa:	0e 94 c3 4d 	call	0x9b86	; 0x9b86 <__divsf3>
    6cae:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__fixsfsi>
    6cb2:	6e 0d       	add	r22, r14
    6cb4:	7f 1d       	adc	r23, r15
    6cb6:	70 93 77 02 	sts	0x0277, r23	; 0x800277 <speedRightFromEnc+0x1>
    6cba:	60 93 76 02 	sts	0x0276, r22	; 0x800276 <speedRightFromEnc>
    6cbe:	61 c0       	rjmp	.+194    	; 0x6d82 <getRightSpeedFromInput+0x246>
    6cc0:	80 91 db 12 	lds	r24, 0x12DB	; 0x8012db <calibration+0x14>
    6cc4:	90 91 dc 12 	lds	r25, 0x12DC	; 0x8012dc <calibration+0x15>
    6cc8:	8c 17       	cp	r24, r28
    6cca:	9d 07       	cpc	r25, r29
    6ccc:	0c f4       	brge	.+2      	; 0x6cd0 <getRightSpeedFromInput+0x194>
    6cce:	16 c1       	rjmp	.+556    	; 0x6efc <getRightSpeedFromInput+0x3c0>
    6cd0:	80 e0       	ldi	r24, 0x00	; 0
    6cd2:	90 e0       	ldi	r25, 0x00	; 0
    6cd4:	20 91 eb 12 	lds	r18, 0x12EB	; 0x8012eb <calibration+0x24>
    6cd8:	30 91 ec 12 	lds	r19, 0x12EC	; 0x8012ec <calibration+0x25>
    6cdc:	2c 17       	cp	r18, r28
    6cde:	3d 07       	cpc	r19, r29
    6ce0:	0c f0       	brlt	.+2      	; 0x6ce4 <getRightSpeedFromInput+0x1a8>
    6ce2:	62 cf       	rjmp	.-316    	; 0x6ba8 <getRightSpeedFromInput+0x6c>
    6ce4:	20 91 fb 12 	lds	r18, 0x12FB	; 0x8012fb <calibration+0x34>
    6ce8:	30 91 fc 12 	lds	r19, 0x12FC	; 0x8012fc <calibration+0x35>
    6cec:	2c 17       	cp	r18, r28
    6cee:	3d 07       	cpc	r19, r29
    6cf0:	0c f4       	brge	.+2      	; 0x6cf4 <getRightSpeedFromInput+0x1b8>
    6cf2:	62 cf       	rjmp	.-316    	; 0x6bb8 <getRightSpeedFromInput+0x7c>
    6cf4:	8f 3f       	cpi	r24, 0xFF	; 255
    6cf6:	2f ef       	ldi	r18, 0xFF	; 255
    6cf8:	92 07       	cpc	r25, r18
    6cfa:	11 f4       	brne	.+4      	; 0x6d00 <getRightSpeedFromInput+0x1c4>
    6cfc:	83 e0       	ldi	r24, 0x03	; 3
    6cfe:	90 e0       	ldi	r25, 0x00	; 0
    6d00:	20 91 0b 13 	lds	r18, 0x130B	; 0x80130b <calibration+0x44>
    6d04:	30 91 0c 13 	lds	r19, 0x130C	; 0x80130c <calibration+0x45>
    6d08:	2c 17       	cp	r18, r28
    6d0a:	3d 07       	cpc	r19, r29
    6d0c:	0c f0       	brlt	.+2      	; 0x6d10 <getRightSpeedFromInput+0x1d4>
    6d0e:	62 cf       	rjmp	.-316    	; 0x6bd4 <getRightSpeedFromInput+0x98>
    6d10:	20 91 1b 13 	lds	r18, 0x131B	; 0x80131b <calibration+0x54>
    6d14:	30 91 1c 13 	lds	r19, 0x131C	; 0x80131c <calibration+0x55>
    6d18:	2c 17       	cp	r18, r28
    6d1a:	3d 07       	cpc	r19, r29
    6d1c:	0c f4       	brge	.+2      	; 0x6d20 <getRightSpeedFromInput+0x1e4>
    6d1e:	62 cf       	rjmp	.-316    	; 0x6be4 <getRightSpeedFromInput+0xa8>
    6d20:	8f 3f       	cpi	r24, 0xFF	; 255
    6d22:	ef ef       	ldi	r30, 0xFF	; 255
    6d24:	9e 07       	cpc	r25, r30
    6d26:	11 f4       	brne	.+4      	; 0x6d2c <getRightSpeedFromInput+0x1f0>
    6d28:	85 e0       	ldi	r24, 0x05	; 5
    6d2a:	90 e0       	ldi	r25, 0x00	; 0
    6d2c:	20 91 2b 13 	lds	r18, 0x132B	; 0x80132b <calibration+0x64>
    6d30:	30 91 2c 13 	lds	r19, 0x132C	; 0x80132c <calibration+0x65>
    6d34:	2c 17       	cp	r18, r28
    6d36:	3d 07       	cpc	r19, r29
    6d38:	0c f0       	brlt	.+2      	; 0x6d3c <getRightSpeedFromInput+0x200>
    6d3a:	62 cf       	rjmp	.-316    	; 0x6c00 <getRightSpeedFromInput+0xc4>
    6d3c:	20 91 3b 13 	lds	r18, 0x133B	; 0x80133b <calibration+0x74>
    6d40:	30 91 3c 13 	lds	r19, 0x133C	; 0x80133c <calibration+0x75>
    6d44:	2c 17       	cp	r18, r28
    6d46:	3d 07       	cpc	r19, r29
    6d48:	44 f0       	brlt	.+16     	; 0x6d5a <getRightSpeedFromInput+0x21e>
    6d4a:	8f 3f       	cpi	r24, 0xFF	; 255
    6d4c:	2f ef       	ldi	r18, 0xFF	; 255
    6d4e:	92 07       	cpc	r25, r18
    6d50:	09 f0       	breq	.+2      	; 0x6d54 <getRightSpeedFromInput+0x218>
    6d52:	5e cf       	rjmp	.-324    	; 0x6c10 <getRightSpeedFromInput+0xd4>
    6d54:	87 e0       	ldi	r24, 0x07	; 7
    6d56:	90 e0       	ldi	r25, 0x00	; 0
    6d58:	5b cf       	rjmp	.-330    	; 0x6c10 <getRightSpeedFromInput+0xd4>
    6d5a:	20 91 4b 13 	lds	r18, 0x134B	; 0x80134b <calibration+0x84>
    6d5e:	30 91 4c 13 	lds	r19, 0x134C	; 0x80134c <calibration+0x85>
    6d62:	2c 17       	cp	r18, r28
    6d64:	3d 07       	cpc	r19, r29
    6d66:	0c f4       	brge	.+2      	; 0x6d6a <getRightSpeedFromInput+0x22e>
    6d68:	53 cf       	rjmp	.-346    	; 0x6c10 <getRightSpeedFromInput+0xd4>
    6d6a:	8f 3f       	cpi	r24, 0xFF	; 255
    6d6c:	3f ef       	ldi	r19, 0xFF	; 255
    6d6e:	93 07       	cpc	r25, r19
    6d70:	09 f0       	breq	.+2      	; 0x6d74 <getRightSpeedFromInput+0x238>
    6d72:	4e cf       	rjmp	.-356    	; 0x6c10 <getRightSpeedFromInput+0xd4>
    6d74:	88 e0       	ldi	r24, 0x08	; 8
    6d76:	90 e0       	ldi	r25, 0x00	; 0
    6d78:	4b cf       	rjmp	.-362    	; 0x6c10 <getRightSpeedFromInput+0xd4>
    6d7a:	10 92 77 02 	sts	0x0277, r1	; 0x800277 <speedRightFromEnc+0x1>
    6d7e:	10 92 76 02 	sts	0x0276, r1	; 0x800276 <speedRightFromEnc>
    6d82:	df 91       	pop	r29
    6d84:	cf 91       	pop	r28
    6d86:	1f 91       	pop	r17
    6d88:	0f 91       	pop	r16
    6d8a:	ff 90       	pop	r15
    6d8c:	ef 90       	pop	r14
    6d8e:	df 90       	pop	r13
    6d90:	cf 90       	pop	r12
    6d92:	bf 90       	pop	r11
    6d94:	af 90       	pop	r10
    6d96:	9f 90       	pop	r9
    6d98:	8f 90       	pop	r8
    6d9a:	08 95       	ret
    6d9c:	60 91 d3 12 	lds	r22, 0x12D3	; 0x8012d3 <calibration+0xc>
    6da0:	70 91 d4 12 	lds	r23, 0x12D4	; 0x8012d4 <calibration+0xd>
    6da4:	6c 17       	cp	r22, r28
    6da6:	7d 07       	cpc	r23, r29
    6da8:	0c f4       	brge	.+2      	; 0x6dac <getRightSpeedFromInput+0x270>
    6daa:	5e c0       	rjmp	.+188    	; 0x6e68 <getRightSpeedFromInput+0x32c>
    6dac:	80 91 e3 12 	lds	r24, 0x12E3	; 0x8012e3 <calibration+0x1c>
    6db0:	90 91 e4 12 	lds	r25, 0x12E4	; 0x8012e4 <calibration+0x1d>
    6db4:	8c 17       	cp	r24, r28
    6db6:	9d 07       	cpc	r25, r29
    6db8:	0c f4       	brge	.+2      	; 0x6dbc <getRightSpeedFromInput+0x280>
    6dba:	83 c1       	rjmp	.+774    	; 0x70c2 <getRightSpeedFromInput+0x586>
    6dbc:	80 e0       	ldi	r24, 0x00	; 0
    6dbe:	90 e0       	ldi	r25, 0x00	; 0
    6dc0:	20 91 f3 12 	lds	r18, 0x12F3	; 0x8012f3 <calibration+0x2c>
    6dc4:	30 91 f4 12 	lds	r19, 0x12F4	; 0x8012f4 <calibration+0x2d>
    6dc8:	2c 17       	cp	r18, r28
    6dca:	3d 07       	cpc	r19, r29
    6dcc:	0c f4       	brge	.+2      	; 0x6dd0 <getRightSpeedFromInput+0x294>
    6dce:	99 c0       	rjmp	.+306    	; 0x6f02 <getRightSpeedFromInput+0x3c6>
    6dd0:	20 91 03 13 	lds	r18, 0x1303	; 0x801303 <calibration+0x3c>
    6dd4:	30 91 04 13 	lds	r19, 0x1304	; 0x801304 <calibration+0x3d>
    6dd8:	2c 17       	cp	r18, r28
    6dda:	3d 07       	cpc	r19, r29
    6ddc:	0c f4       	brge	.+2      	; 0x6de0 <getRightSpeedFromInput+0x2a4>
    6dde:	a0 c0       	rjmp	.+320    	; 0x6f20 <getRightSpeedFromInput+0x3e4>
    6de0:	20 91 13 13 	lds	r18, 0x1313	; 0x801313 <calibration+0x4c>
    6de4:	30 91 14 13 	lds	r19, 0x1314	; 0x801314 <calibration+0x4d>
    6de8:	2c 17       	cp	r18, r28
    6dea:	3d 07       	cpc	r19, r29
    6dec:	0c f4       	brge	.+2      	; 0x6df0 <getRightSpeedFromInput+0x2b4>
    6dee:	a7 c0       	rjmp	.+334    	; 0x6f3e <getRightSpeedFromInput+0x402>
    6df0:	20 91 23 13 	lds	r18, 0x1323	; 0x801323 <calibration+0x5c>
    6df4:	30 91 24 13 	lds	r19, 0x1324	; 0x801324 <calibration+0x5d>
    6df8:	2c 17       	cp	r18, r28
    6dfa:	3d 07       	cpc	r19, r29
    6dfc:	0c f4       	brge	.+2      	; 0x6e00 <getRightSpeedFromInput+0x2c4>
    6dfe:	ae c0       	rjmp	.+348    	; 0x6f5c <getRightSpeedFromInput+0x420>
    6e00:	20 91 33 13 	lds	r18, 0x1333	; 0x801333 <calibration+0x6c>
    6e04:	30 91 34 13 	lds	r19, 0x1334	; 0x801334 <calibration+0x6d>
    6e08:	2c 17       	cp	r18, r28
    6e0a:	3d 07       	cpc	r19, r29
    6e0c:	0c f4       	brge	.+2      	; 0x6e10 <getRightSpeedFromInput+0x2d4>
    6e0e:	b5 c0       	rjmp	.+362    	; 0x6f7a <getRightSpeedFromInput+0x43e>
    6e10:	20 91 43 13 	lds	r18, 0x1343	; 0x801343 <calibration+0x7c>
    6e14:	30 91 44 13 	lds	r19, 0x1344	; 0x801344 <calibration+0x7d>
    6e18:	2c 17       	cp	r18, r28
    6e1a:	3d 07       	cpc	r19, r29
    6e1c:	6c f4       	brge	.+26     	; 0x6e38 <getRightSpeedFromInput+0x2fc>
    6e1e:	20 91 53 13 	lds	r18, 0x1353	; 0x801353 <calibration+0x8c>
    6e22:	30 91 54 13 	lds	r19, 0x1354	; 0x801354 <calibration+0x8d>
    6e26:	2c 17       	cp	r18, r28
    6e28:	3d 07       	cpc	r19, r29
    6e2a:	34 f0       	brlt	.+12     	; 0x6e38 <getRightSpeedFromInput+0x2fc>
    6e2c:	8f 3f       	cpi	r24, 0xFF	; 255
    6e2e:	ef ef       	ldi	r30, 0xFF	; 255
    6e30:	9e 07       	cpc	r25, r30
    6e32:	11 f4       	brne	.+4      	; 0x6e38 <getRightSpeedFromInput+0x2fc>
    6e34:	88 e0       	ldi	r24, 0x08	; 8
    6e36:	90 e0       	ldi	r25, 0x00	; 0
    6e38:	00 97       	sbiw	r24, 0x00	; 0
    6e3a:	09 f0       	breq	.+2      	; 0x6e3e <getRightSpeedFromInput+0x302>
    6e3c:	c0 c0       	rjmp	.+384    	; 0x6fbe <getRightSpeedFromInput+0x482>
    6e3e:	20 91 d5 12 	lds	r18, 0x12D5	; 0x8012d5 <calibration+0xe>
    6e42:	30 91 d6 12 	lds	r19, 0x12D6	; 0x8012d6 <calibration+0xf>
    6e46:	c2 9f       	mul	r28, r18
    6e48:	c0 01       	movw	r24, r0
    6e4a:	c3 9f       	mul	r28, r19
    6e4c:	90 0d       	add	r25, r0
    6e4e:	d2 9f       	mul	r29, r18
    6e50:	90 0d       	add	r25, r0
    6e52:	11 24       	eor	r1, r1
    6e54:	0e 94 30 51 	call	0xa260	; 0xa260 <__divmodhi4>
    6e58:	71 95       	neg	r23
    6e5a:	61 95       	neg	r22
    6e5c:	71 09       	sbc	r23, r1
    6e5e:	70 93 77 02 	sts	0x0277, r23	; 0x800277 <speedRightFromEnc+0x1>
    6e62:	60 93 76 02 	sts	0x0276, r22	; 0x800276 <speedRightFromEnc>
    6e66:	8d cf       	rjmp	.-230    	; 0x6d82 <getRightSpeedFromInput+0x246>
    6e68:	80 91 e3 12 	lds	r24, 0x12E3	; 0x8012e3 <calibration+0x1c>
    6e6c:	90 91 e4 12 	lds	r25, 0x12E4	; 0x8012e4 <calibration+0x1d>
    6e70:	8c 17       	cp	r24, r28
    6e72:	9d 07       	cpc	r25, r29
    6e74:	0c f0       	brlt	.+2      	; 0x6e78 <getRightSpeedFromInput+0x33c>
    6e76:	22 c1       	rjmp	.+580    	; 0x70bc <getRightSpeedFromInput+0x580>
    6e78:	8f ef       	ldi	r24, 0xFF	; 255
    6e7a:	9f ef       	ldi	r25, 0xFF	; 255
    6e7c:	20 91 f3 12 	lds	r18, 0x12F3	; 0x8012f3 <calibration+0x2c>
    6e80:	30 91 f4 12 	lds	r19, 0x12F4	; 0x8012f4 <calibration+0x2d>
    6e84:	2c 17       	cp	r18, r28
    6e86:	3d 07       	cpc	r19, r29
    6e88:	e4 f1       	brlt	.+120    	; 0x6f02 <getRightSpeedFromInput+0x3c6>
    6e8a:	8f 3f       	cpi	r24, 0xFF	; 255
    6e8c:	2f ef       	ldi	r18, 0xFF	; 255
    6e8e:	92 07       	cpc	r25, r18
    6e90:	09 f0       	breq	.+2      	; 0x6e94 <getRightSpeedFromInput+0x358>
    6e92:	9e cf       	rjmp	.-196    	; 0x6dd0 <getRightSpeedFromInput+0x294>
    6e94:	82 e0       	ldi	r24, 0x02	; 2
    6e96:	90 e0       	ldi	r25, 0x00	; 0
    6e98:	9b cf       	rjmp	.-202    	; 0x6dd0 <getRightSpeedFromInput+0x294>
    6e9a:	60 91 4d 13 	lds	r22, 0x134D	; 0x80134d <calibration+0x86>
    6e9e:	70 91 4e 13 	lds	r23, 0x134E	; 0x80134e <calibration+0x87>
    6ea2:	07 2e       	mov	r0, r23
    6ea4:	00 0c       	add	r0, r0
    6ea6:	88 0b       	sbc	r24, r24
    6ea8:	99 0b       	sbc	r25, r25
    6eaa:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    6eae:	6b 01       	movw	r12, r22
    6eb0:	7c 01       	movw	r14, r24
    6eb2:	be 01       	movw	r22, r28
    6eb4:	dd 0f       	add	r29, r29
    6eb6:	88 0b       	sbc	r24, r24
    6eb8:	99 0b       	sbc	r25, r25
    6eba:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    6ebe:	9b 01       	movw	r18, r22
    6ec0:	ac 01       	movw	r20, r24
    6ec2:	c7 01       	movw	r24, r14
    6ec4:	b6 01       	movw	r22, r12
    6ec6:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    6eca:	6b 01       	movw	r12, r22
    6ecc:	7c 01       	movw	r14, r24
    6ece:	60 91 4b 13 	lds	r22, 0x134B	; 0x80134b <calibration+0x84>
    6ed2:	70 91 4c 13 	lds	r23, 0x134C	; 0x80134c <calibration+0x85>
    6ed6:	07 2e       	mov	r0, r23
    6ed8:	00 0c       	add	r0, r0
    6eda:	88 0b       	sbc	r24, r24
    6edc:	99 0b       	sbc	r25, r25
    6ede:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    6ee2:	9b 01       	movw	r18, r22
    6ee4:	ac 01       	movw	r20, r24
    6ee6:	c7 01       	movw	r24, r14
    6ee8:	b6 01       	movw	r22, r12
    6eea:	0e 94 c3 4d 	call	0x9b86	; 0x9b86 <__divsf3>
    6eee:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__fixsfsi>
    6ef2:	70 93 77 02 	sts	0x0277, r23	; 0x800277 <speedRightFromEnc+0x1>
    6ef6:	60 93 76 02 	sts	0x0276, r22	; 0x800276 <speedRightFromEnc>
    6efa:	43 cf       	rjmp	.-378    	; 0x6d82 <getRightSpeedFromInput+0x246>
    6efc:	80 e0       	ldi	r24, 0x00	; 0
    6efe:	90 e0       	ldi	r25, 0x00	; 0
    6f00:	45 ce       	rjmp	.-886    	; 0x6b8c <getRightSpeedFromInput+0x50>
    6f02:	20 91 03 13 	lds	r18, 0x1303	; 0x801303 <calibration+0x3c>
    6f06:	30 91 04 13 	lds	r19, 0x1304	; 0x801304 <calibration+0x3d>
    6f0a:	2c 17       	cp	r18, r28
    6f0c:	3d 07       	cpc	r19, r29
    6f0e:	44 f0       	brlt	.+16     	; 0x6f20 <getRightSpeedFromInput+0x3e4>
    6f10:	8f 3f       	cpi	r24, 0xFF	; 255
    6f12:	3f ef       	ldi	r19, 0xFF	; 255
    6f14:	93 07       	cpc	r25, r19
    6f16:	09 f0       	breq	.+2      	; 0x6f1a <getRightSpeedFromInput+0x3de>
    6f18:	63 cf       	rjmp	.-314    	; 0x6de0 <getRightSpeedFromInput+0x2a4>
    6f1a:	83 e0       	ldi	r24, 0x03	; 3
    6f1c:	90 e0       	ldi	r25, 0x00	; 0
    6f1e:	60 cf       	rjmp	.-320    	; 0x6de0 <getRightSpeedFromInput+0x2a4>
    6f20:	20 91 13 13 	lds	r18, 0x1313	; 0x801313 <calibration+0x4c>
    6f24:	30 91 14 13 	lds	r19, 0x1314	; 0x801314 <calibration+0x4d>
    6f28:	2c 17       	cp	r18, r28
    6f2a:	3d 07       	cpc	r19, r29
    6f2c:	44 f0       	brlt	.+16     	; 0x6f3e <getRightSpeedFromInput+0x402>
    6f2e:	8f 3f       	cpi	r24, 0xFF	; 255
    6f30:	ef ef       	ldi	r30, 0xFF	; 255
    6f32:	9e 07       	cpc	r25, r30
    6f34:	09 f0       	breq	.+2      	; 0x6f38 <getRightSpeedFromInput+0x3fc>
    6f36:	5c cf       	rjmp	.-328    	; 0x6df0 <getRightSpeedFromInput+0x2b4>
    6f38:	84 e0       	ldi	r24, 0x04	; 4
    6f3a:	90 e0       	ldi	r25, 0x00	; 0
    6f3c:	59 cf       	rjmp	.-334    	; 0x6df0 <getRightSpeedFromInput+0x2b4>
    6f3e:	20 91 23 13 	lds	r18, 0x1323	; 0x801323 <calibration+0x5c>
    6f42:	30 91 24 13 	lds	r19, 0x1324	; 0x801324 <calibration+0x5d>
    6f46:	2c 17       	cp	r18, r28
    6f48:	3d 07       	cpc	r19, r29
    6f4a:	44 f0       	brlt	.+16     	; 0x6f5c <getRightSpeedFromInput+0x420>
    6f4c:	8f 3f       	cpi	r24, 0xFF	; 255
    6f4e:	ff ef       	ldi	r31, 0xFF	; 255
    6f50:	9f 07       	cpc	r25, r31
    6f52:	09 f0       	breq	.+2      	; 0x6f56 <getRightSpeedFromInput+0x41a>
    6f54:	55 cf       	rjmp	.-342    	; 0x6e00 <getRightSpeedFromInput+0x2c4>
    6f56:	85 e0       	ldi	r24, 0x05	; 5
    6f58:	90 e0       	ldi	r25, 0x00	; 0
    6f5a:	52 cf       	rjmp	.-348    	; 0x6e00 <getRightSpeedFromInput+0x2c4>
    6f5c:	20 91 33 13 	lds	r18, 0x1333	; 0x801333 <calibration+0x6c>
    6f60:	30 91 34 13 	lds	r19, 0x1334	; 0x801334 <calibration+0x6d>
    6f64:	2c 17       	cp	r18, r28
    6f66:	3d 07       	cpc	r19, r29
    6f68:	44 f0       	brlt	.+16     	; 0x6f7a <getRightSpeedFromInput+0x43e>
    6f6a:	8f 3f       	cpi	r24, 0xFF	; 255
    6f6c:	2f ef       	ldi	r18, 0xFF	; 255
    6f6e:	92 07       	cpc	r25, r18
    6f70:	09 f0       	breq	.+2      	; 0x6f74 <getRightSpeedFromInput+0x438>
    6f72:	4e cf       	rjmp	.-356    	; 0x6e10 <getRightSpeedFromInput+0x2d4>
    6f74:	86 e0       	ldi	r24, 0x06	; 6
    6f76:	90 e0       	ldi	r25, 0x00	; 0
    6f78:	4b cf       	rjmp	.-362    	; 0x6e10 <getRightSpeedFromInput+0x2d4>
    6f7a:	20 91 43 13 	lds	r18, 0x1343	; 0x801343 <calibration+0x7c>
    6f7e:	30 91 44 13 	lds	r19, 0x1344	; 0x801344 <calibration+0x7d>
    6f82:	2c 17       	cp	r18, r28
    6f84:	3d 07       	cpc	r19, r29
    6f86:	0c f4       	brge	.+2      	; 0x6f8a <getRightSpeedFromInput+0x44e>
    6f88:	4a cf       	rjmp	.-364    	; 0x6e1e <getRightSpeedFromInput+0x2e2>
    6f8a:	8f 3f       	cpi	r24, 0xFF	; 255
    6f8c:	3f ef       	ldi	r19, 0xFF	; 255
    6f8e:	93 07       	cpc	r25, r19
    6f90:	09 f0       	breq	.+2      	; 0x6f94 <getRightSpeedFromInput+0x458>
    6f92:	52 cf       	rjmp	.-348    	; 0x6e38 <getRightSpeedFromInput+0x2fc>
    6f94:	87 e0       	ldi	r24, 0x07	; 7
    6f96:	90 e0       	ldi	r25, 0x00	; 0
    6f98:	4f cf       	rjmp	.-354    	; 0x6e38 <getRightSpeedFromInput+0x2fc>
    6f9a:	20 91 cd 12 	lds	r18, 0x12CD	; 0x8012cd <calibration+0x6>
    6f9e:	30 91 ce 12 	lds	r19, 0x12CE	; 0x8012ce <calibration+0x7>
    6fa2:	c2 9f       	mul	r28, r18
    6fa4:	c0 01       	movw	r24, r0
    6fa6:	c3 9f       	mul	r28, r19
    6fa8:	90 0d       	add	r25, r0
    6faa:	d2 9f       	mul	r29, r18
    6fac:	90 0d       	add	r25, r0
    6fae:	11 24       	eor	r1, r1
    6fb0:	0e 94 30 51 	call	0xa260	; 0xa260 <__divmodhi4>
    6fb4:	70 93 77 02 	sts	0x0277, r23	; 0x800277 <speedRightFromEnc+0x1>
    6fb8:	60 93 76 02 	sts	0x0276, r22	; 0x800276 <speedRightFromEnc>
    6fbc:	e2 ce       	rjmp	.-572    	; 0x6d82 <getRightSpeedFromInput+0x246>
    6fbe:	8f 3f       	cpi	r24, 0xFF	; 255
    6fc0:	ff ef       	ldi	r31, 0xFF	; 255
    6fc2:	9f 07       	cpc	r25, r31
    6fc4:	09 f4       	brne	.+2      	; 0x6fc8 <getRightSpeedFromInput+0x48c>
    6fc6:	4d c0       	rjmp	.+154    	; 0x7062 <getRightSpeedFromInput+0x526>
    6fc8:	fc 01       	movw	r30, r24
    6fca:	e2 95       	swap	r30
    6fcc:	f2 95       	swap	r31
    6fce:	f0 7f       	andi	r31, 0xF0	; 240
    6fd0:	fe 27       	eor	r31, r30
    6fd2:	e0 7f       	andi	r30, 0xF0	; 240
    6fd4:	fe 27       	eor	r31, r30
    6fd6:	e9 54       	subi	r30, 0x49	; 73
    6fd8:	fd 4e       	sbci	r31, 0xED	; 237
    6fda:	c4 84       	ldd	r12, Z+12	; 0x0c
    6fdc:	d5 84       	ldd	r13, Z+13	; 0x0d
    6fde:	06 85       	ldd	r16, Z+14	; 0x0e
    6fe0:	17 85       	ldd	r17, Z+15	; 0x0f
    6fe2:	82 95       	swap	r24
    6fe4:	92 95       	swap	r25
    6fe6:	90 7f       	andi	r25, 0xF0	; 240
    6fe8:	98 27       	eor	r25, r24
    6fea:	80 7f       	andi	r24, 0xF0	; 240
    6fec:	98 27       	eor	r25, r24
    6fee:	9c 01       	movw	r18, r24
    6ff0:	29 53       	subi	r18, 0x39	; 57
    6ff2:	3d 4e       	sbci	r19, 0xED	; 237
    6ff4:	79 01       	movw	r14, r18
    6ff6:	f9 01       	movw	r30, r18
    6ff8:	66 85       	ldd	r22, Z+14	; 0x0e
    6ffa:	77 85       	ldd	r23, Z+15	; 0x0f
    6ffc:	60 1b       	sub	r22, r16
    6ffe:	71 0b       	sbc	r23, r17
    7000:	07 2e       	mov	r0, r23
    7002:	00 0c       	add	r0, r0
    7004:	88 0b       	sbc	r24, r24
    7006:	99 0b       	sbc	r25, r25
    7008:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    700c:	4b 01       	movw	r8, r22
    700e:	5c 01       	movw	r10, r24
    7010:	cc 19       	sub	r28, r12
    7012:	dd 09       	sbc	r29, r13
    7014:	be 01       	movw	r22, r28
    7016:	dd 0f       	add	r29, r29
    7018:	88 0b       	sbc	r24, r24
    701a:	99 0b       	sbc	r25, r25
    701c:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    7020:	9b 01       	movw	r18, r22
    7022:	ac 01       	movw	r20, r24
    7024:	c5 01       	movw	r24, r10
    7026:	b4 01       	movw	r22, r8
    7028:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    702c:	4b 01       	movw	r8, r22
    702e:	5c 01       	movw	r10, r24
    7030:	f7 01       	movw	r30, r14
    7032:	64 85       	ldd	r22, Z+12	; 0x0c
    7034:	75 85       	ldd	r23, Z+13	; 0x0d
    7036:	6c 19       	sub	r22, r12
    7038:	7d 09       	sbc	r23, r13
    703a:	07 2e       	mov	r0, r23
    703c:	00 0c       	add	r0, r0
    703e:	88 0b       	sbc	r24, r24
    7040:	99 0b       	sbc	r25, r25
    7042:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    7046:	9b 01       	movw	r18, r22
    7048:	ac 01       	movw	r20, r24
    704a:	c5 01       	movw	r24, r10
    704c:	b4 01       	movw	r22, r8
    704e:	0e 94 c3 4d 	call	0x9b86	; 0x9b86 <__divsf3>
    7052:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__fixsfsi>
    7056:	60 0f       	add	r22, r16
    7058:	71 1f       	adc	r23, r17
    705a:	fe ce       	rjmp	.-516    	; 0x6e58 <getRightSpeedFromInput+0x31c>
    705c:	81 e0       	ldi	r24, 0x01	; 1
    705e:	90 e0       	ldi	r25, 0x00	; 0
    7060:	39 ce       	rjmp	.-910    	; 0x6cd4 <getRightSpeedFromInput+0x198>
    7062:	60 91 55 13 	lds	r22, 0x1355	; 0x801355 <calibration+0x8e>
    7066:	70 91 56 13 	lds	r23, 0x1356	; 0x801356 <calibration+0x8f>
    706a:	07 2e       	mov	r0, r23
    706c:	00 0c       	add	r0, r0
    706e:	88 0b       	sbc	r24, r24
    7070:	99 0b       	sbc	r25, r25
    7072:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    7076:	6b 01       	movw	r12, r22
    7078:	7c 01       	movw	r14, r24
    707a:	be 01       	movw	r22, r28
    707c:	dd 0f       	add	r29, r29
    707e:	88 0b       	sbc	r24, r24
    7080:	99 0b       	sbc	r25, r25
    7082:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    7086:	9b 01       	movw	r18, r22
    7088:	ac 01       	movw	r20, r24
    708a:	c7 01       	movw	r24, r14
    708c:	b6 01       	movw	r22, r12
    708e:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    7092:	6b 01       	movw	r12, r22
    7094:	7c 01       	movw	r14, r24
    7096:	60 91 53 13 	lds	r22, 0x1353	; 0x801353 <calibration+0x8c>
    709a:	70 91 54 13 	lds	r23, 0x1354	; 0x801354 <calibration+0x8d>
    709e:	07 2e       	mov	r0, r23
    70a0:	00 0c       	add	r0, r0
    70a2:	88 0b       	sbc	r24, r24
    70a4:	99 0b       	sbc	r25, r25
    70a6:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    70aa:	9b 01       	movw	r18, r22
    70ac:	ac 01       	movw	r20, r24
    70ae:	c7 01       	movw	r24, r14
    70b0:	b6 01       	movw	r22, r12
    70b2:	0e 94 c3 4d 	call	0x9b86	; 0x9b86 <__divsf3>
    70b6:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__fixsfsi>
    70ba:	ce ce       	rjmp	.-612    	; 0x6e58 <getRightSpeedFromInput+0x31c>
    70bc:	81 e0       	ldi	r24, 0x01	; 1
    70be:	90 e0       	ldi	r25, 0x00	; 0
    70c0:	7f ce       	rjmp	.-770    	; 0x6dc0 <getRightSpeedFromInput+0x284>
    70c2:	80 e0       	ldi	r24, 0x00	; 0
    70c4:	90 e0       	ldi	r25, 0x00	; 0
    70c6:	da ce       	rjmp	.-588    	; 0x6e7c <getRightSpeedFromInput+0x340>

000070c8 <getLeftSpeedFromInput>:
    70c8:	8f 92       	push	r8
    70ca:	9f 92       	push	r9
    70cc:	af 92       	push	r10
    70ce:	bf 92       	push	r11
    70d0:	cf 92       	push	r12
    70d2:	df 92       	push	r13
    70d4:	ef 92       	push	r14
    70d6:	ff 92       	push	r15
    70d8:	0f 93       	push	r16
    70da:	1f 93       	push	r17
    70dc:	cf 93       	push	r28
    70de:	df 93       	push	r29
    70e0:	c0 91 21 03 	lds	r28, 0x0321	; 0x800321 <last_left_vel>
    70e4:	d0 91 22 03 	lds	r29, 0x0322	; 0x800322 <last_left_vel+0x1>
    70e8:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <pwm_left>
    70ec:	90 91 1c 03 	lds	r25, 0x031C	; 0x80031c <pwm_left+0x1>
    70f0:	97 fd       	sbrc	r25, 7
    70f2:	1a c1       	rjmp	.+564    	; 0x7328 <getLeftSpeedFromInput+0x260>
    70f4:	60 91 c7 12 	lds	r22, 0x12C7	; 0x8012c7 <calibration>
    70f8:	70 91 c8 12 	lds	r23, 0x12C8	; 0x8012c8 <calibration+0x1>
    70fc:	6c 17       	cp	r22, r28
    70fe:	7d 07       	cpc	r23, r29
    7100:	0c f0       	brlt	.+2      	; 0x7104 <getLeftSpeedFromInput+0x3c>
    7102:	a4 c0       	rjmp	.+328    	; 0x724c <getLeftSpeedFromInput+0x184>
    7104:	80 91 d7 12 	lds	r24, 0x12D7	; 0x8012d7 <calibration+0x10>
    7108:	90 91 d8 12 	lds	r25, 0x12D8	; 0x8012d8 <calibration+0x11>
    710c:	8c 17       	cp	r24, r28
    710e:	9d 07       	cpc	r25, r29
    7110:	0c f0       	brlt	.+2      	; 0x7114 <getLeftSpeedFromInput+0x4c>
    7112:	6a c2       	rjmp	.+1236   	; 0x75e8 <getLeftSpeedFromInput+0x520>
    7114:	8f ef       	ldi	r24, 0xFF	; 255
    7116:	9f ef       	ldi	r25, 0xFF	; 255
    7118:	20 91 e7 12 	lds	r18, 0x12E7	; 0x8012e7 <calibration+0x20>
    711c:	30 91 e8 12 	lds	r19, 0x12E8	; 0x8012e8 <calibration+0x21>
    7120:	2c 17       	cp	r18, r28
    7122:	3d 07       	cpc	r19, r29
    7124:	0c f4       	brge	.+2      	; 0x7128 <getLeftSpeedFromInput+0x60>
    7126:	a4 c0       	rjmp	.+328    	; 0x7270 <getLeftSpeedFromInput+0x1a8>
    7128:	8f 3f       	cpi	r24, 0xFF	; 255
    712a:	ff ef       	ldi	r31, 0xFF	; 255
    712c:	9f 07       	cpc	r25, r31
    712e:	11 f4       	brne	.+4      	; 0x7134 <getLeftSpeedFromInput+0x6c>
    7130:	82 e0       	ldi	r24, 0x02	; 2
    7132:	90 e0       	ldi	r25, 0x00	; 0
    7134:	20 91 f7 12 	lds	r18, 0x12F7	; 0x8012f7 <calibration+0x30>
    7138:	30 91 f8 12 	lds	r19, 0x12F8	; 0x8012f8 <calibration+0x31>
    713c:	2c 17       	cp	r18, r28
    713e:	3d 07       	cpc	r19, r29
    7140:	0c f0       	brlt	.+2      	; 0x7144 <getLeftSpeedFromInput+0x7c>
    7142:	a4 c0       	rjmp	.+328    	; 0x728c <getLeftSpeedFromInput+0x1c4>
    7144:	20 91 07 13 	lds	r18, 0x1307	; 0x801307 <calibration+0x40>
    7148:	30 91 08 13 	lds	r19, 0x1308	; 0x801308 <calibration+0x41>
    714c:	2c 17       	cp	r18, r28
    714e:	3d 07       	cpc	r19, r29
    7150:	0c f4       	brge	.+2      	; 0x7154 <getLeftSpeedFromInput+0x8c>
    7152:	a4 c0       	rjmp	.+328    	; 0x729c <getLeftSpeedFromInput+0x1d4>
    7154:	8f 3f       	cpi	r24, 0xFF	; 255
    7156:	3f ef       	ldi	r19, 0xFF	; 255
    7158:	93 07       	cpc	r25, r19
    715a:	11 f4       	brne	.+4      	; 0x7160 <getLeftSpeedFromInput+0x98>
    715c:	84 e0       	ldi	r24, 0x04	; 4
    715e:	90 e0       	ldi	r25, 0x00	; 0
    7160:	20 91 17 13 	lds	r18, 0x1317	; 0x801317 <calibration+0x50>
    7164:	30 91 18 13 	lds	r19, 0x1318	; 0x801318 <calibration+0x51>
    7168:	2c 17       	cp	r18, r28
    716a:	3d 07       	cpc	r19, r29
    716c:	0c f0       	brlt	.+2      	; 0x7170 <getLeftSpeedFromInput+0xa8>
    716e:	a4 c0       	rjmp	.+328    	; 0x72b8 <getLeftSpeedFromInput+0x1f0>
    7170:	20 91 27 13 	lds	r18, 0x1327	; 0x801327 <calibration+0x60>
    7174:	30 91 28 13 	lds	r19, 0x1328	; 0x801328 <calibration+0x61>
    7178:	2c 17       	cp	r18, r28
    717a:	3d 07       	cpc	r19, r29
    717c:	0c f4       	brge	.+2      	; 0x7180 <getLeftSpeedFromInput+0xb8>
    717e:	a4 c0       	rjmp	.+328    	; 0x72c8 <getLeftSpeedFromInput+0x200>
    7180:	8f 3f       	cpi	r24, 0xFF	; 255
    7182:	ff ef       	ldi	r31, 0xFF	; 255
    7184:	9f 07       	cpc	r25, r31
    7186:	11 f4       	brne	.+4      	; 0x718c <getLeftSpeedFromInput+0xc4>
    7188:	86 e0       	ldi	r24, 0x06	; 6
    718a:	90 e0       	ldi	r25, 0x00	; 0
    718c:	20 91 37 13 	lds	r18, 0x1337	; 0x801337 <calibration+0x70>
    7190:	30 91 38 13 	lds	r19, 0x1338	; 0x801338 <calibration+0x71>
    7194:	2c 17       	cp	r18, r28
    7196:	3d 07       	cpc	r19, r29
    7198:	0c f4       	brge	.+2      	; 0x719c <getLeftSpeedFromInput+0xd4>
    719a:	a5 c0       	rjmp	.+330    	; 0x72e6 <getLeftSpeedFromInput+0x21e>
    719c:	20 97       	sbiw	r28, 0x00	; 0
    719e:	09 f4       	brne	.+2      	; 0x71a2 <getLeftSpeedFromInput+0xda>
    71a0:	b2 c0       	rjmp	.+356    	; 0x7306 <getLeftSpeedFromInput+0x23e>
    71a2:	00 97       	sbiw	r24, 0x00	; 0
    71a4:	09 f4       	brne	.+2      	; 0x71a8 <getLeftSpeedFromInput+0xe0>
    71a6:	bf c1       	rjmp	.+894    	; 0x7526 <getLeftSpeedFromInput+0x45e>
    71a8:	8f 3f       	cpi	r24, 0xFF	; 255
    71aa:	ef ef       	ldi	r30, 0xFF	; 255
    71ac:	9e 07       	cpc	r25, r30
    71ae:	09 f4       	brne	.+2      	; 0x71b2 <getLeftSpeedFromInput+0xea>
    71b0:	3a c1       	rjmp	.+628    	; 0x7426 <getLeftSpeedFromInput+0x35e>
    71b2:	fc 01       	movw	r30, r24
    71b4:	e2 95       	swap	r30
    71b6:	f2 95       	swap	r31
    71b8:	f0 7f       	andi	r31, 0xF0	; 240
    71ba:	fe 27       	eor	r31, r30
    71bc:	e0 7f       	andi	r30, 0xF0	; 240
    71be:	fe 27       	eor	r31, r30
    71c0:	e9 54       	subi	r30, 0x49	; 73
    71c2:	fd 4e       	sbci	r31, 0xED	; 237
    71c4:	c0 80       	ld	r12, Z
    71c6:	d1 80       	ldd	r13, Z+1	; 0x01
    71c8:	e2 80       	ldd	r14, Z+2	; 0x02
    71ca:	f3 80       	ldd	r15, Z+3	; 0x03
    71cc:	82 95       	swap	r24
    71ce:	92 95       	swap	r25
    71d0:	90 7f       	andi	r25, 0xF0	; 240
    71d2:	98 27       	eor	r25, r24
    71d4:	80 7f       	andi	r24, 0xF0	; 240
    71d6:	98 27       	eor	r25, r24
    71d8:	8c 01       	movw	r16, r24
    71da:	09 53       	subi	r16, 0x39	; 57
    71dc:	1d 4e       	sbci	r17, 0xED	; 237
    71de:	f8 01       	movw	r30, r16
    71e0:	62 81       	ldd	r22, Z+2	; 0x02
    71e2:	73 81       	ldd	r23, Z+3	; 0x03
    71e4:	6e 19       	sub	r22, r14
    71e6:	7f 09       	sbc	r23, r15
    71e8:	07 2e       	mov	r0, r23
    71ea:	00 0c       	add	r0, r0
    71ec:	88 0b       	sbc	r24, r24
    71ee:	99 0b       	sbc	r25, r25
    71f0:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    71f4:	4b 01       	movw	r8, r22
    71f6:	5c 01       	movw	r10, r24
    71f8:	cc 19       	sub	r28, r12
    71fa:	dd 09       	sbc	r29, r13
    71fc:	be 01       	movw	r22, r28
    71fe:	dd 0f       	add	r29, r29
    7200:	88 0b       	sbc	r24, r24
    7202:	99 0b       	sbc	r25, r25
    7204:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    7208:	9b 01       	movw	r18, r22
    720a:	ac 01       	movw	r20, r24
    720c:	c5 01       	movw	r24, r10
    720e:	b4 01       	movw	r22, r8
    7210:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    7214:	4b 01       	movw	r8, r22
    7216:	5c 01       	movw	r10, r24
    7218:	f8 01       	movw	r30, r16
    721a:	60 81       	ld	r22, Z
    721c:	71 81       	ldd	r23, Z+1	; 0x01
    721e:	6c 19       	sub	r22, r12
    7220:	7d 09       	sbc	r23, r13
    7222:	07 2e       	mov	r0, r23
    7224:	00 0c       	add	r0, r0
    7226:	88 0b       	sbc	r24, r24
    7228:	99 0b       	sbc	r25, r25
    722a:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    722e:	9b 01       	movw	r18, r22
    7230:	ac 01       	movw	r20, r24
    7232:	c5 01       	movw	r24, r10
    7234:	b4 01       	movw	r22, r8
    7236:	0e 94 c3 4d 	call	0x9b86	; 0x9b86 <__divsf3>
    723a:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__fixsfsi>
    723e:	6e 0d       	add	r22, r14
    7240:	7f 1d       	adc	r23, r15
    7242:	70 93 79 02 	sts	0x0279, r23	; 0x800279 <speedLeftFromEnc+0x1>
    7246:	60 93 78 02 	sts	0x0278, r22	; 0x800278 <speedLeftFromEnc>
    724a:	61 c0       	rjmp	.+194    	; 0x730e <getLeftSpeedFromInput+0x246>
    724c:	80 91 d7 12 	lds	r24, 0x12D7	; 0x8012d7 <calibration+0x10>
    7250:	90 91 d8 12 	lds	r25, 0x12D8	; 0x8012d8 <calibration+0x11>
    7254:	8c 17       	cp	r24, r28
    7256:	9d 07       	cpc	r25, r29
    7258:	0c f4       	brge	.+2      	; 0x725c <getLeftSpeedFromInput+0x194>
    725a:	16 c1       	rjmp	.+556    	; 0x7488 <getLeftSpeedFromInput+0x3c0>
    725c:	80 e0       	ldi	r24, 0x00	; 0
    725e:	90 e0       	ldi	r25, 0x00	; 0
    7260:	20 91 e7 12 	lds	r18, 0x12E7	; 0x8012e7 <calibration+0x20>
    7264:	30 91 e8 12 	lds	r19, 0x12E8	; 0x8012e8 <calibration+0x21>
    7268:	2c 17       	cp	r18, r28
    726a:	3d 07       	cpc	r19, r29
    726c:	0c f0       	brlt	.+2      	; 0x7270 <getLeftSpeedFromInput+0x1a8>
    726e:	62 cf       	rjmp	.-316    	; 0x7134 <getLeftSpeedFromInput+0x6c>
    7270:	20 91 f7 12 	lds	r18, 0x12F7	; 0x8012f7 <calibration+0x30>
    7274:	30 91 f8 12 	lds	r19, 0x12F8	; 0x8012f8 <calibration+0x31>
    7278:	2c 17       	cp	r18, r28
    727a:	3d 07       	cpc	r19, r29
    727c:	0c f4       	brge	.+2      	; 0x7280 <getLeftSpeedFromInput+0x1b8>
    727e:	62 cf       	rjmp	.-316    	; 0x7144 <getLeftSpeedFromInput+0x7c>
    7280:	8f 3f       	cpi	r24, 0xFF	; 255
    7282:	2f ef       	ldi	r18, 0xFF	; 255
    7284:	92 07       	cpc	r25, r18
    7286:	11 f4       	brne	.+4      	; 0x728c <getLeftSpeedFromInput+0x1c4>
    7288:	83 e0       	ldi	r24, 0x03	; 3
    728a:	90 e0       	ldi	r25, 0x00	; 0
    728c:	20 91 07 13 	lds	r18, 0x1307	; 0x801307 <calibration+0x40>
    7290:	30 91 08 13 	lds	r19, 0x1308	; 0x801308 <calibration+0x41>
    7294:	2c 17       	cp	r18, r28
    7296:	3d 07       	cpc	r19, r29
    7298:	0c f0       	brlt	.+2      	; 0x729c <getLeftSpeedFromInput+0x1d4>
    729a:	62 cf       	rjmp	.-316    	; 0x7160 <getLeftSpeedFromInput+0x98>
    729c:	20 91 17 13 	lds	r18, 0x1317	; 0x801317 <calibration+0x50>
    72a0:	30 91 18 13 	lds	r19, 0x1318	; 0x801318 <calibration+0x51>
    72a4:	2c 17       	cp	r18, r28
    72a6:	3d 07       	cpc	r19, r29
    72a8:	0c f4       	brge	.+2      	; 0x72ac <getLeftSpeedFromInput+0x1e4>
    72aa:	62 cf       	rjmp	.-316    	; 0x7170 <getLeftSpeedFromInput+0xa8>
    72ac:	8f 3f       	cpi	r24, 0xFF	; 255
    72ae:	ef ef       	ldi	r30, 0xFF	; 255
    72b0:	9e 07       	cpc	r25, r30
    72b2:	11 f4       	brne	.+4      	; 0x72b8 <getLeftSpeedFromInput+0x1f0>
    72b4:	85 e0       	ldi	r24, 0x05	; 5
    72b6:	90 e0       	ldi	r25, 0x00	; 0
    72b8:	20 91 27 13 	lds	r18, 0x1327	; 0x801327 <calibration+0x60>
    72bc:	30 91 28 13 	lds	r19, 0x1328	; 0x801328 <calibration+0x61>
    72c0:	2c 17       	cp	r18, r28
    72c2:	3d 07       	cpc	r19, r29
    72c4:	0c f0       	brlt	.+2      	; 0x72c8 <getLeftSpeedFromInput+0x200>
    72c6:	62 cf       	rjmp	.-316    	; 0x718c <getLeftSpeedFromInput+0xc4>
    72c8:	20 91 37 13 	lds	r18, 0x1337	; 0x801337 <calibration+0x70>
    72cc:	30 91 38 13 	lds	r19, 0x1338	; 0x801338 <calibration+0x71>
    72d0:	2c 17       	cp	r18, r28
    72d2:	3d 07       	cpc	r19, r29
    72d4:	44 f0       	brlt	.+16     	; 0x72e6 <getLeftSpeedFromInput+0x21e>
    72d6:	8f 3f       	cpi	r24, 0xFF	; 255
    72d8:	2f ef       	ldi	r18, 0xFF	; 255
    72da:	92 07       	cpc	r25, r18
    72dc:	09 f0       	breq	.+2      	; 0x72e0 <getLeftSpeedFromInput+0x218>
    72de:	5e cf       	rjmp	.-324    	; 0x719c <getLeftSpeedFromInput+0xd4>
    72e0:	87 e0       	ldi	r24, 0x07	; 7
    72e2:	90 e0       	ldi	r25, 0x00	; 0
    72e4:	5b cf       	rjmp	.-330    	; 0x719c <getLeftSpeedFromInput+0xd4>
    72e6:	20 91 47 13 	lds	r18, 0x1347	; 0x801347 <calibration+0x80>
    72ea:	30 91 48 13 	lds	r19, 0x1348	; 0x801348 <calibration+0x81>
    72ee:	2c 17       	cp	r18, r28
    72f0:	3d 07       	cpc	r19, r29
    72f2:	0c f4       	brge	.+2      	; 0x72f6 <getLeftSpeedFromInput+0x22e>
    72f4:	53 cf       	rjmp	.-346    	; 0x719c <getLeftSpeedFromInput+0xd4>
    72f6:	8f 3f       	cpi	r24, 0xFF	; 255
    72f8:	3f ef       	ldi	r19, 0xFF	; 255
    72fa:	93 07       	cpc	r25, r19
    72fc:	09 f0       	breq	.+2      	; 0x7300 <getLeftSpeedFromInput+0x238>
    72fe:	4e cf       	rjmp	.-356    	; 0x719c <getLeftSpeedFromInput+0xd4>
    7300:	88 e0       	ldi	r24, 0x08	; 8
    7302:	90 e0       	ldi	r25, 0x00	; 0
    7304:	4b cf       	rjmp	.-362    	; 0x719c <getLeftSpeedFromInput+0xd4>
    7306:	10 92 79 02 	sts	0x0279, r1	; 0x800279 <speedLeftFromEnc+0x1>
    730a:	10 92 78 02 	sts	0x0278, r1	; 0x800278 <speedLeftFromEnc>
    730e:	df 91       	pop	r29
    7310:	cf 91       	pop	r28
    7312:	1f 91       	pop	r17
    7314:	0f 91       	pop	r16
    7316:	ff 90       	pop	r15
    7318:	ef 90       	pop	r14
    731a:	df 90       	pop	r13
    731c:	cf 90       	pop	r12
    731e:	bf 90       	pop	r11
    7320:	af 90       	pop	r10
    7322:	9f 90       	pop	r9
    7324:	8f 90       	pop	r8
    7326:	08 95       	ret
    7328:	60 91 cf 12 	lds	r22, 0x12CF	; 0x8012cf <calibration+0x8>
    732c:	70 91 d0 12 	lds	r23, 0x12D0	; 0x8012d0 <calibration+0x9>
    7330:	6c 17       	cp	r22, r28
    7332:	7d 07       	cpc	r23, r29
    7334:	0c f4       	brge	.+2      	; 0x7338 <getLeftSpeedFromInput+0x270>
    7336:	5e c0       	rjmp	.+188    	; 0x73f4 <getLeftSpeedFromInput+0x32c>
    7338:	80 91 df 12 	lds	r24, 0x12DF	; 0x8012df <calibration+0x18>
    733c:	90 91 e0 12 	lds	r25, 0x12E0	; 0x8012e0 <calibration+0x19>
    7340:	8c 17       	cp	r24, r28
    7342:	9d 07       	cpc	r25, r29
    7344:	0c f4       	brge	.+2      	; 0x7348 <getLeftSpeedFromInput+0x280>
    7346:	83 c1       	rjmp	.+774    	; 0x764e <getLeftSpeedFromInput+0x586>
    7348:	80 e0       	ldi	r24, 0x00	; 0
    734a:	90 e0       	ldi	r25, 0x00	; 0
    734c:	20 91 ef 12 	lds	r18, 0x12EF	; 0x8012ef <calibration+0x28>
    7350:	30 91 f0 12 	lds	r19, 0x12F0	; 0x8012f0 <calibration+0x29>
    7354:	2c 17       	cp	r18, r28
    7356:	3d 07       	cpc	r19, r29
    7358:	0c f4       	brge	.+2      	; 0x735c <getLeftSpeedFromInput+0x294>
    735a:	99 c0       	rjmp	.+306    	; 0x748e <getLeftSpeedFromInput+0x3c6>
    735c:	20 91 ff 12 	lds	r18, 0x12FF	; 0x8012ff <calibration+0x38>
    7360:	30 91 00 13 	lds	r19, 0x1300	; 0x801300 <calibration+0x39>
    7364:	2c 17       	cp	r18, r28
    7366:	3d 07       	cpc	r19, r29
    7368:	0c f4       	brge	.+2      	; 0x736c <getLeftSpeedFromInput+0x2a4>
    736a:	a0 c0       	rjmp	.+320    	; 0x74ac <getLeftSpeedFromInput+0x3e4>
    736c:	20 91 0f 13 	lds	r18, 0x130F	; 0x80130f <calibration+0x48>
    7370:	30 91 10 13 	lds	r19, 0x1310	; 0x801310 <calibration+0x49>
    7374:	2c 17       	cp	r18, r28
    7376:	3d 07       	cpc	r19, r29
    7378:	0c f4       	brge	.+2      	; 0x737c <getLeftSpeedFromInput+0x2b4>
    737a:	a7 c0       	rjmp	.+334    	; 0x74ca <getLeftSpeedFromInput+0x402>
    737c:	20 91 1f 13 	lds	r18, 0x131F	; 0x80131f <calibration+0x58>
    7380:	30 91 20 13 	lds	r19, 0x1320	; 0x801320 <calibration+0x59>
    7384:	2c 17       	cp	r18, r28
    7386:	3d 07       	cpc	r19, r29
    7388:	0c f4       	brge	.+2      	; 0x738c <getLeftSpeedFromInput+0x2c4>
    738a:	ae c0       	rjmp	.+348    	; 0x74e8 <getLeftSpeedFromInput+0x420>
    738c:	20 91 2f 13 	lds	r18, 0x132F	; 0x80132f <calibration+0x68>
    7390:	30 91 30 13 	lds	r19, 0x1330	; 0x801330 <calibration+0x69>
    7394:	2c 17       	cp	r18, r28
    7396:	3d 07       	cpc	r19, r29
    7398:	0c f4       	brge	.+2      	; 0x739c <getLeftSpeedFromInput+0x2d4>
    739a:	b5 c0       	rjmp	.+362    	; 0x7506 <getLeftSpeedFromInput+0x43e>
    739c:	20 91 3f 13 	lds	r18, 0x133F	; 0x80133f <calibration+0x78>
    73a0:	30 91 40 13 	lds	r19, 0x1340	; 0x801340 <calibration+0x79>
    73a4:	2c 17       	cp	r18, r28
    73a6:	3d 07       	cpc	r19, r29
    73a8:	6c f4       	brge	.+26     	; 0x73c4 <getLeftSpeedFromInput+0x2fc>
    73aa:	20 91 4f 13 	lds	r18, 0x134F	; 0x80134f <calibration+0x88>
    73ae:	30 91 50 13 	lds	r19, 0x1350	; 0x801350 <calibration+0x89>
    73b2:	2c 17       	cp	r18, r28
    73b4:	3d 07       	cpc	r19, r29
    73b6:	34 f0       	brlt	.+12     	; 0x73c4 <getLeftSpeedFromInput+0x2fc>
    73b8:	8f 3f       	cpi	r24, 0xFF	; 255
    73ba:	ef ef       	ldi	r30, 0xFF	; 255
    73bc:	9e 07       	cpc	r25, r30
    73be:	11 f4       	brne	.+4      	; 0x73c4 <getLeftSpeedFromInput+0x2fc>
    73c0:	88 e0       	ldi	r24, 0x08	; 8
    73c2:	90 e0       	ldi	r25, 0x00	; 0
    73c4:	00 97       	sbiw	r24, 0x00	; 0
    73c6:	09 f0       	breq	.+2      	; 0x73ca <getLeftSpeedFromInput+0x302>
    73c8:	c0 c0       	rjmp	.+384    	; 0x754a <getLeftSpeedFromInput+0x482>
    73ca:	20 91 d1 12 	lds	r18, 0x12D1	; 0x8012d1 <calibration+0xa>
    73ce:	30 91 d2 12 	lds	r19, 0x12D2	; 0x8012d2 <calibration+0xb>
    73d2:	c2 9f       	mul	r28, r18
    73d4:	c0 01       	movw	r24, r0
    73d6:	c3 9f       	mul	r28, r19
    73d8:	90 0d       	add	r25, r0
    73da:	d2 9f       	mul	r29, r18
    73dc:	90 0d       	add	r25, r0
    73de:	11 24       	eor	r1, r1
    73e0:	0e 94 30 51 	call	0xa260	; 0xa260 <__divmodhi4>
    73e4:	71 95       	neg	r23
    73e6:	61 95       	neg	r22
    73e8:	71 09       	sbc	r23, r1
    73ea:	70 93 79 02 	sts	0x0279, r23	; 0x800279 <speedLeftFromEnc+0x1>
    73ee:	60 93 78 02 	sts	0x0278, r22	; 0x800278 <speedLeftFromEnc>
    73f2:	8d cf       	rjmp	.-230    	; 0x730e <getLeftSpeedFromInput+0x246>
    73f4:	80 91 df 12 	lds	r24, 0x12DF	; 0x8012df <calibration+0x18>
    73f8:	90 91 e0 12 	lds	r25, 0x12E0	; 0x8012e0 <calibration+0x19>
    73fc:	8c 17       	cp	r24, r28
    73fe:	9d 07       	cpc	r25, r29
    7400:	0c f0       	brlt	.+2      	; 0x7404 <getLeftSpeedFromInput+0x33c>
    7402:	22 c1       	rjmp	.+580    	; 0x7648 <getLeftSpeedFromInput+0x580>
    7404:	8f ef       	ldi	r24, 0xFF	; 255
    7406:	9f ef       	ldi	r25, 0xFF	; 255
    7408:	20 91 ef 12 	lds	r18, 0x12EF	; 0x8012ef <calibration+0x28>
    740c:	30 91 f0 12 	lds	r19, 0x12F0	; 0x8012f0 <calibration+0x29>
    7410:	2c 17       	cp	r18, r28
    7412:	3d 07       	cpc	r19, r29
    7414:	e4 f1       	brlt	.+120    	; 0x748e <getLeftSpeedFromInput+0x3c6>
    7416:	8f 3f       	cpi	r24, 0xFF	; 255
    7418:	2f ef       	ldi	r18, 0xFF	; 255
    741a:	92 07       	cpc	r25, r18
    741c:	09 f0       	breq	.+2      	; 0x7420 <getLeftSpeedFromInput+0x358>
    741e:	9e cf       	rjmp	.-196    	; 0x735c <getLeftSpeedFromInput+0x294>
    7420:	82 e0       	ldi	r24, 0x02	; 2
    7422:	90 e0       	ldi	r25, 0x00	; 0
    7424:	9b cf       	rjmp	.-202    	; 0x735c <getLeftSpeedFromInput+0x294>
    7426:	60 91 49 13 	lds	r22, 0x1349	; 0x801349 <calibration+0x82>
    742a:	70 91 4a 13 	lds	r23, 0x134A	; 0x80134a <calibration+0x83>
    742e:	07 2e       	mov	r0, r23
    7430:	00 0c       	add	r0, r0
    7432:	88 0b       	sbc	r24, r24
    7434:	99 0b       	sbc	r25, r25
    7436:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    743a:	6b 01       	movw	r12, r22
    743c:	7c 01       	movw	r14, r24
    743e:	be 01       	movw	r22, r28
    7440:	dd 0f       	add	r29, r29
    7442:	88 0b       	sbc	r24, r24
    7444:	99 0b       	sbc	r25, r25
    7446:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    744a:	9b 01       	movw	r18, r22
    744c:	ac 01       	movw	r20, r24
    744e:	c7 01       	movw	r24, r14
    7450:	b6 01       	movw	r22, r12
    7452:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    7456:	6b 01       	movw	r12, r22
    7458:	7c 01       	movw	r14, r24
    745a:	60 91 47 13 	lds	r22, 0x1347	; 0x801347 <calibration+0x80>
    745e:	70 91 48 13 	lds	r23, 0x1348	; 0x801348 <calibration+0x81>
    7462:	07 2e       	mov	r0, r23
    7464:	00 0c       	add	r0, r0
    7466:	88 0b       	sbc	r24, r24
    7468:	99 0b       	sbc	r25, r25
    746a:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    746e:	9b 01       	movw	r18, r22
    7470:	ac 01       	movw	r20, r24
    7472:	c7 01       	movw	r24, r14
    7474:	b6 01       	movw	r22, r12
    7476:	0e 94 c3 4d 	call	0x9b86	; 0x9b86 <__divsf3>
    747a:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__fixsfsi>
    747e:	70 93 79 02 	sts	0x0279, r23	; 0x800279 <speedLeftFromEnc+0x1>
    7482:	60 93 78 02 	sts	0x0278, r22	; 0x800278 <speedLeftFromEnc>
    7486:	43 cf       	rjmp	.-378    	; 0x730e <getLeftSpeedFromInput+0x246>
    7488:	80 e0       	ldi	r24, 0x00	; 0
    748a:	90 e0       	ldi	r25, 0x00	; 0
    748c:	45 ce       	rjmp	.-886    	; 0x7118 <getLeftSpeedFromInput+0x50>
    748e:	20 91 ff 12 	lds	r18, 0x12FF	; 0x8012ff <calibration+0x38>
    7492:	30 91 00 13 	lds	r19, 0x1300	; 0x801300 <calibration+0x39>
    7496:	2c 17       	cp	r18, r28
    7498:	3d 07       	cpc	r19, r29
    749a:	44 f0       	brlt	.+16     	; 0x74ac <getLeftSpeedFromInput+0x3e4>
    749c:	8f 3f       	cpi	r24, 0xFF	; 255
    749e:	3f ef       	ldi	r19, 0xFF	; 255
    74a0:	93 07       	cpc	r25, r19
    74a2:	09 f0       	breq	.+2      	; 0x74a6 <getLeftSpeedFromInput+0x3de>
    74a4:	63 cf       	rjmp	.-314    	; 0x736c <getLeftSpeedFromInput+0x2a4>
    74a6:	83 e0       	ldi	r24, 0x03	; 3
    74a8:	90 e0       	ldi	r25, 0x00	; 0
    74aa:	60 cf       	rjmp	.-320    	; 0x736c <getLeftSpeedFromInput+0x2a4>
    74ac:	20 91 0f 13 	lds	r18, 0x130F	; 0x80130f <calibration+0x48>
    74b0:	30 91 10 13 	lds	r19, 0x1310	; 0x801310 <calibration+0x49>
    74b4:	2c 17       	cp	r18, r28
    74b6:	3d 07       	cpc	r19, r29
    74b8:	44 f0       	brlt	.+16     	; 0x74ca <getLeftSpeedFromInput+0x402>
    74ba:	8f 3f       	cpi	r24, 0xFF	; 255
    74bc:	ef ef       	ldi	r30, 0xFF	; 255
    74be:	9e 07       	cpc	r25, r30
    74c0:	09 f0       	breq	.+2      	; 0x74c4 <getLeftSpeedFromInput+0x3fc>
    74c2:	5c cf       	rjmp	.-328    	; 0x737c <getLeftSpeedFromInput+0x2b4>
    74c4:	84 e0       	ldi	r24, 0x04	; 4
    74c6:	90 e0       	ldi	r25, 0x00	; 0
    74c8:	59 cf       	rjmp	.-334    	; 0x737c <getLeftSpeedFromInput+0x2b4>
    74ca:	20 91 1f 13 	lds	r18, 0x131F	; 0x80131f <calibration+0x58>
    74ce:	30 91 20 13 	lds	r19, 0x1320	; 0x801320 <calibration+0x59>
    74d2:	2c 17       	cp	r18, r28
    74d4:	3d 07       	cpc	r19, r29
    74d6:	44 f0       	brlt	.+16     	; 0x74e8 <getLeftSpeedFromInput+0x420>
    74d8:	8f 3f       	cpi	r24, 0xFF	; 255
    74da:	ff ef       	ldi	r31, 0xFF	; 255
    74dc:	9f 07       	cpc	r25, r31
    74de:	09 f0       	breq	.+2      	; 0x74e2 <getLeftSpeedFromInput+0x41a>
    74e0:	55 cf       	rjmp	.-342    	; 0x738c <getLeftSpeedFromInput+0x2c4>
    74e2:	85 e0       	ldi	r24, 0x05	; 5
    74e4:	90 e0       	ldi	r25, 0x00	; 0
    74e6:	52 cf       	rjmp	.-348    	; 0x738c <getLeftSpeedFromInput+0x2c4>
    74e8:	20 91 2f 13 	lds	r18, 0x132F	; 0x80132f <calibration+0x68>
    74ec:	30 91 30 13 	lds	r19, 0x1330	; 0x801330 <calibration+0x69>
    74f0:	2c 17       	cp	r18, r28
    74f2:	3d 07       	cpc	r19, r29
    74f4:	44 f0       	brlt	.+16     	; 0x7506 <getLeftSpeedFromInput+0x43e>
    74f6:	8f 3f       	cpi	r24, 0xFF	; 255
    74f8:	2f ef       	ldi	r18, 0xFF	; 255
    74fa:	92 07       	cpc	r25, r18
    74fc:	09 f0       	breq	.+2      	; 0x7500 <getLeftSpeedFromInput+0x438>
    74fe:	4e cf       	rjmp	.-356    	; 0x739c <getLeftSpeedFromInput+0x2d4>
    7500:	86 e0       	ldi	r24, 0x06	; 6
    7502:	90 e0       	ldi	r25, 0x00	; 0
    7504:	4b cf       	rjmp	.-362    	; 0x739c <getLeftSpeedFromInput+0x2d4>
    7506:	20 91 3f 13 	lds	r18, 0x133F	; 0x80133f <calibration+0x78>
    750a:	30 91 40 13 	lds	r19, 0x1340	; 0x801340 <calibration+0x79>
    750e:	2c 17       	cp	r18, r28
    7510:	3d 07       	cpc	r19, r29
    7512:	0c f4       	brge	.+2      	; 0x7516 <getLeftSpeedFromInput+0x44e>
    7514:	4a cf       	rjmp	.-364    	; 0x73aa <getLeftSpeedFromInput+0x2e2>
    7516:	8f 3f       	cpi	r24, 0xFF	; 255
    7518:	3f ef       	ldi	r19, 0xFF	; 255
    751a:	93 07       	cpc	r25, r19
    751c:	09 f0       	breq	.+2      	; 0x7520 <getLeftSpeedFromInput+0x458>
    751e:	52 cf       	rjmp	.-348    	; 0x73c4 <getLeftSpeedFromInput+0x2fc>
    7520:	87 e0       	ldi	r24, 0x07	; 7
    7522:	90 e0       	ldi	r25, 0x00	; 0
    7524:	4f cf       	rjmp	.-354    	; 0x73c4 <getLeftSpeedFromInput+0x2fc>
    7526:	20 91 c9 12 	lds	r18, 0x12C9	; 0x8012c9 <calibration+0x2>
    752a:	30 91 ca 12 	lds	r19, 0x12CA	; 0x8012ca <calibration+0x3>
    752e:	c2 9f       	mul	r28, r18
    7530:	c0 01       	movw	r24, r0
    7532:	c3 9f       	mul	r28, r19
    7534:	90 0d       	add	r25, r0
    7536:	d2 9f       	mul	r29, r18
    7538:	90 0d       	add	r25, r0
    753a:	11 24       	eor	r1, r1
    753c:	0e 94 30 51 	call	0xa260	; 0xa260 <__divmodhi4>
    7540:	70 93 79 02 	sts	0x0279, r23	; 0x800279 <speedLeftFromEnc+0x1>
    7544:	60 93 78 02 	sts	0x0278, r22	; 0x800278 <speedLeftFromEnc>
    7548:	e2 ce       	rjmp	.-572    	; 0x730e <getLeftSpeedFromInput+0x246>
    754a:	8f 3f       	cpi	r24, 0xFF	; 255
    754c:	ff ef       	ldi	r31, 0xFF	; 255
    754e:	9f 07       	cpc	r25, r31
    7550:	09 f4       	brne	.+2      	; 0x7554 <getLeftSpeedFromInput+0x48c>
    7552:	4d c0       	rjmp	.+154    	; 0x75ee <getLeftSpeedFromInput+0x526>
    7554:	fc 01       	movw	r30, r24
    7556:	e2 95       	swap	r30
    7558:	f2 95       	swap	r31
    755a:	f0 7f       	andi	r31, 0xF0	; 240
    755c:	fe 27       	eor	r31, r30
    755e:	e0 7f       	andi	r30, 0xF0	; 240
    7560:	fe 27       	eor	r31, r30
    7562:	e9 54       	subi	r30, 0x49	; 73
    7564:	fd 4e       	sbci	r31, 0xED	; 237
    7566:	c0 84       	ldd	r12, Z+8	; 0x08
    7568:	d1 84       	ldd	r13, Z+9	; 0x09
    756a:	02 85       	ldd	r16, Z+10	; 0x0a
    756c:	13 85       	ldd	r17, Z+11	; 0x0b
    756e:	82 95       	swap	r24
    7570:	92 95       	swap	r25
    7572:	90 7f       	andi	r25, 0xF0	; 240
    7574:	98 27       	eor	r25, r24
    7576:	80 7f       	andi	r24, 0xF0	; 240
    7578:	98 27       	eor	r25, r24
    757a:	9c 01       	movw	r18, r24
    757c:	29 53       	subi	r18, 0x39	; 57
    757e:	3d 4e       	sbci	r19, 0xED	; 237
    7580:	79 01       	movw	r14, r18
    7582:	f9 01       	movw	r30, r18
    7584:	62 85       	ldd	r22, Z+10	; 0x0a
    7586:	73 85       	ldd	r23, Z+11	; 0x0b
    7588:	60 1b       	sub	r22, r16
    758a:	71 0b       	sbc	r23, r17
    758c:	07 2e       	mov	r0, r23
    758e:	00 0c       	add	r0, r0
    7590:	88 0b       	sbc	r24, r24
    7592:	99 0b       	sbc	r25, r25
    7594:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    7598:	4b 01       	movw	r8, r22
    759a:	5c 01       	movw	r10, r24
    759c:	cc 19       	sub	r28, r12
    759e:	dd 09       	sbc	r29, r13
    75a0:	be 01       	movw	r22, r28
    75a2:	dd 0f       	add	r29, r29
    75a4:	88 0b       	sbc	r24, r24
    75a6:	99 0b       	sbc	r25, r25
    75a8:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    75ac:	9b 01       	movw	r18, r22
    75ae:	ac 01       	movw	r20, r24
    75b0:	c5 01       	movw	r24, r10
    75b2:	b4 01       	movw	r22, r8
    75b4:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    75b8:	4b 01       	movw	r8, r22
    75ba:	5c 01       	movw	r10, r24
    75bc:	f7 01       	movw	r30, r14
    75be:	60 85       	ldd	r22, Z+8	; 0x08
    75c0:	71 85       	ldd	r23, Z+9	; 0x09
    75c2:	6c 19       	sub	r22, r12
    75c4:	7d 09       	sbc	r23, r13
    75c6:	07 2e       	mov	r0, r23
    75c8:	00 0c       	add	r0, r0
    75ca:	88 0b       	sbc	r24, r24
    75cc:	99 0b       	sbc	r25, r25
    75ce:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    75d2:	9b 01       	movw	r18, r22
    75d4:	ac 01       	movw	r20, r24
    75d6:	c5 01       	movw	r24, r10
    75d8:	b4 01       	movw	r22, r8
    75da:	0e 94 c3 4d 	call	0x9b86	; 0x9b86 <__divsf3>
    75de:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__fixsfsi>
    75e2:	60 0f       	add	r22, r16
    75e4:	71 1f       	adc	r23, r17
    75e6:	fe ce       	rjmp	.-516    	; 0x73e4 <getLeftSpeedFromInput+0x31c>
    75e8:	81 e0       	ldi	r24, 0x01	; 1
    75ea:	90 e0       	ldi	r25, 0x00	; 0
    75ec:	39 ce       	rjmp	.-910    	; 0x7260 <getLeftSpeedFromInput+0x198>
    75ee:	60 91 51 13 	lds	r22, 0x1351	; 0x801351 <calibration+0x8a>
    75f2:	70 91 52 13 	lds	r23, 0x1352	; 0x801352 <calibration+0x8b>
    75f6:	07 2e       	mov	r0, r23
    75f8:	00 0c       	add	r0, r0
    75fa:	88 0b       	sbc	r24, r24
    75fc:	99 0b       	sbc	r25, r25
    75fe:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    7602:	6b 01       	movw	r12, r22
    7604:	7c 01       	movw	r14, r24
    7606:	be 01       	movw	r22, r28
    7608:	dd 0f       	add	r29, r29
    760a:	88 0b       	sbc	r24, r24
    760c:	99 0b       	sbc	r25, r25
    760e:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    7612:	9b 01       	movw	r18, r22
    7614:	ac 01       	movw	r20, r24
    7616:	c7 01       	movw	r24, r14
    7618:	b6 01       	movw	r22, r12
    761a:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    761e:	6b 01       	movw	r12, r22
    7620:	7c 01       	movw	r14, r24
    7622:	60 91 4f 13 	lds	r22, 0x134F	; 0x80134f <calibration+0x88>
    7626:	70 91 50 13 	lds	r23, 0x1350	; 0x801350 <calibration+0x89>
    762a:	07 2e       	mov	r0, r23
    762c:	00 0c       	add	r0, r0
    762e:	88 0b       	sbc	r24, r24
    7630:	99 0b       	sbc	r25, r25
    7632:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    7636:	9b 01       	movw	r18, r22
    7638:	ac 01       	movw	r20, r24
    763a:	c7 01       	movw	r24, r14
    763c:	b6 01       	movw	r22, r12
    763e:	0e 94 c3 4d 	call	0x9b86	; 0x9b86 <__divsf3>
    7642:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__fixsfsi>
    7646:	ce ce       	rjmp	.-612    	; 0x73e4 <getLeftSpeedFromInput+0x31c>
    7648:	81 e0       	ldi	r24, 0x01	; 1
    764a:	90 e0       	ldi	r25, 0x00	; 0
    764c:	7f ce       	rjmp	.-770    	; 0x734c <getLeftSpeedFromInput+0x284>
    764e:	80 e0       	ldi	r24, 0x00	; 0
    7650:	90 e0       	ldi	r25, 0x00	; 0
    7652:	da ce       	rjmp	.-588    	; 0x7408 <getLeftSpeedFromInput+0x340>

00007654 <handleMotorsWithSpeedController>:
    7654:	4f 92       	push	r4
    7656:	5f 92       	push	r5
    7658:	6f 92       	push	r6
    765a:	7f 92       	push	r7
    765c:	8f 92       	push	r8
    765e:	9f 92       	push	r9
    7660:	af 92       	push	r10
    7662:	bf 92       	push	r11
    7664:	cf 92       	push	r12
    7666:	df 92       	push	r13
    7668:	ef 92       	push	r14
    766a:	ff 92       	push	r15
    766c:	0f 93       	push	r16
    766e:	1f 93       	push	r17
    7670:	cf 93       	push	r28
    7672:	df 93       	push	r29
    7674:	90 91 53 0f 	lds	r25, 0x0F53	; 0x800f53 <calibrateOdomFlag>
    7678:	99 23       	and	r25, r25
    767a:	09 f4       	brne	.+2      	; 0x767e <handleMotorsWithSpeedController+0x2a>
    767c:	44 c3       	rjmp	.+1672   	; 0x7d06 <handleMotorsWithSpeedController+0x6b2>
    767e:	20 91 15 03 	lds	r18, 0x0315	; 0x800315 <pwm_intermediate_right_desired>
    7682:	30 91 16 03 	lds	r19, 0x0316	; 0x800316 <pwm_intermediate_right_desired+0x1>
    7686:	00 91 13 03 	lds	r16, 0x0313	; 0x800313 <pwm_intermediate_left_desired>
    768a:	10 91 14 03 	lds	r17, 0x0314	; 0x800314 <pwm_intermediate_left_desired+0x1>
    768e:	91 30       	cpi	r25, 0x01	; 1
    7690:	09 f4       	brne	.+2      	; 0x7694 <handleMotorsWithSpeedController+0x40>
    7692:	6e c3       	rjmp	.+1756   	; 0x7d70 <handleMotorsWithSpeedController+0x71c>
    7694:	37 fd       	sbrc	r19, 7
    7696:	e9 c3       	rjmp	.+2002   	; 0x7e6a <handleMotorsWithSpeedController+0x816>
    7698:	e9 01       	movw	r28, r18
    769a:	cc 0f       	add	r28, r28
    769c:	dd 1f       	adc	r29, r29
    769e:	cc 0f       	add	r28, r28
    76a0:	dd 1f       	adc	r29, r29
    76a2:	c2 0f       	add	r28, r18
    76a4:	d3 1f       	adc	r29, r19
    76a6:	20 97       	sbiw	r28, 0x00	; 0
    76a8:	09 f4       	brne	.+2      	; 0x76ac <handleMotorsWithSpeedController+0x58>
    76aa:	89 c2       	rjmp	.+1298   	; 0x7bbe <handleMotorsWithSpeedController+0x56a>
    76ac:	60 91 cd 12 	lds	r22, 0x12CD	; 0x8012cd <calibration+0x6>
    76b0:	70 91 ce 12 	lds	r23, 0x12CE	; 0x8012ce <calibration+0x7>
    76b4:	6c 17       	cp	r22, r28
    76b6:	7d 07       	cpc	r23, r29
    76b8:	0c f0       	brlt	.+2      	; 0x76bc <handleMotorsWithSpeedController+0x68>
    76ba:	e0 c3       	rjmp	.+1984   	; 0x7e7c <handleMotorsWithSpeedController+0x828>
    76bc:	e0 90 dd 12 	lds	r14, 0x12DD	; 0x8012dd <calibration+0x16>
    76c0:	f0 90 de 12 	lds	r15, 0x12DE	; 0x8012de <calibration+0x17>
    76c4:	ec 16       	cp	r14, r28
    76c6:	fd 06       	cpc	r15, r29
    76c8:	0c f0       	brlt	.+2      	; 0x76cc <handleMotorsWithSpeedController+0x78>
    76ca:	26 c5       	rjmp	.+2636   	; 0x8118 <handleMotorsWithSpeedController+0xac4>
    76cc:	e0 90 ed 12 	lds	r14, 0x12ED	; 0x8012ed <calibration+0x26>
    76d0:	f0 90 ee 12 	lds	r15, 0x12EE	; 0x8012ee <calibration+0x27>
    76d4:	ec 16       	cp	r14, r28
    76d6:	fd 06       	cpc	r15, r29
    76d8:	0c f0       	brlt	.+2      	; 0x76dc <handleMotorsWithSpeedController+0x88>
    76da:	8c c4       	rjmp	.+2328   	; 0x7ff4 <handleMotorsWithSpeedController+0x9a0>
    76dc:	e0 90 fd 12 	lds	r14, 0x12FD	; 0x8012fd <calibration+0x36>
    76e0:	f0 90 fe 12 	lds	r15, 0x12FE	; 0x8012fe <calibration+0x37>
    76e4:	ec 16       	cp	r14, r28
    76e6:	fd 06       	cpc	r15, r29
    76e8:	0c f0       	brlt	.+2      	; 0x76ec <handleMotorsWithSpeedController+0x98>
    76ea:	25 c5       	rjmp	.+2634   	; 0x8136 <handleMotorsWithSpeedController+0xae2>
    76ec:	e0 90 0d 13 	lds	r14, 0x130D	; 0x80130d <calibration+0x46>
    76f0:	f0 90 0e 13 	lds	r15, 0x130E	; 0x80130e <calibration+0x47>
    76f4:	ec 16       	cp	r14, r28
    76f6:	fd 06       	cpc	r15, r29
    76f8:	0c f0       	brlt	.+2      	; 0x76fc <handleMotorsWithSpeedController+0xa8>
    76fa:	17 c5       	rjmp	.+2606   	; 0x812a <handleMotorsWithSpeedController+0xad6>
    76fc:	e0 90 1d 13 	lds	r14, 0x131D	; 0x80131d <calibration+0x56>
    7700:	f0 90 1e 13 	lds	r15, 0x131E	; 0x80131e <calibration+0x57>
    7704:	ec 16       	cp	r14, r28
    7706:	fd 06       	cpc	r15, r29
    7708:	0c f0       	brlt	.+2      	; 0x770c <handleMotorsWithSpeedController+0xb8>
    770a:	1b c5       	rjmp	.+2614   	; 0x8142 <handleMotorsWithSpeedController+0xaee>
    770c:	e0 90 2d 13 	lds	r14, 0x132D	; 0x80132d <calibration+0x66>
    7710:	f0 90 2e 13 	lds	r15, 0x132E	; 0x80132e <calibration+0x67>
    7714:	ec 16       	cp	r14, r28
    7716:	fd 06       	cpc	r15, r29
    7718:	0c f0       	brlt	.+2      	; 0x771c <handleMotorsWithSpeedController+0xc8>
    771a:	16 c5       	rjmp	.+2604   	; 0x8148 <handleMotorsWithSpeedController+0xaf4>
    771c:	e0 90 3d 13 	lds	r14, 0x133D	; 0x80133d <calibration+0x76>
    7720:	f0 90 3e 13 	lds	r15, 0x133E	; 0x80133e <calibration+0x77>
    7724:	ec 16       	cp	r14, r28
    7726:	fd 06       	cpc	r15, r29
    7728:	0c f0       	brlt	.+2      	; 0x772c <handleMotorsWithSpeedController+0xd8>
    772a:	08 c5       	rjmp	.+2576   	; 0x813c <handleMotorsWithSpeedController+0xae8>
    772c:	e0 90 4d 13 	lds	r14, 0x134D	; 0x80134d <calibration+0x86>
    7730:	f0 90 4e 13 	lds	r15, 0x134E	; 0x80134e <calibration+0x87>
    7734:	ec 16       	cp	r14, r28
    7736:	fd 06       	cpc	r15, r29
    7738:	0c f0       	brlt	.+2      	; 0x773c <handleMotorsWithSpeedController+0xe8>
    773a:	15 c5       	rjmp	.+2602   	; 0x8166 <handleMotorsWithSpeedController+0xb12>
    773c:	60 91 4b 13 	lds	r22, 0x134B	; 0x80134b <calibration+0x84>
    7740:	70 91 4c 13 	lds	r23, 0x134C	; 0x80134c <calibration+0x85>
    7744:	07 2e       	mov	r0, r23
    7746:	00 0c       	add	r0, r0
    7748:	88 0b       	sbc	r24, r24
    774a:	99 0b       	sbc	r25, r25
    774c:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    7750:	4b 01       	movw	r8, r22
    7752:	5c 01       	movw	r10, r24
    7754:	be 01       	movw	r22, r28
    7756:	dd 0f       	add	r29, r29
    7758:	88 0b       	sbc	r24, r24
    775a:	99 0b       	sbc	r25, r25
    775c:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    7760:	9b 01       	movw	r18, r22
    7762:	ac 01       	movw	r20, r24
    7764:	c5 01       	movw	r24, r10
    7766:	b4 01       	movw	r22, r8
    7768:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    776c:	4b 01       	movw	r8, r22
    776e:	5c 01       	movw	r10, r24
    7770:	b7 01       	movw	r22, r14
    7772:	ff 0c       	add	r15, r15
    7774:	88 0b       	sbc	r24, r24
    7776:	99 0b       	sbc	r25, r25
    7778:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    777c:	9b 01       	movw	r18, r22
    777e:	ac 01       	movw	r20, r24
    7780:	c5 01       	movw	r24, r10
    7782:	b4 01       	movw	r22, r8
    7784:	0e 94 c3 4d 	call	0x9b86	; 0x9b86 <__divsf3>
    7788:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__fixsfsi>
    778c:	70 93 06 03 	sts	0x0306, r23	; 0x800306 <pwm_right_working+0x1>
    7790:	60 93 05 03 	sts	0x0305, r22	; 0x800305 <pwm_right_working>
    7794:	17 fd       	sbrc	r17, 7
    7796:	63 c3       	rjmp	.+1734   	; 0x7e5e <handleMotorsWithSpeedController+0x80a>
    7798:	b8 01       	movw	r22, r16
    779a:	66 0f       	add	r22, r22
    779c:	77 1f       	adc	r23, r23
    779e:	66 0f       	add	r22, r22
    77a0:	77 1f       	adc	r23, r23
    77a2:	06 0f       	add	r16, r22
    77a4:	17 1f       	adc	r17, r23
    77a6:	01 15       	cp	r16, r1
    77a8:	11 05       	cpc	r17, r1
    77aa:	09 f4       	brne	.+2      	; 0x77ae <handleMotorsWithSpeedController+0x15a>
    77ac:	4b c3       	rjmp	.+1686   	; 0x7e44 <handleMotorsWithSpeedController+0x7f0>
    77ae:	60 91 c9 12 	lds	r22, 0x12C9	; 0x8012c9 <calibration+0x2>
    77b2:	70 91 ca 12 	lds	r23, 0x12CA	; 0x8012ca <calibration+0x3>
    77b6:	60 17       	cp	r22, r16
    77b8:	71 07       	cpc	r23, r17
    77ba:	0c f0       	brlt	.+2      	; 0x77be <handleMotorsWithSpeedController+0x16a>
    77bc:	6d c3       	rjmp	.+1754   	; 0x7e98 <handleMotorsWithSpeedController+0x844>
    77be:	c0 91 d9 12 	lds	r28, 0x12D9	; 0x8012d9 <calibration+0x12>
    77c2:	d0 91 da 12 	lds	r29, 0x12DA	; 0x8012da <calibration+0x13>
    77c6:	c0 17       	cp	r28, r16
    77c8:	d1 07       	cpc	r29, r17
    77ca:	0c f0       	brlt	.+2      	; 0x77ce <handleMotorsWithSpeedController+0x17a>
    77cc:	a8 c4       	rjmp	.+2384   	; 0x811e <handleMotorsWithSpeedController+0xaca>
    77ce:	c0 91 e9 12 	lds	r28, 0x12E9	; 0x8012e9 <calibration+0x22>
    77d2:	d0 91 ea 12 	lds	r29, 0x12EA	; 0x8012ea <calibration+0x23>
    77d6:	c0 17       	cp	r28, r16
    77d8:	d1 07       	cpc	r29, r17
    77da:	0c f0       	brlt	.+2      	; 0x77de <handleMotorsWithSpeedController+0x18a>
    77dc:	53 c4       	rjmp	.+2214   	; 0x8084 <handleMotorsWithSpeedController+0xa30>
    77de:	c0 91 f9 12 	lds	r28, 0x12F9	; 0x8012f9 <calibration+0x32>
    77e2:	d0 91 fa 12 	lds	r29, 0x12FA	; 0x8012fa <calibration+0x33>
    77e6:	c0 17       	cp	r28, r16
    77e8:	d1 07       	cpc	r29, r17
    77ea:	0c f0       	brlt	.+2      	; 0x77ee <handleMotorsWithSpeedController+0x19a>
    77ec:	a1 c4       	rjmp	.+2370   	; 0x8130 <handleMotorsWithSpeedController+0xadc>
    77ee:	c0 91 09 13 	lds	r28, 0x1309	; 0x801309 <calibration+0x42>
    77f2:	d0 91 0a 13 	lds	r29, 0x130A	; 0x80130a <calibration+0x43>
    77f6:	c0 17       	cp	r28, r16
    77f8:	d1 07       	cpc	r29, r17
    77fa:	0c f0       	brlt	.+2      	; 0x77fe <handleMotorsWithSpeedController+0x1aa>
    77fc:	93 c4       	rjmp	.+2342   	; 0x8124 <handleMotorsWithSpeedController+0xad0>
    77fe:	c0 91 19 13 	lds	r28, 0x1319	; 0x801319 <calibration+0x52>
    7802:	d0 91 1a 13 	lds	r29, 0x131A	; 0x80131a <calibration+0x53>
    7806:	c0 17       	cp	r28, r16
    7808:	d1 07       	cpc	r29, r17
    780a:	0c f0       	brlt	.+2      	; 0x780e <handleMotorsWithSpeedController+0x1ba>
    780c:	a0 c4       	rjmp	.+2368   	; 0x814e <handleMotorsWithSpeedController+0xafa>
    780e:	c0 91 29 13 	lds	r28, 0x1329	; 0x801329 <calibration+0x62>
    7812:	d0 91 2a 13 	lds	r29, 0x132A	; 0x80132a <calibration+0x63>
    7816:	c0 17       	cp	r28, r16
    7818:	d1 07       	cpc	r29, r17
    781a:	0c f0       	brlt	.+2      	; 0x781e <handleMotorsWithSpeedController+0x1ca>
    781c:	9b c4       	rjmp	.+2358   	; 0x8154 <handleMotorsWithSpeedController+0xb00>
    781e:	c0 91 39 13 	lds	r28, 0x1339	; 0x801339 <calibration+0x72>
    7822:	d0 91 3a 13 	lds	r29, 0x133A	; 0x80133a <calibration+0x73>
    7826:	c0 17       	cp	r28, r16
    7828:	d1 07       	cpc	r29, r17
    782a:	0c f0       	brlt	.+2      	; 0x782e <handleMotorsWithSpeedController+0x1da>
    782c:	96 c4       	rjmp	.+2348   	; 0x815a <handleMotorsWithSpeedController+0xb06>
    782e:	c0 91 49 13 	lds	r28, 0x1349	; 0x801349 <calibration+0x82>
    7832:	d0 91 4a 13 	lds	r29, 0x134A	; 0x80134a <calibration+0x83>
    7836:	c0 17       	cp	r28, r16
    7838:	d1 07       	cpc	r29, r17
    783a:	0c f0       	brlt	.+2      	; 0x783e <handleMotorsWithSpeedController+0x1ea>
    783c:	91 c4       	rjmp	.+2338   	; 0x8160 <handleMotorsWithSpeedController+0xb0c>
    783e:	60 91 47 13 	lds	r22, 0x1347	; 0x801347 <calibration+0x80>
    7842:	70 91 48 13 	lds	r23, 0x1348	; 0x801348 <calibration+0x81>
    7846:	07 2e       	mov	r0, r23
    7848:	00 0c       	add	r0, r0
    784a:	88 0b       	sbc	r24, r24
    784c:	99 0b       	sbc	r25, r25
    784e:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    7852:	6b 01       	movw	r12, r22
    7854:	7c 01       	movw	r14, r24
    7856:	b8 01       	movw	r22, r16
    7858:	11 0f       	add	r17, r17
    785a:	88 0b       	sbc	r24, r24
    785c:	99 0b       	sbc	r25, r25
    785e:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    7862:	9b 01       	movw	r18, r22
    7864:	ac 01       	movw	r20, r24
    7866:	c7 01       	movw	r24, r14
    7868:	b6 01       	movw	r22, r12
    786a:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    786e:	6b 01       	movw	r12, r22
    7870:	7c 01       	movw	r14, r24
    7872:	be 01       	movw	r22, r28
    7874:	dd 0f       	add	r29, r29
    7876:	88 0b       	sbc	r24, r24
    7878:	99 0b       	sbc	r25, r25
    787a:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    787e:	9b 01       	movw	r18, r22
    7880:	ac 01       	movw	r20, r24
    7882:	c7 01       	movw	r24, r14
    7884:	b6 01       	movw	r22, r12
    7886:	0e 94 c3 4d 	call	0x9b86	; 0x9b86 <__divsf3>
    788a:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__fixsfsi>
    788e:	8b 01       	movw	r16, r22
    7890:	10 93 04 03 	sts	0x0304, r17	; 0x800304 <pwm_left_working+0x1>
    7894:	00 93 03 03 	sts	0x0303, r16	; 0x800303 <pwm_left_working>
    7898:	80 91 b5 02 	lds	r24, 0x02B5	; 0x8002b5 <obstacleAvoidanceEnabled>
    789c:	81 11       	cpse	r24, r1
    789e:	5d c2       	rjmp	.+1210   	; 0x7d5a <handleMotorsWithSpeedController+0x706>
    78a0:	10 93 28 03 	sts	0x0328, r17	; 0x800328 <pwm_left_desired_to_control+0x1>
    78a4:	00 93 27 03 	sts	0x0327, r16	; 0x800327 <pwm_left_desired_to_control>
    78a8:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <pwm_right_working>
    78ac:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <pwm_right_working+0x1>
    78b0:	90 93 2a 03 	sts	0x032A, r25	; 0x80032a <pwm_right_desired_to_control+0x1>
    78b4:	80 93 29 03 	sts	0x0329, r24	; 0x800329 <pwm_right_desired_to_control>
    78b8:	80 91 14 02 	lds	r24, 0x0214	; 0x800214 <compute_left_vel>
    78bc:	88 23       	and	r24, r24
    78be:	09 f4       	brne	.+2      	; 0x78c2 <handleMotorsWithSpeedController+0x26e>
    78c0:	a0 c0       	rjmp	.+320    	; 0x7a02 <handleMotorsWithSpeedController+0x3ae>
    78c2:	80 91 25 03 	lds	r24, 0x0325	; 0x800325 <left_vel_sum>
    78c6:	90 91 26 03 	lds	r25, 0x0326	; 0x800326 <left_vel_sum+0x1>
    78ca:	96 95       	lsr	r25
    78cc:	87 95       	ror	r24
    78ce:	96 95       	lsr	r25
    78d0:	87 95       	ror	r24
    78d2:	90 93 22 03 	sts	0x0322, r25	; 0x800322 <last_left_vel+0x1>
    78d6:	80 93 21 03 	sts	0x0321, r24	; 0x800321 <last_left_vel>
    78da:	10 92 14 02 	sts	0x0214, r1	; 0x800214 <compute_left_vel>
    78de:	10 92 26 03 	sts	0x0326, r1	; 0x800326 <left_vel_sum+0x1>
    78e2:	10 92 25 03 	sts	0x0325, r1	; 0x800325 <left_vel_sum>
    78e6:	20 91 53 0f 	lds	r18, 0x0F53	; 0x800f53 <calibrateOdomFlag>
    78ea:	21 30       	cpi	r18, 0x01	; 1
    78ec:	09 f4       	brne	.+2      	; 0x78f0 <handleMotorsWithSpeedController+0x29c>
    78ee:	29 c3       	rjmp	.+1618   	; 0x7f42 <handleMotorsWithSpeedController+0x8ee>
    78f0:	0e 94 64 38 	call	0x70c8	; 0x70c8 <getLeftSpeedFromInput>
    78f4:	80 91 9b 02 	lds	r24, 0x029B	; 0x80029b <leftDist>
    78f8:	90 91 9c 02 	lds	r25, 0x029C	; 0x80029c <leftDist+0x1>
    78fc:	a0 91 9d 02 	lds	r26, 0x029D	; 0x80029d <leftDist+0x2>
    7900:	b0 91 9e 02 	lds	r27, 0x029E	; 0x80029e <leftDist+0x3>
    7904:	80 93 93 02 	sts	0x0293, r24	; 0x800293 <leftDistPrev>
    7908:	90 93 94 02 	sts	0x0294, r25	; 0x800294 <leftDistPrev+0x1>
    790c:	a0 93 95 02 	sts	0x0295, r26	; 0x800295 <leftDistPrev+0x2>
    7910:	b0 93 96 02 	sts	0x0296, r27	; 0x800296 <leftDistPrev+0x3>
    7914:	60 91 78 02 	lds	r22, 0x0278	; 0x800278 <speedLeftFromEnc>
    7918:	70 91 79 02 	lds	r23, 0x0279	; 0x800279 <speedLeftFromEnc+0x1>
    791c:	07 2e       	mov	r0, r23
    791e:	00 0c       	add	r0, r0
    7920:	88 0b       	sbc	r24, r24
    7922:	99 0b       	sbc	r25, r25
    7924:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    7928:	6b 01       	movw	r12, r22
    792a:	7c 01       	movw	r14, r24
    792c:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    7930:	00 91 72 02 	lds	r16, 0x0272	; 0x800272 <timeLeftOdom>
    7934:	10 91 73 02 	lds	r17, 0x0273	; 0x800273 <timeLeftOdom+0x1>
    7938:	20 91 74 02 	lds	r18, 0x0274	; 0x800274 <timeLeftOdom+0x2>
    793c:	30 91 75 02 	lds	r19, 0x0275	; 0x800275 <timeLeftOdom+0x3>
    7940:	60 1b       	sub	r22, r16
    7942:	71 0b       	sbc	r23, r17
    7944:	82 0b       	sbc	r24, r18
    7946:	93 0b       	sbc	r25, r19
    7948:	0e 94 a5 4e 	call	0x9d4a	; 0x9d4a <__floatunsisf>
    794c:	20 e0       	ldi	r18, 0x00	; 0
    794e:	30 e0       	ldi	r19, 0x00	; 0
    7950:	40 ed       	ldi	r20, 0xD0	; 208
    7952:	52 e4       	ldi	r21, 0x42	; 66
    7954:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    7958:	a7 01       	movw	r20, r14
    795a:	96 01       	movw	r18, r12
    795c:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    7960:	20 e0       	ldi	r18, 0x00	; 0
    7962:	34 e2       	ldi	r19, 0x24	; 36
    7964:	44 e7       	ldi	r20, 0x74	; 116
    7966:	59 e4       	ldi	r21, 0x49	; 73
    7968:	0e 94 c3 4d 	call	0x9b86	; 0x9b86 <__divsf3>
    796c:	9b 01       	movw	r18, r22
    796e:	ac 01       	movw	r20, r24
    7970:	60 91 9b 02 	lds	r22, 0x029B	; 0x80029b <leftDist>
    7974:	70 91 9c 02 	lds	r23, 0x029C	; 0x80029c <leftDist+0x1>
    7978:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <leftDist+0x2>
    797c:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <leftDist+0x3>
    7980:	0e 94 db 4c 	call	0x99b6	; 0x99b6 <__addsf3>
    7984:	60 93 9b 02 	sts	0x029B, r22	; 0x80029b <leftDist>
    7988:	70 93 9c 02 	sts	0x029C, r23	; 0x80029c <leftDist+0x1>
    798c:	80 93 9d 02 	sts	0x029D, r24	; 0x80029d <leftDist+0x2>
    7990:	90 93 9e 02 	sts	0x029E, r25	; 0x80029e <leftDist+0x3>
    7994:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    7998:	60 93 72 02 	sts	0x0272, r22	; 0x800272 <timeLeftOdom>
    799c:	70 93 73 02 	sts	0x0273, r23	; 0x800273 <timeLeftOdom+0x1>
    79a0:	80 93 74 02 	sts	0x0274, r24	; 0x800274 <timeLeftOdom+0x2>
    79a4:	90 93 75 02 	sts	0x0275, r25	; 0x800275 <timeLeftOdom+0x3>
    79a8:	60 91 9b 02 	lds	r22, 0x029B	; 0x80029b <leftDist>
    79ac:	70 91 9c 02 	lds	r23, 0x029C	; 0x80029c <leftDist+0x1>
    79b0:	80 91 9d 02 	lds	r24, 0x029D	; 0x80029d <leftDist+0x2>
    79b4:	90 91 9e 02 	lds	r25, 0x029E	; 0x80029e <leftDist+0x3>
    79b8:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__fixsfsi>
    79bc:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    79c0:	60 93 2f 03 	sts	0x032F, r22	; 0x80032f <leftMotSteps>
    79c4:	70 93 30 03 	sts	0x0330, r23	; 0x800330 <leftMotSteps+0x1>
    79c8:	80 93 31 03 	sts	0x0331, r24	; 0x800331 <leftMotSteps+0x2>
    79cc:	90 93 32 03 	sts	0x0332, r25	; 0x800332 <leftMotSteps+0x3>
    79d0:	83 e0       	ldi	r24, 0x03	; 3
    79d2:	93 e0       	ldi	r25, 0x03	; 3
    79d4:	0e 94 0c 22 	call	0x4418	; 0x4418 <start_speed_control_left>
    79d8:	80 91 03 03 	lds	r24, 0x0303	; 0x800303 <pwm_left_working>
    79dc:	90 91 04 03 	lds	r25, 0x0304	; 0x800304 <pwm_left_working+0x1>
    79e0:	90 93 1c 03 	sts	0x031C, r25	; 0x80031c <pwm_left+0x1>
    79e4:	80 93 1b 03 	sts	0x031B, r24	; 0x80031b <pwm_left>
    79e8:	18 16       	cp	r1, r24
    79ea:	19 06       	cpc	r1, r25
    79ec:	0c f0       	brlt	.+2      	; 0x79f0 <handleMotorsWithSpeedController+0x39c>
    79ee:	c9 c2       	rjmp	.+1426   	; 0x7f82 <handleMotorsWithSpeedController+0x92e>
    79f0:	90 93 a9 00 	sts	0x00A9, r25	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
    79f4:	80 93 a8 00 	sts	0x00A8, r24	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
    79f8:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <computeOdometry>
    79fc:	8f 5f       	subi	r24, 0xFF	; 255
    79fe:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <computeOdometry>
    7a02:	80 91 13 02 	lds	r24, 0x0213	; 0x800213 <compute_right_vel>
    7a06:	81 11       	cpse	r24, r1
    7a08:	dd c0       	rjmp	.+442    	; 0x7bc4 <handleMotorsWithSpeedController+0x570>
    7a0a:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <computeOdometry>
    7a0e:	82 30       	cpi	r24, 0x02	; 2
    7a10:	08 f4       	brcc	.+2      	; 0x7a14 <handleMotorsWithSpeedController+0x3c0>
    7a12:	c4 c0       	rjmp	.+392    	; 0x7b9c <handleMotorsWithSpeedController+0x548>
    7a14:	10 92 8e 02 	sts	0x028E, r1	; 0x80028e <computeOdometry>
    7a18:	80 90 97 02 	lds	r8, 0x0297	; 0x800297 <rightDist>
    7a1c:	90 90 98 02 	lds	r9, 0x0298	; 0x800298 <rightDist+0x1>
    7a20:	a0 90 99 02 	lds	r10, 0x0299	; 0x800299 <rightDist+0x2>
    7a24:	b0 90 9a 02 	lds	r11, 0x029A	; 0x80029a <rightDist+0x3>
    7a28:	40 90 9b 02 	lds	r4, 0x029B	; 0x80029b <leftDist>
    7a2c:	50 90 9c 02 	lds	r5, 0x029C	; 0x80029c <leftDist+0x1>
    7a30:	60 90 9d 02 	lds	r6, 0x029D	; 0x80029d <leftDist+0x2>
    7a34:	70 90 9e 02 	lds	r7, 0x029E	; 0x80029e <leftDist+0x3>
    7a38:	20 91 8f 02 	lds	r18, 0x028F	; 0x80028f <rightDistPrev>
    7a3c:	30 91 90 02 	lds	r19, 0x0290	; 0x800290 <rightDistPrev+0x1>
    7a40:	40 91 91 02 	lds	r20, 0x0291	; 0x800291 <rightDistPrev+0x2>
    7a44:	50 91 92 02 	lds	r21, 0x0292	; 0x800292 <rightDistPrev+0x3>
    7a48:	c5 01       	movw	r24, r10
    7a4a:	b4 01       	movw	r22, r8
    7a4c:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <__subsf3>
    7a50:	6b 01       	movw	r12, r22
    7a52:	7c 01       	movw	r14, r24
    7a54:	20 91 93 02 	lds	r18, 0x0293	; 0x800293 <leftDistPrev>
    7a58:	30 91 94 02 	lds	r19, 0x0294	; 0x800294 <leftDistPrev+0x1>
    7a5c:	40 91 95 02 	lds	r20, 0x0295	; 0x800295 <leftDistPrev+0x2>
    7a60:	50 91 96 02 	lds	r21, 0x0296	; 0x800296 <leftDistPrev+0x3>
    7a64:	c3 01       	movw	r24, r6
    7a66:	b2 01       	movw	r22, r4
    7a68:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <__subsf3>
    7a6c:	9b 01       	movw	r18, r22
    7a6e:	ac 01       	movw	r20, r24
    7a70:	c7 01       	movw	r24, r14
    7a72:	b6 01       	movw	r22, r12
    7a74:	0e 94 db 4c 	call	0x99b6	; 0x99b6 <__addsf3>
    7a78:	20 e0       	ldi	r18, 0x00	; 0
    7a7a:	30 e0       	ldi	r19, 0x00	; 0
    7a7c:	40 e0       	ldi	r20, 0x00	; 0
    7a7e:	5f e3       	ldi	r21, 0x3F	; 63
    7a80:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    7a84:	6b 01       	movw	r12, r22
    7a86:	7c 01       	movw	r14, r24
    7a88:	60 93 9f 02 	sts	0x029F, r22	; 0x80029f <deltaDist>
    7a8c:	70 93 a0 02 	sts	0x02A0, r23	; 0x8002a0 <deltaDist+0x1>
    7a90:	80 93 a1 02 	sts	0x02A1, r24	; 0x8002a1 <deltaDist+0x2>
    7a94:	90 93 a2 02 	sts	0x02A2, r25	; 0x8002a2 <deltaDist+0x3>
    7a98:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <robotPosition>
    7a9c:	81 30       	cpi	r24, 0x01	; 1
    7a9e:	09 f4       	brne	.+2      	; 0x7aa2 <handleMotorsWithSpeedController+0x44e>
    7aa0:	70 c1       	rjmp	.+736    	; 0x7d82 <handleMotorsWithSpeedController+0x72e>
    7aa2:	00 91 8a 02 	lds	r16, 0x028A	; 0x80028a <thetaAcc>
    7aa6:	10 91 8b 02 	lds	r17, 0x028B	; 0x80028b <thetaAcc+0x1>
    7aaa:	d0 91 8c 02 	lds	r29, 0x028C	; 0x80028c <thetaAcc+0x2>
    7aae:	c0 91 8d 02 	lds	r28, 0x028D	; 0x80028d <thetaAcc+0x3>
    7ab2:	c8 01       	movw	r24, r16
    7ab4:	ad 2f       	mov	r26, r29
    7ab6:	bc 2f       	mov	r27, r28
    7ab8:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <theta>
    7abc:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <theta+0x1>
    7ac0:	a0 93 b1 02 	sts	0x02B1, r26	; 0x8002b1 <theta+0x2>
    7ac4:	b0 93 b2 02 	sts	0x02B2, r27	; 0x8002b2 <theta+0x3>
    7ac8:	b8 01       	movw	r22, r16
    7aca:	8d 2f       	mov	r24, r29
    7acc:	9c 2f       	mov	r25, r28
    7ace:	0e 94 be 4d 	call	0x9b7c	; 0x9b7c <cos>
    7ad2:	9b 01       	movw	r18, r22
    7ad4:	ac 01       	movw	r20, r24
    7ad6:	c7 01       	movw	r24, r14
    7ad8:	b6 01       	movw	r22, r12
    7ada:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    7ade:	4b 01       	movw	r8, r22
    7ae0:	5c 01       	movw	r10, r24
    7ae2:	9b 01       	movw	r18, r22
    7ae4:	ac 01       	movw	r20, r24
    7ae6:	60 91 a7 02 	lds	r22, 0x02A7	; 0x8002a7 <xPos>
    7aea:	70 91 a8 02 	lds	r23, 0x02A8	; 0x8002a8 <xPos+0x1>
    7aee:	80 91 a9 02 	lds	r24, 0x02A9	; 0x8002a9 <xPos+0x2>
    7af2:	90 91 aa 02 	lds	r25, 0x02AA	; 0x8002aa <xPos+0x3>
    7af6:	0e 94 db 4c 	call	0x99b6	; 0x99b6 <__addsf3>
    7afa:	60 93 a7 02 	sts	0x02A7, r22	; 0x8002a7 <xPos>
    7afe:	70 93 a8 02 	sts	0x02A8, r23	; 0x8002a8 <xPos+0x1>
    7b02:	80 93 a9 02 	sts	0x02A9, r24	; 0x8002a9 <xPos+0x2>
    7b06:	90 93 aa 02 	sts	0x02AA, r25	; 0x8002aa <xPos+0x3>
    7b0a:	b8 01       	movw	r22, r16
    7b0c:	8d 2f       	mov	r24, r29
    7b0e:	9c 2f       	mov	r25, r28
    7b10:	0e 94 a5 50 	call	0xa14a	; 0xa14a <sin>
    7b14:	9b 01       	movw	r18, r22
    7b16:	ac 01       	movw	r20, r24
    7b18:	c7 01       	movw	r24, r14
    7b1a:	b6 01       	movw	r22, r12
    7b1c:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    7b20:	6b 01       	movw	r12, r22
    7b22:	7c 01       	movw	r14, r24
    7b24:	9b 01       	movw	r18, r22
    7b26:	ac 01       	movw	r20, r24
    7b28:	60 91 a3 02 	lds	r22, 0x02A3	; 0x8002a3 <yPos>
    7b2c:	70 91 a4 02 	lds	r23, 0x02A4	; 0x8002a4 <yPos+0x1>
    7b30:	80 91 a5 02 	lds	r24, 0x02A5	; 0x8002a5 <yPos+0x2>
    7b34:	90 91 a6 02 	lds	r25, 0x02A6	; 0x8002a6 <yPos+0x3>
    7b38:	0e 94 db 4c 	call	0x99b6	; 0x99b6 <__addsf3>
    7b3c:	60 93 a3 02 	sts	0x02A3, r22	; 0x8002a3 <yPos>
    7b40:	70 93 a4 02 	sts	0x02A4, r23	; 0x8002a4 <yPos+0x1>
    7b44:	80 93 a5 02 	sts	0x02A5, r24	; 0x8002a5 <yPos+0x2>
    7b48:	90 93 a6 02 	sts	0x02A6, r25	; 0x8002a6 <yPos+0x3>
    7b4c:	a5 01       	movw	r20, r10
    7b4e:	94 01       	movw	r18, r8
    7b50:	60 91 32 07 	lds	r22, 0x0732	; 0x800732 <position>
    7b54:	70 91 33 07 	lds	r23, 0x0733	; 0x800733 <position+0x1>
    7b58:	80 91 34 07 	lds	r24, 0x0734	; 0x800734 <position+0x2>
    7b5c:	90 91 35 07 	lds	r25, 0x0735	; 0x800735 <position+0x3>
    7b60:	0e 94 db 4c 	call	0x99b6	; 0x99b6 <__addsf3>
    7b64:	60 93 32 07 	sts	0x0732, r22	; 0x800732 <position>
    7b68:	70 93 33 07 	sts	0x0733, r23	; 0x800733 <position+0x1>
    7b6c:	80 93 34 07 	sts	0x0734, r24	; 0x800734 <position+0x2>
    7b70:	90 93 35 07 	sts	0x0735, r25	; 0x800735 <position+0x3>
    7b74:	a7 01       	movw	r20, r14
    7b76:	96 01       	movw	r18, r12
    7b78:	60 91 36 07 	lds	r22, 0x0736	; 0x800736 <position+0x4>
    7b7c:	70 91 37 07 	lds	r23, 0x0737	; 0x800737 <position+0x5>
    7b80:	80 91 38 07 	lds	r24, 0x0738	; 0x800738 <position+0x6>
    7b84:	90 91 39 07 	lds	r25, 0x0739	; 0x800739 <position+0x7>
    7b88:	0e 94 db 4c 	call	0x99b6	; 0x99b6 <__addsf3>
    7b8c:	60 93 36 07 	sts	0x0736, r22	; 0x800736 <position+0x4>
    7b90:	70 93 37 07 	sts	0x0737, r23	; 0x800737 <position+0x5>
    7b94:	80 93 38 07 	sts	0x0738, r24	; 0x800738 <position+0x6>
    7b98:	90 93 39 07 	sts	0x0739, r25	; 0x800739 <position+0x7>
    7b9c:	df 91       	pop	r29
    7b9e:	cf 91       	pop	r28
    7ba0:	1f 91       	pop	r17
    7ba2:	0f 91       	pop	r16
    7ba4:	ff 90       	pop	r15
    7ba6:	ef 90       	pop	r14
    7ba8:	df 90       	pop	r13
    7baa:	cf 90       	pop	r12
    7bac:	bf 90       	pop	r11
    7bae:	af 90       	pop	r10
    7bb0:	9f 90       	pop	r9
    7bb2:	8f 90       	pop	r8
    7bb4:	7f 90       	pop	r7
    7bb6:	6f 90       	pop	r6
    7bb8:	5f 90       	pop	r5
    7bba:	4f 90       	pop	r4
    7bbc:	08 95       	ret
    7bbe:	60 e0       	ldi	r22, 0x00	; 0
    7bc0:	70 e0       	ldi	r23, 0x00	; 0
    7bc2:	e4 cd       	rjmp	.-1080   	; 0x778c <handleMotorsWithSpeedController+0x138>
    7bc4:	80 91 23 03 	lds	r24, 0x0323	; 0x800323 <right_vel_sum>
    7bc8:	90 91 24 03 	lds	r25, 0x0324	; 0x800324 <right_vel_sum+0x1>
    7bcc:	96 95       	lsr	r25
    7bce:	87 95       	ror	r24
    7bd0:	96 95       	lsr	r25
    7bd2:	87 95       	ror	r24
    7bd4:	90 93 20 03 	sts	0x0320, r25	; 0x800320 <last_right_vel+0x1>
    7bd8:	80 93 1f 03 	sts	0x031F, r24	; 0x80031f <last_right_vel>
    7bdc:	10 92 13 02 	sts	0x0213, r1	; 0x800213 <compute_right_vel>
    7be0:	10 92 24 03 	sts	0x0324, r1	; 0x800324 <right_vel_sum+0x1>
    7be4:	10 92 23 03 	sts	0x0323, r1	; 0x800323 <right_vel_sum>
    7be8:	20 91 53 0f 	lds	r18, 0x0F53	; 0x800f53 <calibrateOdomFlag>
    7bec:	21 30       	cpi	r18, 0x01	; 1
    7bee:	09 f4       	brne	.+2      	; 0x7bf2 <handleMotorsWithSpeedController+0x59e>
    7bf0:	88 c1       	rjmp	.+784    	; 0x7f02 <handleMotorsWithSpeedController+0x8ae>
    7bf2:	0e 94 9e 35 	call	0x6b3c	; 0x6b3c <getRightSpeedFromInput>
    7bf6:	80 91 97 02 	lds	r24, 0x0297	; 0x800297 <rightDist>
    7bfa:	90 91 98 02 	lds	r25, 0x0298	; 0x800298 <rightDist+0x1>
    7bfe:	a0 91 99 02 	lds	r26, 0x0299	; 0x800299 <rightDist+0x2>
    7c02:	b0 91 9a 02 	lds	r27, 0x029A	; 0x80029a <rightDist+0x3>
    7c06:	80 93 8f 02 	sts	0x028F, r24	; 0x80028f <rightDistPrev>
    7c0a:	90 93 90 02 	sts	0x0290, r25	; 0x800290 <rightDistPrev+0x1>
    7c0e:	a0 93 91 02 	sts	0x0291, r26	; 0x800291 <rightDistPrev+0x2>
    7c12:	b0 93 92 02 	sts	0x0292, r27	; 0x800292 <rightDistPrev+0x3>
    7c16:	60 91 76 02 	lds	r22, 0x0276	; 0x800276 <speedRightFromEnc>
    7c1a:	70 91 77 02 	lds	r23, 0x0277	; 0x800277 <speedRightFromEnc+0x1>
    7c1e:	07 2e       	mov	r0, r23
    7c20:	00 0c       	add	r0, r0
    7c22:	88 0b       	sbc	r24, r24
    7c24:	99 0b       	sbc	r25, r25
    7c26:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    7c2a:	6b 01       	movw	r12, r22
    7c2c:	7c 01       	movw	r14, r24
    7c2e:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    7c32:	00 91 6e 02 	lds	r16, 0x026E	; 0x80026e <timeRightOdom>
    7c36:	10 91 6f 02 	lds	r17, 0x026F	; 0x80026f <timeRightOdom+0x1>
    7c3a:	20 91 70 02 	lds	r18, 0x0270	; 0x800270 <timeRightOdom+0x2>
    7c3e:	30 91 71 02 	lds	r19, 0x0271	; 0x800271 <timeRightOdom+0x3>
    7c42:	60 1b       	sub	r22, r16
    7c44:	71 0b       	sbc	r23, r17
    7c46:	82 0b       	sbc	r24, r18
    7c48:	93 0b       	sbc	r25, r19
    7c4a:	0e 94 a5 4e 	call	0x9d4a	; 0x9d4a <__floatunsisf>
    7c4e:	20 e0       	ldi	r18, 0x00	; 0
    7c50:	30 e0       	ldi	r19, 0x00	; 0
    7c52:	40 ed       	ldi	r20, 0xD0	; 208
    7c54:	52 e4       	ldi	r21, 0x42	; 66
    7c56:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    7c5a:	a7 01       	movw	r20, r14
    7c5c:	96 01       	movw	r18, r12
    7c5e:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    7c62:	20 e0       	ldi	r18, 0x00	; 0
    7c64:	34 e2       	ldi	r19, 0x24	; 36
    7c66:	44 e7       	ldi	r20, 0x74	; 116
    7c68:	59 e4       	ldi	r21, 0x49	; 73
    7c6a:	0e 94 c3 4d 	call	0x9b86	; 0x9b86 <__divsf3>
    7c6e:	9b 01       	movw	r18, r22
    7c70:	ac 01       	movw	r20, r24
    7c72:	60 91 97 02 	lds	r22, 0x0297	; 0x800297 <rightDist>
    7c76:	70 91 98 02 	lds	r23, 0x0298	; 0x800298 <rightDist+0x1>
    7c7a:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <rightDist+0x2>
    7c7e:	90 91 9a 02 	lds	r25, 0x029A	; 0x80029a <rightDist+0x3>
    7c82:	0e 94 db 4c 	call	0x99b6	; 0x99b6 <__addsf3>
    7c86:	60 93 97 02 	sts	0x0297, r22	; 0x800297 <rightDist>
    7c8a:	70 93 98 02 	sts	0x0298, r23	; 0x800298 <rightDist+0x1>
    7c8e:	80 93 99 02 	sts	0x0299, r24	; 0x800299 <rightDist+0x2>
    7c92:	90 93 9a 02 	sts	0x029A, r25	; 0x80029a <rightDist+0x3>
    7c96:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    7c9a:	60 93 6e 02 	sts	0x026E, r22	; 0x80026e <timeRightOdom>
    7c9e:	70 93 6f 02 	sts	0x026F, r23	; 0x80026f <timeRightOdom+0x1>
    7ca2:	80 93 70 02 	sts	0x0270, r24	; 0x800270 <timeRightOdom+0x2>
    7ca6:	90 93 71 02 	sts	0x0271, r25	; 0x800271 <timeRightOdom+0x3>
    7caa:	60 91 97 02 	lds	r22, 0x0297	; 0x800297 <rightDist>
    7cae:	70 91 98 02 	lds	r23, 0x0298	; 0x800298 <rightDist+0x1>
    7cb2:	80 91 99 02 	lds	r24, 0x0299	; 0x800299 <rightDist+0x2>
    7cb6:	90 91 9a 02 	lds	r25, 0x029A	; 0x80029a <rightDist+0x3>
    7cba:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__fixsfsi>
    7cbe:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    7cc2:	60 93 33 03 	sts	0x0333, r22	; 0x800333 <rightMotSteps>
    7cc6:	70 93 34 03 	sts	0x0334, r23	; 0x800334 <rightMotSteps+0x1>
    7cca:	80 93 35 03 	sts	0x0335, r24	; 0x800335 <rightMotSteps+0x2>
    7cce:	90 93 36 03 	sts	0x0336, r25	; 0x800336 <rightMotSteps+0x3>
    7cd2:	85 e0       	ldi	r24, 0x05	; 5
    7cd4:	93 e0       	ldi	r25, 0x03	; 3
    7cd6:	0e 94 e5 20 	call	0x41ca	; 0x41ca <start_speed_control_right>
    7cda:	80 91 05 03 	lds	r24, 0x0305	; 0x800305 <pwm_right_working>
    7cde:	90 91 06 03 	lds	r25, 0x0306	; 0x800306 <pwm_right_working+0x1>
    7ce2:	90 93 1e 03 	sts	0x031E, r25	; 0x80031e <pwm_right+0x1>
    7ce6:	80 93 1d 03 	sts	0x031D, r24	; 0x80031d <pwm_right>
    7cea:	18 16       	cp	r1, r24
    7cec:	19 06       	cpc	r1, r25
    7cee:	0c f0       	brlt	.+2      	; 0x7cf2 <handleMotorsWithSpeedController+0x69e>
    7cf0:	53 c1       	rjmp	.+678    	; 0x7f98 <handleMotorsWithSpeedController+0x944>
    7cf2:	90 93 99 00 	sts	0x0099, r25	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
    7cf6:	80 93 98 00 	sts	0x0098, r24	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
    7cfa:	80 91 8e 02 	lds	r24, 0x028E	; 0x80028e <computeOdometry>
    7cfe:	8f 5f       	subi	r24, 0xFF	; 255
    7d00:	80 93 8e 02 	sts	0x028E, r24	; 0x80028e <computeOdometry>
    7d04:	84 ce       	rjmp	.-760    	; 0x7a0e <handleMotorsWithSpeedController+0x3ba>
    7d06:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    7d0a:	dc 01       	movw	r26, r24
    7d0c:	cb 01       	movw	r24, r22
    7d0e:	9c 01       	movw	r18, r24
    7d10:	ad 01       	movw	r20, r26
    7d12:	60 e0       	ldi	r22, 0x00	; 0
    7d14:	70 e0       	ldi	r23, 0x00	; 0
    7d16:	80 e0       	ldi	r24, 0x00	; 0
    7d18:	90 e0       	ldi	r25, 0x00	; 0
    7d1a:	a0 90 bc 02 	lds	r10, 0x02BC	; 0x8002bc <speedStepCounter>
    7d1e:	b0 90 bd 02 	lds	r11, 0x02BD	; 0x8002bd <speedStepCounter+0x1>
    7d22:	c0 90 be 02 	lds	r12, 0x02BE	; 0x8002be <speedStepCounter+0x2>
    7d26:	d0 90 bf 02 	lds	r13, 0x02BF	; 0x8002bf <speedStepCounter+0x3>
    7d2a:	e0 90 c0 02 	lds	r14, 0x02C0	; 0x8002c0 <speedStepCounter+0x4>
    7d2e:	f0 90 c1 02 	lds	r15, 0x02C1	; 0x8002c1 <speedStepCounter+0x5>
    7d32:	00 91 c2 02 	lds	r16, 0x02C2	; 0x8002c2 <speedStepCounter+0x6>
    7d36:	10 91 c3 02 	lds	r17, 0x02C3	; 0x8002c3 <speedStepCounter+0x7>
    7d3a:	0e 94 98 51 	call	0xa330	; 0xa330 <__subdi3>
    7d3e:	2f 38       	cpi	r18, 0x8F	; 143
    7d40:	31 40       	sbci	r19, 0x01	; 1
    7d42:	41 05       	cpc	r20, r1
    7d44:	51 05       	cpc	r21, r1
    7d46:	61 05       	cpc	r22, r1
    7d48:	71 05       	cpc	r23, r1
    7d4a:	81 05       	cpc	r24, r1
    7d4c:	91 05       	cpc	r25, r1
    7d4e:	11 f0       	breq	.+4      	; 0x7d54 <handleMotorsWithSpeedController+0x700>
    7d50:	08 f0       	brcs	.+2      	; 0x7d54 <handleMotorsWithSpeedController+0x700>
    7d52:	b1 c0       	rjmp	.+354    	; 0x7eb6 <handleMotorsWithSpeedController+0x862>
    7d54:	90 91 53 0f 	lds	r25, 0x0F53	; 0x800f53 <calibrateOdomFlag>
    7d58:	92 cc       	rjmp	.-1756   	; 0x767e <handleMotorsWithSpeedController+0x2a>
    7d5a:	65 e0       	ldi	r22, 0x05	; 5
    7d5c:	73 e0       	ldi	r23, 0x03	; 3
    7d5e:	83 e0       	ldi	r24, 0x03	; 3
    7d60:	93 e0       	ldi	r25, 0x03	; 3
    7d62:	0e 94 e5 43 	call	0x87ca	; 0x87ca <obstacleAvoidance>
    7d66:	00 91 03 03 	lds	r16, 0x0303	; 0x800303 <pwm_left_working>
    7d6a:	10 91 04 03 	lds	r17, 0x0304	; 0x800304 <pwm_left_working+0x1>
    7d6e:	98 cd       	rjmp	.-1232   	; 0x78a0 <handleMotorsWithSpeedController+0x24c>
    7d70:	30 93 06 03 	sts	0x0306, r19	; 0x800306 <pwm_right_working+0x1>
    7d74:	20 93 05 03 	sts	0x0305, r18	; 0x800305 <pwm_right_working>
    7d78:	10 93 04 03 	sts	0x0304, r17	; 0x800304 <pwm_left_working+0x1>
    7d7c:	00 93 03 03 	sts	0x0303, r16	; 0x800303 <pwm_left_working>
    7d80:	8b cd       	rjmp	.-1258   	; 0x7898 <handleMotorsWithSpeedController+0x244>
    7d82:	a3 01       	movw	r20, r6
    7d84:	92 01       	movw	r18, r4
    7d86:	c5 01       	movw	r24, r10
    7d88:	b4 01       	movw	r22, r8
    7d8a:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <__subsf3>
    7d8e:	20 e0       	ldi	r18, 0x00	; 0
    7d90:	30 e0       	ldi	r19, 0x00	; 0
    7d92:	4e e1       	ldi	r20, 0x1E	; 30
    7d94:	52 e4       	ldi	r21, 0x42	; 66
    7d96:	0e 94 c3 4d 	call	0x9b86	; 0x9b86 <__divsf3>
    7d9a:	20 91 af 02 	lds	r18, 0x02AF	; 0x8002af <theta>
    7d9e:	30 91 b0 02 	lds	r19, 0x02B0	; 0x8002b0 <theta+0x1>
    7da2:	40 91 b1 02 	lds	r20, 0x02B1	; 0x8002b1 <theta+0x2>
    7da6:	50 91 b2 02 	lds	r21, 0x02B2	; 0x8002b2 <theta+0x3>
    7daa:	0e 94 db 4c 	call	0x99b6	; 0x99b6 <__addsf3>
    7dae:	8b 01       	movw	r16, r22
    7db0:	d8 2f       	mov	r29, r24
    7db2:	c9 2f       	mov	r28, r25
    7db4:	cb 01       	movw	r24, r22
    7db6:	ad 2f       	mov	r26, r29
    7db8:	bc 2f       	mov	r27, r28
    7dba:	80 93 af 02 	sts	0x02AF, r24	; 0x8002af <theta>
    7dbe:	90 93 b0 02 	sts	0x02B0, r25	; 0x8002b0 <theta+0x1>
    7dc2:	a0 93 b1 02 	sts	0x02B1, r26	; 0x8002b1 <theta+0x2>
    7dc6:	b0 93 b2 02 	sts	0x02B2, r27	; 0x8002b2 <theta+0x3>
    7dca:	10 92 97 02 	sts	0x0297, r1	; 0x800297 <rightDist>
    7dce:	10 92 98 02 	sts	0x0298, r1	; 0x800298 <rightDist+0x1>
    7dd2:	10 92 99 02 	sts	0x0299, r1	; 0x800299 <rightDist+0x2>
    7dd6:	10 92 9a 02 	sts	0x029A, r1	; 0x80029a <rightDist+0x3>
    7dda:	10 92 9b 02 	sts	0x029B, r1	; 0x80029b <leftDist>
    7dde:	10 92 9c 02 	sts	0x029C, r1	; 0x80029c <leftDist+0x1>
    7de2:	10 92 9d 02 	sts	0x029D, r1	; 0x80029d <leftDist+0x2>
    7de6:	10 92 9e 02 	sts	0x029E, r1	; 0x80029e <leftDist+0x3>
    7dea:	20 ed       	ldi	r18, 0xD0	; 208
    7dec:	3f e0       	ldi	r19, 0x0F	; 15
    7dee:	49 e4       	ldi	r20, 0x49	; 73
    7df0:	50 e4       	ldi	r21, 0x40	; 64
    7df2:	b8 01       	movw	r22, r16
    7df4:	8d 2f       	mov	r24, r29
    7df6:	9c 2f       	mov	r25, r28
    7df8:	0e 94 bd 4f 	call	0x9f7a	; 0x9f7a <__gesf2>
    7dfc:	18 16       	cp	r1, r24
    7dfe:	2c f1       	brlt	.+74     	; 0x7e4a <handleMotorsWithSpeedController+0x7f6>
    7e00:	20 ed       	ldi	r18, 0xD0	; 208
    7e02:	3f e0       	ldi	r19, 0x0F	; 15
    7e04:	49 e4       	ldi	r20, 0x49	; 73
    7e06:	50 ec       	ldi	r21, 0xC0	; 192
    7e08:	b8 01       	movw	r22, r16
    7e0a:	8d 2f       	mov	r24, r29
    7e0c:	9c 2f       	mov	r25, r28
    7e0e:	0e 94 b9 4d 	call	0x9b72	; 0x9b72 <__cmpsf2>
    7e12:	87 ff       	sbrs	r24, 7
    7e14:	59 ce       	rjmp	.-846    	; 0x7ac8 <handleMotorsWithSpeedController+0x474>
    7e16:	20 ed       	ldi	r18, 0xD0	; 208
    7e18:	3f e0       	ldi	r19, 0x0F	; 15
    7e1a:	49 ec       	ldi	r20, 0xC9	; 201
    7e1c:	50 e4       	ldi	r21, 0x40	; 64
    7e1e:	b8 01       	movw	r22, r16
    7e20:	8d 2f       	mov	r24, r29
    7e22:	9c 2f       	mov	r25, r28
    7e24:	0e 94 db 4c 	call	0x99b6	; 0x99b6 <__addsf3>
    7e28:	8b 01       	movw	r16, r22
    7e2a:	ab 01       	movw	r20, r22
    7e2c:	bc 01       	movw	r22, r24
    7e2e:	40 93 af 02 	sts	0x02AF, r20	; 0x8002af <theta>
    7e32:	50 93 b0 02 	sts	0x02B0, r21	; 0x8002b0 <theta+0x1>
    7e36:	60 93 b1 02 	sts	0x02B1, r22	; 0x8002b1 <theta+0x2>
    7e3a:	70 93 b2 02 	sts	0x02B2, r23	; 0x8002b2 <theta+0x3>
    7e3e:	d8 2f       	mov	r29, r24
    7e40:	c9 2f       	mov	r28, r25
    7e42:	42 ce       	rjmp	.-892    	; 0x7ac8 <handleMotorsWithSpeedController+0x474>
    7e44:	00 e0       	ldi	r16, 0x00	; 0
    7e46:	10 e0       	ldi	r17, 0x00	; 0
    7e48:	23 cd       	rjmp	.-1466   	; 0x7890 <handleMotorsWithSpeedController+0x23c>
    7e4a:	20 ed       	ldi	r18, 0xD0	; 208
    7e4c:	3f e0       	ldi	r19, 0x0F	; 15
    7e4e:	49 ec       	ldi	r20, 0xC9	; 201
    7e50:	50 e4       	ldi	r21, 0x40	; 64
    7e52:	b8 01       	movw	r22, r16
    7e54:	8d 2f       	mov	r24, r29
    7e56:	9c 2f       	mov	r25, r28
    7e58:	0e 94 da 4c 	call	0x99b4	; 0x99b4 <__subsf3>
    7e5c:	e5 cf       	rjmp	.-54     	; 0x7e28 <handleMotorsWithSpeedController+0x7d4>
    7e5e:	62 e0       	ldi	r22, 0x02	; 2
    7e60:	c8 01       	movw	r24, r16
    7e62:	0e 94 47 32 	call	0x648e	; 0x648e <getInputFromSpeed>
    7e66:	8c 01       	movw	r16, r24
    7e68:	13 cd       	rjmp	.-1498   	; 0x7890 <handleMotorsWithSpeedController+0x23c>
    7e6a:	63 e0       	ldi	r22, 0x03	; 3
    7e6c:	c9 01       	movw	r24, r18
    7e6e:	0e 94 47 32 	call	0x648e	; 0x648e <getInputFromSpeed>
    7e72:	90 93 06 03 	sts	0x0306, r25	; 0x800306 <pwm_right_working+0x1>
    7e76:	80 93 05 03 	sts	0x0305, r24	; 0x800305 <pwm_right_working>
    7e7a:	8c cc       	rjmp	.-1768   	; 0x7794 <handleMotorsWithSpeedController+0x140>
    7e7c:	20 91 cb 12 	lds	r18, 0x12CB	; 0x8012cb <calibration+0x4>
    7e80:	30 91 cc 12 	lds	r19, 0x12CC	; 0x8012cc <calibration+0x5>
    7e84:	c2 9f       	mul	r28, r18
    7e86:	c0 01       	movw	r24, r0
    7e88:	c3 9f       	mul	r28, r19
    7e8a:	90 0d       	add	r25, r0
    7e8c:	d2 9f       	mul	r29, r18
    7e8e:	90 0d       	add	r25, r0
    7e90:	11 24       	eor	r1, r1
    7e92:	0e 94 30 51 	call	0xa260	; 0xa260 <__divmodhi4>
    7e96:	7a cc       	rjmp	.-1804   	; 0x778c <handleMotorsWithSpeedController+0x138>
    7e98:	20 91 c7 12 	lds	r18, 0x12C7	; 0x8012c7 <calibration>
    7e9c:	30 91 c8 12 	lds	r19, 0x12C8	; 0x8012c8 <calibration+0x1>
    7ea0:	02 9f       	mul	r16, r18
    7ea2:	c0 01       	movw	r24, r0
    7ea4:	03 9f       	mul	r16, r19
    7ea6:	90 0d       	add	r25, r0
    7ea8:	12 9f       	mul	r17, r18
    7eaa:	90 0d       	add	r25, r0
    7eac:	11 24       	eor	r1, r1
    7eae:	0e 94 30 51 	call	0xa260	; 0xa260 <__divmodhi4>
    7eb2:	8b 01       	movw	r16, r22
    7eb4:	ed cc       	rjmp	.-1574   	; 0x7890 <handleMotorsWithSpeedController+0x23c>
    7eb6:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    7eba:	dc 01       	movw	r26, r24
    7ebc:	cb 01       	movw	r24, r22
    7ebe:	80 93 bc 02 	sts	0x02BC, r24	; 0x8002bc <speedStepCounter>
    7ec2:	90 93 bd 02 	sts	0x02BD, r25	; 0x8002bd <speedStepCounter+0x1>
    7ec6:	a0 93 be 02 	sts	0x02BE, r26	; 0x8002be <speedStepCounter+0x2>
    7eca:	b0 93 bf 02 	sts	0x02BF, r27	; 0x8002bf <speedStepCounter+0x3>
    7ece:	10 92 c0 02 	sts	0x02C0, r1	; 0x8002c0 <speedStepCounter+0x4>
    7ed2:	10 92 c1 02 	sts	0x02C1, r1	; 0x8002c1 <speedStepCounter+0x5>
    7ed6:	10 92 c2 02 	sts	0x02C2, r1	; 0x8002c2 <speedStepCounter+0x6>
    7eda:	10 92 c3 02 	sts	0x02C3, r1	; 0x8002c3 <speedStepCounter+0x7>
    7ede:	80 91 bb 02 	lds	r24, 0x02BB	; 0x8002bb <softAccEnabled>
    7ee2:	88 23       	and	r24, r24
    7ee4:	09 f4       	brne	.+2      	; 0x7ee8 <handleMotorsWithSpeedController+0x894>
    7ee6:	63 c0       	rjmp	.+198    	; 0x7fae <handleMotorsWithSpeedController+0x95a>
    7ee8:	0e 94 b1 2b 	call	0x5762	; 0x5762 <handleSoftAcceleration.part.0>
    7eec:	90 91 53 0f 	lds	r25, 0x0F53	; 0x800f53 <calibrateOdomFlag>
    7ef0:	20 91 15 03 	lds	r18, 0x0315	; 0x800315 <pwm_intermediate_right_desired>
    7ef4:	30 91 16 03 	lds	r19, 0x0316	; 0x800316 <pwm_intermediate_right_desired+0x1>
    7ef8:	00 91 13 03 	lds	r16, 0x0313	; 0x800313 <pwm_intermediate_left_desired>
    7efc:	10 91 14 03 	lds	r17, 0x0314	; 0x800314 <pwm_intermediate_left_desired+0x1>
    7f00:	c6 cb       	rjmp	.-2164   	; 0x768e <handleMotorsWithSpeedController+0x3a>
    7f02:	40 91 82 02 	lds	r20, 0x0282	; 0x800282 <rightSpeedSumOdom>
    7f06:	50 91 83 02 	lds	r21, 0x0283	; 0x800283 <rightSpeedSumOdom+0x1>
    7f0a:	60 91 84 02 	lds	r22, 0x0284	; 0x800284 <rightSpeedSumOdom+0x2>
    7f0e:	70 91 85 02 	lds	r23, 0x0285	; 0x800285 <rightSpeedSumOdom+0x3>
    7f12:	8a 01       	movw	r16, r20
    7f14:	9b 01       	movw	r18, r22
    7f16:	08 0f       	add	r16, r24
    7f18:	19 1f       	adc	r17, r25
    7f1a:	21 1d       	adc	r18, r1
    7f1c:	31 1d       	adc	r19, r1
    7f1e:	00 93 82 02 	sts	0x0282, r16	; 0x800282 <rightSpeedSumOdom>
    7f22:	10 93 83 02 	sts	0x0283, r17	; 0x800283 <rightSpeedSumOdom+0x1>
    7f26:	20 93 84 02 	sts	0x0284, r18	; 0x800284 <rightSpeedSumOdom+0x2>
    7f2a:	30 93 85 02 	sts	0x0285, r19	; 0x800285 <rightSpeedSumOdom+0x3>
    7f2e:	80 91 7e 02 	lds	r24, 0x027E	; 0x80027e <rightSumCount>
    7f32:	90 91 7f 02 	lds	r25, 0x027F	; 0x80027f <rightSumCount+0x1>
    7f36:	01 96       	adiw	r24, 0x01	; 1
    7f38:	90 93 7f 02 	sts	0x027F, r25	; 0x80027f <rightSumCount+0x1>
    7f3c:	80 93 7e 02 	sts	0x027E, r24	; 0x80027e <rightSumCount>
    7f40:	58 ce       	rjmp	.-848    	; 0x7bf2 <handleMotorsWithSpeedController+0x59e>
    7f42:	40 91 86 02 	lds	r20, 0x0286	; 0x800286 <leftSpeedSumOdom>
    7f46:	50 91 87 02 	lds	r21, 0x0287	; 0x800287 <leftSpeedSumOdom+0x1>
    7f4a:	60 91 88 02 	lds	r22, 0x0288	; 0x800288 <leftSpeedSumOdom+0x2>
    7f4e:	70 91 89 02 	lds	r23, 0x0289	; 0x800289 <leftSpeedSumOdom+0x3>
    7f52:	8a 01       	movw	r16, r20
    7f54:	9b 01       	movw	r18, r22
    7f56:	08 0f       	add	r16, r24
    7f58:	19 1f       	adc	r17, r25
    7f5a:	21 1d       	adc	r18, r1
    7f5c:	31 1d       	adc	r19, r1
    7f5e:	00 93 86 02 	sts	0x0286, r16	; 0x800286 <leftSpeedSumOdom>
    7f62:	10 93 87 02 	sts	0x0287, r17	; 0x800287 <leftSpeedSumOdom+0x1>
    7f66:	20 93 88 02 	sts	0x0288, r18	; 0x800288 <leftSpeedSumOdom+0x2>
    7f6a:	30 93 89 02 	sts	0x0289, r19	; 0x800289 <leftSpeedSumOdom+0x3>
    7f6e:	80 91 80 02 	lds	r24, 0x0280	; 0x800280 <leftSumCount>
    7f72:	90 91 81 02 	lds	r25, 0x0281	; 0x800281 <leftSumCount+0x1>
    7f76:	01 96       	adiw	r24, 0x01	; 1
    7f78:	90 93 81 02 	sts	0x0281, r25	; 0x800281 <leftSumCount+0x1>
    7f7c:	80 93 80 02 	sts	0x0280, r24	; 0x800280 <leftSumCount>
    7f80:	b7 cc       	rjmp	.-1682   	; 0x78f0 <handleMotorsWithSpeedController+0x29c>
    7f82:	00 97       	sbiw	r24, 0x00	; 0
    7f84:	39 f5       	brne	.+78     	; 0x7fd4 <handleMotorsWithSpeedController+0x980>
    7f86:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
    7f8a:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
    7f8e:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7c00ab>
    7f92:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7c00aa>
    7f96:	30 cd       	rjmp	.-1440   	; 0x79f8 <handleMotorsWithSpeedController+0x3a4>
    7f98:	00 97       	sbiw	r24, 0x00	; 0
    7f9a:	21 f5       	brne	.+72     	; 0x7fe4 <handleMotorsWithSpeedController+0x990>
    7f9c:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
    7fa0:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
    7fa4:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7c009b>
    7fa8:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <__TEXT_REGION_LENGTH__+0x7c009a>
    7fac:	a6 ce       	rjmp	.-692    	; 0x7cfa <handleMotorsWithSpeedController+0x6a6>
    7fae:	20 91 19 03 	lds	r18, 0x0319	; 0x800319 <pwm_right_desired>
    7fb2:	30 91 1a 03 	lds	r19, 0x031A	; 0x80031a <pwm_right_desired+0x1>
    7fb6:	30 93 16 03 	sts	0x0316, r19	; 0x800316 <pwm_intermediate_right_desired+0x1>
    7fba:	20 93 15 03 	sts	0x0315, r18	; 0x800315 <pwm_intermediate_right_desired>
    7fbe:	00 91 17 03 	lds	r16, 0x0317	; 0x800317 <pwm_left_desired>
    7fc2:	10 91 18 03 	lds	r17, 0x0318	; 0x800318 <pwm_left_desired+0x1>
    7fc6:	10 93 14 03 	sts	0x0314, r17	; 0x800314 <pwm_intermediate_left_desired+0x1>
    7fca:	00 93 13 03 	sts	0x0313, r16	; 0x800313 <pwm_intermediate_left_desired>
    7fce:	90 91 53 0f 	lds	r25, 0x0F53	; 0x800f53 <calibrateOdomFlag>
    7fd2:	5d cb       	rjmp	.-2374   	; 0x768e <handleMotorsWithSpeedController+0x3a>
    7fd4:	91 95       	neg	r25
    7fd6:	81 95       	neg	r24
    7fd8:	91 09       	sbc	r25, r1
    7fda:	90 93 ab 00 	sts	0x00AB, r25	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7c00ab>
    7fde:	80 93 aa 00 	sts	0x00AA, r24	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7c00aa>
    7fe2:	0a cd       	rjmp	.-1516   	; 0x79f8 <handleMotorsWithSpeedController+0x3a4>
    7fe4:	91 95       	neg	r25
    7fe6:	81 95       	neg	r24
    7fe8:	91 09       	sbc	r25, r1
    7fea:	90 93 9b 00 	sts	0x009B, r25	; 0x80009b <__TEXT_REGION_LENGTH__+0x7c009b>
    7fee:	80 93 9a 00 	sts	0x009A, r24	; 0x80009a <__TEXT_REGION_LENGTH__+0x7c009a>
    7ff2:	83 ce       	rjmp	.-762    	; 0x7cfa <handleMotorsWithSpeedController+0x6a6>
    7ff4:	82 e0       	ldi	r24, 0x02	; 2
    7ff6:	90 e0       	ldi	r25, 0x00	; 0
    7ff8:	fc 01       	movw	r30, r24
    7ffa:	e2 95       	swap	r30
    7ffc:	f2 95       	swap	r31
    7ffe:	f0 7f       	andi	r31, 0xF0	; 240
    8000:	fe 27       	eor	r31, r30
    8002:	e0 7f       	andi	r30, 0xF0	; 240
    8004:	fe 27       	eor	r31, r30
    8006:	e9 54       	subi	r30, 0x49	; 73
    8008:	fd 4e       	sbci	r31, 0xED	; 237
    800a:	a6 80       	ldd	r10, Z+6	; 0x06
    800c:	b7 80       	ldd	r11, Z+7	; 0x07
    800e:	c4 80       	ldd	r12, Z+4	; 0x04
    8010:	d5 80       	ldd	r13, Z+5	; 0x05
    8012:	82 95       	swap	r24
    8014:	92 95       	swap	r25
    8016:	90 7f       	andi	r25, 0xF0	; 240
    8018:	98 27       	eor	r25, r24
    801a:	80 7f       	andi	r24, 0xF0	; 240
    801c:	98 27       	eor	r25, r24
    801e:	fc 01       	movw	r30, r24
    8020:	e9 53       	subi	r30, 0x39	; 57
    8022:	fd 4e       	sbci	r31, 0xED	; 237
    8024:	64 81       	ldd	r22, Z+4	; 0x04
    8026:	75 81       	ldd	r23, Z+5	; 0x05
    8028:	6c 19       	sub	r22, r12
    802a:	7d 09       	sbc	r23, r13
    802c:	07 2e       	mov	r0, r23
    802e:	00 0c       	add	r0, r0
    8030:	88 0b       	sbc	r24, r24
    8032:	99 0b       	sbc	r25, r25
    8034:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    8038:	2b 01       	movw	r4, r22
    803a:	3c 01       	movw	r6, r24
    803c:	ca 19       	sub	r28, r10
    803e:	db 09       	sbc	r29, r11
    8040:	be 01       	movw	r22, r28
    8042:	dd 0f       	add	r29, r29
    8044:	88 0b       	sbc	r24, r24
    8046:	99 0b       	sbc	r25, r25
    8048:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    804c:	9b 01       	movw	r18, r22
    804e:	ac 01       	movw	r20, r24
    8050:	c3 01       	movw	r24, r6
    8052:	b2 01       	movw	r22, r4
    8054:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    8058:	2b 01       	movw	r4, r22
    805a:	3c 01       	movw	r6, r24
    805c:	b7 01       	movw	r22, r14
    805e:	6a 19       	sub	r22, r10
    8060:	7b 09       	sbc	r23, r11
    8062:	07 2e       	mov	r0, r23
    8064:	00 0c       	add	r0, r0
    8066:	88 0b       	sbc	r24, r24
    8068:	99 0b       	sbc	r25, r25
    806a:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    806e:	9b 01       	movw	r18, r22
    8070:	ac 01       	movw	r20, r24
    8072:	c3 01       	movw	r24, r6
    8074:	b2 01       	movw	r22, r4
    8076:	0e 94 c3 4d 	call	0x9b86	; 0x9b86 <__divsf3>
    807a:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__fixsfsi>
    807e:	6c 0d       	add	r22, r12
    8080:	7d 1d       	adc	r23, r13
    8082:	84 cb       	rjmp	.-2296   	; 0x778c <handleMotorsWithSpeedController+0x138>
    8084:	82 e0       	ldi	r24, 0x02	; 2
    8086:	90 e0       	ldi	r25, 0x00	; 0
    8088:	fc 01       	movw	r30, r24
    808a:	e2 95       	swap	r30
    808c:	f2 95       	swap	r31
    808e:	f0 7f       	andi	r31, 0xF0	; 240
    8090:	fe 27       	eor	r31, r30
    8092:	e0 7f       	andi	r30, 0xF0	; 240
    8094:	fe 27       	eor	r31, r30
    8096:	e9 54       	subi	r30, 0x49	; 73
    8098:	fd 4e       	sbci	r31, 0xED	; 237
    809a:	c2 80       	ldd	r12, Z+2	; 0x02
    809c:	d3 80       	ldd	r13, Z+3	; 0x03
    809e:	e0 80       	ld	r14, Z
    80a0:	f1 80       	ldd	r15, Z+1	; 0x01
    80a2:	82 95       	swap	r24
    80a4:	92 95       	swap	r25
    80a6:	90 7f       	andi	r25, 0xF0	; 240
    80a8:	98 27       	eor	r25, r24
    80aa:	80 7f       	andi	r24, 0xF0	; 240
    80ac:	98 27       	eor	r25, r24
    80ae:	fc 01       	movw	r30, r24
    80b0:	e9 53       	subi	r30, 0x39	; 57
    80b2:	fd 4e       	sbci	r31, 0xED	; 237
    80b4:	60 81       	ld	r22, Z
    80b6:	71 81       	ldd	r23, Z+1	; 0x01
    80b8:	6e 19       	sub	r22, r14
    80ba:	7f 09       	sbc	r23, r15
    80bc:	07 2e       	mov	r0, r23
    80be:	00 0c       	add	r0, r0
    80c0:	88 0b       	sbc	r24, r24
    80c2:	99 0b       	sbc	r25, r25
    80c4:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    80c8:	4b 01       	movw	r8, r22
    80ca:	5c 01       	movw	r10, r24
    80cc:	b8 01       	movw	r22, r16
    80ce:	6c 19       	sub	r22, r12
    80d0:	7d 09       	sbc	r23, r13
    80d2:	07 2e       	mov	r0, r23
    80d4:	00 0c       	add	r0, r0
    80d6:	88 0b       	sbc	r24, r24
    80d8:	99 0b       	sbc	r25, r25
    80da:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    80de:	9b 01       	movw	r18, r22
    80e0:	ac 01       	movw	r20, r24
    80e2:	c5 01       	movw	r24, r10
    80e4:	b4 01       	movw	r22, r8
    80e6:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    80ea:	4b 01       	movw	r8, r22
    80ec:	5c 01       	movw	r10, r24
    80ee:	be 01       	movw	r22, r28
    80f0:	6c 19       	sub	r22, r12
    80f2:	7d 09       	sbc	r23, r13
    80f4:	07 2e       	mov	r0, r23
    80f6:	00 0c       	add	r0, r0
    80f8:	88 0b       	sbc	r24, r24
    80fa:	99 0b       	sbc	r25, r25
    80fc:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    8100:	9b 01       	movw	r18, r22
    8102:	ac 01       	movw	r20, r24
    8104:	c5 01       	movw	r24, r10
    8106:	b4 01       	movw	r22, r8
    8108:	0e 94 c3 4d 	call	0x9b86	; 0x9b86 <__divsf3>
    810c:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__fixsfsi>
    8110:	87 01       	movw	r16, r14
    8112:	06 0f       	add	r16, r22
    8114:	17 1f       	adc	r17, r23
    8116:	bc cb       	rjmp	.-2184   	; 0x7890 <handleMotorsWithSpeedController+0x23c>
    8118:	81 e0       	ldi	r24, 0x01	; 1
    811a:	90 e0       	ldi	r25, 0x00	; 0
    811c:	6d cf       	rjmp	.-294    	; 0x7ff8 <handleMotorsWithSpeedController+0x9a4>
    811e:	81 e0       	ldi	r24, 0x01	; 1
    8120:	90 e0       	ldi	r25, 0x00	; 0
    8122:	b2 cf       	rjmp	.-156    	; 0x8088 <handleMotorsWithSpeedController+0xa34>
    8124:	84 e0       	ldi	r24, 0x04	; 4
    8126:	90 e0       	ldi	r25, 0x00	; 0
    8128:	af cf       	rjmp	.-162    	; 0x8088 <handleMotorsWithSpeedController+0xa34>
    812a:	84 e0       	ldi	r24, 0x04	; 4
    812c:	90 e0       	ldi	r25, 0x00	; 0
    812e:	64 cf       	rjmp	.-312    	; 0x7ff8 <handleMotorsWithSpeedController+0x9a4>
    8130:	83 e0       	ldi	r24, 0x03	; 3
    8132:	90 e0       	ldi	r25, 0x00	; 0
    8134:	a9 cf       	rjmp	.-174    	; 0x8088 <handleMotorsWithSpeedController+0xa34>
    8136:	83 e0       	ldi	r24, 0x03	; 3
    8138:	90 e0       	ldi	r25, 0x00	; 0
    813a:	5e cf       	rjmp	.-324    	; 0x7ff8 <handleMotorsWithSpeedController+0x9a4>
    813c:	87 e0       	ldi	r24, 0x07	; 7
    813e:	90 e0       	ldi	r25, 0x00	; 0
    8140:	5b cf       	rjmp	.-330    	; 0x7ff8 <handleMotorsWithSpeedController+0x9a4>
    8142:	85 e0       	ldi	r24, 0x05	; 5
    8144:	90 e0       	ldi	r25, 0x00	; 0
    8146:	58 cf       	rjmp	.-336    	; 0x7ff8 <handleMotorsWithSpeedController+0x9a4>
    8148:	86 e0       	ldi	r24, 0x06	; 6
    814a:	90 e0       	ldi	r25, 0x00	; 0
    814c:	55 cf       	rjmp	.-342    	; 0x7ff8 <handleMotorsWithSpeedController+0x9a4>
    814e:	85 e0       	ldi	r24, 0x05	; 5
    8150:	90 e0       	ldi	r25, 0x00	; 0
    8152:	9a cf       	rjmp	.-204    	; 0x8088 <handleMotorsWithSpeedController+0xa34>
    8154:	86 e0       	ldi	r24, 0x06	; 6
    8156:	90 e0       	ldi	r25, 0x00	; 0
    8158:	97 cf       	rjmp	.-210    	; 0x8088 <handleMotorsWithSpeedController+0xa34>
    815a:	87 e0       	ldi	r24, 0x07	; 7
    815c:	90 e0       	ldi	r25, 0x00	; 0
    815e:	94 cf       	rjmp	.-216    	; 0x8088 <handleMotorsWithSpeedController+0xa34>
    8160:	88 e0       	ldi	r24, 0x08	; 8
    8162:	90 e0       	ldi	r25, 0x00	; 0
    8164:	91 cf       	rjmp	.-222    	; 0x8088 <handleMotorsWithSpeedController+0xa34>
    8166:	88 e0       	ldi	r24, 0x08	; 8
    8168:	90 e0       	ldi	r25, 0x00	; 0
    816a:	46 cf       	rjmp	.-372    	; 0x7ff8 <handleMotorsWithSpeedController+0x9a4>

0000816c <writeDefaultCalibration>:
    816c:	2f 92       	push	r2
    816e:	3f 92       	push	r3
    8170:	4f 92       	push	r4
    8172:	5f 92       	push	r5
    8174:	6f 92       	push	r6
    8176:	7f 92       	push	r7
    8178:	8f 92       	push	r8
    817a:	9f 92       	push	r9
    817c:	af 92       	push	r10
    817e:	bf 92       	push	r11
    8180:	cf 92       	push	r12
    8182:	df 92       	push	r13
    8184:	ef 92       	push	r14
    8186:	ff 92       	push	r15
    8188:	0f 93       	push	r16
    818a:	1f 93       	push	r17
    818c:	cf 93       	push	r28
    818e:	df 93       	push	r29
    8190:	e7 ec       	ldi	r30, 0xC7	; 199
    8192:	f2 e1       	ldi	r31, 0x12	; 18
    8194:	04 e1       	ldi	r16, 0x14	; 20
    8196:	10 e0       	ldi	r17, 0x00	; 0
    8198:	11 83       	std	Z+1, r17	; 0x01
    819a:	00 83       	st	Z, r16
    819c:	88 e2       	ldi	r24, 0x28	; 40
    819e:	90 e0       	ldi	r25, 0x00	; 0
    81a0:	91 8b       	std	Z+17, r25	; 0x11
    81a2:	80 8b       	std	Z+16, r24	; 0x10
    81a4:	8b e3       	ldi	r24, 0x3B	; 59
    81a6:	c8 2e       	mov	r12, r24
    81a8:	d1 2c       	mov	r13, r1
    81aa:	d1 a2       	std	Z+33, r13	; 0x21
    81ac:	c0 a2       	std	Z+32, r12	; 0x20
    81ae:	9f e4       	ldi	r25, 0x4F	; 79
    81b0:	69 2e       	mov	r6, r25
    81b2:	71 2c       	mov	r7, r1
    81b4:	71 aa       	std	Z+49, r7	; 0x31
    81b6:	60 aa       	std	Z+48, r6	; 0x30
    81b8:	24 e6       	ldi	r18, 0x64	; 100
    81ba:	e2 2e       	mov	r14, r18
    81bc:	f1 2c       	mov	r15, r1
    81be:	f0 92 08 13 	sts	0x1308, r15	; 0x801308 <calibration+0x41>
    81c2:	e0 92 07 13 	sts	0x1307, r14	; 0x801307 <calibration+0x40>
    81c6:	38 e7       	ldi	r19, 0x78	; 120
    81c8:	23 2e       	mov	r2, r19
    81ca:	31 2c       	mov	r3, r1
    81cc:	30 92 18 13 	sts	0x1318, r3	; 0x801318 <calibration+0x51>
    81d0:	20 92 17 13 	sts	0x1317, r2	; 0x801317 <calibration+0x50>
    81d4:	8b e8       	ldi	r24, 0x8B	; 139
    81d6:	90 e0       	ldi	r25, 0x00	; 0
    81d8:	90 93 28 13 	sts	0x1328, r25	; 0x801328 <calibration+0x61>
    81dc:	80 93 27 13 	sts	0x1327, r24	; 0x801327 <calibration+0x60>
    81e0:	2f e9       	ldi	r18, 0x9F	; 159
    81e2:	30 e0       	ldi	r19, 0x00	; 0
    81e4:	30 93 38 13 	sts	0x1338, r19	; 0x801338 <calibration+0x71>
    81e8:	20 93 37 13 	sts	0x1337, r18	; 0x801337 <calibration+0x70>
    81ec:	64 eb       	ldi	r22, 0xB4	; 180
    81ee:	70 e0       	ldi	r23, 0x00	; 0
    81f0:	70 93 48 13 	sts	0x1348, r23	; 0x801348 <calibration+0x81>
    81f4:	60 93 47 13 	sts	0x1347, r22	; 0x801347 <calibration+0x80>
    81f8:	a3 e1       	ldi	r26, 0x13	; 19
    81fa:	b0 e0       	ldi	r27, 0x00	; 0
    81fc:	b3 83       	std	Z+3, r27	; 0x03
    81fe:	a2 83       	std	Z+2, r26	; 0x02
    8200:	2f e2       	ldi	r18, 0x2F	; 47
    8202:	30 e0       	ldi	r19, 0x00	; 0
    8204:	33 8b       	std	Z+19, r19	; 0x13
    8206:	22 8b       	std	Z+18, r18	; 0x12
    8208:	28 e4       	ldi	r18, 0x48	; 72
    820a:	30 e0       	ldi	r19, 0x00	; 0
    820c:	33 a3       	std	Z+35, r19	; 0x23
    820e:	22 a3       	std	Z+34, r18	; 0x22
    8210:	2b e5       	ldi	r18, 0x5B	; 91
    8212:	30 e0       	ldi	r19, 0x00	; 0
    8214:	33 ab       	std	Z+51, r19	; 0x33
    8216:	22 ab       	std	Z+50, r18	; 0x32
    8218:	2d e6       	ldi	r18, 0x6D	; 109
    821a:	30 e0       	ldi	r19, 0x00	; 0
    821c:	30 93 0a 13 	sts	0x130A, r19	; 0x80130a <calibration+0x43>
    8220:	20 93 09 13 	sts	0x1309, r18	; 0x801309 <calibration+0x42>
    8224:	4d e7       	ldi	r20, 0x7D	; 125
    8226:	50 e0       	ldi	r21, 0x00	; 0
    8228:	50 93 1a 13 	sts	0x131A, r21	; 0x80131a <calibration+0x53>
    822c:	40 93 19 13 	sts	0x1319, r20	; 0x801319 <calibration+0x52>
    8230:	2f e8       	ldi	r18, 0x8F	; 143
    8232:	30 e0       	ldi	r19, 0x00	; 0
    8234:	30 93 2a 13 	sts	0x132A, r19	; 0x80132a <calibration+0x63>
    8238:	20 93 29 13 	sts	0x1329, r18	; 0x801329 <calibration+0x62>
    823c:	20 ea       	ldi	r18, 0xA0	; 160
    823e:	30 e0       	ldi	r19, 0x00	; 0
    8240:	30 93 3a 13 	sts	0x133A, r19	; 0x80133a <calibration+0x73>
    8244:	20 93 39 13 	sts	0x1339, r18	; 0x801339 <calibration+0x72>
    8248:	ce ea       	ldi	r28, 0xAE	; 174
    824a:	d0 e0       	ldi	r29, 0x00	; 0
    824c:	d0 93 4a 13 	sts	0x134A, r29	; 0x80134a <calibration+0x83>
    8250:	c0 93 49 13 	sts	0x1349, r28	; 0x801349 <calibration+0x82>
    8254:	b5 83       	std	Z+5, r27	; 0x05
    8256:	a4 83       	std	Z+4, r26	; 0x04
    8258:	c7 e2       	ldi	r28, 0x27	; 39
    825a:	d0 e0       	ldi	r29, 0x00	; 0
    825c:	d5 8b       	std	Z+21, r29	; 0x15
    825e:	c4 8b       	std	Z+20, r28	; 0x14
    8260:	ac e3       	ldi	r26, 0x3C	; 60
    8262:	8a 2e       	mov	r8, r26
    8264:	91 2c       	mov	r9, r1
    8266:	95 a2       	std	Z+37, r9	; 0x25
    8268:	84 a2       	std	Z+36, r8	; 0x24
    826a:	a0 e5       	ldi	r26, 0x50	; 80
    826c:	b0 e0       	ldi	r27, 0x00	; 0
    826e:	b5 ab       	std	Z+53, r27	; 0x35
    8270:	a4 ab       	std	Z+52, r26	; 0x34
    8272:	b3 e6       	ldi	r27, 0x63	; 99
    8274:	4b 2e       	mov	r4, r27
    8276:	51 2c       	mov	r5, r1
    8278:	50 92 0c 13 	sts	0x130C, r5	; 0x80130c <calibration+0x45>
    827c:	40 92 0b 13 	sts	0x130B, r4	; 0x80130b <calibration+0x44>
    8280:	a7 e7       	ldi	r26, 0x77	; 119
    8282:	b0 e0       	ldi	r27, 0x00	; 0
    8284:	b0 93 1c 13 	sts	0x131C, r27	; 0x80131c <calibration+0x55>
    8288:	a0 93 1b 13 	sts	0x131B, r26	; 0x80131b <calibration+0x54>
    828c:	0f 2e       	mov	r0, r31
    828e:	fc e8       	ldi	r31, 0x8C	; 140
    8290:	cf 2e       	mov	r12, r31
    8292:	d1 2c       	mov	r13, r1
    8294:	f0 2d       	mov	r31, r0
    8296:	d0 92 2c 13 	sts	0x132C, r13	; 0x80132c <calibration+0x65>
    829a:	c0 92 2b 13 	sts	0x132B, r12	; 0x80132b <calibration+0x64>
    829e:	30 93 3c 13 	sts	0x133C, r19	; 0x80133c <calibration+0x75>
    82a2:	20 93 3b 13 	sts	0x133B, r18	; 0x80133b <calibration+0x74>
    82a6:	70 93 4c 13 	sts	0x134C, r23	; 0x80134c <calibration+0x85>
    82aa:	60 93 4b 13 	sts	0x134B, r22	; 0x80134b <calibration+0x84>
    82ae:	0f 2e       	mov	r0, r31
    82b0:	f7 e1       	ldi	r31, 0x17	; 23
    82b2:	ef 2e       	mov	r14, r31
    82b4:	f1 2c       	mov	r15, r1
    82b6:	f0 2d       	mov	r31, r0
    82b8:	f7 82       	std	Z+7, r15	; 0x07
    82ba:	e6 82       	std	Z+6, r14	; 0x06
    82bc:	0f 2e       	mov	r0, r31
    82be:	fe e2       	ldi	r31, 0x2E	; 46
    82c0:	af 2e       	mov	r10, r31
    82c2:	b1 2c       	mov	r11, r1
    82c4:	f0 2d       	mov	r31, r0
    82c6:	b7 8a       	std	Z+23, r11	; 0x17
    82c8:	a6 8a       	std	Z+22, r10	; 0x16
    82ca:	68 94       	set
    82cc:	ee 24       	eor	r14, r14
    82ce:	e6 f8       	bld	r14, 6
    82d0:	f1 2c       	mov	r15, r1
    82d2:	f7 a2       	std	Z+39, r15	; 0x27
    82d4:	e6 a2       	std	Z+38, r14	; 0x26
    82d6:	0f 2e       	mov	r0, r31
    82d8:	f1 e5       	ldi	r31, 0x51	; 81
    82da:	ef 2e       	mov	r14, r31
    82dc:	f1 2c       	mov	r15, r1
    82de:	f0 2d       	mov	r31, r0
    82e0:	f7 aa       	std	Z+55, r15	; 0x37
    82e2:	e6 aa       	std	Z+54, r14	; 0x36
    82e4:	0f 2e       	mov	r0, r31
    82e6:	f1 e6       	ldi	r31, 0x61	; 97
    82e8:	cf 2e       	mov	r12, r31
    82ea:	d1 2c       	mov	r13, r1
    82ec:	f0 2d       	mov	r31, r0
    82ee:	d0 92 0e 13 	sts	0x130E, r13	; 0x80130e <calibration+0x47>
    82f2:	c0 92 0d 13 	sts	0x130D, r12	; 0x80130d <calibration+0x46>
    82f6:	0f 2e       	mov	r0, r31
    82f8:	f0 e7       	ldi	r31, 0x70	; 112
    82fa:	cf 2e       	mov	r12, r31
    82fc:	d1 2c       	mov	r13, r1
    82fe:	f0 2d       	mov	r31, r0
    8300:	d0 92 1e 13 	sts	0x131E, r13	; 0x80131e <calibration+0x57>
    8304:	c0 92 1d 13 	sts	0x131D, r12	; 0x80131d <calibration+0x56>
    8308:	50 93 2e 13 	sts	0x132E, r21	; 0x80132e <calibration+0x67>
    830c:	40 93 2d 13 	sts	0x132D, r20	; 0x80132d <calibration+0x66>
    8310:	90 93 3e 13 	sts	0x133E, r25	; 0x80133e <calibration+0x77>
    8314:	80 93 3d 13 	sts	0x133D, r24	; 0x80133d <calibration+0x76>
    8318:	0f 2e       	mov	r0, r31
    831a:	f8 e9       	ldi	r31, 0x98	; 152
    831c:	cf 2e       	mov	r12, r31
    831e:	d1 2c       	mov	r13, r1
    8320:	f0 2d       	mov	r31, r0
    8322:	d0 92 4e 13 	sts	0x134E, r13	; 0x80134e <calibration+0x87>
    8326:	c0 92 4d 13 	sts	0x134D, r12	; 0x80134d <calibration+0x86>
    832a:	11 87       	std	Z+9, r17	; 0x09
    832c:	00 87       	std	Z+8, r16	; 0x08
    832e:	d1 8f       	std	Z+25, r29	; 0x19
    8330:	c0 8f       	std	Z+24, r28	; 0x18
    8332:	91 a6       	std	Z+41, r9	; 0x29
    8334:	80 a6       	std	Z+40, r8	; 0x28
    8336:	71 ae       	std	Z+57, r7	; 0x39
    8338:	60 ae       	std	Z+56, r6	; 0x38
    833a:	50 92 10 13 	sts	0x1310, r5	; 0x801310 <calibration+0x49>
    833e:	40 92 0f 13 	sts	0x130F, r4	; 0x80130f <calibration+0x48>
    8342:	30 92 20 13 	sts	0x1320, r3	; 0x801320 <calibration+0x59>
    8346:	20 92 1f 13 	sts	0x131F, r2	; 0x80131f <calibration+0x58>
    834a:	0f 2e       	mov	r0, r31
    834c:	fc e8       	ldi	r31, 0x8C	; 140
    834e:	cf 2e       	mov	r12, r31
    8350:	d1 2c       	mov	r13, r1
    8352:	f0 2d       	mov	r31, r0
    8354:	d0 92 30 13 	sts	0x1330, r13	; 0x801330 <calibration+0x69>
    8358:	c0 92 2f 13 	sts	0x132F, r12	; 0x80132f <calibration+0x68>
    835c:	30 93 40 13 	sts	0x1340, r19	; 0x801340 <calibration+0x79>
    8360:	20 93 3f 13 	sts	0x133F, r18	; 0x80133f <calibration+0x78>
    8364:	0f 2e       	mov	r0, r31
    8366:	f3 eb       	ldi	r31, 0xB3	; 179
    8368:	cf 2e       	mov	r12, r31
    836a:	d1 2c       	mov	r13, r1
    836c:	f0 2d       	mov	r31, r0
    836e:	d0 92 50 13 	sts	0x1350, r13	; 0x801350 <calibration+0x89>
    8372:	c0 92 4f 13 	sts	0x134F, r12	; 0x80134f <calibration+0x88>
    8376:	0f 2e       	mov	r0, r31
    8378:	f2 e1       	ldi	r31, 0x12	; 18
    837a:	cf 2e       	mov	r12, r31
    837c:	d1 2c       	mov	r13, r1
    837e:	f0 2d       	mov	r31, r0
    8380:	d3 86       	std	Z+11, r13	; 0x0b
    8382:	c2 86       	std	Z+10, r12	; 0x0a
    8384:	0f 2e       	mov	r0, r31
    8386:	fd e2       	ldi	r31, 0x2D	; 45
    8388:	cf 2e       	mov	r12, r31
    838a:	d1 2c       	mov	r13, r1
    838c:	f0 2d       	mov	r31, r0
    838e:	d3 8e       	std	Z+27, r13	; 0x1b
    8390:	c2 8e       	std	Z+26, r12	; 0x1a
    8392:	0f 2e       	mov	r0, r31
    8394:	f4 e4       	ldi	r31, 0x44	; 68
    8396:	cf 2e       	mov	r12, r31
    8398:	d1 2c       	mov	r13, r1
    839a:	f0 2d       	mov	r31, r0
    839c:	d3 a6       	std	Z+43, r13	; 0x2b
    839e:	c2 a6       	std	Z+42, r12	; 0x2a
    83a0:	0f 2e       	mov	r0, r31
    83a2:	f7 e5       	ldi	r31, 0x57	; 87
    83a4:	cf 2e       	mov	r12, r31
    83a6:	d1 2c       	mov	r13, r1
    83a8:	f0 2d       	mov	r31, r0
    83aa:	d3 ae       	std	Z+59, r13	; 0x3b
    83ac:	c2 ae       	std	Z+58, r12	; 0x3a
    83ae:	0f 2e       	mov	r0, r31
    83b0:	f9 e6       	ldi	r31, 0x69	; 105
    83b2:	cf 2e       	mov	r12, r31
    83b4:	d1 2c       	mov	r13, r1
    83b6:	f0 2d       	mov	r31, r0
    83b8:	d0 92 12 13 	sts	0x1312, r13	; 0x801312 <calibration+0x4b>
    83bc:	c0 92 11 13 	sts	0x1311, r12	; 0x801311 <calibration+0x4a>
    83c0:	b0 93 22 13 	sts	0x1322, r27	; 0x801322 <calibration+0x5b>
    83c4:	a0 93 21 13 	sts	0x1321, r26	; 0x801321 <calibration+0x5a>
    83c8:	0f 2e       	mov	r0, r31
    83ca:	f9 e8       	ldi	r31, 0x89	; 137
    83cc:	cf 2e       	mov	r12, r31
    83ce:	d1 2c       	mov	r13, r1
    83d0:	f0 2d       	mov	r31, r0
    83d2:	d0 92 32 13 	sts	0x1332, r13	; 0x801332 <calibration+0x6b>
    83d6:	c0 92 31 13 	sts	0x1331, r12	; 0x801331 <calibration+0x6a>
    83da:	0f 2e       	mov	r0, r31
    83dc:	f7 e9       	ldi	r31, 0x97	; 151
    83de:	cf 2e       	mov	r12, r31
    83e0:	d1 2c       	mov	r13, r1
    83e2:	f0 2d       	mov	r31, r0
    83e4:	d0 92 42 13 	sts	0x1342, r13	; 0x801342 <calibration+0x7b>
    83e8:	c0 92 41 13 	sts	0x1341, r12	; 0x801341 <calibration+0x7a>
    83ec:	0f 2e       	mov	r0, r31
    83ee:	f8 ea       	ldi	r31, 0xA8	; 168
    83f0:	cf 2e       	mov	r12, r31
    83f2:	d1 2c       	mov	r13, r1
    83f4:	f0 2d       	mov	r31, r0
    83f6:	d0 92 52 13 	sts	0x1352, r13	; 0x801352 <calibration+0x8b>
    83fa:	c0 92 51 13 	sts	0x1351, r12	; 0x801351 <calibration+0x8a>
    83fe:	15 87       	std	Z+13, r17	; 0x0d
    8400:	04 87       	std	Z+12, r16	; 0x0c
    8402:	d5 8f       	std	Z+29, r29	; 0x1d
    8404:	c4 8f       	std	Z+28, r28	; 0x1c
    8406:	cb e3       	ldi	r28, 0x3B	; 59
    8408:	d0 e0       	ldi	r29, 0x00	; 0
    840a:	d5 a7       	std	Z+45, r29	; 0x2d
    840c:	c4 a7       	std	Z+44, r28	; 0x2c
    840e:	c0 e5       	ldi	r28, 0x50	; 80
    8410:	cc 2e       	mov	r12, r28
    8412:	d1 2c       	mov	r13, r1
    8414:	d5 ae       	std	Z+61, r13	; 0x3d
    8416:	c4 ae       	std	Z+60, r12	; 0x3c
    8418:	c4 e6       	ldi	r28, 0x64	; 100
    841a:	d0 e0       	ldi	r29, 0x00	; 0
    841c:	d0 93 14 13 	sts	0x1314, r29	; 0x801314 <calibration+0x4d>
    8420:	c0 93 13 13 	sts	0x1313, r28	; 0x801313 <calibration+0x4c>
    8424:	b0 93 24 13 	sts	0x1324, r27	; 0x801324 <calibration+0x5d>
    8428:	a0 93 23 13 	sts	0x1323, r26	; 0x801323 <calibration+0x5c>
    842c:	90 93 34 13 	sts	0x1334, r25	; 0x801334 <calibration+0x6d>
    8430:	80 93 33 13 	sts	0x1333, r24	; 0x801333 <calibration+0x6c>
    8434:	30 93 44 13 	sts	0x1344, r19	; 0x801344 <calibration+0x7d>
    8438:	20 93 43 13 	sts	0x1343, r18	; 0x801343 <calibration+0x7c>
    843c:	70 93 54 13 	sts	0x1354, r23	; 0x801354 <calibration+0x8d>
    8440:	60 93 53 13 	sts	0x1353, r22	; 0x801353 <calibration+0x8c>
    8444:	26 e1       	ldi	r18, 0x16	; 22
    8446:	30 e0       	ldi	r19, 0x00	; 0
    8448:	37 87       	std	Z+15, r19	; 0x0f
    844a:	26 87       	std	Z+14, r18	; 0x0e
    844c:	b7 8e       	std	Z+31, r11	; 0x1f
    844e:	a6 8e       	std	Z+30, r10	; 0x1e
    8450:	21 e4       	ldi	r18, 0x41	; 65
    8452:	30 e0       	ldi	r19, 0x00	; 0
    8454:	37 a7       	std	Z+47, r19	; 0x2f
    8456:	26 a7       	std	Z+46, r18	; 0x2e
    8458:	f7 ae       	std	Z+63, r15	; 0x3f
    845a:	e6 ae       	std	Z+62, r14	; 0x3e
    845c:	20 e6       	ldi	r18, 0x60	; 96
    845e:	30 e0       	ldi	r19, 0x00	; 0
    8460:	30 93 16 13 	sts	0x1316, r19	; 0x801316 <calibration+0x4f>
    8464:	20 93 15 13 	sts	0x1315, r18	; 0x801315 <calibration+0x4e>
    8468:	2f e6       	ldi	r18, 0x6F	; 111
    846a:	30 e0       	ldi	r19, 0x00	; 0
    846c:	30 93 26 13 	sts	0x1326, r19	; 0x801326 <calibration+0x5f>
    8470:	20 93 25 13 	sts	0x1325, r18	; 0x801325 <calibration+0x5e>
    8474:	50 93 36 13 	sts	0x1336, r21	; 0x801336 <calibration+0x6f>
    8478:	40 93 35 13 	sts	0x1335, r20	; 0x801335 <calibration+0x6e>
    847c:	90 93 46 13 	sts	0x1346, r25	; 0x801346 <calibration+0x7f>
    8480:	80 93 45 13 	sts	0x1345, r24	; 0x801345 <calibration+0x7e>
    8484:	89 e9       	ldi	r24, 0x99	; 153
    8486:	90 e0       	ldi	r25, 0x00	; 0
    8488:	90 93 56 13 	sts	0x1356, r25	; 0x801356 <calibration+0x8f>
    848c:	80 93 55 13 	sts	0x1355, r24	; 0x801355 <calibration+0x8e>
    8490:	df 91       	pop	r29
    8492:	cf 91       	pop	r28
    8494:	1f 91       	pop	r17
    8496:	0f 91       	pop	r16
    8498:	ff 90       	pop	r15
    849a:	ef 90       	pop	r14
    849c:	df 90       	pop	r13
    849e:	cf 90       	pop	r12
    84a0:	bf 90       	pop	r11
    84a2:	af 90       	pop	r10
    84a4:	9f 90       	pop	r9
    84a6:	8f 90       	pop	r8
    84a8:	7f 90       	pop	r7
    84aa:	6f 90       	pop	r6
    84ac:	5f 90       	pop	r5
    84ae:	4f 90       	pop	r4
    84b0:	3f 90       	pop	r3
    84b2:	2f 90       	pop	r2
    84b4:	0c 94 bc 4c 	jmp	0x9978	; 0x9978 <writeCalibrationToFlash>

000084b8 <initCalibration>:
    84b8:	8a e6       	ldi	r24, 0x6A	; 106
    84ba:	9f e0       	ldi	r25, 0x0F	; 15
    84bc:	0e 94 3d 52 	call	0xa47a	; 0xa47a <eeprom_read_word>
    84c0:	85 35       	cpi	r24, 0x55	; 85
    84c2:	9a 4a       	sbci	r25, 0xAA	; 170
    84c4:	11 f0       	breq	.+4      	; 0x84ca <initCalibration+0x12>
    84c6:	0c 94 b6 40 	jmp	0x816c	; 0x816c <writeDefaultCalibration>
    84ca:	0c 94 ca 4c 	jmp	0x9994	; 0x9994 <readCalibrationFromFlash>

000084ce <__vector_45>:


// Motor left
ISR(TIMER4_OVF_vect) {
    84ce:	1f 92       	push	r1
    84d0:	0f 92       	push	r0
    84d2:	0f b6       	in	r0, 0x3f	; 63
    84d4:	0f 92       	push	r0
    84d6:	11 24       	eor	r1, r1
    84d8:	8f 93       	push	r24
    84da:	9f 93       	push	r25

//	LED_GREEN_ON;

	if(cliffDetectedFlag) {
    84dc:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <cliffDetectedFlag>
    84e0:	88 23       	and	r24, r24
    84e2:	61 f0       	breq	.+24     	; 0x84fc <__vector_45+0x2e>
		pwm_left = 0;
    84e4:	10 92 1c 03 	sts	0x031C, r1	; 0x80031c <pwm_left+0x1>
    84e8:	10 92 1b 03 	sts	0x031B, r1	; 0x80031b <pwm_left>
		OCR4A = 0;
    84ec:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <__TEXT_REGION_LENGTH__+0x7c00a9>
    84f0:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <__TEXT_REGION_LENGTH__+0x7c00a8>
		OCR4B = 0;
    84f4:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <__TEXT_REGION_LENGTH__+0x7c00ab>
    84f8:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <__TEXT_REGION_LENGTH__+0x7c00aa>
	}

	left_current_avg = 0;
    84fc:	10 92 2e 03 	sts	0x032E, r1	; 0x80032e <left_current_avg+0x1>
    8500:	10 92 2d 03 	sts	0x032D, r1	; 0x80032d <left_current_avg>

	// set pins mode based on controller output
	if(pwm_left == 0) {
    8504:	80 91 1b 03 	lds	r24, 0x031B	; 0x80031b <pwm_left>
    8508:	90 91 1c 03 	lds	r25, 0x031C	; 0x80031c <pwm_left+0x1>
    850c:	00 97       	sbiw	r24, 0x00	; 0
    850e:	41 f5       	brne	.+80     	; 0x8560 <__vector_45+0x92>


		//leftMotorPhase = NO_PHASE;
		//compute_left_vel = 1;

		if(pwm_left_desired_to_control >= 0) {
    8510:	80 91 27 03 	lds	r24, 0x0327	; 0x800327 <pwm_left_desired_to_control>
    8514:	90 91 28 03 	lds	r25, 0x0328	; 0x800328 <pwm_left_desired_to_control+0x1>
    8518:	97 fd       	sbrc	r25, 7
    851a:	67 c0       	rjmp	.+206    	; 0x85ea <__vector_45+0x11c>
			leftMotorPhase = PASSIVE_PHASE;
    851c:	81 e0       	ldi	r24, 0x01	; 1
    851e:	80 93 df 03 	sts	0x03DF, r24	; 0x8003df <leftMotorPhase>
			currentMotLeftChannel = 14;
    8522:	8e e0       	ldi	r24, 0x0E	; 14
    8524:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <currentMotLeftChannel>
		} else {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 15;
		}
		firstSampleLeft = 1;
    8528:	81 e0       	ldi	r24, 0x01	; 1
    852a:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <firstSampleLeft>

		// select channel 15 to sample left current
		//currentMotLeftChannel = 15;
		TCCR4A  &= ~(1 << COM4A1) & ~(1 << COM4B1);	// disable OCA and OCB
    852e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    8532:	8f 75       	andi	r24, 0x5F	; 95
    8534:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
    8538:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x7c0102>
    853c:	87 7e       	andi	r24, 0xE7	; 231
    853e:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7c0102>
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
    8542:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__TEXT_REGION_LENGTH__+0x7c0072>
    8546:	89 7f       	andi	r24, 0xF9	; 249
    8548:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7c0072>
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
    854c:	89 b3       	in	r24, 0x19	; 25
    854e:	86 60       	ori	r24, 0x06	; 6
    8550:	89 bb       	out	0x19, r24	; 25
	}
*/

//	LED_GREEN_OFF;

}
    8552:	9f 91       	pop	r25
    8554:	8f 91       	pop	r24
    8556:	0f 90       	pop	r0
    8558:	0f be       	out	0x3f, r0	; 63
    855a:	0f 90       	pop	r0
    855c:	1f 90       	pop	r1
    855e:	18 95       	reti
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
	} else if(pwm_left > 0) {   		// move forward
		leftMotorPhase = ACTIVE_PHASE;
    8560:	10 92 df 03 	sts	0x03DF, r1	; 0x8003df <leftMotorPhase>
		PORTH &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK4 &= ~(1 << OCIE4B) & ~(1 << OCIE4A);	// disable OCA and OCB interrupt
		//TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR4 |= (1 << OCF4A) | (1 << OCF4B);
	} else if(pwm_left > 0) {   		// move forward
    8564:	18 16       	cp	r1, r24
    8566:	19 06       	cpc	r1, r25
    8568:	1c f5       	brge	.+70     	; 0x85b0 <__vector_45+0xe2>
		leftMotorPhase = ACTIVE_PHASE;
		// select channel 15 to sample left current
		currentMotLeftChannel = 15;
    856a:	8f e0       	ldi	r24, 0x0F	; 15
    856c:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <currentMotLeftChannel>
		TCCR4A  &= ~(1 << COM4B1);		// disable OCB
    8570:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    8574:	8f 7d       	andi	r24, 0xDF	; 223
    8576:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
		TIMSK4 &= ~(1 << OCIE4B);		// disable OCB interrupt
    857a:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__TEXT_REGION_LENGTH__+0x7c0072>
    857e:	8b 7f       	andi	r24, 0xFB	; 251
    8580:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7c0072>
		PORTH &= ~(1 << 4);				// output to 0
    8584:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x7c0102>
    8588:	8f 7e       	andi	r24, 0xEF	; 239
    858a:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7c0102>
		TCCR4A |= (1 << COM4A1);		// enable OCA
    858e:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    8592:	80 68       	ori	r24, 0x80	; 128
    8594:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
    8598:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__TEXT_REGION_LENGTH__+0x7c0072>
    859c:	82 60       	ori	r24, 0x02	; 2
    859e:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7c0072>
	}
*/

//	LED_GREEN_OFF;

}
    85a2:	9f 91       	pop	r25
    85a4:	8f 91       	pop	r24
    85a6:	0f 90       	pop	r0
    85a8:	0f be       	out	0x3f, r0	; 63
    85aa:	0f 90       	pop	r0
    85ac:	1f 90       	pop	r1
    85ae:	18 95       	reti
		TCCR4A |= (1 << COM4A1);		// enable OCA
		TIMSK4 |= (1 << OCIE4A);		// enable OCA interrupt
	} else if(pwm_left < 0) {      		// move backward
		leftMotorPhase = ACTIVE_PHASE;
		// select channel 14 to sample left current
		currentMotLeftChannel = 14;
    85b0:	8e e0       	ldi	r24, 0x0E	; 14
    85b2:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <currentMotLeftChannel>
		TCCR4A  &= ~(1 << COM4A1);		// disable OCA
    85b6:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    85ba:	8f 77       	andi	r24, 0x7F	; 127
    85bc:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
		TIMSK4 &= ~(1 << OCIE4A);		// disable OCA interrupt
    85c0:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__TEXT_REGION_LENGTH__+0x7c0072>
    85c4:	8d 7f       	andi	r24, 0xFD	; 253
    85c6:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7c0072>
		PORTH &= ~(1 << 3);				// output to 0
    85ca:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__TEXT_REGION_LENGTH__+0x7c0102>
    85ce:	87 7f       	andi	r24, 0xF7	; 247
    85d0:	80 93 02 01 	sts	0x0102, r24	; 0x800102 <__TEXT_REGION_LENGTH__+0x7c0102>
		TCCR4A |= (1 << COM4B1);		// enable OCB
    85d4:	80 91 a0 00 	lds	r24, 0x00A0	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
    85d8:	80 62       	ori	r24, 0x20	; 32
    85da:	80 93 a0 00 	sts	0x00A0, r24	; 0x8000a0 <__TEXT_REGION_LENGTH__+0x7c00a0>
		TIMSK4 |= (1 << OCIE4B);		// enable OCB interrupt
    85de:	80 91 72 00 	lds	r24, 0x0072	; 0x800072 <__TEXT_REGION_LENGTH__+0x7c0072>
    85e2:	84 60       	ori	r24, 0x04	; 4
    85e4:	80 93 72 00 	sts	0x0072, r24	; 0x800072 <__TEXT_REGION_LENGTH__+0x7c0072>
	}
*/

//	LED_GREEN_OFF;

}
    85e8:	b4 cf       	rjmp	.-152    	; 0x8552 <__vector_45+0x84>

		if(pwm_left_desired_to_control >= 0) {
			leftMotorPhase = PASSIVE_PHASE;
			currentMotLeftChannel = 14;
		} else {
			leftMotorPhase = PASSIVE_PHASE;
    85ea:	81 e0       	ldi	r24, 0x01	; 1
    85ec:	80 93 df 03 	sts	0x03DF, r24	; 0x8003df <leftMotorPhase>
			currentMotLeftChannel = 15;
    85f0:	8f e0       	ldi	r24, 0x0F	; 15
    85f2:	80 93 e2 03 	sts	0x03E2, r24	; 0x8003e2 <currentMotLeftChannel>
    85f6:	98 cf       	rjmp	.-208    	; 0x8528 <__vector_45+0x5a>

000085f8 <__vector_42>:
//	LED_GREEN_OFF;

}

// motor left forward
ISR(TIMER4_COMPA_vect) {
    85f8:	1f 92       	push	r1
    85fa:	0f 92       	push	r0
    85fc:	0f b6       	in	r0, 0x3f	; 63
    85fe:	0f 92       	push	r0
    8600:	11 24       	eor	r1, r1
    8602:	8f 93       	push	r24
    8604:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    8606:	81 e0       	ldi	r24, 0x01	; 1
    8608:	80 93 df 03 	sts	0x03DF, r24	; 0x8003df <leftMotorPhase>
	// select channel 14 to sample the left velocity
	currentMotLeftChannel = 14;
    860c:	9e e0       	ldi	r25, 0x0E	; 14
    860e:	90 93 e2 03 	sts	0x03E2, r25	; 0x8003e2 <currentMotLeftChannel>

	firstSampleLeft = 1;
    8612:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <firstSampleLeft>

//	LED_GREEN_OFF;

}
    8616:	9f 91       	pop	r25
    8618:	8f 91       	pop	r24
    861a:	0f 90       	pop	r0
    861c:	0f be       	out	0x3f, r0	; 63
    861e:	0f 90       	pop	r0
    8620:	1f 90       	pop	r1
    8622:	18 95       	reti

00008624 <__vector_43>:

// motor left backward
ISR(TIMER4_COMPB_vect) {
    8624:	1f 92       	push	r1
    8626:	0f 92       	push	r0
    8628:	0f b6       	in	r0, 0x3f	; 63
    862a:	0f 92       	push	r0
    862c:	11 24       	eor	r1, r1
    862e:	8f 93       	push	r24
    8630:	9f 93       	push	r25

//	if(pwm_left == 0) {
//		return;
//	}

	leftMotorPhase = PASSIVE_PHASE;
    8632:	81 e0       	ldi	r24, 0x01	; 1
    8634:	80 93 df 03 	sts	0x03DF, r24	; 0x8003df <leftMotorPhase>
	// select channel 15 to sample the left velocity
	currentMotLeftChannel = 15;
    8638:	9f e0       	ldi	r25, 0x0F	; 15
    863a:	90 93 e2 03 	sts	0x03E2, r25	; 0x8003e2 <currentMotLeftChannel>

	firstSampleLeft = 1;
    863e:	80 93 11 02 	sts	0x0211, r24	; 0x800211 <firstSampleLeft>

//	LED_GREEN_OFF;

}
    8642:	9f 91       	pop	r25
    8644:	8f 91       	pop	r24
    8646:	0f 90       	pop	r0
    8648:	0f be       	out	0x3f, r0	; 63
    864a:	0f 90       	pop	r0
    864c:	1f 90       	pop	r1
    864e:	18 95       	reti

00008650 <__vector_35>:

// Motor right
ISR(TIMER3_OVF_vect) {
    8650:	1f 92       	push	r1
    8652:	0f 92       	push	r0
    8654:	0f b6       	in	r0, 0x3f	; 63
    8656:	0f 92       	push	r0
    8658:	11 24       	eor	r1, r1
    865a:	8f 93       	push	r24
    865c:	9f 93       	push	r25

//	LED_GREEN_ON;

  	// PORTB ^= (1 << 7); // Toggle the LED

	if(cliffDetectedFlag) {
    865e:	80 91 b3 02 	lds	r24, 0x02B3	; 0x8002b3 <cliffDetectedFlag>
    8662:	88 23       	and	r24, r24
    8664:	61 f0       	breq	.+24     	; 0x867e <__vector_35+0x2e>
		pwm_right = 0;
    8666:	10 92 1e 03 	sts	0x031E, r1	; 0x80031e <pwm_right+0x1>
    866a:	10 92 1d 03 	sts	0x031D, r1	; 0x80031d <pwm_right>
		OCR3A = 0;
    866e:	10 92 99 00 	sts	0x0099, r1	; 0x800099 <__TEXT_REGION_LENGTH__+0x7c0099>
    8672:	10 92 98 00 	sts	0x0098, r1	; 0x800098 <__TEXT_REGION_LENGTH__+0x7c0098>
		OCR3B = 0;
    8676:	10 92 9b 00 	sts	0x009B, r1	; 0x80009b <__TEXT_REGION_LENGTH__+0x7c009b>
    867a:	10 92 9a 00 	sts	0x009A, r1	; 0x80009a <__TEXT_REGION_LENGTH__+0x7c009a>
	}

	right_current_avg = 0;
    867e:	10 92 2c 03 	sts	0x032C, r1	; 0x80032c <right_current_avg+0x1>
    8682:	10 92 2b 03 	sts	0x032B, r1	; 0x80032b <right_current_avg>


	if(pwm_right == 0) {
    8686:	80 91 1d 03 	lds	r24, 0x031D	; 0x80031d <pwm_right>
    868a:	90 91 1e 03 	lds	r25, 0x031E	; 0x80031e <pwm_right+0x1>
    868e:	00 97       	sbiw	r24, 0x00	; 0
    8690:	31 f5       	brne	.+76     	; 0x86de <__vector_35+0x8e>
		//firstSampleRight = 0;

		//rightMotorPhase = NO_PHASE;
		//compute_right_vel = 1;

		if(pwm_right_desired_to_control >= 0) {
    8692:	80 91 29 03 	lds	r24, 0x0329	; 0x800329 <pwm_right_desired_to_control>
    8696:	90 91 2a 03 	lds	r25, 0x032A	; 0x80032a <pwm_right_desired_to_control+0x1>
    869a:	97 fd       	sbrc	r25, 7
    869c:	5d c0       	rjmp	.+186    	; 0x8758 <__vector_35+0x108>
			rightMotorPhase = PASSIVE_PHASE;
    869e:	81 e0       	ldi	r24, 0x01	; 1
    86a0:	80 93 e0 03 	sts	0x03E0, r24	; 0x8003e0 <rightMotorPhase>
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
    86a4:	8c e0       	ldi	r24, 0x0C	; 12
    86a6:	80 93 e1 03 	sts	0x03E1, r24	; 0x8003e1 <currentMotRightChannel>
		} else {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
		}
		firstSampleRight = 1;
    86aa:	81 e0       	ldi	r24, 0x01	; 1
    86ac:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <firstSampleRight>

		// select channel 13 to sample left current
		//currentMotRightChannel = 13;
		TCCR3A  &= ~(1 << COM3A1) & ~(1 << COM3B1);	// disable OCA and OCB
    86b0:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    86b4:	8f 75       	andi	r24, 0x5F	; 95
    86b6:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
    86ba:	8e b1       	in	r24, 0x0e	; 14
    86bc:	87 7e       	andi	r24, 0xE7	; 231
    86be:	8e b9       	out	0x0e, r24	; 14
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
    86c0:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7c0071>
    86c4:	89 7f       	andi	r24, 0xF9	; 249
    86c6:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7c0071>
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
    86ca:	88 b3       	in	r24, 0x18	; 24
    86cc:	86 60       	ori	r24, 0x06	; 6
    86ce:	88 bb       	out	0x18, r24	; 24
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    86d0:	9f 91       	pop	r25
    86d2:	8f 91       	pop	r24
    86d4:	0f 90       	pop	r0
    86d6:	0f be       	out	0x3f, r0	; 63
    86d8:	0f 90       	pop	r0
    86da:	1f 90       	pop	r1
    86dc:	18 95       	reti
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
	}else if(pwm_right > 0) {   		// move forward
		rightMotorPhase = ACTIVE_PHASE;
    86de:	10 92 e0 03 	sts	0x03E0, r1	; 0x8003e0 <rightMotorPhase>
		PORTE &= ~(1 << 4) & ~(1 << 3);				// output to 0
		TIMSK3 &= ~(1 << OCIE3B) & ~(1 << OCIE3A);	// disable OCA and OCB interrupt
		//TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt => sampling of velocity is enabled even if
										// the pwm is turned off...is it correct??
		TIFR3 |= (1 << OCF3A) | (1 << OCF3B);
	}else if(pwm_right > 0) {   		// move forward
    86e2:	18 16       	cp	r1, r24
    86e4:	19 06       	cpc	r1, r25
    86e6:	fc f4       	brge	.+62     	; 0x8726 <__vector_35+0xd6>
		rightMotorPhase = ACTIVE_PHASE;
		// select channel 13 to sample left current
		currentMotRightChannel = 13;
    86e8:	8d e0       	ldi	r24, 0x0D	; 13
    86ea:	80 93 e1 03 	sts	0x03E1, r24	; 0x8003e1 <currentMotRightChannel>
		TCCR3A  &= ~(1 << COM3B1);		// disable OCB
    86ee:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    86f2:	8f 7d       	andi	r24, 0xDF	; 223
    86f4:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
		TIMSK3 &= ~(1 << OCIE3B);		// disable OCB interrupt
    86f8:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7c0071>
    86fc:	8b 7f       	andi	r24, 0xFB	; 251
    86fe:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7c0071>
		PORTE &= ~(1 << 4);				// output to 0
    8702:	74 98       	cbi	0x0e, 4	; 14
		TCCR3A |= (1 << COM3A1);		// enable OCA
    8704:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    8708:	80 68       	ori	r24, 0x80	; 128
    870a:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
    870e:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7c0071>
    8712:	82 60       	ori	r24, 0x02	; 2
    8714:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7c0071>
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    8718:	9f 91       	pop	r25
    871a:	8f 91       	pop	r24
    871c:	0f 90       	pop	r0
    871e:	0f be       	out	0x3f, r0	; 63
    8720:	0f 90       	pop	r0
    8722:	1f 90       	pop	r1
    8724:	18 95       	reti
		TCCR3A |= (1 << COM3A1);		// enable OCA
		TIMSK3 |= (1 << OCIE3A);		// enable OCA interrupt
	} else if(pwm_right < 0) {      	// move backward
		rightMotorPhase = ACTIVE_PHASE;
		// select channel 12 to sample left current
		currentMotRightChannel = 12;
    8726:	8c e0       	ldi	r24, 0x0C	; 12
    8728:	80 93 e1 03 	sts	0x03E1, r24	; 0x8003e1 <currentMotRightChannel>
		TCCR3A  &= ~(1 << COM3A1);		// disable OCA
    872c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    8730:	8f 77       	andi	r24, 0x7F	; 127
    8732:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
		TIMSK3 &= ~(1 << OCIE3A);		// disable OCA interrupt
    8736:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7c0071>
    873a:	8d 7f       	andi	r24, 0xFD	; 253
    873c:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7c0071>
		PORTE &= ~(1 << 3);				// output to 0
    8740:	73 98       	cbi	0x0e, 3	; 14
		TCCR3A |= (1 << COM3B1);		// enable OCB
    8742:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
    8746:	80 62       	ori	r24, 0x20	; 32
    8748:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7c0090>
		TIMSK3 |= (1 << OCIE3B);		// enable OCB interrupt
    874c:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <__TEXT_REGION_LENGTH__+0x7c0071>
    8750:	84 60       	ori	r24, 0x04	; 4
    8752:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <__TEXT_REGION_LENGTH__+0x7c0071>
		currentMotRightChannel = 12;
	}
*/
//	LED_GREEN_OFF;

}
    8756:	bc cf       	rjmp	.-136    	; 0x86d0 <__vector_35+0x80>
		if(pwm_right_desired_to_control >= 0) {
			rightMotorPhase = PASSIVE_PHASE;
			// select channel 13 to sample left current
			currentMotRightChannel = 12;
		} else {
			rightMotorPhase = PASSIVE_PHASE;
    8758:	81 e0       	ldi	r24, 0x01	; 1
    875a:	80 93 e0 03 	sts	0x03E0, r24	; 0x8003e0 <rightMotorPhase>
			// select channel 12 to sample left current
			currentMotRightChannel = 13;
    875e:	8d e0       	ldi	r24, 0x0D	; 13
    8760:	80 93 e1 03 	sts	0x03E1, r24	; 0x8003e1 <currentMotRightChannel>
    8764:	a2 cf       	rjmp	.-188    	; 0x86aa <__vector_35+0x5a>

00008766 <__vector_32>:
//	LED_GREEN_OFF;

}

// motor right forward
ISR(TIMER3_COMPA_vect) {
    8766:	1f 92       	push	r1
    8768:	0f 92       	push	r0
    876a:	0f b6       	in	r0, 0x3f	; 63
    876c:	0f 92       	push	r0
    876e:	11 24       	eor	r1, r1
    8770:	8f 93       	push	r24
    8772:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    8774:	81 e0       	ldi	r24, 0x01	; 1
    8776:	80 93 e0 03 	sts	0x03E0, r24	; 0x8003e0 <rightMotorPhase>
	// select channel 12 to sample the right velocity
	currentMotRightChannel = 12;
    877a:	9c e0       	ldi	r25, 0x0C	; 12
    877c:	90 93 e1 03 	sts	0x03E1, r25	; 0x8003e1 <currentMotRightChannel>

	firstSampleRight = 1;
    8780:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <firstSampleRight>

//	LED_RED_OFF;

}
    8784:	9f 91       	pop	r25
    8786:	8f 91       	pop	r24
    8788:	0f 90       	pop	r0
    878a:	0f be       	out	0x3f, r0	; 63
    878c:	0f 90       	pop	r0
    878e:	1f 90       	pop	r1
    8790:	18 95       	reti

00008792 <__vector_33>:

// motor right backward
ISR(TIMER3_COMPB_vect) {
    8792:	1f 92       	push	r1
    8794:	0f 92       	push	r0
    8796:	0f b6       	in	r0, 0x3f	; 63
    8798:	0f 92       	push	r0
    879a:	11 24       	eor	r1, r1
    879c:	8f 93       	push	r24
    879e:	9f 93       	push	r25

//	if(pwm_right == 0) {
//		return;
//	}

	rightMotorPhase = PASSIVE_PHASE;
    87a0:	81 e0       	ldi	r24, 0x01	; 1
    87a2:	80 93 e0 03 	sts	0x03E0, r24	; 0x8003e0 <rightMotorPhase>
	// select channel 13 to sample the right velocity
	currentMotRightChannel = 13;
    87a6:	9d e0       	ldi	r25, 0x0D	; 13
    87a8:	90 93 e1 03 	sts	0x03E1, r25	; 0x8003e1 <currentMotRightChannel>

	firstSampleRight = 1;
    87ac:	80 93 12 02 	sts	0x0212, r24	; 0x800212 <firstSampleRight>

//	LED_RED_OFF;
}
    87b0:	9f 91       	pop	r25
    87b2:	8f 91       	pop	r24
    87b4:	0f 90       	pop	r0
    87b6:	0f be       	out	0x3f, r0	; 63
    87b8:	0f 90       	pop	r0
    87ba:	1f 90       	pop	r1
    87bc:	18 95       	reti

000087be <initBehaviors>:
char cliffDetected() {

	// tell whether a cliff is detected or not
	if(proximityResult[8]<CLIFF_THR || proximityResult[9]<CLIFF_THR || proximityResult[10]<CLIFF_THR || proximityResult[11]<CLIFF_THR) {
	//if(proximityResult[8]<(proximityOffset[8]>>1) || proximityResult[9]<(proximityOffset[9]>>1) || proximityResult[10]<(proximityOffset[10]>>1) || proximityResult[11]<(proximityOffset[11]>>1)) {
		return 1;
    87be:	80 91 94 00 	lds	r24, 0x0094	; 0x800094 <__TEXT_REGION_LENGTH__+0x7c0094>
    87c2:	90 91 95 00 	lds	r25, 0x0095	; 0x800095 <__TEXT_REGION_LENGTH__+0x7c0095>
    87c6:	0c 94 13 52 	jmp	0xa426	; 0xa426 <srand>

000087ca <obstacleAvoidance>:
    87ca:	2f 92       	push	r2
    87cc:	3f 92       	push	r3
    87ce:	4f 92       	push	r4
    87d0:	5f 92       	push	r5
    87d2:	6f 92       	push	r6
    87d4:	7f 92       	push	r7
    87d6:	8f 92       	push	r8
    87d8:	9f 92       	push	r9
    87da:	af 92       	push	r10
    87dc:	bf 92       	push	r11
    87de:	cf 92       	push	r12
    87e0:	df 92       	push	r13
    87e2:	ef 92       	push	r14
    87e4:	ff 92       	push	r15
    87e6:	0f 93       	push	r16
    87e8:	1f 93       	push	r17
    87ea:	cf 93       	push	r28
    87ec:	df 93       	push	r29
    87ee:	00 d0       	rcall	.+0      	; 0x87f0 <obstacleAvoidance+0x26>
    87f0:	1f 92       	push	r1
    87f2:	cd b7       	in	r28, 0x3d	; 61
    87f4:	de b7       	in	r29, 0x3e	; 62
    87f6:	9c 83       	std	Y+4, r25	; 0x04
    87f8:	8b 83       	std	Y+3, r24	; 0x03
    87fa:	7a 83       	std	Y+2, r23	; 0x02
    87fc:	69 83       	std	Y+1, r22	; 0x01
    87fe:	fc 01       	movw	r30, r24
    8800:	20 80       	ld	r2, Z
    8802:	31 80       	ldd	r3, Z+1	; 0x01
    8804:	fb 01       	movw	r30, r22
    8806:	00 81       	ld	r16, Z
    8808:	11 81       	ldd	r17, Z+1	; 0x01
    880a:	60 91 37 03 	lds	r22, 0x0337	; 0x800337 <proximityResultLinear>
    880e:	70 91 38 03 	lds	r23, 0x0338	; 0x800338 <proximityResultLinear+0x1>
    8812:	64 31       	cpi	r22, 0x14	; 20
    8814:	71 05       	cpc	r23, r1
    8816:	34 f4       	brge	.+12     	; 0x8824 <obstacleAvoidance+0x5a>
    8818:	10 92 38 03 	sts	0x0338, r1	; 0x800338 <proximityResultLinear+0x1>
    881c:	10 92 37 03 	sts	0x0337, r1	; 0x800337 <proximityResultLinear>
    8820:	60 e0       	ldi	r22, 0x00	; 0
    8822:	70 e0       	ldi	r23, 0x00	; 0
    8824:	e0 91 39 03 	lds	r30, 0x0339	; 0x800339 <proximityResultLinear+0x2>
    8828:	f0 91 3a 03 	lds	r31, 0x033A	; 0x80033a <proximityResultLinear+0x3>
    882c:	e4 31       	cpi	r30, 0x14	; 20
    882e:	f1 05       	cpc	r31, r1
    8830:	34 f4       	brge	.+12     	; 0x883e <obstacleAvoidance+0x74>
    8832:	10 92 3a 03 	sts	0x033A, r1	; 0x80033a <proximityResultLinear+0x3>
    8836:	10 92 39 03 	sts	0x0339, r1	; 0x800339 <proximityResultLinear+0x2>
    883a:	e0 e0       	ldi	r30, 0x00	; 0
    883c:	f0 e0       	ldi	r31, 0x00	; 0
    883e:	80 91 3b 03 	lds	r24, 0x033B	; 0x80033b <proximityResultLinear+0x4>
    8842:	90 91 3c 03 	lds	r25, 0x033C	; 0x80033c <proximityResultLinear+0x5>
    8846:	44 97       	sbiw	r24, 0x14	; 20
    8848:	24 f4       	brge	.+8      	; 0x8852 <obstacleAvoidance+0x88>
    884a:	10 92 3c 03 	sts	0x033C, r1	; 0x80033c <proximityResultLinear+0x5>
    884e:	10 92 3b 03 	sts	0x033B, r1	; 0x80033b <proximityResultLinear+0x4>
    8852:	20 91 3d 03 	lds	r18, 0x033D	; 0x80033d <proximityResultLinear+0x6>
    8856:	30 91 3e 03 	lds	r19, 0x033E	; 0x80033e <proximityResultLinear+0x7>
    885a:	24 31       	cpi	r18, 0x14	; 20
    885c:	31 05       	cpc	r19, r1
    885e:	34 f4       	brge	.+12     	; 0x886c <obstacleAvoidance+0xa2>
    8860:	10 92 3e 03 	sts	0x033E, r1	; 0x80033e <proximityResultLinear+0x7>
    8864:	10 92 3d 03 	sts	0x033D, r1	; 0x80033d <proximityResultLinear+0x6>
    8868:	20 e0       	ldi	r18, 0x00	; 0
    886a:	30 e0       	ldi	r19, 0x00	; 0
    886c:	e0 90 3f 03 	lds	r14, 0x033F	; 0x80033f <proximityResultLinear+0x8>
    8870:	f0 90 40 03 	lds	r15, 0x0340	; 0x800340 <proximityResultLinear+0x9>
    8874:	44 e1       	ldi	r20, 0x14	; 20
    8876:	e4 16       	cp	r14, r20
    8878:	f1 04       	cpc	r15, r1
    887a:	34 f4       	brge	.+12     	; 0x8888 <obstacleAvoidance+0xbe>
    887c:	10 92 40 03 	sts	0x0340, r1	; 0x800340 <proximityResultLinear+0x9>
    8880:	10 92 3f 03 	sts	0x033F, r1	; 0x80033f <proximityResultLinear+0x8>
    8884:	e1 2c       	mov	r14, r1
    8886:	f1 2c       	mov	r15, r1
    8888:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <proximityResultLinear+0xa>
    888c:	90 91 42 03 	lds	r25, 0x0342	; 0x800342 <proximityResultLinear+0xb>
    8890:	84 31       	cpi	r24, 0x14	; 20
    8892:	91 05       	cpc	r25, r1
    8894:	34 f4       	brge	.+12     	; 0x88a2 <obstacleAvoidance+0xd8>
    8896:	10 92 42 03 	sts	0x0342, r1	; 0x800342 <proximityResultLinear+0xb>
    889a:	10 92 41 03 	sts	0x0341, r1	; 0x800341 <proximityResultLinear+0xa>
    889e:	80 e0       	ldi	r24, 0x00	; 0
    88a0:	90 e0       	ldi	r25, 0x00	; 0
    88a2:	40 91 43 03 	lds	r20, 0x0343	; 0x800343 <proximityResultLinear+0xc>
    88a6:	50 91 44 03 	lds	r21, 0x0344	; 0x800344 <proximityResultLinear+0xd>
    88aa:	44 31       	cpi	r20, 0x14	; 20
    88ac:	51 05       	cpc	r21, r1
    88ae:	24 f4       	brge	.+8      	; 0x88b8 <obstacleAvoidance+0xee>
    88b0:	10 92 44 03 	sts	0x0344, r1	; 0x800344 <proximityResultLinear+0xd>
    88b4:	10 92 43 03 	sts	0x0343, r1	; 0x800343 <proximityResultLinear+0xc>
    88b8:	40 91 45 03 	lds	r20, 0x0345	; 0x800345 <proximityResultLinear+0xe>
    88bc:	50 91 46 03 	lds	r21, 0x0346	; 0x800346 <proximityResultLinear+0xf>
    88c0:	44 31       	cpi	r20, 0x14	; 20
    88c2:	51 05       	cpc	r21, r1
    88c4:	34 f4       	brge	.+12     	; 0x88d2 <obstacleAvoidance+0x108>
    88c6:	10 92 46 03 	sts	0x0346, r1	; 0x800346 <proximityResultLinear+0xf>
    88ca:	10 92 45 03 	sts	0x0345, r1	; 0x800345 <proximityResultLinear+0xe>
    88ce:	40 e0       	ldi	r20, 0x00	; 0
    88d0:	50 e0       	ldi	r21, 0x00	; 0
    88d2:	71 95       	neg	r23
    88d4:	61 95       	neg	r22
    88d6:	71 09       	sbc	r23, r1
    88d8:	f5 95       	asr	r31
    88da:	e7 95       	ror	r30
    88dc:	6e 1b       	sub	r22, r30
    88de:	7f 0b       	sbc	r23, r31
    88e0:	35 95       	asr	r19
    88e2:	27 95       	ror	r18
    88e4:	26 0f       	add	r18, r22
    88e6:	37 1f       	adc	r19, r23
    88e8:	e2 0e       	add	r14, r18
    88ea:	f3 1e       	adc	r15, r19
    88ec:	95 95       	asr	r25
    88ee:	87 95       	ror	r24
    88f0:	e8 0e       	add	r14, r24
    88f2:	f9 1e       	adc	r15, r25
    88f4:	55 95       	asr	r21
    88f6:	47 95       	ror	r20
    88f8:	e4 1a       	sub	r14, r20
    88fa:	f5 0a       	sbc	r15, r21
    88fc:	0e 94 0f 52 	call	0xa41e	; 0xa41e <rand>
    8900:	4c e3       	ldi	r20, 0x3C	; 60
    8902:	a4 2e       	mov	r10, r20
    8904:	b1 2c       	mov	r11, r1
    8906:	b5 01       	movw	r22, r10
    8908:	0e 94 30 51 	call	0xa260	; 0xa260 <__divmodhi4>
    890c:	2c 01       	movw	r4, r24
    890e:	ee e1       	ldi	r30, 0x1E	; 30
    8910:	4e 1a       	sub	r4, r30
    8912:	51 08       	sbc	r5, r1
    8914:	4e 0c       	add	r4, r14
    8916:	5f 1c       	adc	r5, r15
    8918:	e0 90 39 03 	lds	r14, 0x0339	; 0x800339 <proximityResultLinear+0x2>
    891c:	f0 90 3a 03 	lds	r15, 0x033A	; 0x80033a <proximityResultLinear+0x3>
    8920:	f5 94       	asr	r15
    8922:	e7 94       	ror	r14
    8924:	80 91 3b 03 	lds	r24, 0x033B	; 0x80033b <proximityResultLinear+0x4>
    8928:	90 91 3c 03 	lds	r25, 0x033C	; 0x80033c <proximityResultLinear+0x5>
    892c:	95 95       	asr	r25
    892e:	87 95       	ror	r24
    8930:	95 95       	asr	r25
    8932:	87 95       	ror	r24
    8934:	e8 0e       	add	r14, r24
    8936:	f9 1e       	adc	r15, r25
    8938:	80 91 3d 03 	lds	r24, 0x033D	; 0x80033d <proximityResultLinear+0x6>
    893c:	90 91 3e 03 	lds	r25, 0x033E	; 0x80033e <proximityResultLinear+0x7>
    8940:	95 95       	asr	r25
    8942:	87 95       	ror	r24
    8944:	e8 0e       	add	r14, r24
    8946:	f9 1e       	adc	r15, r25
    8948:	80 91 41 03 	lds	r24, 0x0341	; 0x800341 <proximityResultLinear+0xa>
    894c:	90 91 42 03 	lds	r25, 0x0342	; 0x800342 <proximityResultLinear+0xb>
    8950:	95 95       	asr	r25
    8952:	87 95       	ror	r24
    8954:	e8 1a       	sub	r14, r24
    8956:	f9 0a       	sbc	r15, r25
    8958:	80 91 43 03 	lds	r24, 0x0343	; 0x800343 <proximityResultLinear+0xc>
    895c:	90 91 44 03 	lds	r25, 0x0344	; 0x800344 <proximityResultLinear+0xd>
    8960:	95 95       	asr	r25
    8962:	87 95       	ror	r24
    8964:	95 95       	asr	r25
    8966:	87 95       	ror	r24
    8968:	e8 1a       	sub	r14, r24
    896a:	f9 0a       	sbc	r15, r25
    896c:	80 91 45 03 	lds	r24, 0x0345	; 0x800345 <proximityResultLinear+0xe>
    8970:	90 91 46 03 	lds	r25, 0x0346	; 0x800346 <proximityResultLinear+0xf>
    8974:	95 95       	asr	r25
    8976:	87 95       	ror	r24
    8978:	e8 1a       	sub	r14, r24
    897a:	f9 0a       	sbc	r15, r25
    897c:	0e 94 0f 52 	call	0xa41e	; 0xa41e <rand>
    8980:	b5 01       	movw	r22, r10
    8982:	0e 94 30 51 	call	0xa260	; 0xa260 <__divmodhi4>
    8986:	6c 01       	movw	r12, r24
    8988:	fe e1       	ldi	r31, 0x1E	; 30
    898a:	cf 1a       	sub	r12, r31
    898c:	d1 08       	sbc	r13, r1
    898e:	ce 0c       	add	r12, r14
    8990:	df 1c       	adc	r13, r15
    8992:	05 2c       	mov	r0, r5
    8994:	00 0c       	add	r0, r0
    8996:	66 08       	sbc	r6, r6
    8998:	77 08       	sbc	r7, r7
    899a:	0d 2c       	mov	r0, r13
    899c:	00 0c       	add	r0, r0
    899e:	ee 08       	sbc	r14, r14
    89a0:	ff 08       	sbc	r15, r15
    89a2:	a3 01       	movw	r20, r6
    89a4:	92 01       	movw	r18, r4
    89a6:	37 fc       	sbrc	r3, 7
    89a8:	dc c0       	rjmp	.+440    	; 0x8b62 <obstacleAvoidance+0x398>
    89aa:	2c 19       	sub	r18, r12
    89ac:	3d 09       	sbc	r19, r13
    89ae:	4e 09       	sbc	r20, r14
    89b0:	5f 09       	sbc	r21, r15
    89b2:	41 01       	movw	r8, r2
    89b4:	03 2c       	mov	r0, r3
    89b6:	00 0c       	add	r0, r0
    89b8:	aa 08       	sbc	r10, r10
    89ba:	bb 08       	sbc	r11, r11
    89bc:	c5 01       	movw	r24, r10
    89be:	b4 01       	movw	r22, r8
    89c0:	0e 94 20 51 	call	0xa240	; 0xa240 <__mulsi3>
    89c4:	dc 01       	movw	r26, r24
    89c6:	cb 01       	movw	r24, r22
    89c8:	56 e0       	ldi	r21, 0x06	; 6
    89ca:	b5 95       	asr	r27
    89cc:	a7 95       	ror	r26
    89ce:	97 95       	ror	r25
    89d0:	87 95       	ror	r24
    89d2:	5a 95       	dec	r21
    89d4:	d1 f7       	brne	.-12     	; 0x89ca <obstacleAvoidance+0x200>
    89d6:	88 0e       	add	r8, r24
    89d8:	99 1e       	adc	r9, r25
    89da:	aa 1e       	adc	r10, r26
    89dc:	bb 1e       	adc	r11, r27
    89de:	eb 81       	ldd	r30, Y+3	; 0x03
    89e0:	fc 81       	ldd	r31, Y+4	; 0x04
    89e2:	91 82       	std	Z+1, r9	; 0x01
    89e4:	80 82       	st	Z, r8
    89e6:	a3 01       	movw	r20, r6
    89e8:	92 01       	movw	r18, r4
    89ea:	17 fd       	sbrc	r17, 7
    89ec:	9a c0       	rjmp	.+308    	; 0x8b22 <obstacleAvoidance+0x358>
    89ee:	2c 0d       	add	r18, r12
    89f0:	3d 1d       	adc	r19, r13
    89f2:	4e 1d       	adc	r20, r14
    89f4:	5f 1d       	adc	r21, r15
    89f6:	68 01       	movw	r12, r16
    89f8:	01 2e       	mov	r0, r17
    89fa:	00 0c       	add	r0, r0
    89fc:	ee 08       	sbc	r14, r14
    89fe:	ff 08       	sbc	r15, r15
    8a00:	c7 01       	movw	r24, r14
    8a02:	b6 01       	movw	r22, r12
    8a04:	0e 94 20 51 	call	0xa240	; 0xa240 <__mulsi3>
    8a08:	dc 01       	movw	r26, r24
    8a0a:	cb 01       	movw	r24, r22
    8a0c:	36 e0       	ldi	r19, 0x06	; 6
    8a0e:	b5 95       	asr	r27
    8a10:	a7 95       	ror	r26
    8a12:	97 95       	ror	r25
    8a14:	87 95       	ror	r24
    8a16:	3a 95       	dec	r19
    8a18:	d1 f7       	brne	.-12     	; 0x8a0e <obstacleAvoidance+0x244>
    8a1a:	c8 0e       	add	r12, r24
    8a1c:	d9 1e       	adc	r13, r25
    8a1e:	ea 1e       	adc	r14, r26
    8a20:	fb 1e       	adc	r15, r27
    8a22:	96 01       	movw	r18, r12
    8a24:	e9 81       	ldd	r30, Y+1	; 0x01
    8a26:	fa 81       	ldd	r31, Y+2	; 0x02
    8a28:	d1 82       	std	Z+1, r13	; 0x01
    8a2a:	c0 82       	st	Z, r12
    8a2c:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <currentSelector>
    8a30:	8a 30       	cpi	r24, 0x0A	; 10
    8a32:	09 f4       	brne	.+2      	; 0x8a36 <obstacleAvoidance+0x26c>
    8a34:	56 c0       	rjmp	.+172    	; 0x8ae2 <obstacleAvoidance+0x318>
    8a36:	21 15       	cp	r18, r1
    8a38:	f2 e0       	ldi	r31, 0x02	; 2
    8a3a:	3f 07       	cpc	r19, r31
    8a3c:	74 f1       	brlt	.+92     	; 0x8a9a <obstacleAvoidance+0x2d0>
    8a3e:	8f ef       	ldi	r24, 0xFF	; 255
    8a40:	91 e0       	ldi	r25, 0x01	; 1
    8a42:	e9 81       	ldd	r30, Y+1	; 0x01
    8a44:	fa 81       	ldd	r31, Y+2	; 0x02
    8a46:	91 83       	std	Z+1, r25	; 0x01
    8a48:	80 83       	st	Z, r24
    8a4a:	eb 81       	ldd	r30, Y+3	; 0x03
    8a4c:	fc 81       	ldd	r31, Y+4	; 0x04
    8a4e:	80 81       	ld	r24, Z
    8a50:	91 81       	ldd	r25, Z+1	; 0x01
    8a52:	81 15       	cp	r24, r1
    8a54:	f2 e0       	ldi	r31, 0x02	; 2
    8a56:	9f 07       	cpc	r25, r31
    8a58:	44 f5       	brge	.+80     	; 0x8aaa <obstacleAvoidance+0x2e0>
    8a5a:	81 30       	cpi	r24, 0x01	; 1
    8a5c:	9e 4f       	sbci	r25, 0xFE	; 254
    8a5e:	34 f4       	brge	.+12     	; 0x8a6c <obstacleAvoidance+0x2a2>
    8a60:	81 e0       	ldi	r24, 0x01	; 1
    8a62:	9e ef       	ldi	r25, 0xFE	; 254
    8a64:	eb 81       	ldd	r30, Y+3	; 0x03
    8a66:	fc 81       	ldd	r31, Y+4	; 0x04
    8a68:	91 83       	std	Z+1, r25	; 0x01
    8a6a:	80 83       	st	Z, r24
    8a6c:	0f 90       	pop	r0
    8a6e:	0f 90       	pop	r0
    8a70:	0f 90       	pop	r0
    8a72:	0f 90       	pop	r0
    8a74:	df 91       	pop	r29
    8a76:	cf 91       	pop	r28
    8a78:	1f 91       	pop	r17
    8a7a:	0f 91       	pop	r16
    8a7c:	ff 90       	pop	r15
    8a7e:	ef 90       	pop	r14
    8a80:	df 90       	pop	r13
    8a82:	cf 90       	pop	r12
    8a84:	bf 90       	pop	r11
    8a86:	af 90       	pop	r10
    8a88:	9f 90       	pop	r9
    8a8a:	8f 90       	pop	r8
    8a8c:	7f 90       	pop	r7
    8a8e:	6f 90       	pop	r6
    8a90:	5f 90       	pop	r5
    8a92:	4f 90       	pop	r4
    8a94:	3f 90       	pop	r3
    8a96:	2f 90       	pop	r2
    8a98:	08 95       	ret
    8a9a:	eb 81       	ldd	r30, Y+3	; 0x03
    8a9c:	fc 81       	ldd	r31, Y+4	; 0x04
    8a9e:	80 81       	ld	r24, Z
    8aa0:	91 81       	ldd	r25, Z+1	; 0x01
    8aa2:	81 15       	cp	r24, r1
    8aa4:	f2 e0       	ldi	r31, 0x02	; 2
    8aa6:	9f 07       	cpc	r25, r31
    8aa8:	c4 f0       	brlt	.+48     	; 0x8ada <obstacleAvoidance+0x310>
    8aaa:	8f ef       	ldi	r24, 0xFF	; 255
    8aac:	91 e0       	ldi	r25, 0x01	; 1
    8aae:	eb 81       	ldd	r30, Y+3	; 0x03
    8ab0:	fc 81       	ldd	r31, Y+4	; 0x04
    8ab2:	91 83       	std	Z+1, r25	; 0x01
    8ab4:	80 83       	st	Z, r24
    8ab6:	e9 81       	ldd	r30, Y+1	; 0x01
    8ab8:	fa 81       	ldd	r31, Y+2	; 0x02
    8aba:	80 81       	ld	r24, Z
    8abc:	91 81       	ldd	r25, Z+1	; 0x01
    8abe:	81 30       	cpi	r24, 0x01	; 1
    8ac0:	9e 4f       	sbci	r25, 0xFE	; 254
    8ac2:	a4 f6       	brge	.-88     	; 0x8a6c <obstacleAvoidance+0x2a2>
    8ac4:	81 e0       	ldi	r24, 0x01	; 1
    8ac6:	9e ef       	ldi	r25, 0xFE	; 254
    8ac8:	e9 81       	ldd	r30, Y+1	; 0x01
    8aca:	fa 81       	ldd	r31, Y+2	; 0x02
    8acc:	91 83       	std	Z+1, r25	; 0x01
    8ace:	80 83       	st	Z, r24
    8ad0:	eb 81       	ldd	r30, Y+3	; 0x03
    8ad2:	fc 81       	ldd	r31, Y+4	; 0x04
    8ad4:	80 81       	ld	r24, Z
    8ad6:	91 81       	ldd	r25, Z+1	; 0x01
    8ad8:	c0 cf       	rjmp	.-128    	; 0x8a5a <obstacleAvoidance+0x290>
    8ada:	21 30       	cpi	r18, 0x01	; 1
    8adc:	3e 4f       	sbci	r19, 0xFE	; 254
    8ade:	94 f3       	brlt	.-28     	; 0x8ac4 <obstacleAvoidance+0x2fa>
    8ae0:	bc cf       	rjmp	.-136    	; 0x8a5a <obstacleAvoidance+0x290>
    8ae2:	23 28       	or	r2, r3
    8ae4:	09 f4       	brne	.+2      	; 0x8ae8 <obstacleAvoidance+0x31e>
    8ae6:	a7 cf       	rjmp	.-178    	; 0x8a36 <obstacleAvoidance+0x26c>
    8ae8:	01 2b       	or	r16, r17
    8aea:	09 f4       	brne	.+2      	; 0x8aee <obstacleAvoidance+0x324>
    8aec:	a4 cf       	rjmp	.-184    	; 0x8a36 <obstacleAvoidance+0x26c>
    8aee:	80 91 d3 02 	lds	r24, 0x02D3	; 0x8002d3 <currentAngle>
    8af2:	90 91 d4 02 	lds	r25, 0x02D4	; 0x8002d4 <currentAngle+0x1>
    8af6:	8b 55       	subi	r24, 0x5B	; 91
    8af8:	91 09       	sbc	r25, r1
    8afa:	eb 81       	ldd	r30, Y+3	; 0x03
    8afc:	fc 81       	ldd	r31, Y+4	; 0x04
    8afe:	83 3b       	cpi	r24, 0xB3	; 179
    8b00:	91 05       	cpc	r25, r1
    8b02:	08 f0       	brcs	.+2      	; 0x8b06 <obstacleAvoidance+0x33c>
    8b04:	4d c0       	rjmp	.+154    	; 0x8ba0 <obstacleAvoidance+0x3d6>
    8b06:	80 81       	ld	r24, Z
    8b08:	91 81       	ldd	r25, Z+1	; 0x01
    8b0a:	0a 96       	adiw	r24, 0x0a	; 10
    8b0c:	91 83       	std	Z+1, r25	; 0x01
    8b0e:	80 83       	st	Z, r24
    8b10:	e9 81       	ldd	r30, Y+1	; 0x01
    8b12:	fa 81       	ldd	r31, Y+2	; 0x02
    8b14:	20 81       	ld	r18, Z
    8b16:	31 81       	ldd	r19, Z+1	; 0x01
    8b18:	2a 50       	subi	r18, 0x0A	; 10
    8b1a:	31 09       	sbc	r19, r1
    8b1c:	31 83       	std	Z+1, r19	; 0x01
    8b1e:	20 83       	st	Z, r18
    8b20:	8a cf       	rjmp	.-236    	; 0x8a36 <obstacleAvoidance+0x26c>
    8b22:	2c 19       	sub	r18, r12
    8b24:	3d 09       	sbc	r19, r13
    8b26:	4e 09       	sbc	r20, r14
    8b28:	5f 09       	sbc	r21, r15
    8b2a:	68 01       	movw	r12, r16
    8b2c:	01 2e       	mov	r0, r17
    8b2e:	00 0c       	add	r0, r0
    8b30:	ee 08       	sbc	r14, r14
    8b32:	ff 08       	sbc	r15, r15
    8b34:	c7 01       	movw	r24, r14
    8b36:	b6 01       	movw	r22, r12
    8b38:	0e 94 20 51 	call	0xa240	; 0xa240 <__mulsi3>
    8b3c:	dc 01       	movw	r26, r24
    8b3e:	cb 01       	movw	r24, r22
    8b40:	26 e0       	ldi	r18, 0x06	; 6
    8b42:	b5 95       	asr	r27
    8b44:	a7 95       	ror	r26
    8b46:	97 95       	ror	r25
    8b48:	87 95       	ror	r24
    8b4a:	2a 95       	dec	r18
    8b4c:	d1 f7       	brne	.-12     	; 0x8b42 <obstacleAvoidance+0x378>
    8b4e:	c8 1a       	sub	r12, r24
    8b50:	d9 0a       	sbc	r13, r25
    8b52:	ea 0a       	sbc	r14, r26
    8b54:	fb 0a       	sbc	r15, r27
    8b56:	96 01       	movw	r18, r12
    8b58:	e9 81       	ldd	r30, Y+1	; 0x01
    8b5a:	fa 81       	ldd	r31, Y+2	; 0x02
    8b5c:	d1 82       	std	Z+1, r13	; 0x01
    8b5e:	c0 82       	st	Z, r12
    8b60:	65 cf       	rjmp	.-310    	; 0x8a2c <obstacleAvoidance+0x262>
    8b62:	2c 0d       	add	r18, r12
    8b64:	3d 1d       	adc	r19, r13
    8b66:	4e 1d       	adc	r20, r14
    8b68:	5f 1d       	adc	r21, r15
    8b6a:	41 01       	movw	r8, r2
    8b6c:	03 2c       	mov	r0, r3
    8b6e:	00 0c       	add	r0, r0
    8b70:	aa 08       	sbc	r10, r10
    8b72:	bb 08       	sbc	r11, r11
    8b74:	c5 01       	movw	r24, r10
    8b76:	b4 01       	movw	r22, r8
    8b78:	0e 94 20 51 	call	0xa240	; 0xa240 <__mulsi3>
    8b7c:	dc 01       	movw	r26, r24
    8b7e:	cb 01       	movw	r24, r22
    8b80:	46 e0       	ldi	r20, 0x06	; 6
    8b82:	b5 95       	asr	r27
    8b84:	a7 95       	ror	r26
    8b86:	97 95       	ror	r25
    8b88:	87 95       	ror	r24
    8b8a:	4a 95       	dec	r20
    8b8c:	d1 f7       	brne	.-12     	; 0x8b82 <obstacleAvoidance+0x3b8>
    8b8e:	88 1a       	sub	r8, r24
    8b90:	99 0a       	sbc	r9, r25
    8b92:	aa 0a       	sbc	r10, r26
    8b94:	bb 0a       	sbc	r11, r27
    8b96:	eb 81       	ldd	r30, Y+3	; 0x03
    8b98:	fc 81       	ldd	r31, Y+4	; 0x04
    8b9a:	91 82       	std	Z+1, r9	; 0x01
    8b9c:	80 82       	st	Z, r8
    8b9e:	23 cf       	rjmp	.-442    	; 0x89e6 <obstacleAvoidance+0x21c>
    8ba0:	80 81       	ld	r24, Z
    8ba2:	91 81       	ldd	r25, Z+1	; 0x01
    8ba4:	0a 97       	sbiw	r24, 0x0a	; 10
    8ba6:	91 83       	std	Z+1, r25	; 0x01
    8ba8:	80 83       	st	Z, r24
    8baa:	e9 81       	ldd	r30, Y+1	; 0x01
    8bac:	fa 81       	ldd	r31, Y+2	; 0x02
    8bae:	20 81       	ld	r18, Z
    8bb0:	31 81       	ldd	r19, Z+1	; 0x01
    8bb2:	26 5f       	subi	r18, 0xF6	; 246
    8bb4:	3f 4f       	sbci	r19, 0xFF	; 255
    8bb6:	31 83       	std	Z+1, r19	; 0x01
    8bb8:	20 83       	st	Z, r18
    8bba:	3d cf       	rjmp	.-390    	; 0x8a36 <obstacleAvoidance+0x26c>

00008bbc <enableObstacleAvoidance>:


}

void enableObstacleAvoidance() {
	obstacleAvoidanceEnabled=1;
    8bbc:	81 e0       	ldi	r24, 0x01	; 1
    8bbe:	80 93 b5 02 	sts	0x02B5, r24	; 0x8002b5 <obstacleAvoidanceEnabled>
    8bc2:	08 95       	ret

00008bc4 <disableObstacleAvoidance>:
}

void disableObstacleAvoidance() {
	obstacleAvoidanceEnabled=0;
    8bc4:	10 92 b5 02 	sts	0x02B5, r1	; 0x8002b5 <obstacleAvoidanceEnabled>
    8bc8:	08 95       	ret

00008bca <enableCliffAvoidance>:
}

void enableCliffAvoidance() {
	cliffAvoidanceEnabled=1;
    8bca:	81 e0       	ldi	r24, 0x01	; 1
    8bcc:	80 93 b4 02 	sts	0x02B4, r24	; 0x8002b4 <cliffAvoidanceEnabled>
    8bd0:	08 95       	ret

00008bd2 <disableCliffAvoidance>:
}

void disableCliffAvoidance() {
	cliffAvoidanceEnabled=0;
    8bd2:	10 92 b4 02 	sts	0x02B4, r1	; 0x8002b4 <cliffAvoidanceEnabled>
    8bd6:	08 95       	ret

00008bd8 <initRGBleds>:

	blinkState = 1 - blinkState;

	if(blinkState) {
		TCCR1A |= (1 << COM1C1);	// always enable OCC in case it was disabled
		OCR1C = 255;
    8bd8:	a0 e8       	ldi	r26, 0x80	; 128
    8bda:	b0 e0       	ldi	r27, 0x00	; 0
    8bdc:	1c 92       	st	X, r1
    8bde:	e1 e8       	ldi	r30, 0x81	; 129
    8be0:	f0 e0       	ldi	r31, 0x00	; 0
    8be2:	10 82       	st	Z, r1
    8be4:	8c 91       	ld	r24, X
    8be6:	89 6a       	ori	r24, 0xA9	; 169
    8be8:	8c 93       	st	X, r24
    8bea:	80 81       	ld	r24, Z
    8bec:	89 60       	ori	r24, 0x09	; 9
    8bee:	80 83       	st	Z, r24
    8bf0:	80 91 0f 02 	lds	r24, 0x020F	; 0x80020f <pwm_red>
    8bf4:	90 e0       	ldi	r25, 0x00	; 0
    8bf6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
    8bfa:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
    8bfe:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <pwm_green>
    8c02:	90 e0       	ldi	r25, 0x00	; 0
    8c04:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
    8c08:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
    8c0c:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <pwm_blue>
    8c10:	90 e0       	ldi	r25, 0x00	; 0
    8c12:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <__TEXT_REGION_LENGTH__+0x7c008d>
    8c16:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__TEXT_REGION_LENGTH__+0x7c008c>
    8c1a:	08 95       	ret

00008c1c <updateRedLed>:

}

void updateRedLed(unsigned char value) {

	if(value == 0) {
    8c1c:	88 23       	and	r24, r24
    8c1e:	59 f0       	breq	.+22     	; 0x8c36 <updateRedLed+0x1a>
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1A1);	// always enable OCA in case it was disabled
    8c20:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    8c24:	90 68       	ori	r25, 0x80	; 128
    8c26:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
		OCR1A = value;
    8c2a:	90 e0       	ldi	r25, 0x00	; 0
    8c2c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7c0089>
    8c30:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7c0088>
    8c34:	08 95       	ret
}

void updateRedLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1A1);	// disabel OCA
    8c36:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    8c3a:	8f 77       	andi	r24, 0x7F	; 127
    8c3c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
		PORTB &= ~(1 << 5);			// set pin state to turn on the led
    8c40:	2d 98       	cbi	0x05, 5	; 5
    8c42:	08 95       	ret

00008c44 <updateGreenLed>:

}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
    8c44:	88 23       	and	r24, r24
    8c46:	59 f0       	breq	.+22     	; 0x8c5e <updateGreenLed+0x1a>
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
	} else {	
		TCCR1A |= (1 << COM1B1);	// always enable OCA in case it was disabled
    8c48:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    8c4c:	90 62       	ori	r25, 0x20	; 32
    8c4e:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
		OCR1B = value;
    8c52:	90 e0       	ldi	r25, 0x00	; 0
    8c54:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7c008b>
    8c58:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7c008a>
    8c5c:	08 95       	ret
}

void updateGreenLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1B1);	// disable OCB
    8c5e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    8c62:	8f 7d       	andi	r24, 0xDF	; 223
    8c64:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
		PORTB &= ~(1 << 6);			// set pin state to turn on the led
    8c68:	2e 98       	cbi	0x05, 6	; 5
    8c6a:	08 95       	ret

00008c6c <updateBlueLed>:

}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
    8c6c:	88 23       	and	r24, r24
    8c6e:	59 f0       	breq	.+22     	; 0x8c86 <updateBlueLed+0x1a>
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
	} else {
		TCCR1A |= (1 << COM1C1);	// always enable OCA in case it was disabled
    8c70:	90 91 80 00 	lds	r25, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    8c74:	98 60       	ori	r25, 0x08	; 8
    8c76:	90 93 80 00 	sts	0x0080, r25	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
		OCR1C = value;
    8c7a:	90 e0       	ldi	r25, 0x00	; 0
    8c7c:	90 93 8d 00 	sts	0x008D, r25	; 0x80008d <__TEXT_REGION_LENGTH__+0x7c008d>
    8c80:	80 93 8c 00 	sts	0x008C, r24	; 0x80008c <__TEXT_REGION_LENGTH__+0x7c008c>
    8c84:	08 95       	ret
}

void updateBlueLed(unsigned char value) {

	if(value == 0) {
		TCCR1A &= ~(1 << COM1C1);	// disable OCC
    8c86:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
    8c8a:	87 7f       	andi	r24, 0xF7	; 247
    8c8c:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7c0080>
		PORTB &= ~(1 << 7);			// set pin state to turn on the led
    8c90:	2f 98       	cbi	0x05, 7	; 5
    8c92:	08 95       	ret

00008c94 <initAccelerometer>:
			accX = (((int16_t)accBuff[1])<<6)|(((uint8_t)accBuff[0])>>2);	// X axis
			accY = (((int16_t)accBuff[3])<<6)|(((uint8_t)accBuff[2])>>2);	// Y axis
			accZ = (((int16_t)accBuff[5])<<6)|(((uint8_t)accBuff[4])>>2);	// Z axis
		} else {													// else return the calibrated values
			accX = ((((int16_t)accBuff[1])<<6)|(((uint8_t)accBuff[0])>>2))-accOffsetX;	// X axis
			accY = ((((int16_t)accBuff[3])<<6)|(((uint8_t)accBuff[2])>>2))-accOffsetY;	// Y axis
    8c94:	0e 94 97 23 	call	0x472e	; 0x472e <i2c_init>
    8c98:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <accelAddress>
    8c9c:	0e 94 9f 23 	call	0x473e	; 0x473e <i2c_start>
    8ca0:	81 11       	cpse	r24, r1
    8ca2:	08 c0       	rjmp	.+16     	; 0x8cb4 <initAccelerometer+0x20>
    8ca4:	86 e1       	ldi	r24, 0x16	; 22
    8ca6:	0e 94 eb 23 	call	0x47d6	; 0x47d6 <i2c_write>
    8caa:	85 e4       	ldi	r24, 0x45	; 69
    8cac:	0e 94 eb 23 	call	0x47d6	; 0x47d6 <i2c_write>
    8cb0:	0c 94 e3 23 	jmp	0x47c6	; 0x47c6 <i2c_stop>
    8cb4:	0e 94 e3 23 	call	0x47c6	; 0x47c6 <i2c_stop>
    8cb8:	86 ea       	ldi	r24, 0xA6	; 166
    8cba:	80 93 0a 02 	sts	0x020A, r24	; 0x80020a <accelAddress>
    8cbe:	0e 94 9f 23 	call	0x473e	; 0x473e <i2c_start>
    8cc2:	81 11       	cpse	r24, r1
    8cc4:	28 c0       	rjmp	.+80     	; 0x8d16 <initAccelerometer+0x82>
    8cc6:	8d e2       	ldi	r24, 0x2D	; 45
    8cc8:	0e 94 eb 23 	call	0x47d6	; 0x47d6 <i2c_write>
    8ccc:	88 e0       	ldi	r24, 0x08	; 8
    8cce:	0e 94 eb 23 	call	0x47d6	; 0x47d6 <i2c_write>
    8cd2:	0e 94 e3 23 	call	0x47c6	; 0x47c6 <i2c_stop>
    8cd6:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <accelAddress>
    8cda:	0e 94 9f 23 	call	0x473e	; 0x473e <i2c_start>
    8cde:	81 11       	cpse	r24, r1
    8ce0:	1a c0       	rjmp	.+52     	; 0x8d16 <initAccelerometer+0x82>
    8ce2:	81 e3       	ldi	r24, 0x31	; 49
    8ce4:	0e 94 eb 23 	call	0x47d6	; 0x47d6 <i2c_write>
    8ce8:	80 e0       	ldi	r24, 0x00	; 0
    8cea:	0e 94 eb 23 	call	0x47d6	; 0x47d6 <i2c_write>
    8cee:	0e 94 e3 23 	call	0x47c6	; 0x47c6 <i2c_stop>
    8cf2:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <accelAddress>
    8cf6:	0e 94 9f 23 	call	0x473e	; 0x473e <i2c_start>
    8cfa:	81 11       	cpse	r24, r1
    8cfc:	0c c0       	rjmp	.+24     	; 0x8d16 <initAccelerometer+0x82>
    8cfe:	8c e2       	ldi	r24, 0x2C	; 44
    8d00:	0e 94 eb 23 	call	0x47d6	; 0x47d6 <i2c_write>
    8d04:	89 e0       	ldi	r24, 0x09	; 9
    8d06:	0e 94 eb 23 	call	0x47d6	; 0x47d6 <i2c_write>
    8d0a:	0e 94 e3 23 	call	0x47c6	; 0x47c6 <i2c_stop>
    8d0e:	81 e0       	ldi	r24, 0x01	; 1
    8d10:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <useAccel>
    8d14:	08 95       	ret
    8d16:	0e 94 e3 23 	call	0x47c6	; 0x47c6 <i2c_stop>
    8d1a:	82 e0       	ldi	r24, 0x02	; 2
    8d1c:	80 93 eb 02 	sts	0x02EB, r24	; 0x8002eb <useAccel>
    8d20:	08 95       	ret

00008d22 <readAccelXYZ>:
    8d22:	ef 92       	push	r14
    8d24:	ff 92       	push	r15
    8d26:	0f 93       	push	r16
    8d28:	1f 93       	push	r17
    8d2a:	cf 93       	push	r28
    8d2c:	df 93       	push	r29
    8d2e:	00 d0       	rcall	.+0      	; 0x8d30 <readAccelXYZ+0xe>
    8d30:	00 d0       	rcall	.+0      	; 0x8d32 <readAccelXYZ+0x10>
    8d32:	cd b7       	in	r28, 0x3d	; 61
    8d34:	de b7       	in	r29, 0x3e	; 62
    8d36:	80 91 eb 02 	lds	r24, 0x02EB	; 0x8002eb <useAccel>
    8d3a:	88 23       	and	r24, r24
    8d3c:	e1 f0       	breq	.+56     	; 0x8d76 <readAccelXYZ+0x54>
    8d3e:	81 30       	cpi	r24, 0x01	; 1
    8d40:	09 f4       	brne	.+2      	; 0x8d44 <readAccelXYZ+0x22>
    8d42:	96 c0       	rjmp	.+300    	; 0x8e70 <readAccelXYZ+0x14e>
    8d44:	10 92 ea 02 	sts	0x02EA, r1	; 0x8002ea <accX+0x1>
    8d48:	10 92 e9 02 	sts	0x02E9, r1	; 0x8002e9 <accX>
    8d4c:	10 92 e8 02 	sts	0x02E8, r1	; 0x8002e8 <accY+0x1>
    8d50:	10 92 e7 02 	sts	0x02E7, r1	; 0x8002e7 <accY>
    8d54:	10 92 e6 02 	sts	0x02E6, r1	; 0x8002e6 <accZ+0x1>
    8d58:	10 92 e5 02 	sts	0x02E5, r1	; 0x8002e5 <accZ>
    8d5c:	26 96       	adiw	r28, 0x06	; 6
    8d5e:	0f b6       	in	r0, 0x3f	; 63
    8d60:	f8 94       	cli
    8d62:	de bf       	out	0x3e, r29	; 62
    8d64:	0f be       	out	0x3f, r0	; 63
    8d66:	cd bf       	out	0x3d, r28	; 61
    8d68:	df 91       	pop	r29
    8d6a:	cf 91       	pop	r28
    8d6c:	1f 91       	pop	r17
    8d6e:	0f 91       	pop	r16
    8d70:	ff 90       	pop	r15
    8d72:	ef 90       	pop	r14
    8d74:	08 95       	ret
    8d76:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <accelAddress>
    8d7a:	0e 94 9f 23 	call	0x473e	; 0x473e <i2c_start>
    8d7e:	80 e0       	ldi	r24, 0x00	; 0
    8d80:	0e 94 eb 23 	call	0x47d6	; 0x47d6 <i2c_write>
    8d84:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <accelAddress>
    8d88:	8f 5f       	subi	r24, 0xFF	; 255
    8d8a:	0e 94 c1 23 	call	0x4782	; 0x4782 <i2c_rep_start>
    8d8e:	8e 01       	movw	r16, r28
    8d90:	0f 5f       	subi	r16, 0xFF	; 255
    8d92:	1f 4f       	sbci	r17, 0xFF	; 255
    8d94:	7e 01       	movw	r14, r28
    8d96:	26 e0       	ldi	r18, 0x06	; 6
    8d98:	e2 0e       	add	r14, r18
    8d9a:	f1 1c       	adc	r15, r1
    8d9c:	0e 94 fd 23 	call	0x47fa	; 0x47fa <i2c_readAck>
    8da0:	f8 01       	movw	r30, r16
    8da2:	81 93       	st	Z+, r24
    8da4:	8f 01       	movw	r16, r30
    8da6:	ee 15       	cp	r30, r14
    8da8:	ff 05       	cpc	r31, r15
    8daa:	c1 f7       	brne	.-16     	; 0x8d9c <readAccelXYZ+0x7a>
    8dac:	0e 94 07 24 	call	0x480e	; 0x480e <i2c_readNak>
    8db0:	18 2f       	mov	r17, r24
    8db2:	0e 94 e3 23 	call	0x47c6	; 0x47c6 <i2c_stop>
    8db6:	80 91 5f 15 	lds	r24, 0x155F	; 0x80155f <startCalibration>
    8dba:	81 11       	cpse	r24, r1
    8dbc:	3c c0       	rjmp	.+120    	; 0x8e36 <readAccelXYZ+0x114>
    8dbe:	8a 81       	ldd	r24, Y+2	; 0x02
    8dc0:	08 2e       	mov	r0, r24
    8dc2:	00 0c       	add	r0, r0
    8dc4:	99 0b       	sbc	r25, r25
    8dc6:	38 2f       	mov	r19, r24
    8dc8:	22 27       	eor	r18, r18
    8dca:	89 81       	ldd	r24, Y+1	; 0x01
    8dcc:	08 2e       	mov	r0, r24
    8dce:	00 0c       	add	r0, r0
    8dd0:	99 0b       	sbc	r25, r25
    8dd2:	82 2b       	or	r24, r18
    8dd4:	93 2b       	or	r25, r19
    8dd6:	20 91 e3 02 	lds	r18, 0x02E3	; 0x8002e3 <accOffsetX>
    8dda:	30 91 e4 02 	lds	r19, 0x02E4	; 0x8002e4 <accOffsetX+0x1>
    8dde:	82 1b       	sub	r24, r18
    8de0:	93 0b       	sbc	r25, r19
    8de2:	90 93 ea 02 	sts	0x02EA, r25	; 0x8002ea <accX+0x1>
    8de6:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <accX>
    8dea:	8c 81       	ldd	r24, Y+4	; 0x04
    8dec:	08 2e       	mov	r0, r24
    8dee:	00 0c       	add	r0, r0
    8df0:	99 0b       	sbc	r25, r25
    8df2:	38 2f       	mov	r19, r24
    8df4:	22 27       	eor	r18, r18
    8df6:	8b 81       	ldd	r24, Y+3	; 0x03
    8df8:	08 2e       	mov	r0, r24
    8dfa:	00 0c       	add	r0, r0
    8dfc:	99 0b       	sbc	r25, r25
    8dfe:	82 2b       	or	r24, r18
    8e00:	93 2b       	or	r25, r19
    8e02:	20 91 e1 02 	lds	r18, 0x02E1	; 0x8002e1 <accOffsetY>
    8e06:	30 91 e2 02 	lds	r19, 0x02E2	; 0x8002e2 <accOffsetY+0x1>
    8e0a:	82 1b       	sub	r24, r18
    8e0c:	93 0b       	sbc	r25, r19
    8e0e:	90 93 e8 02 	sts	0x02E8, r25	; 0x8002e8 <accY+0x1>
    8e12:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <accY>
    8e16:	81 2f       	mov	r24, r17
    8e18:	11 0f       	add	r17, r17
    8e1a:	99 0b       	sbc	r25, r25
    8e1c:	98 2f       	mov	r25, r24
    8e1e:	88 27       	eor	r24, r24
    8e20:	2d 81       	ldd	r18, Y+5	; 0x05
    8e22:	02 2e       	mov	r0, r18
    8e24:	00 0c       	add	r0, r0
    8e26:	33 0b       	sbc	r19, r19
    8e28:	82 2b       	or	r24, r18
    8e2a:	93 2b       	or	r25, r19
    8e2c:	90 93 e6 02 	sts	0x02E6, r25	; 0x8002e6 <accZ+0x1>
    8e30:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <accZ>
    8e34:	93 cf       	rjmp	.-218    	; 0x8d5c <readAccelXYZ+0x3a>
    8e36:	8a 81       	ldd	r24, Y+2	; 0x02
    8e38:	08 2e       	mov	r0, r24
    8e3a:	00 0c       	add	r0, r0
    8e3c:	99 0b       	sbc	r25, r25
    8e3e:	38 2f       	mov	r19, r24
    8e40:	22 27       	eor	r18, r18
    8e42:	89 81       	ldd	r24, Y+1	; 0x01
    8e44:	08 2e       	mov	r0, r24
    8e46:	00 0c       	add	r0, r0
    8e48:	99 0b       	sbc	r25, r25
    8e4a:	82 2b       	or	r24, r18
    8e4c:	93 2b       	or	r25, r19
    8e4e:	90 93 ea 02 	sts	0x02EA, r25	; 0x8002ea <accX+0x1>
    8e52:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <accX>
    8e56:	8c 81       	ldd	r24, Y+4	; 0x04
    8e58:	08 2e       	mov	r0, r24
    8e5a:	00 0c       	add	r0, r0
    8e5c:	99 0b       	sbc	r25, r25
    8e5e:	38 2f       	mov	r19, r24
    8e60:	22 27       	eor	r18, r18
    8e62:	8b 81       	ldd	r24, Y+3	; 0x03
    8e64:	08 2e       	mov	r0, r24
    8e66:	00 0c       	add	r0, r0
    8e68:	99 0b       	sbc	r25, r25
    8e6a:	82 2b       	or	r24, r18
    8e6c:	93 2b       	or	r25, r19
    8e6e:	cf cf       	rjmp	.-98     	; 0x8e0e <readAccelXYZ+0xec>
    8e70:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <accelAddress>
    8e74:	0e 94 9f 23 	call	0x473e	; 0x473e <i2c_start>
    8e78:	82 e3       	ldi	r24, 0x32	; 50
    8e7a:	0e 94 eb 23 	call	0x47d6	; 0x47d6 <i2c_write>
    8e7e:	80 91 0a 02 	lds	r24, 0x020A	; 0x80020a <accelAddress>
    8e82:	8f 5f       	subi	r24, 0xFF	; 255
    8e84:	0e 94 c1 23 	call	0x4782	; 0x4782 <i2c_rep_start>
    8e88:	8e 01       	movw	r16, r28
    8e8a:	0f 5f       	subi	r16, 0xFF	; 255
    8e8c:	1f 4f       	sbci	r17, 0xFF	; 255
    8e8e:	7e 01       	movw	r14, r28
    8e90:	f6 e0       	ldi	r31, 0x06	; 6
    8e92:	ef 0e       	add	r14, r31
    8e94:	f1 1c       	adc	r15, r1
    8e96:	0e 94 fd 23 	call	0x47fa	; 0x47fa <i2c_readAck>
    8e9a:	f8 01       	movw	r30, r16
    8e9c:	81 93       	st	Z+, r24
    8e9e:	8f 01       	movw	r16, r30
    8ea0:	ee 15       	cp	r30, r14
    8ea2:	ff 05       	cpc	r31, r15
    8ea4:	c1 f7       	brne	.-16     	; 0x8e96 <readAccelXYZ+0x174>
    8ea6:	0e 94 07 24 	call	0x480e	; 0x480e <i2c_readNak>
    8eaa:	18 2f       	mov	r17, r24
    8eac:	0e 94 e3 23 	call	0x47c6	; 0x47c6 <i2c_stop>
    8eb0:	80 91 5f 15 	lds	r24, 0x155F	; 0x80155f <startCalibration>
    8eb4:	81 11       	cpse	r24, r1
    8eb6:	33 c0       	rjmp	.+102    	; 0x8f1e <readAccelXYZ+0x1fc>
    8eb8:	8a 81       	ldd	r24, Y+2	; 0x02
    8eba:	e0 e4       	ldi	r30, 0x40	; 64
    8ebc:	8e 02       	muls	r24, r30
    8ebe:	c0 01       	movw	r24, r0
    8ec0:	11 24       	eor	r1, r1
    8ec2:	29 81       	ldd	r18, Y+1	; 0x01
    8ec4:	26 95       	lsr	r18
    8ec6:	26 95       	lsr	r18
    8ec8:	82 2b       	or	r24, r18
    8eca:	20 91 e3 02 	lds	r18, 0x02E3	; 0x8002e3 <accOffsetX>
    8ece:	30 91 e4 02 	lds	r19, 0x02E4	; 0x8002e4 <accOffsetX+0x1>
    8ed2:	82 1b       	sub	r24, r18
    8ed4:	93 0b       	sbc	r25, r19
    8ed6:	90 93 ea 02 	sts	0x02EA, r25	; 0x8002ea <accX+0x1>
    8eda:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <accX>
    8ede:	8c 81       	ldd	r24, Y+4	; 0x04
    8ee0:	f0 e4       	ldi	r31, 0x40	; 64
    8ee2:	8f 02       	muls	r24, r31
    8ee4:	c0 01       	movw	r24, r0
    8ee6:	11 24       	eor	r1, r1
    8ee8:	2b 81       	ldd	r18, Y+3	; 0x03
    8eea:	26 95       	lsr	r18
    8eec:	26 95       	lsr	r18
    8eee:	82 2b       	or	r24, r18
    8ef0:	20 91 e1 02 	lds	r18, 0x02E1	; 0x8002e1 <accOffsetY>
    8ef4:	30 91 e2 02 	lds	r19, 0x02E2	; 0x8002e2 <accOffsetY+0x1>
    8ef8:	82 1b       	sub	r24, r18
    8efa:	93 0b       	sbc	r25, r19
    8efc:	90 93 e8 02 	sts	0x02E8, r25	; 0x8002e8 <accY+0x1>
    8f00:	80 93 e7 02 	sts	0x02E7, r24	; 0x8002e7 <accY>
    8f04:	2d 81       	ldd	r18, Y+5	; 0x05
    8f06:	26 95       	lsr	r18
    8f08:	26 95       	lsr	r18
    8f0a:	30 e4       	ldi	r19, 0x40	; 64
    8f0c:	13 02       	muls	r17, r19
    8f0e:	c0 01       	movw	r24, r0
    8f10:	11 24       	eor	r1, r1
    8f12:	82 2b       	or	r24, r18
    8f14:	90 93 e6 02 	sts	0x02E6, r25	; 0x8002e6 <accZ+0x1>
    8f18:	80 93 e5 02 	sts	0x02E5, r24	; 0x8002e5 <accZ>
    8f1c:	1f cf       	rjmp	.-450    	; 0x8d5c <readAccelXYZ+0x3a>
    8f1e:	8a 81       	ldd	r24, Y+2	; 0x02
    8f20:	f0 e4       	ldi	r31, 0x40	; 64
    8f22:	8f 02       	muls	r24, r31
    8f24:	c0 01       	movw	r24, r0
    8f26:	11 24       	eor	r1, r1
    8f28:	29 81       	ldd	r18, Y+1	; 0x01
    8f2a:	26 95       	lsr	r18
    8f2c:	26 95       	lsr	r18
    8f2e:	82 2b       	or	r24, r18
    8f30:	90 93 ea 02 	sts	0x02EA, r25	; 0x8002ea <accX+0x1>
    8f34:	80 93 e9 02 	sts	0x02E9, r24	; 0x8002e9 <accX>
    8f38:	8c 81       	ldd	r24, Y+4	; 0x04
    8f3a:	20 e4       	ldi	r18, 0x40	; 64
    8f3c:	82 02       	muls	r24, r18
    8f3e:	c0 01       	movw	r24, r0
    8f40:	11 24       	eor	r1, r1
    8f42:	2b 81       	ldd	r18, Y+3	; 0x03
    8f44:	26 95       	lsr	r18
    8f46:	26 95       	lsr	r18
    8f48:	82 2b       	or	r24, r18
    8f4a:	d8 cf       	rjmp	.-80     	; 0x8efc <readAccelXYZ+0x1da>

00008f4c <calibrateSensors>:
    8f4c:	cf 92       	push	r12
    8f4e:	df 92       	push	r13
    8f50:	ef 92       	push	r14
    8f52:	ff 92       	push	r15
    8f54:	0f 93       	push	r16
    8f56:	1f 93       	push	r17
    8f58:	cf 93       	push	r28
    8f5a:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <pwm_red>
    8f5e:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <pwm_green>
    8f62:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <pwm_blue>
    8f66:	80 e0       	ldi	r24, 0x00	; 0
    8f68:	0e 94 0e 46 	call	0x8c1c	; 0x8c1c <updateRedLed>
    8f6c:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <pwm_green>
    8f70:	0e 94 22 46 	call	0x8c44	; 0x8c44 <updateGreenLed>
    8f74:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <pwm_blue>
    8f78:	0e 94 36 46 	call	0x8c6c	; 0x8c6c <updateBlueLed>
    8f7c:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <calibrationCycle+0x1>
    8f80:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <calibrationCycle>
    8f84:	81 e0       	ldi	r24, 0x01	; 1
    8f86:	80 93 5f 15 	sts	0x155F, r24	; 0x80155f <startCalibration>
    8f8a:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    8f8e:	60 93 b6 02 	sts	0x02B6, r22	; 0x8002b6 <lastTick>
    8f92:	70 93 b7 02 	sts	0x02B7, r23	; 0x8002b7 <lastTick+0x1>
    8f96:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <lastTick+0x2>
    8f9a:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <lastTick+0x3>
    8f9e:	02 c0       	rjmp	.+4      	; 0x8fa4 <calibrateSensors+0x58>
    8fa0:	0e 94 91 46 	call	0x8d22	; 0x8d22 <readAccelXYZ>
    8fa4:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    8fa8:	00 91 b6 02 	lds	r16, 0x02B6	; 0x8002b6 <lastTick>
    8fac:	10 91 b7 02 	lds	r17, 0x02B7	; 0x8002b7 <lastTick+0x1>
    8fb0:	20 91 b8 02 	lds	r18, 0x02B8	; 0x8002b8 <lastTick+0x2>
    8fb4:	30 91 b9 02 	lds	r19, 0x02B9	; 0x8002b9 <lastTick+0x3>
    8fb8:	dc 01       	movw	r26, r24
    8fba:	cb 01       	movw	r24, r22
    8fbc:	80 1b       	sub	r24, r16
    8fbe:	91 0b       	sbc	r25, r17
    8fc0:	a2 0b       	sbc	r26, r18
    8fc2:	b3 0b       	sbc	r27, r19
    8fc4:	81 3c       	cpi	r24, 0xC1	; 193
    8fc6:	93 40       	sbci	r25, 0x03	; 3
    8fc8:	a1 05       	cpc	r26, r1
    8fca:	b1 05       	cpc	r27, r1
    8fcc:	48 f3       	brcs	.-46     	; 0x8fa0 <calibrateSensors+0x54>
    8fce:	21 e0       	ldi	r18, 0x01	; 1
    8fd0:	3c ef       	ldi	r19, 0xFC	; 252
    8fd2:	30 93 dc 02 	sts	0x02DC, r19	; 0x8002dc <accXMax+0x1>
    8fd6:	20 93 db 02 	sts	0x02DB, r18	; 0x8002db <accXMax>
    8fda:	8f ef       	ldi	r24, 0xFF	; 255
    8fdc:	93 e0       	ldi	r25, 0x03	; 3
    8fde:	90 93 da 02 	sts	0x02DA, r25	; 0x8002da <accXMin+0x1>
    8fe2:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <accXMin>
    8fe6:	30 93 d8 02 	sts	0x02D8, r19	; 0x8002d8 <accYMax+0x1>
    8fea:	20 93 d7 02 	sts	0x02D7, r18	; 0x8002d7 <accYMax>
    8fee:	90 93 d6 02 	sts	0x02D6, r25	; 0x8002d6 <accYMin+0x1>
    8ff2:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <accYMin>
    8ff6:	10 92 e0 02 	sts	0x02E0, r1	; 0x8002e0 <accOffsetXSum+0x1>
    8ffa:	10 92 df 02 	sts	0x02DF, r1	; 0x8002df <accOffsetXSum>
    8ffe:	10 92 de 02 	sts	0x02DE, r1	; 0x8002de <accOffsetYSum+0x1>
    9002:	10 92 dd 02 	sts	0x02DD, r1	; 0x8002dd <accOffsetYSum>
    9006:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <accZ>
    900a:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <accZ+0x1>
    900e:	97 fd       	sbrc	r25, 7
    9010:	3e c4       	rjmp	.+2172   	; 0x988e <calibrateSensors+0x942>
    9012:	8d 97       	sbiw	r24, 0x2d	; 45
    9014:	0c f4       	brge	.+2      	; 0x9018 <calibrateSensors+0xcc>
    9016:	9b c3       	rjmp	.+1846   	; 0x974e <calibrateSensors+0x802>
    9018:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <pwm_red>
    901c:	8f ef       	ldi	r24, 0xFF	; 255
    901e:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <pwm_green>
    9022:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <pwm_blue>
    9026:	80 e0       	ldi	r24, 0x00	; 0
    9028:	0e 94 0e 46 	call	0x8c1c	; 0x8c1c <updateRedLed>
    902c:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <pwm_green>
    9030:	0e 94 22 46 	call	0x8c44	; 0x8c44 <updateGreenLed>
    9034:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <pwm_blue>
    9038:	0e 94 36 46 	call	0x8c6c	; 0x8c6c <updateBlueLed>
    903c:	80 e0       	ldi	r24, 0x00	; 0
    903e:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <setLeftSpeed>
    9042:	80 e0       	ldi	r24, 0x00	; 0
    9044:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <setRightSpeed>
    9048:	21 c0       	rjmp	.+66     	; 0x908c <calibrateSensors+0x140>
    904a:	40 91 df 02 	lds	r20, 0x02DF	; 0x8002df <accOffsetXSum>
    904e:	50 91 e0 02 	lds	r21, 0x02E0	; 0x8002e0 <accOffsetXSum+0x1>
    9052:	20 91 e9 02 	lds	r18, 0x02E9	; 0x8002e9 <accX>
    9056:	30 91 ea 02 	lds	r19, 0x02EA	; 0x8002ea <accX+0x1>
    905a:	24 0f       	add	r18, r20
    905c:	35 1f       	adc	r19, r21
    905e:	30 93 e0 02 	sts	0x02E0, r19	; 0x8002e0 <accOffsetXSum+0x1>
    9062:	20 93 df 02 	sts	0x02DF, r18	; 0x8002df <accOffsetXSum>
    9066:	40 91 dd 02 	lds	r20, 0x02DD	; 0x8002dd <accOffsetYSum>
    906a:	50 91 de 02 	lds	r21, 0x02DE	; 0x8002de <accOffsetYSum+0x1>
    906e:	20 91 e7 02 	lds	r18, 0x02E7	; 0x8002e7 <accY>
    9072:	30 91 e8 02 	lds	r19, 0x02E8	; 0x8002e8 <accY+0x1>
    9076:	24 0f       	add	r18, r20
    9078:	35 1f       	adc	r19, r21
    907a:	30 93 de 02 	sts	0x02DE, r19	; 0x8002de <accOffsetYSum+0x1>
    907e:	20 93 dd 02 	sts	0x02DD, r18	; 0x8002dd <accOffsetYSum>
    9082:	01 96       	adiw	r24, 0x01	; 1
    9084:	90 93 cb 02 	sts	0x02CB, r25	; 0x8002cb <calibrationCycle+0x1>
    9088:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <calibrationCycle>
    908c:	0e 94 91 46 	call	0x8d22	; 0x8d22 <readAccelXYZ>
    9090:	0e 94 82 2c 	call	0x5904	; 0x5904 <handleMotorsWithNoController>
    9094:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <calibrationCycle>
    9098:	90 91 cb 02 	lds	r25, 0x02CB	; 0x8002cb <calibrationCycle+0x1>
    909c:	80 31       	cpi	r24, 0x10	; 16
    909e:	91 05       	cpc	r25, r1
    90a0:	a4 f2       	brlt	.-88     	; 0x904a <calibrateSensors+0xfe>
    90a2:	80 91 df 02 	lds	r24, 0x02DF	; 0x8002df <accOffsetXSum>
    90a6:	90 91 e0 02 	lds	r25, 0x02E0	; 0x8002e0 <accOffsetXSum+0x1>
    90aa:	95 95       	asr	r25
    90ac:	87 95       	ror	r24
    90ae:	95 95       	asr	r25
    90b0:	87 95       	ror	r24
    90b2:	95 95       	asr	r25
    90b4:	87 95       	ror	r24
    90b6:	95 95       	asr	r25
    90b8:	87 95       	ror	r24
    90ba:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <accOffsetX+0x1>
    90be:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <accOffsetX>
    90c2:	80 91 dd 02 	lds	r24, 0x02DD	; 0x8002dd <accOffsetYSum>
    90c6:	90 91 de 02 	lds	r25, 0x02DE	; 0x8002de <accOffsetYSum+0x1>
    90ca:	95 95       	asr	r25
    90cc:	87 95       	ror	r24
    90ce:	95 95       	asr	r25
    90d0:	87 95       	ror	r24
    90d2:	95 95       	asr	r25
    90d4:	87 95       	ror	r24
    90d6:	95 95       	asr	r25
    90d8:	87 95       	ror	r24
    90da:	90 93 e2 02 	sts	0x02E2, r25	; 0x8002e2 <accOffsetY+0x1>
    90de:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <accOffsetY>
    90e2:	81 e0       	ldi	r24, 0x01	; 1
    90e4:	80 93 5f 15 	sts	0x155F, r24	; 0x80155f <startCalibration>
    90e8:	10 92 cb 02 	sts	0x02CB, r1	; 0x8002cb <calibrationCycle+0x1>
    90ec:	10 92 ca 02 	sts	0x02CA, r1	; 0x8002ca <calibrationCycle>
    90f0:	21 e0       	ldi	r18, 0x01	; 1
    90f2:	cf ef       	ldi	r28, 0xFF	; 255
    90f4:	01 e0       	ldi	r16, 0x01	; 1
    90f6:	10 e0       	ldi	r17, 0x00	; 0
    90f8:	80 91 47 03 	lds	r24, 0x0347	; 0x800347 <proxUpdated>
    90fc:	81 11       	cpse	r24, r1
    90fe:	1e c1       	rjmp	.+572    	; 0x933c <calibrateSensors+0x3f0>
    9100:	22 23       	and	r18, r18
    9102:	09 f4       	brne	.+2      	; 0x9106 <calibrateSensors+0x1ba>
    9104:	03 c1       	rjmp	.+518    	; 0x930c <calibrateSensors+0x3c0>
    9106:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <calibrationCycle>
    910a:	90 91 cb 02 	lds	r25, 0x02CB	; 0x8002cb <calibrationCycle+0x1>
    910e:	41 97       	sbiw	r24, 0x11	; 17
    9110:	9c f3       	brlt	.-26     	; 0x90f8 <calibrateSensors+0x1ac>
    9112:	10 92 0f 02 	sts	0x020F, r1	; 0x80020f <pwm_red>
    9116:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <pwm_green>
    911a:	8f ef       	ldi	r24, 0xFF	; 255
    911c:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <pwm_blue>
    9120:	80 e0       	ldi	r24, 0x00	; 0
    9122:	0e 94 0e 46 	call	0x8c1c	; 0x8c1c <updateRedLed>
    9126:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <pwm_green>
    912a:	0e 94 22 46 	call	0x8c44	; 0x8c44 <updateGreenLed>
    912e:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <pwm_blue>
    9132:	0e 94 36 46 	call	0x8c6c	; 0x8c6c <updateBlueLed>
    9136:	80 91 4f 03 	lds	r24, 0x034F	; 0x80034f <proximitySum>
    913a:	90 91 50 03 	lds	r25, 0x0350	; 0x800350 <proximitySum+0x1>
    913e:	a0 91 51 03 	lds	r26, 0x0351	; 0x800351 <proximitySum+0x2>
    9142:	b0 91 52 03 	lds	r27, 0x0352	; 0x800352 <proximitySum+0x3>
    9146:	24 e0       	ldi	r18, 0x04	; 4
    9148:	b6 95       	lsr	r27
    914a:	a7 95       	ror	r26
    914c:	97 95       	ror	r25
    914e:	87 95       	ror	r24
    9150:	2a 95       	dec	r18
    9152:	d1 f7       	brne	.-12     	; 0x9148 <calibrateSensors+0x1fc>
    9154:	90 93 80 03 	sts	0x0380, r25	; 0x800380 <proximityOffset+0x1>
    9158:	80 93 7f 03 	sts	0x037F, r24	; 0x80037f <proximityOffset>
    915c:	80 91 53 03 	lds	r24, 0x0353	; 0x800353 <proximitySum+0x4>
    9160:	90 91 54 03 	lds	r25, 0x0354	; 0x800354 <proximitySum+0x5>
    9164:	a0 91 55 03 	lds	r26, 0x0355	; 0x800355 <proximitySum+0x6>
    9168:	b0 91 56 03 	lds	r27, 0x0356	; 0x800356 <proximitySum+0x7>
    916c:	34 e0       	ldi	r19, 0x04	; 4
    916e:	b6 95       	lsr	r27
    9170:	a7 95       	ror	r26
    9172:	97 95       	ror	r25
    9174:	87 95       	ror	r24
    9176:	3a 95       	dec	r19
    9178:	d1 f7       	brne	.-12     	; 0x916e <calibrateSensors+0x222>
    917a:	90 93 82 03 	sts	0x0382, r25	; 0x800382 <proximityOffset+0x3>
    917e:	80 93 81 03 	sts	0x0381, r24	; 0x800381 <proximityOffset+0x2>
    9182:	80 91 57 03 	lds	r24, 0x0357	; 0x800357 <proximitySum+0x8>
    9186:	90 91 58 03 	lds	r25, 0x0358	; 0x800358 <proximitySum+0x9>
    918a:	a0 91 59 03 	lds	r26, 0x0359	; 0x800359 <proximitySum+0xa>
    918e:	b0 91 5a 03 	lds	r27, 0x035A	; 0x80035a <proximitySum+0xb>
    9192:	44 e0       	ldi	r20, 0x04	; 4
    9194:	b6 95       	lsr	r27
    9196:	a7 95       	ror	r26
    9198:	97 95       	ror	r25
    919a:	87 95       	ror	r24
    919c:	4a 95       	dec	r20
    919e:	d1 f7       	brne	.-12     	; 0x9194 <calibrateSensors+0x248>
    91a0:	90 93 84 03 	sts	0x0384, r25	; 0x800384 <proximityOffset+0x5>
    91a4:	80 93 83 03 	sts	0x0383, r24	; 0x800383 <proximityOffset+0x4>
    91a8:	80 91 5b 03 	lds	r24, 0x035B	; 0x80035b <proximitySum+0xc>
    91ac:	90 91 5c 03 	lds	r25, 0x035C	; 0x80035c <proximitySum+0xd>
    91b0:	a0 91 5d 03 	lds	r26, 0x035D	; 0x80035d <proximitySum+0xe>
    91b4:	b0 91 5e 03 	lds	r27, 0x035E	; 0x80035e <proximitySum+0xf>
    91b8:	54 e0       	ldi	r21, 0x04	; 4
    91ba:	b6 95       	lsr	r27
    91bc:	a7 95       	ror	r26
    91be:	97 95       	ror	r25
    91c0:	87 95       	ror	r24
    91c2:	5a 95       	dec	r21
    91c4:	d1 f7       	brne	.-12     	; 0x91ba <calibrateSensors+0x26e>
    91c6:	90 93 86 03 	sts	0x0386, r25	; 0x800386 <proximityOffset+0x7>
    91ca:	80 93 85 03 	sts	0x0385, r24	; 0x800385 <proximityOffset+0x6>
    91ce:	80 91 5f 03 	lds	r24, 0x035F	; 0x80035f <proximitySum+0x10>
    91d2:	90 91 60 03 	lds	r25, 0x0360	; 0x800360 <proximitySum+0x11>
    91d6:	a0 91 61 03 	lds	r26, 0x0361	; 0x800361 <proximitySum+0x12>
    91da:	b0 91 62 03 	lds	r27, 0x0362	; 0x800362 <proximitySum+0x13>
    91de:	64 e0       	ldi	r22, 0x04	; 4
    91e0:	b6 95       	lsr	r27
    91e2:	a7 95       	ror	r26
    91e4:	97 95       	ror	r25
    91e6:	87 95       	ror	r24
    91e8:	6a 95       	dec	r22
    91ea:	d1 f7       	brne	.-12     	; 0x91e0 <calibrateSensors+0x294>
    91ec:	90 93 88 03 	sts	0x0388, r25	; 0x800388 <proximityOffset+0x9>
    91f0:	80 93 87 03 	sts	0x0387, r24	; 0x800387 <proximityOffset+0x8>
    91f4:	80 91 63 03 	lds	r24, 0x0363	; 0x800363 <proximitySum+0x14>
    91f8:	90 91 64 03 	lds	r25, 0x0364	; 0x800364 <proximitySum+0x15>
    91fc:	a0 91 65 03 	lds	r26, 0x0365	; 0x800365 <proximitySum+0x16>
    9200:	b0 91 66 03 	lds	r27, 0x0366	; 0x800366 <proximitySum+0x17>
    9204:	74 e0       	ldi	r23, 0x04	; 4
    9206:	b6 95       	lsr	r27
    9208:	a7 95       	ror	r26
    920a:	97 95       	ror	r25
    920c:	87 95       	ror	r24
    920e:	7a 95       	dec	r23
    9210:	d1 f7       	brne	.-12     	; 0x9206 <calibrateSensors+0x2ba>
    9212:	90 93 8a 03 	sts	0x038A, r25	; 0x80038a <proximityOffset+0xb>
    9216:	80 93 89 03 	sts	0x0389, r24	; 0x800389 <proximityOffset+0xa>
    921a:	80 91 67 03 	lds	r24, 0x0367	; 0x800367 <proximitySum+0x18>
    921e:	90 91 68 03 	lds	r25, 0x0368	; 0x800368 <proximitySum+0x19>
    9222:	a0 91 69 03 	lds	r26, 0x0369	; 0x800369 <proximitySum+0x1a>
    9226:	b0 91 6a 03 	lds	r27, 0x036A	; 0x80036a <proximitySum+0x1b>
    922a:	e4 e0       	ldi	r30, 0x04	; 4
    922c:	b6 95       	lsr	r27
    922e:	a7 95       	ror	r26
    9230:	97 95       	ror	r25
    9232:	87 95       	ror	r24
    9234:	ea 95       	dec	r30
    9236:	d1 f7       	brne	.-12     	; 0x922c <calibrateSensors+0x2e0>
    9238:	90 93 8c 03 	sts	0x038C, r25	; 0x80038c <proximityOffset+0xd>
    923c:	80 93 8b 03 	sts	0x038B, r24	; 0x80038b <proximityOffset+0xc>
    9240:	80 91 6b 03 	lds	r24, 0x036B	; 0x80036b <proximitySum+0x1c>
    9244:	90 91 6c 03 	lds	r25, 0x036C	; 0x80036c <proximitySum+0x1d>
    9248:	a0 91 6d 03 	lds	r26, 0x036D	; 0x80036d <proximitySum+0x1e>
    924c:	b0 91 6e 03 	lds	r27, 0x036E	; 0x80036e <proximitySum+0x1f>
    9250:	f4 e0       	ldi	r31, 0x04	; 4
    9252:	b6 95       	lsr	r27
    9254:	a7 95       	ror	r26
    9256:	97 95       	ror	r25
    9258:	87 95       	ror	r24
    925a:	fa 95       	dec	r31
    925c:	d1 f7       	brne	.-12     	; 0x9252 <calibrateSensors+0x306>
    925e:	90 93 8e 03 	sts	0x038E, r25	; 0x80038e <proximityOffset+0xf>
    9262:	80 93 8d 03 	sts	0x038D, r24	; 0x80038d <proximityOffset+0xe>
    9266:	00 91 73 03 	lds	r16, 0x0373	; 0x800373 <proximitySum+0x24>
    926a:	10 91 74 03 	lds	r17, 0x0374	; 0x800374 <proximitySum+0x25>
    926e:	20 91 75 03 	lds	r18, 0x0375	; 0x800375 <proximitySum+0x26>
    9272:	30 91 76 03 	lds	r19, 0x0376	; 0x800376 <proximitySum+0x27>
    9276:	a4 e0       	ldi	r26, 0x04	; 4
    9278:	36 95       	lsr	r19
    927a:	27 95       	ror	r18
    927c:	17 95       	ror	r17
    927e:	07 95       	ror	r16
    9280:	aa 95       	dec	r26
    9282:	d1 f7       	brne	.-12     	; 0x9278 <calibrateSensors+0x32c>
    9284:	40 91 77 03 	lds	r20, 0x0377	; 0x800377 <proximitySum+0x28>
    9288:	50 91 78 03 	lds	r21, 0x0378	; 0x800378 <proximitySum+0x29>
    928c:	60 91 79 03 	lds	r22, 0x0379	; 0x800379 <proximitySum+0x2a>
    9290:	70 91 7a 03 	lds	r23, 0x037A	; 0x80037a <proximitySum+0x2b>
    9294:	b4 e0       	ldi	r27, 0x04	; 4
    9296:	76 95       	lsr	r23
    9298:	67 95       	ror	r22
    929a:	57 95       	ror	r21
    929c:	47 95       	ror	r20
    929e:	ba 95       	dec	r27
    92a0:	d1 f7       	brne	.-12     	; 0x9296 <calibrateSensors+0x34a>
    92a2:	80 91 7b 03 	lds	r24, 0x037B	; 0x80037b <proximitySum+0x2c>
    92a6:	90 91 7c 03 	lds	r25, 0x037C	; 0x80037c <proximitySum+0x2d>
    92aa:	a0 91 7d 03 	lds	r26, 0x037D	; 0x80037d <proximitySum+0x2e>
    92ae:	b0 91 7e 03 	lds	r27, 0x037E	; 0x80037e <proximitySum+0x2f>
    92b2:	c4 e0       	ldi	r28, 0x04	; 4
    92b4:	b6 95       	lsr	r27
    92b6:	a7 95       	ror	r26
    92b8:	97 95       	ror	r25
    92ba:	87 95       	ror	r24
    92bc:	ca 95       	dec	r28
    92be:	d1 f7       	brne	.-12     	; 0x92b4 <calibrateSensors+0x368>
    92c0:	c0 90 6f 03 	lds	r12, 0x036F	; 0x80036f <proximitySum+0x20>
    92c4:	d0 90 70 03 	lds	r13, 0x0370	; 0x800370 <proximitySum+0x21>
    92c8:	e0 90 71 03 	lds	r14, 0x0371	; 0x800371 <proximitySum+0x22>
    92cc:	f0 90 72 03 	lds	r15, 0x0372	; 0x800372 <proximitySum+0x23>
    92d0:	24 e0       	ldi	r18, 0x04	; 4
    92d2:	f6 94       	lsr	r15
    92d4:	e7 94       	ror	r14
    92d6:	d7 94       	ror	r13
    92d8:	c7 94       	ror	r12
    92da:	2a 95       	dec	r18
    92dc:	d1 f7       	brne	.-12     	; 0x92d2 <calibrateSensors+0x386>
    92de:	e2 e0       	ldi	r30, 0x02	; 2
    92e0:	de 1a       	sub	r13, r30
    92e2:	d0 92 90 03 	sts	0x0390, r13	; 0x800390 <proximityOffset+0x11>
    92e6:	c0 92 8f 03 	sts	0x038F, r12	; 0x80038f <proximityOffset+0x10>
    92ea:	12 50       	subi	r17, 0x02	; 2
    92ec:	10 93 92 03 	sts	0x0392, r17	; 0x800392 <proximityOffset+0x13>
    92f0:	00 93 91 03 	sts	0x0391, r16	; 0x800391 <proximityOffset+0x12>
    92f4:	52 50       	subi	r21, 0x02	; 2
    92f6:	50 93 94 03 	sts	0x0394, r21	; 0x800394 <proximityOffset+0x15>
    92fa:	40 93 93 03 	sts	0x0393, r20	; 0x800393 <proximityOffset+0x14>
    92fe:	92 50       	subi	r25, 0x02	; 2
    9300:	90 93 96 03 	sts	0x0396, r25	; 0x800396 <proximityOffset+0x17>
    9304:	80 93 95 03 	sts	0x0395, r24	; 0x800395 <proximityOffset+0x16>
    9308:	10 92 5f 15 	sts	0x155F, r1	; 0x80155f <startCalibration>
    930c:	8f ef       	ldi	r24, 0xFF	; 255
    930e:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <pwm_red>
    9312:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <pwm_green>
    9316:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <pwm_blue>
    931a:	0e 94 0e 46 	call	0x8c1c	; 0x8c1c <updateRedLed>
    931e:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <pwm_green>
    9322:	0e 94 22 46 	call	0x8c44	; 0x8c44 <updateGreenLed>
    9326:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <pwm_blue>
    932a:	cf 91       	pop	r28
    932c:	1f 91       	pop	r17
    932e:	0f 91       	pop	r16
    9330:	ff 90       	pop	r15
    9332:	ef 90       	pop	r14
    9334:	df 90       	pop	r13
    9336:	cf 90       	pop	r12
    9338:	0c 94 36 46 	jmp	0x8c6c	; 0x8c6c <updateBlueLed>
    933c:	c0 93 0f 02 	sts	0x020F, r28	; 0x80020f <pwm_red>
    9340:	c0 93 0e 02 	sts	0x020E, r28	; 0x80020e <pwm_green>
    9344:	10 92 0d 02 	sts	0x020D, r1	; 0x80020d <pwm_blue>
    9348:	8f ef       	ldi	r24, 0xFF	; 255
    934a:	0e 94 0e 46 	call	0x8c1c	; 0x8c1c <updateRedLed>
    934e:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <pwm_green>
    9352:	0e 94 22 46 	call	0x8c44	; 0x8c44 <updateGreenLed>
    9356:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <pwm_blue>
    935a:	0e 94 36 46 	call	0x8c6c	; 0x8c6c <updateBlueLed>
    935e:	10 92 47 03 	sts	0x0347, r1	; 0x800347 <proxUpdated>
    9362:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <calibrationCycle>
    9366:	90 91 cb 02 	lds	r25, 0x02CB	; 0x8002cb <calibrationCycle+0x1>
    936a:	00 97       	sbiw	r24, 0x00	; 0
    936c:	09 f4       	brne	.+2      	; 0x9370 <calibrateSensors+0x424>
    936e:	58 c1       	rjmp	.+688    	; 0x9620 <calibrateSensors+0x6d4>
    9370:	40 91 97 03 	lds	r20, 0x0397	; 0x800397 <proximityResult>
    9374:	50 91 98 03 	lds	r21, 0x0398	; 0x800398 <proximityResult+0x1>
    9378:	05 2e       	mov	r0, r21
    937a:	00 0c       	add	r0, r0
    937c:	66 0b       	sbc	r22, r22
    937e:	77 0b       	sbc	r23, r23
    9380:	c0 90 4f 03 	lds	r12, 0x034F	; 0x80034f <proximitySum>
    9384:	d0 90 50 03 	lds	r13, 0x0350	; 0x800350 <proximitySum+0x1>
    9388:	e0 90 51 03 	lds	r14, 0x0351	; 0x800351 <proximitySum+0x2>
    938c:	f0 90 52 03 	lds	r15, 0x0352	; 0x800352 <proximitySum+0x3>
    9390:	4c 0d       	add	r20, r12
    9392:	5d 1d       	adc	r21, r13
    9394:	6e 1d       	adc	r22, r14
    9396:	7f 1d       	adc	r23, r15
    9398:	40 93 4f 03 	sts	0x034F, r20	; 0x80034f <proximitySum>
    939c:	50 93 50 03 	sts	0x0350, r21	; 0x800350 <proximitySum+0x1>
    93a0:	60 93 51 03 	sts	0x0351, r22	; 0x800351 <proximitySum+0x2>
    93a4:	70 93 52 03 	sts	0x0352, r23	; 0x800352 <proximitySum+0x3>
    93a8:	40 91 99 03 	lds	r20, 0x0399	; 0x800399 <proximityResult+0x2>
    93ac:	50 91 9a 03 	lds	r21, 0x039A	; 0x80039a <proximityResult+0x3>
    93b0:	05 2e       	mov	r0, r21
    93b2:	00 0c       	add	r0, r0
    93b4:	66 0b       	sbc	r22, r22
    93b6:	77 0b       	sbc	r23, r23
    93b8:	c0 90 53 03 	lds	r12, 0x0353	; 0x800353 <proximitySum+0x4>
    93bc:	d0 90 54 03 	lds	r13, 0x0354	; 0x800354 <proximitySum+0x5>
    93c0:	e0 90 55 03 	lds	r14, 0x0355	; 0x800355 <proximitySum+0x6>
    93c4:	f0 90 56 03 	lds	r15, 0x0356	; 0x800356 <proximitySum+0x7>
    93c8:	4c 0d       	add	r20, r12
    93ca:	5d 1d       	adc	r21, r13
    93cc:	6e 1d       	adc	r22, r14
    93ce:	7f 1d       	adc	r23, r15
    93d0:	40 93 53 03 	sts	0x0353, r20	; 0x800353 <proximitySum+0x4>
    93d4:	50 93 54 03 	sts	0x0354, r21	; 0x800354 <proximitySum+0x5>
    93d8:	60 93 55 03 	sts	0x0355, r22	; 0x800355 <proximitySum+0x6>
    93dc:	70 93 56 03 	sts	0x0356, r23	; 0x800356 <proximitySum+0x7>
    93e0:	40 91 9b 03 	lds	r20, 0x039B	; 0x80039b <proximityResult+0x4>
    93e4:	50 91 9c 03 	lds	r21, 0x039C	; 0x80039c <proximityResult+0x5>
    93e8:	05 2e       	mov	r0, r21
    93ea:	00 0c       	add	r0, r0
    93ec:	66 0b       	sbc	r22, r22
    93ee:	77 0b       	sbc	r23, r23
    93f0:	c0 90 57 03 	lds	r12, 0x0357	; 0x800357 <proximitySum+0x8>
    93f4:	d0 90 58 03 	lds	r13, 0x0358	; 0x800358 <proximitySum+0x9>
    93f8:	e0 90 59 03 	lds	r14, 0x0359	; 0x800359 <proximitySum+0xa>
    93fc:	f0 90 5a 03 	lds	r15, 0x035A	; 0x80035a <proximitySum+0xb>
    9400:	4c 0d       	add	r20, r12
    9402:	5d 1d       	adc	r21, r13
    9404:	6e 1d       	adc	r22, r14
    9406:	7f 1d       	adc	r23, r15
    9408:	40 93 57 03 	sts	0x0357, r20	; 0x800357 <proximitySum+0x8>
    940c:	50 93 58 03 	sts	0x0358, r21	; 0x800358 <proximitySum+0x9>
    9410:	60 93 59 03 	sts	0x0359, r22	; 0x800359 <proximitySum+0xa>
    9414:	70 93 5a 03 	sts	0x035A, r23	; 0x80035a <proximitySum+0xb>
    9418:	40 91 9d 03 	lds	r20, 0x039D	; 0x80039d <proximityResult+0x6>
    941c:	50 91 9e 03 	lds	r21, 0x039E	; 0x80039e <proximityResult+0x7>
    9420:	05 2e       	mov	r0, r21
    9422:	00 0c       	add	r0, r0
    9424:	66 0b       	sbc	r22, r22
    9426:	77 0b       	sbc	r23, r23
    9428:	c0 90 5b 03 	lds	r12, 0x035B	; 0x80035b <proximitySum+0xc>
    942c:	d0 90 5c 03 	lds	r13, 0x035C	; 0x80035c <proximitySum+0xd>
    9430:	e0 90 5d 03 	lds	r14, 0x035D	; 0x80035d <proximitySum+0xe>
    9434:	f0 90 5e 03 	lds	r15, 0x035E	; 0x80035e <proximitySum+0xf>
    9438:	4c 0d       	add	r20, r12
    943a:	5d 1d       	adc	r21, r13
    943c:	6e 1d       	adc	r22, r14
    943e:	7f 1d       	adc	r23, r15
    9440:	40 93 5b 03 	sts	0x035B, r20	; 0x80035b <proximitySum+0xc>
    9444:	50 93 5c 03 	sts	0x035C, r21	; 0x80035c <proximitySum+0xd>
    9448:	60 93 5d 03 	sts	0x035D, r22	; 0x80035d <proximitySum+0xe>
    944c:	70 93 5e 03 	sts	0x035E, r23	; 0x80035e <proximitySum+0xf>
    9450:	40 91 9f 03 	lds	r20, 0x039F	; 0x80039f <proximityResult+0x8>
    9454:	50 91 a0 03 	lds	r21, 0x03A0	; 0x8003a0 <proximityResult+0x9>
    9458:	05 2e       	mov	r0, r21
    945a:	00 0c       	add	r0, r0
    945c:	66 0b       	sbc	r22, r22
    945e:	77 0b       	sbc	r23, r23
    9460:	c0 90 5f 03 	lds	r12, 0x035F	; 0x80035f <proximitySum+0x10>
    9464:	d0 90 60 03 	lds	r13, 0x0360	; 0x800360 <proximitySum+0x11>
    9468:	e0 90 61 03 	lds	r14, 0x0361	; 0x800361 <proximitySum+0x12>
    946c:	f0 90 62 03 	lds	r15, 0x0362	; 0x800362 <proximitySum+0x13>
    9470:	4c 0d       	add	r20, r12
    9472:	5d 1d       	adc	r21, r13
    9474:	6e 1d       	adc	r22, r14
    9476:	7f 1d       	adc	r23, r15
    9478:	40 93 5f 03 	sts	0x035F, r20	; 0x80035f <proximitySum+0x10>
    947c:	50 93 60 03 	sts	0x0360, r21	; 0x800360 <proximitySum+0x11>
    9480:	60 93 61 03 	sts	0x0361, r22	; 0x800361 <proximitySum+0x12>
    9484:	70 93 62 03 	sts	0x0362, r23	; 0x800362 <proximitySum+0x13>
    9488:	40 91 a1 03 	lds	r20, 0x03A1	; 0x8003a1 <proximityResult+0xa>
    948c:	50 91 a2 03 	lds	r21, 0x03A2	; 0x8003a2 <proximityResult+0xb>
    9490:	05 2e       	mov	r0, r21
    9492:	00 0c       	add	r0, r0
    9494:	66 0b       	sbc	r22, r22
    9496:	77 0b       	sbc	r23, r23
    9498:	c0 90 63 03 	lds	r12, 0x0363	; 0x800363 <proximitySum+0x14>
    949c:	d0 90 64 03 	lds	r13, 0x0364	; 0x800364 <proximitySum+0x15>
    94a0:	e0 90 65 03 	lds	r14, 0x0365	; 0x800365 <proximitySum+0x16>
    94a4:	f0 90 66 03 	lds	r15, 0x0366	; 0x800366 <proximitySum+0x17>
    94a8:	4c 0d       	add	r20, r12
    94aa:	5d 1d       	adc	r21, r13
    94ac:	6e 1d       	adc	r22, r14
    94ae:	7f 1d       	adc	r23, r15
    94b0:	40 93 63 03 	sts	0x0363, r20	; 0x800363 <proximitySum+0x14>
    94b4:	50 93 64 03 	sts	0x0364, r21	; 0x800364 <proximitySum+0x15>
    94b8:	60 93 65 03 	sts	0x0365, r22	; 0x800365 <proximitySum+0x16>
    94bc:	70 93 66 03 	sts	0x0366, r23	; 0x800366 <proximitySum+0x17>
    94c0:	40 91 a3 03 	lds	r20, 0x03A3	; 0x8003a3 <proximityResult+0xc>
    94c4:	50 91 a4 03 	lds	r21, 0x03A4	; 0x8003a4 <proximityResult+0xd>
    94c8:	05 2e       	mov	r0, r21
    94ca:	00 0c       	add	r0, r0
    94cc:	66 0b       	sbc	r22, r22
    94ce:	77 0b       	sbc	r23, r23
    94d0:	c0 90 67 03 	lds	r12, 0x0367	; 0x800367 <proximitySum+0x18>
    94d4:	d0 90 68 03 	lds	r13, 0x0368	; 0x800368 <proximitySum+0x19>
    94d8:	e0 90 69 03 	lds	r14, 0x0369	; 0x800369 <proximitySum+0x1a>
    94dc:	f0 90 6a 03 	lds	r15, 0x036A	; 0x80036a <proximitySum+0x1b>
    94e0:	4c 0d       	add	r20, r12
    94e2:	5d 1d       	adc	r21, r13
    94e4:	6e 1d       	adc	r22, r14
    94e6:	7f 1d       	adc	r23, r15
    94e8:	40 93 67 03 	sts	0x0367, r20	; 0x800367 <proximitySum+0x18>
    94ec:	50 93 68 03 	sts	0x0368, r21	; 0x800368 <proximitySum+0x19>
    94f0:	60 93 69 03 	sts	0x0369, r22	; 0x800369 <proximitySum+0x1a>
    94f4:	70 93 6a 03 	sts	0x036A, r23	; 0x80036a <proximitySum+0x1b>
    94f8:	40 91 a5 03 	lds	r20, 0x03A5	; 0x8003a5 <proximityResult+0xe>
    94fc:	50 91 a6 03 	lds	r21, 0x03A6	; 0x8003a6 <proximityResult+0xf>
    9500:	05 2e       	mov	r0, r21
    9502:	00 0c       	add	r0, r0
    9504:	66 0b       	sbc	r22, r22
    9506:	77 0b       	sbc	r23, r23
    9508:	c0 90 6b 03 	lds	r12, 0x036B	; 0x80036b <proximitySum+0x1c>
    950c:	d0 90 6c 03 	lds	r13, 0x036C	; 0x80036c <proximitySum+0x1d>
    9510:	e0 90 6d 03 	lds	r14, 0x036D	; 0x80036d <proximitySum+0x1e>
    9514:	f0 90 6e 03 	lds	r15, 0x036E	; 0x80036e <proximitySum+0x1f>
    9518:	4c 0d       	add	r20, r12
    951a:	5d 1d       	adc	r21, r13
    951c:	6e 1d       	adc	r22, r14
    951e:	7f 1d       	adc	r23, r15
    9520:	40 93 6b 03 	sts	0x036B, r20	; 0x80036b <proximitySum+0x1c>
    9524:	50 93 6c 03 	sts	0x036C, r21	; 0x80036c <proximitySum+0x1d>
    9528:	60 93 6d 03 	sts	0x036D, r22	; 0x80036d <proximitySum+0x1e>
    952c:	70 93 6e 03 	sts	0x036E, r23	; 0x80036e <proximitySum+0x1f>
    9530:	40 91 a7 03 	lds	r20, 0x03A7	; 0x8003a7 <proximityResult+0x10>
    9534:	50 91 a8 03 	lds	r21, 0x03A8	; 0x8003a8 <proximityResult+0x11>
    9538:	05 2e       	mov	r0, r21
    953a:	00 0c       	add	r0, r0
    953c:	66 0b       	sbc	r22, r22
    953e:	77 0b       	sbc	r23, r23
    9540:	c0 90 6f 03 	lds	r12, 0x036F	; 0x80036f <proximitySum+0x20>
    9544:	d0 90 70 03 	lds	r13, 0x0370	; 0x800370 <proximitySum+0x21>
    9548:	e0 90 71 03 	lds	r14, 0x0371	; 0x800371 <proximitySum+0x22>
    954c:	f0 90 72 03 	lds	r15, 0x0372	; 0x800372 <proximitySum+0x23>
    9550:	4c 0d       	add	r20, r12
    9552:	5d 1d       	adc	r21, r13
    9554:	6e 1d       	adc	r22, r14
    9556:	7f 1d       	adc	r23, r15
    9558:	40 93 6f 03 	sts	0x036F, r20	; 0x80036f <proximitySum+0x20>
    955c:	50 93 70 03 	sts	0x0370, r21	; 0x800370 <proximitySum+0x21>
    9560:	60 93 71 03 	sts	0x0371, r22	; 0x800371 <proximitySum+0x22>
    9564:	70 93 72 03 	sts	0x0372, r23	; 0x800372 <proximitySum+0x23>
    9568:	40 91 a9 03 	lds	r20, 0x03A9	; 0x8003a9 <proximityResult+0x12>
    956c:	50 91 aa 03 	lds	r21, 0x03AA	; 0x8003aa <proximityResult+0x13>
    9570:	05 2e       	mov	r0, r21
    9572:	00 0c       	add	r0, r0
    9574:	66 0b       	sbc	r22, r22
    9576:	77 0b       	sbc	r23, r23
    9578:	c0 90 73 03 	lds	r12, 0x0373	; 0x800373 <proximitySum+0x24>
    957c:	d0 90 74 03 	lds	r13, 0x0374	; 0x800374 <proximitySum+0x25>
    9580:	e0 90 75 03 	lds	r14, 0x0375	; 0x800375 <proximitySum+0x26>
    9584:	f0 90 76 03 	lds	r15, 0x0376	; 0x800376 <proximitySum+0x27>
    9588:	4c 0d       	add	r20, r12
    958a:	5d 1d       	adc	r21, r13
    958c:	6e 1d       	adc	r22, r14
    958e:	7f 1d       	adc	r23, r15
    9590:	40 93 73 03 	sts	0x0373, r20	; 0x800373 <proximitySum+0x24>
    9594:	50 93 74 03 	sts	0x0374, r21	; 0x800374 <proximitySum+0x25>
    9598:	60 93 75 03 	sts	0x0375, r22	; 0x800375 <proximitySum+0x26>
    959c:	70 93 76 03 	sts	0x0376, r23	; 0x800376 <proximitySum+0x27>
    95a0:	40 91 ab 03 	lds	r20, 0x03AB	; 0x8003ab <proximityResult+0x14>
    95a4:	50 91 ac 03 	lds	r21, 0x03AC	; 0x8003ac <proximityResult+0x15>
    95a8:	05 2e       	mov	r0, r21
    95aa:	00 0c       	add	r0, r0
    95ac:	66 0b       	sbc	r22, r22
    95ae:	77 0b       	sbc	r23, r23
    95b0:	c0 90 77 03 	lds	r12, 0x0377	; 0x800377 <proximitySum+0x28>
    95b4:	d0 90 78 03 	lds	r13, 0x0378	; 0x800378 <proximitySum+0x29>
    95b8:	e0 90 79 03 	lds	r14, 0x0379	; 0x800379 <proximitySum+0x2a>
    95bc:	f0 90 7a 03 	lds	r15, 0x037A	; 0x80037a <proximitySum+0x2b>
    95c0:	4c 0d       	add	r20, r12
    95c2:	5d 1d       	adc	r21, r13
    95c4:	6e 1d       	adc	r22, r14
    95c6:	7f 1d       	adc	r23, r15
    95c8:	40 93 77 03 	sts	0x0377, r20	; 0x800377 <proximitySum+0x28>
    95cc:	50 93 78 03 	sts	0x0378, r21	; 0x800378 <proximitySum+0x29>
    95d0:	60 93 79 03 	sts	0x0379, r22	; 0x800379 <proximitySum+0x2a>
    95d4:	70 93 7a 03 	sts	0x037A, r23	; 0x80037a <proximitySum+0x2b>
    95d8:	40 91 ad 03 	lds	r20, 0x03AD	; 0x8003ad <proximityResult+0x16>
    95dc:	50 91 ae 03 	lds	r21, 0x03AE	; 0x8003ae <proximityResult+0x17>
    95e0:	05 2e       	mov	r0, r21
    95e2:	00 0c       	add	r0, r0
    95e4:	66 0b       	sbc	r22, r22
    95e6:	77 0b       	sbc	r23, r23
    95e8:	c0 90 7b 03 	lds	r12, 0x037B	; 0x80037b <proximitySum+0x2c>
    95ec:	d0 90 7c 03 	lds	r13, 0x037C	; 0x80037c <proximitySum+0x2d>
    95f0:	e0 90 7d 03 	lds	r14, 0x037D	; 0x80037d <proximitySum+0x2e>
    95f4:	f0 90 7e 03 	lds	r15, 0x037E	; 0x80037e <proximitySum+0x2f>
    95f8:	4c 0d       	add	r20, r12
    95fa:	5d 1d       	adc	r21, r13
    95fc:	6e 1d       	adc	r22, r14
    95fe:	7f 1d       	adc	r23, r15
    9600:	40 93 7b 03 	sts	0x037B, r20	; 0x80037b <proximitySum+0x2c>
    9604:	50 93 7c 03 	sts	0x037C, r21	; 0x80037c <proximitySum+0x2d>
    9608:	60 93 7d 03 	sts	0x037D, r22	; 0x80037d <proximitySum+0x2e>
    960c:	70 93 7e 03 	sts	0x037E, r23	; 0x80037e <proximitySum+0x2f>
    9610:	01 96       	adiw	r24, 0x01	; 1
    9612:	90 93 cb 02 	sts	0x02CB, r25	; 0x8002cb <calibrationCycle+0x1>
    9616:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <calibrationCycle>
    961a:	20 91 5f 15 	lds	r18, 0x155F	; 0x80155f <startCalibration>
    961e:	70 cd       	rjmp	.-1312   	; 0x9100 <calibrateSensors+0x1b4>
    9620:	10 92 4f 03 	sts	0x034F, r1	; 0x80034f <proximitySum>
    9624:	10 92 50 03 	sts	0x0350, r1	; 0x800350 <proximitySum+0x1>
    9628:	10 92 51 03 	sts	0x0351, r1	; 0x800351 <proximitySum+0x2>
    962c:	10 92 52 03 	sts	0x0352, r1	; 0x800352 <proximitySum+0x3>
    9630:	10 92 80 03 	sts	0x0380, r1	; 0x800380 <proximityOffset+0x1>
    9634:	10 92 7f 03 	sts	0x037F, r1	; 0x80037f <proximityOffset>
    9638:	10 92 53 03 	sts	0x0353, r1	; 0x800353 <proximitySum+0x4>
    963c:	10 92 54 03 	sts	0x0354, r1	; 0x800354 <proximitySum+0x5>
    9640:	10 92 55 03 	sts	0x0355, r1	; 0x800355 <proximitySum+0x6>
    9644:	10 92 56 03 	sts	0x0356, r1	; 0x800356 <proximitySum+0x7>
    9648:	10 92 82 03 	sts	0x0382, r1	; 0x800382 <proximityOffset+0x3>
    964c:	10 92 81 03 	sts	0x0381, r1	; 0x800381 <proximityOffset+0x2>
    9650:	10 92 57 03 	sts	0x0357, r1	; 0x800357 <proximitySum+0x8>
    9654:	10 92 58 03 	sts	0x0358, r1	; 0x800358 <proximitySum+0x9>
    9658:	10 92 59 03 	sts	0x0359, r1	; 0x800359 <proximitySum+0xa>
    965c:	10 92 5a 03 	sts	0x035A, r1	; 0x80035a <proximitySum+0xb>
    9660:	10 92 84 03 	sts	0x0384, r1	; 0x800384 <proximityOffset+0x5>
    9664:	10 92 83 03 	sts	0x0383, r1	; 0x800383 <proximityOffset+0x4>
    9668:	10 92 5b 03 	sts	0x035B, r1	; 0x80035b <proximitySum+0xc>
    966c:	10 92 5c 03 	sts	0x035C, r1	; 0x80035c <proximitySum+0xd>
    9670:	10 92 5d 03 	sts	0x035D, r1	; 0x80035d <proximitySum+0xe>
    9674:	10 92 5e 03 	sts	0x035E, r1	; 0x80035e <proximitySum+0xf>
    9678:	10 92 86 03 	sts	0x0386, r1	; 0x800386 <proximityOffset+0x7>
    967c:	10 92 85 03 	sts	0x0385, r1	; 0x800385 <proximityOffset+0x6>
    9680:	10 92 5f 03 	sts	0x035F, r1	; 0x80035f <proximitySum+0x10>
    9684:	10 92 60 03 	sts	0x0360, r1	; 0x800360 <proximitySum+0x11>
    9688:	10 92 61 03 	sts	0x0361, r1	; 0x800361 <proximitySum+0x12>
    968c:	10 92 62 03 	sts	0x0362, r1	; 0x800362 <proximitySum+0x13>
    9690:	10 92 88 03 	sts	0x0388, r1	; 0x800388 <proximityOffset+0x9>
    9694:	10 92 87 03 	sts	0x0387, r1	; 0x800387 <proximityOffset+0x8>
    9698:	10 92 63 03 	sts	0x0363, r1	; 0x800363 <proximitySum+0x14>
    969c:	10 92 64 03 	sts	0x0364, r1	; 0x800364 <proximitySum+0x15>
    96a0:	10 92 65 03 	sts	0x0365, r1	; 0x800365 <proximitySum+0x16>
    96a4:	10 92 66 03 	sts	0x0366, r1	; 0x800366 <proximitySum+0x17>
    96a8:	10 92 8a 03 	sts	0x038A, r1	; 0x80038a <proximityOffset+0xb>
    96ac:	10 92 89 03 	sts	0x0389, r1	; 0x800389 <proximityOffset+0xa>
    96b0:	10 92 67 03 	sts	0x0367, r1	; 0x800367 <proximitySum+0x18>
    96b4:	10 92 68 03 	sts	0x0368, r1	; 0x800368 <proximitySum+0x19>
    96b8:	10 92 69 03 	sts	0x0369, r1	; 0x800369 <proximitySum+0x1a>
    96bc:	10 92 6a 03 	sts	0x036A, r1	; 0x80036a <proximitySum+0x1b>
    96c0:	10 92 8c 03 	sts	0x038C, r1	; 0x80038c <proximityOffset+0xd>
    96c4:	10 92 8b 03 	sts	0x038B, r1	; 0x80038b <proximityOffset+0xc>
    96c8:	10 92 6b 03 	sts	0x036B, r1	; 0x80036b <proximitySum+0x1c>
    96cc:	10 92 6c 03 	sts	0x036C, r1	; 0x80036c <proximitySum+0x1d>
    96d0:	10 92 6d 03 	sts	0x036D, r1	; 0x80036d <proximitySum+0x1e>
    96d4:	10 92 6e 03 	sts	0x036E, r1	; 0x80036e <proximitySum+0x1f>
    96d8:	10 92 8e 03 	sts	0x038E, r1	; 0x80038e <proximityOffset+0xf>
    96dc:	10 92 8d 03 	sts	0x038D, r1	; 0x80038d <proximityOffset+0xe>
    96e0:	10 92 6f 03 	sts	0x036F, r1	; 0x80036f <proximitySum+0x20>
    96e4:	10 92 70 03 	sts	0x0370, r1	; 0x800370 <proximitySum+0x21>
    96e8:	10 92 71 03 	sts	0x0371, r1	; 0x800371 <proximitySum+0x22>
    96ec:	10 92 72 03 	sts	0x0372, r1	; 0x800372 <proximitySum+0x23>
    96f0:	10 92 90 03 	sts	0x0390, r1	; 0x800390 <proximityOffset+0x11>
    96f4:	10 92 8f 03 	sts	0x038F, r1	; 0x80038f <proximityOffset+0x10>
    96f8:	10 92 73 03 	sts	0x0373, r1	; 0x800373 <proximitySum+0x24>
    96fc:	10 92 74 03 	sts	0x0374, r1	; 0x800374 <proximitySum+0x25>
    9700:	10 92 75 03 	sts	0x0375, r1	; 0x800375 <proximitySum+0x26>
    9704:	10 92 76 03 	sts	0x0376, r1	; 0x800376 <proximitySum+0x27>
    9708:	10 92 92 03 	sts	0x0392, r1	; 0x800392 <proximityOffset+0x13>
    970c:	10 92 91 03 	sts	0x0391, r1	; 0x800391 <proximityOffset+0x12>
    9710:	10 92 77 03 	sts	0x0377, r1	; 0x800377 <proximitySum+0x28>
    9714:	10 92 78 03 	sts	0x0378, r1	; 0x800378 <proximitySum+0x29>
    9718:	10 92 79 03 	sts	0x0379, r1	; 0x800379 <proximitySum+0x2a>
    971c:	10 92 7a 03 	sts	0x037A, r1	; 0x80037a <proximitySum+0x2b>
    9720:	10 92 94 03 	sts	0x0394, r1	; 0x800394 <proximityOffset+0x15>
    9724:	10 92 93 03 	sts	0x0393, r1	; 0x800393 <proximityOffset+0x14>
    9728:	10 92 7b 03 	sts	0x037B, r1	; 0x80037b <proximitySum+0x2c>
    972c:	10 92 7c 03 	sts	0x037C, r1	; 0x80037c <proximitySum+0x2d>
    9730:	10 92 7d 03 	sts	0x037D, r1	; 0x80037d <proximitySum+0x2e>
    9734:	10 92 7e 03 	sts	0x037E, r1	; 0x80037e <proximitySum+0x2f>
    9738:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <proximityOffset+0x17>
    973c:	10 92 95 03 	sts	0x0395, r1	; 0x800395 <proximityOffset+0x16>
    9740:	10 93 cb 02 	sts	0x02CB, r17	; 0x8002cb <calibrationCycle+0x1>
    9744:	00 93 ca 02 	sts	0x02CA, r16	; 0x8002ca <calibrationCycle>
    9748:	20 91 5f 15 	lds	r18, 0x155F	; 0x80155f <startCalibration>
    974c:	d9 cc       	rjmp	.-1614   	; 0x9100 <calibrateSensors+0x1b4>
    974e:	8f ef       	ldi	r24, 0xFF	; 255
    9750:	80 93 0f 02 	sts	0x020F, r24	; 0x80020f <pwm_red>
    9754:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <pwm_green>
    9758:	80 93 0d 02 	sts	0x020D, r24	; 0x80020d <pwm_blue>
    975c:	0e 94 0e 46 	call	0x8c1c	; 0x8c1c <updateRedLed>
    9760:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <pwm_green>
    9764:	0e 94 22 46 	call	0x8c44	; 0x8c44 <updateGreenLed>
    9768:	80 91 0d 02 	lds	r24, 0x020D	; 0x80020d <pwm_blue>
    976c:	0e 94 36 46 	call	0x8c6c	; 0x8c6c <updateBlueLed>
    9770:	86 ef       	ldi	r24, 0xF6	; 246
    9772:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <setLeftSpeed>
    9776:	8a e0       	ldi	r24, 0x0A	; 10
    9778:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <setRightSpeed>
    977c:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    9780:	60 93 b6 02 	sts	0x02B6, r22	; 0x8002b6 <lastTick>
    9784:	70 93 b7 02 	sts	0x02B7, r23	; 0x8002b7 <lastTick+0x1>
    9788:	80 93 b8 02 	sts	0x02B8, r24	; 0x8002b8 <lastTick+0x2>
    978c:	90 93 b9 02 	sts	0x02B9, r25	; 0x8002b9 <lastTick+0x3>
    9790:	3d c0       	rjmp	.+122    	; 0x980c <calibrateSensors+0x8c0>
    9792:	80 91 e9 02 	lds	r24, 0x02E9	; 0x8002e9 <accX>
    9796:	90 91 ea 02 	lds	r25, 0x02EA	; 0x8002ea <accX+0x1>
    979a:	20 91 db 02 	lds	r18, 0x02DB	; 0x8002db <accXMax>
    979e:	30 91 dc 02 	lds	r19, 0x02DC	; 0x8002dc <accXMax+0x1>
    97a2:	28 17       	cp	r18, r24
    97a4:	39 07       	cpc	r19, r25
    97a6:	24 f4       	brge	.+8      	; 0x97b0 <calibrateSensors+0x864>
    97a8:	90 93 dc 02 	sts	0x02DC, r25	; 0x8002dc <accXMax+0x1>
    97ac:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <accXMax>
    97b0:	20 91 d9 02 	lds	r18, 0x02D9	; 0x8002d9 <accXMin>
    97b4:	30 91 da 02 	lds	r19, 0x02DA	; 0x8002da <accXMin+0x1>
    97b8:	82 17       	cp	r24, r18
    97ba:	93 07       	cpc	r25, r19
    97bc:	24 f4       	brge	.+8      	; 0x97c6 <calibrateSensors+0x87a>
    97be:	90 93 da 02 	sts	0x02DA, r25	; 0x8002da <accXMin+0x1>
    97c2:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <accXMin>
    97c6:	80 91 e7 02 	lds	r24, 0x02E7	; 0x8002e7 <accY>
    97ca:	90 91 e8 02 	lds	r25, 0x02E8	; 0x8002e8 <accY+0x1>
    97ce:	20 91 d7 02 	lds	r18, 0x02D7	; 0x8002d7 <accYMax>
    97d2:	30 91 d8 02 	lds	r19, 0x02D8	; 0x8002d8 <accYMax+0x1>
    97d6:	28 17       	cp	r18, r24
    97d8:	39 07       	cpc	r19, r25
    97da:	24 f4       	brge	.+8      	; 0x97e4 <calibrateSensors+0x898>
    97dc:	90 93 d8 02 	sts	0x02D8, r25	; 0x8002d8 <accYMax+0x1>
    97e0:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <accYMax>
    97e4:	20 91 d5 02 	lds	r18, 0x02D5	; 0x8002d5 <accYMin>
    97e8:	30 91 d6 02 	lds	r19, 0x02D6	; 0x8002d6 <accYMin+0x1>
    97ec:	82 17       	cp	r24, r18
    97ee:	93 07       	cpc	r25, r19
    97f0:	24 f4       	brge	.+8      	; 0x97fa <calibrateSensors+0x8ae>
    97f2:	90 93 d6 02 	sts	0x02D6, r25	; 0x8002d6 <accYMin+0x1>
    97f6:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <accYMin>
    97fa:	80 91 ca 02 	lds	r24, 0x02CA	; 0x8002ca <calibrationCycle>
    97fe:	90 91 cb 02 	lds	r25, 0x02CB	; 0x8002cb <calibrationCycle+0x1>
    9802:	01 96       	adiw	r24, 0x01	; 1
    9804:	90 93 cb 02 	sts	0x02CB, r25	; 0x8002cb <calibrationCycle+0x1>
    9808:	80 93 ca 02 	sts	0x02CA, r24	; 0x8002ca <calibrationCycle>
    980c:	0e 94 91 46 	call	0x8d22	; 0x8d22 <readAccelXYZ>
    9810:	0e 94 2a 3b 	call	0x7654	; 0x7654 <handleMotorsWithSpeedController>
    9814:	0e 94 54 25 	call	0x4aa8	; 0x4aa8 <getTime100MicroSec>
    9818:	00 91 b6 02 	lds	r16, 0x02B6	; 0x8002b6 <lastTick>
    981c:	10 91 b7 02 	lds	r17, 0x02B7	; 0x8002b7 <lastTick+0x1>
    9820:	20 91 b8 02 	lds	r18, 0x02B8	; 0x8002b8 <lastTick+0x2>
    9824:	30 91 b9 02 	lds	r19, 0x02B9	; 0x8002b9 <lastTick+0x3>
    9828:	dc 01       	movw	r26, r24
    982a:	cb 01       	movw	r24, r22
    982c:	80 1b       	sub	r24, r16
    982e:	91 0b       	sbc	r25, r17
    9830:	a2 0b       	sbc	r26, r18
    9832:	b3 0b       	sbc	r27, r19
    9834:	8e 33       	cpi	r24, 0x3E	; 62
    9836:	96 49       	sbci	r25, 0x96	; 150
    9838:	a1 05       	cpc	r26, r1
    983a:	b1 05       	cpc	r27, r1
    983c:	08 f4       	brcc	.+2      	; 0x9840 <calibrateSensors+0x8f4>
    983e:	a9 cf       	rjmp	.-174    	; 0x9792 <calibrateSensors+0x846>
    9840:	20 91 db 02 	lds	r18, 0x02DB	; 0x8002db <accXMax>
    9844:	30 91 dc 02 	lds	r19, 0x02DC	; 0x8002dc <accXMax+0x1>
    9848:	80 91 d9 02 	lds	r24, 0x02D9	; 0x8002d9 <accXMin>
    984c:	90 91 da 02 	lds	r25, 0x02DA	; 0x8002da <accXMin+0x1>
    9850:	82 0f       	add	r24, r18
    9852:	93 1f       	adc	r25, r19
    9854:	95 95       	asr	r25
    9856:	87 95       	ror	r24
    9858:	90 93 e4 02 	sts	0x02E4, r25	; 0x8002e4 <accOffsetX+0x1>
    985c:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <accOffsetX>
    9860:	20 91 d7 02 	lds	r18, 0x02D7	; 0x8002d7 <accYMax>
    9864:	30 91 d8 02 	lds	r19, 0x02D8	; 0x8002d8 <accYMax+0x1>
    9868:	80 91 d5 02 	lds	r24, 0x02D5	; 0x8002d5 <accYMin>
    986c:	90 91 d6 02 	lds	r25, 0x02D6	; 0x8002d6 <accYMin+0x1>
    9870:	82 0f       	add	r24, r18
    9872:	93 1f       	adc	r25, r19
    9874:	95 95       	asr	r25
    9876:	87 95       	ror	r24
    9878:	90 93 e2 02 	sts	0x02E2, r25	; 0x8002e2 <accOffsetY+0x1>
    987c:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <accOffsetY>
    9880:	80 e0       	ldi	r24, 0x00	; 0
    9882:	0e 94 13 2e 	call	0x5c26	; 0x5c26 <setLeftSpeed>
    9886:	80 e0       	ldi	r24, 0x00	; 0
    9888:	0e 94 30 2e 	call	0x5c60	; 0x5c60 <setRightSpeed>
    988c:	2a cc       	rjmp	.-1964   	; 0x90e2 <calibrateSensors+0x196>
    988e:	91 95       	neg	r25
    9890:	81 95       	neg	r24
    9892:	91 09       	sbc	r25, r1
    9894:	be cb       	rjmp	.-2180   	; 0x9012 <calibrateSensors+0xc6>

00009896 <computeAngle>:

	}

}

void computeAngle() {
    9896:	cf 92       	push	r12
    9898:	df 92       	push	r13
    989a:	ef 92       	push	r14
    989c:	ff 92       	push	r15

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	if(abs(accZ) >= VERTICAL_THRESHOLD) {
    989e:	80 91 e5 02 	lds	r24, 0x02E5	; 0x8002e5 <accZ>
    98a2:	90 91 e6 02 	lds	r25, 0x02E6	; 0x8002e6 <accZ+0x1>
    98a6:	97 fd       	sbrc	r25, 7
    98a8:	63 c0       	rjmp	.+198    	; 0x9970 <computeAngle+0xda>
    98aa:	8d 97       	sbiw	r24, 0x2d	; 45
    98ac:	0c f4       	brge	.+2      	; 0x98b0 <computeAngle+0x1a>
    98ae:	4d c0       	rjmp	.+154    	; 0x994a <computeAngle+0xb4>
		currPosition = HORIZONTAL_POS;
    98b0:	81 e0       	ldi	r24, 0x01	; 1
    98b2:	80 93 09 02 	sts	0x0209, r24	; 0x800209 <currPosition>
    98b6:	21 e0       	ldi	r18, 0x01	; 1
	} else {
		currPosition = VERTICAL_POS;	
	}
	if(currPosition != robotPosition) {			
    98b8:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <robotPosition>
    98bc:	82 17       	cp	r24, r18
    98be:	09 f4       	brne	.+2      	; 0x98c2 <computeAngle+0x2c>
    98c0:	4b c0       	rjmp	.+150    	; 0x9958 <computeAngle+0xc2>
		timesInSamePos++;
    98c2:	80 91 d1 02 	lds	r24, 0x02D1	; 0x8002d1 <timesInSamePos>
    98c6:	90 91 d2 02 	lds	r25, 0x02D2	; 0x8002d2 <timesInSamePos+0x1>
    98ca:	01 96       	adiw	r24, 0x01	; 1
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
    98cc:	88 3c       	cpi	r24, 0xC8	; 200
    98ce:	91 05       	cpc	r25, r1
    98d0:	08 f0       	brcs	.+2      	; 0x98d4 <computeAngle+0x3e>
    98d2:	47 c0       	rjmp	.+142    	; 0x9962 <computeAngle+0xcc>
		currPosition = HORIZONTAL_POS;
	} else {
		currPosition = VERTICAL_POS;	
	}
	if(currPosition != robotPosition) {			
		timesInSamePos++;
    98d4:	90 93 d2 02 	sts	0x02D2, r25	; 0x8002d2 <timesInSamePos+0x1>
    98d8:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <timesInSamePos>
	} else {
		timesInSamePos = 0;
	}

	// compute the angle using the X and Y axis
	thetaAcc = atan2((float)accX, (float)accY);
    98dc:	60 91 e7 02 	lds	r22, 0x02E7	; 0x8002e7 <accY>
    98e0:	70 91 e8 02 	lds	r23, 0x02E8	; 0x8002e8 <accY+0x1>
    98e4:	07 2e       	mov	r0, r23
    98e6:	00 0c       	add	r0, r0
    98e8:	88 0b       	sbc	r24, r24
    98ea:	99 0b       	sbc	r25, r25
    98ec:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    98f0:	6b 01       	movw	r12, r22
    98f2:	7c 01       	movw	r14, r24
    98f4:	60 91 e9 02 	lds	r22, 0x02E9	; 0x8002e9 <accX>
    98f8:	70 91 ea 02 	lds	r23, 0x02EA	; 0x8002ea <accX+0x1>
    98fc:	07 2e       	mov	r0, r23
    98fe:	00 0c       	add	r0, r0
    9900:	88 0b       	sbc	r24, r24
    9902:	99 0b       	sbc	r25, r25
    9904:	0e 94 a7 4e 	call	0x9d4e	; 0x9d4e <__floatsisf>
    9908:	a7 01       	movw	r20, r14
    990a:	96 01       	movw	r18, r12
    990c:	0e 94 5a 4d 	call	0x9ab4	; 0x9ab4 <atan2>
    9910:	60 93 8a 02 	sts	0x028A, r22	; 0x80028a <thetaAcc>
    9914:	70 93 8b 02 	sts	0x028B, r23	; 0x80028b <thetaAcc+0x1>
    9918:	80 93 8c 02 	sts	0x028C, r24	; 0x80028c <thetaAcc+0x2>
    991c:	90 93 8d 02 	sts	0x028D, r25	; 0x80028d <thetaAcc+0x3>
	currentAngle = (signed int)(thetaAcc*RAD_2_DEG);
    9920:	21 ee       	ldi	r18, 0xE1	; 225
    9922:	3e e2       	ldi	r19, 0x2E	; 46
    9924:	45 e6       	ldi	r20, 0x65	; 101
    9926:	52 e4       	ldi	r21, 0x42	; 66
    9928:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    992c:	0e 94 6f 4e 	call	0x9cde	; 0x9cde <__fixsfsi>

	if(currentAngle < 0) {
    9930:	77 ff       	sbrs	r23, 7
    9932:	02 c0       	rjmp	.+4      	; 0x9938 <computeAngle+0xa2>
		currentAngle = currentAngle + (signed int)360;	// angles from 0 to 360
    9934:	68 59       	subi	r22, 0x98	; 152
    9936:	7e 4f       	sbci	r23, 0xFE	; 254
    9938:	70 93 d4 02 	sts	0x02D4, r23	; 0x8002d4 <currentAngle+0x1>
    993c:	60 93 d3 02 	sts	0x02D3, r22	; 0x8002d3 <currentAngle>
	}

}
    9940:	ff 90       	pop	r15
    9942:	ef 90       	pop	r14
    9944:	df 90       	pop	r13
    9946:	cf 90       	pop	r12
    9948:	08 95       	ret

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	if(abs(accZ) >= VERTICAL_THRESHOLD) {
		currPosition = HORIZONTAL_POS;
	} else {
		currPosition = VERTICAL_POS;	
    994a:	10 92 09 02 	sts	0x0209, r1	; 0x800209 <currPosition>
    994e:	20 e0       	ldi	r18, 0x00	; 0
	}
	if(currPosition != robotPosition) {			
    9950:	80 91 08 02 	lds	r24, 0x0208	; 0x800208 <robotPosition>
    9954:	82 13       	cpse	r24, r18
    9956:	b5 cf       	rjmp	.-150    	; 0x98c2 <computeAngle+0x2c>
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
			robotPosition = currPosition;
		}
	} else {
		timesInSamePos = 0;
    9958:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <timesInSamePos+0x1>
    995c:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <timesInSamePos>
    9960:	bd cf       	rjmp	.-134    	; 0x98dc <computeAngle+0x46>
		currPosition = VERTICAL_POS;	
	}
	if(currPosition != robotPosition) {			
		timesInSamePos++;
		if(timesInSamePos >= SAME_POS_NUM) {	// if the robot maintains its position for a while, then update the robot position;
			timesInSamePos = 0;					// this check avoid to pass from one position to the other too fast when near the threshold
    9962:	10 92 d2 02 	sts	0x02D2, r1	; 0x8002d2 <timesInSamePos+0x1>
    9966:	10 92 d1 02 	sts	0x02D1, r1	; 0x8002d1 <timesInSamePos>
			robotPosition = currPosition;
    996a:	20 93 08 02 	sts	0x0208, r18	; 0x800208 <robotPosition>
    996e:	b6 cf       	rjmp	.-148    	; 0x98dc <computeAngle+0x46>
}

void computeAngle() {

	// check the robot motion plane (horizontal or vertical) based on the Z axes;
	if(abs(accZ) >= VERTICAL_THRESHOLD) {
    9970:	91 95       	neg	r25
    9972:	81 95       	neg	r24
    9974:	91 09       	sbc	r25, r1
    9976:	99 cf       	rjmp	.-206    	; 0x98aa <computeAngle+0x14>

00009978 <writeCalibrationToFlash>:


#include "eepromIO.h"

void writeCalibrationToFlash() {	
	eeprom_update_block(calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
    9978:	40 e9       	ldi	r20, 0x90	; 144
    997a:	50 e0       	ldi	r21, 0x00	; 0
    997c:	6c e6       	ldi	r22, 0x6C	; 108
    997e:	7f e0       	ldi	r23, 0x0F	; 15
    9980:	87 ec       	ldi	r24, 0xC7	; 199
    9982:	92 e1       	ldi	r25, 0x12	; 18
    9984:	0e 94 43 52 	call	0xa486	; 0xa486 <eeprom_update_block>
	eeprom_update_word ((uint16_t*) CALIB_CHECK_ADDRESS, 0xAA55);   // to let know the calibration data are valid
    9988:	65 e5       	ldi	r22, 0x55	; 85
    998a:	7a ea       	ldi	r23, 0xAA	; 170
    998c:	8a e6       	ldi	r24, 0x6A	; 106
    998e:	9f e0       	ldi	r25, 0x0F	; 15
    9990:	0c 94 65 52 	jmp	0xa4ca	; 0xa4ca <eeprom_update_word>

00009994 <readCalibrationFromFlash>:
}

void readCalibrationFromFlash() {
	eeprom_read_block (calibration, (uint8_t*) CALIB_DATA_START_ADDR, 144);
    9994:	40 e9       	ldi	r20, 0x90	; 144
    9996:	50 e0       	ldi	r21, 0x00	; 0
    9998:	6c e6       	ldi	r22, 0x6C	; 108
    999a:	7f e0       	ldi	r23, 0x0F	; 15
    999c:	87 ec       	ldi	r24, 0xC7	; 199
    999e:	92 e1       	ldi	r25, 0x12	; 18
    99a0:	0c 94 25 52 	jmp	0xa44a	; 0xa44a <eeprom_read_block>

000099a4 <irCommInitReceiver>:
	irCommEnabled = IRCOMM_MODE_TRANSMIT;
	irCommState = IRCOMM_TX_IDLE_STATE;
}

void irCommInitReceiver() {
	irCommEnabled = IRCOMM_MODE_RECEIVE;
    99a4:	81 e0       	ldi	r24, 0x01	; 1
    99a6:	80 93 67 02 	sts	0x0267, r24	; 0x800267 <irCommEnabled>
	irCommState = IRCOMM_RX_IDLE_STATE;
    99aa:	80 93 64 02 	sts	0x0264, r24	; 0x800264 <irCommState>
	irCommEnabledNext = IRCOMM_MODE_RECEIVE;
    99ae:	80 93 66 02 	sts	0x0266, r24	; 0x800266 <irCommEnabledNext>
    99b2:	08 95       	ret

000099b4 <__subsf3>:
    99b4:	50 58       	subi	r21, 0x80	; 128

000099b6 <__addsf3>:
    99b6:	bb 27       	eor	r27, r27
    99b8:	aa 27       	eor	r26, r26
    99ba:	0e 94 f2 4c 	call	0x99e4	; 0x99e4 <__addsf3x>
    99be:	0c 94 6f 4f 	jmp	0x9ede	; 0x9ede <__fp_round>
    99c2:	0e 94 36 4f 	call	0x9e6c	; 0x9e6c <__fp_pscA>
    99c6:	38 f0       	brcs	.+14     	; 0x99d6 <__addsf3+0x20>
    99c8:	0e 94 3d 4f 	call	0x9e7a	; 0x9e7a <__fp_pscB>
    99cc:	20 f0       	brcs	.+8      	; 0x99d6 <__addsf3+0x20>
    99ce:	39 f4       	brne	.+14     	; 0x99de <__addsf3+0x28>
    99d0:	9f 3f       	cpi	r25, 0xFF	; 255
    99d2:	19 f4       	brne	.+6      	; 0x99da <__addsf3+0x24>
    99d4:	26 f4       	brtc	.+8      	; 0x99de <__addsf3+0x28>
    99d6:	0c 94 0c 4f 	jmp	0x9e18	; 0x9e18 <__fp_nan>
    99da:	0e f4       	brtc	.+2      	; 0x99de <__addsf3+0x28>
    99dc:	e0 95       	com	r30
    99de:	e7 fb       	bst	r30, 7
    99e0:	0c 94 06 4f 	jmp	0x9e0c	; 0x9e0c <__fp_inf>

000099e4 <__addsf3x>:
    99e4:	e9 2f       	mov	r30, r25
    99e6:	0e 94 94 4f 	call	0x9f28	; 0x9f28 <__fp_split3>
    99ea:	58 f3       	brcs	.-42     	; 0x99c2 <__addsf3+0xc>
    99ec:	ba 17       	cp	r27, r26
    99ee:	62 07       	cpc	r22, r18
    99f0:	73 07       	cpc	r23, r19
    99f2:	84 07       	cpc	r24, r20
    99f4:	95 07       	cpc	r25, r21
    99f6:	20 f0       	brcs	.+8      	; 0x9a00 <__addsf3x+0x1c>
    99f8:	79 f4       	brne	.+30     	; 0x9a18 <__addsf3x+0x34>
    99fa:	a6 f5       	brtc	.+104    	; 0x9a64 <__addsf3x+0x80>
    99fc:	0c 94 b6 4f 	jmp	0x9f6c	; 0x9f6c <__fp_zero>
    9a00:	0e f4       	brtc	.+2      	; 0x9a04 <__addsf3x+0x20>
    9a02:	e0 95       	com	r30
    9a04:	0b 2e       	mov	r0, r27
    9a06:	ba 2f       	mov	r27, r26
    9a08:	a0 2d       	mov	r26, r0
    9a0a:	0b 01       	movw	r0, r22
    9a0c:	b9 01       	movw	r22, r18
    9a0e:	90 01       	movw	r18, r0
    9a10:	0c 01       	movw	r0, r24
    9a12:	ca 01       	movw	r24, r20
    9a14:	a0 01       	movw	r20, r0
    9a16:	11 24       	eor	r1, r1
    9a18:	ff 27       	eor	r31, r31
    9a1a:	59 1b       	sub	r21, r25
    9a1c:	99 f0       	breq	.+38     	; 0x9a44 <__addsf3x+0x60>
    9a1e:	59 3f       	cpi	r21, 0xF9	; 249
    9a20:	50 f4       	brcc	.+20     	; 0x9a36 <__addsf3x+0x52>
    9a22:	50 3e       	cpi	r21, 0xE0	; 224
    9a24:	68 f1       	brcs	.+90     	; 0x9a80 <__addsf3x+0x9c>
    9a26:	1a 16       	cp	r1, r26
    9a28:	f0 40       	sbci	r31, 0x00	; 0
    9a2a:	a2 2f       	mov	r26, r18
    9a2c:	23 2f       	mov	r18, r19
    9a2e:	34 2f       	mov	r19, r20
    9a30:	44 27       	eor	r20, r20
    9a32:	58 5f       	subi	r21, 0xF8	; 248
    9a34:	f3 cf       	rjmp	.-26     	; 0x9a1c <__addsf3x+0x38>
    9a36:	46 95       	lsr	r20
    9a38:	37 95       	ror	r19
    9a3a:	27 95       	ror	r18
    9a3c:	a7 95       	ror	r26
    9a3e:	f0 40       	sbci	r31, 0x00	; 0
    9a40:	53 95       	inc	r21
    9a42:	c9 f7       	brne	.-14     	; 0x9a36 <__addsf3x+0x52>
    9a44:	7e f4       	brtc	.+30     	; 0x9a64 <__addsf3x+0x80>
    9a46:	1f 16       	cp	r1, r31
    9a48:	ba 0b       	sbc	r27, r26
    9a4a:	62 0b       	sbc	r22, r18
    9a4c:	73 0b       	sbc	r23, r19
    9a4e:	84 0b       	sbc	r24, r20
    9a50:	ba f0       	brmi	.+46     	; 0x9a80 <__addsf3x+0x9c>
    9a52:	91 50       	subi	r25, 0x01	; 1
    9a54:	a1 f0       	breq	.+40     	; 0x9a7e <__addsf3x+0x9a>
    9a56:	ff 0f       	add	r31, r31
    9a58:	bb 1f       	adc	r27, r27
    9a5a:	66 1f       	adc	r22, r22
    9a5c:	77 1f       	adc	r23, r23
    9a5e:	88 1f       	adc	r24, r24
    9a60:	c2 f7       	brpl	.-16     	; 0x9a52 <__addsf3x+0x6e>
    9a62:	0e c0       	rjmp	.+28     	; 0x9a80 <__addsf3x+0x9c>
    9a64:	ba 0f       	add	r27, r26
    9a66:	62 1f       	adc	r22, r18
    9a68:	73 1f       	adc	r23, r19
    9a6a:	84 1f       	adc	r24, r20
    9a6c:	48 f4       	brcc	.+18     	; 0x9a80 <__addsf3x+0x9c>
    9a6e:	87 95       	ror	r24
    9a70:	77 95       	ror	r23
    9a72:	67 95       	ror	r22
    9a74:	b7 95       	ror	r27
    9a76:	f7 95       	ror	r31
    9a78:	9e 3f       	cpi	r25, 0xFE	; 254
    9a7a:	08 f0       	brcs	.+2      	; 0x9a7e <__addsf3x+0x9a>
    9a7c:	b0 cf       	rjmp	.-160    	; 0x99de <__addsf3+0x28>
    9a7e:	93 95       	inc	r25
    9a80:	88 0f       	add	r24, r24
    9a82:	08 f0       	brcs	.+2      	; 0x9a86 <__addsf3x+0xa2>
    9a84:	99 27       	eor	r25, r25
    9a86:	ee 0f       	add	r30, r30
    9a88:	97 95       	ror	r25
    9a8a:	87 95       	ror	r24
    9a8c:	08 95       	ret
    9a8e:	0e 94 36 4f 	call	0x9e6c	; 0x9e6c <__fp_pscA>
    9a92:	60 f0       	brcs	.+24     	; 0x9aac <__addsf3x+0xc8>
    9a94:	80 e8       	ldi	r24, 0x80	; 128
    9a96:	91 e0       	ldi	r25, 0x01	; 1
    9a98:	09 f4       	brne	.+2      	; 0x9a9c <__addsf3x+0xb8>
    9a9a:	9e ef       	ldi	r25, 0xFE	; 254
    9a9c:	0e 94 3d 4f 	call	0x9e7a	; 0x9e7a <__fp_pscB>
    9aa0:	28 f0       	brcs	.+10     	; 0x9aac <__addsf3x+0xc8>
    9aa2:	40 e8       	ldi	r20, 0x80	; 128
    9aa4:	51 e0       	ldi	r21, 0x01	; 1
    9aa6:	71 f4       	brne	.+28     	; 0x9ac4 <atan2+0x10>
    9aa8:	5e ef       	ldi	r21, 0xFE	; 254
    9aaa:	0c c0       	rjmp	.+24     	; 0x9ac4 <atan2+0x10>
    9aac:	0c 94 0c 4f 	jmp	0x9e18	; 0x9e18 <__fp_nan>
    9ab0:	0c 94 b6 4f 	jmp	0x9f6c	; 0x9f6c <__fp_zero>

00009ab4 <atan2>:
    9ab4:	e9 2f       	mov	r30, r25
    9ab6:	e0 78       	andi	r30, 0x80	; 128
    9ab8:	0e 94 94 4f 	call	0x9f28	; 0x9f28 <__fp_split3>
    9abc:	40 f3       	brcs	.-48     	; 0x9a8e <__addsf3x+0xaa>
    9abe:	09 2e       	mov	r0, r25
    9ac0:	05 2a       	or	r0, r21
    9ac2:	b1 f3       	breq	.-20     	; 0x9ab0 <__addsf3x+0xcc>
    9ac4:	26 17       	cp	r18, r22
    9ac6:	37 07       	cpc	r19, r23
    9ac8:	48 07       	cpc	r20, r24
    9aca:	59 07       	cpc	r21, r25
    9acc:	38 f0       	brcs	.+14     	; 0x9adc <atan2+0x28>
    9ace:	0e 2e       	mov	r0, r30
    9ad0:	07 f8       	bld	r0, 7
    9ad2:	e0 25       	eor	r30, r0
    9ad4:	69 f0       	breq	.+26     	; 0x9af0 <atan2+0x3c>
    9ad6:	e0 25       	eor	r30, r0
    9ad8:	e0 64       	ori	r30, 0x40	; 64
    9ada:	0a c0       	rjmp	.+20     	; 0x9af0 <atan2+0x3c>
    9adc:	ef 63       	ori	r30, 0x3F	; 63
    9ade:	07 f8       	bld	r0, 7
    9ae0:	00 94       	com	r0
    9ae2:	07 fa       	bst	r0, 7
    9ae4:	db 01       	movw	r26, r22
    9ae6:	b9 01       	movw	r22, r18
    9ae8:	9d 01       	movw	r18, r26
    9aea:	dc 01       	movw	r26, r24
    9aec:	ca 01       	movw	r24, r20
    9aee:	ad 01       	movw	r20, r26
    9af0:	ef 93       	push	r30
    9af2:	0e 94 da 4d 	call	0x9bb4	; 0x9bb4 <__divsf3_pse>
    9af6:	0e 94 6f 4f 	call	0x9ede	; 0x9ede <__fp_round>
    9afa:	0e 94 8a 4d 	call	0x9b14	; 0x9b14 <atan>
    9afe:	5f 91       	pop	r21
    9b00:	55 23       	and	r21, r21
    9b02:	39 f0       	breq	.+14     	; 0x9b12 <atan2+0x5e>
    9b04:	2b ed       	ldi	r18, 0xDB	; 219
    9b06:	3f e0       	ldi	r19, 0x0F	; 15
    9b08:	49 e4       	ldi	r20, 0x49	; 73
    9b0a:	50 fd       	sbrc	r21, 0
    9b0c:	49 ec       	ldi	r20, 0xC9	; 201
    9b0e:	0c 94 db 4c 	jmp	0x99b6	; 0x99b6 <__addsf3>
    9b12:	08 95       	ret

00009b14 <atan>:
    9b14:	df 93       	push	r29
    9b16:	dd 27       	eor	r29, r29
    9b18:	b9 2f       	mov	r27, r25
    9b1a:	bf 77       	andi	r27, 0x7F	; 127
    9b1c:	40 e8       	ldi	r20, 0x80	; 128
    9b1e:	5f e3       	ldi	r21, 0x3F	; 63
    9b20:	16 16       	cp	r1, r22
    9b22:	17 06       	cpc	r1, r23
    9b24:	48 07       	cpc	r20, r24
    9b26:	5b 07       	cpc	r21, r27
    9b28:	18 f4       	brcc	.+6      	; 0x9b30 <atan+0x1c>
    9b2a:	d9 2f       	mov	r29, r25
    9b2c:	0e 94 c2 4f 	call	0x9f84	; 0x9f84 <inverse>
    9b30:	9f 93       	push	r25
    9b32:	8f 93       	push	r24
    9b34:	7f 93       	push	r23
    9b36:	6f 93       	push	r22
    9b38:	0e 94 f3 50 	call	0xa1e6	; 0xa1e6 <square>
    9b3c:	e8 ea       	ldi	r30, 0xA8	; 168
    9b3e:	f1 e0       	ldi	r31, 0x01	; 1
    9b40:	0e 94 0f 4f 	call	0x9e1e	; 0x9e1e <__fp_powser>
    9b44:	0e 94 6f 4f 	call	0x9ede	; 0x9ede <__fp_round>
    9b48:	2f 91       	pop	r18
    9b4a:	3f 91       	pop	r19
    9b4c:	4f 91       	pop	r20
    9b4e:	5f 91       	pop	r21
    9b50:	0e 94 4b 50 	call	0xa096	; 0xa096 <__mulsf3x>
    9b54:	dd 23       	and	r29, r29
    9b56:	51 f0       	breq	.+20     	; 0x9b6c <atan+0x58>
    9b58:	90 58       	subi	r25, 0x80	; 128
    9b5a:	a2 ea       	ldi	r26, 0xA2	; 162
    9b5c:	2a ed       	ldi	r18, 0xDA	; 218
    9b5e:	3f e0       	ldi	r19, 0x0F	; 15
    9b60:	49 ec       	ldi	r20, 0xC9	; 201
    9b62:	5f e3       	ldi	r21, 0x3F	; 63
    9b64:	d0 78       	andi	r29, 0x80	; 128
    9b66:	5d 27       	eor	r21, r29
    9b68:	0e 94 f2 4c 	call	0x99e4	; 0x99e4 <__addsf3x>
    9b6c:	df 91       	pop	r29
    9b6e:	0c 94 6f 4f 	jmp	0x9ede	; 0x9ede <__fp_round>

00009b72 <__cmpsf2>:
    9b72:	0e 94 e2 4e 	call	0x9dc4	; 0x9dc4 <__fp_cmp>
    9b76:	08 f4       	brcc	.+2      	; 0x9b7a <__cmpsf2+0x8>
    9b78:	81 e0       	ldi	r24, 0x01	; 1
    9b7a:	08 95       	ret

00009b7c <cos>:
    9b7c:	0e 94 46 4f 	call	0x9e8c	; 0x9e8c <__fp_rempio2>
    9b80:	e3 95       	inc	r30
    9b82:	0c 94 80 4f 	jmp	0x9f00	; 0x9f00 <__fp_sinus>

00009b86 <__divsf3>:
    9b86:	0e 94 d7 4d 	call	0x9bae	; 0x9bae <__divsf3x>
    9b8a:	0c 94 6f 4f 	jmp	0x9ede	; 0x9ede <__fp_round>
    9b8e:	0e 94 3d 4f 	call	0x9e7a	; 0x9e7a <__fp_pscB>
    9b92:	58 f0       	brcs	.+22     	; 0x9baa <__divsf3+0x24>
    9b94:	0e 94 36 4f 	call	0x9e6c	; 0x9e6c <__fp_pscA>
    9b98:	40 f0       	brcs	.+16     	; 0x9baa <__divsf3+0x24>
    9b9a:	29 f4       	brne	.+10     	; 0x9ba6 <__divsf3+0x20>
    9b9c:	5f 3f       	cpi	r21, 0xFF	; 255
    9b9e:	29 f0       	breq	.+10     	; 0x9baa <__divsf3+0x24>
    9ba0:	0c 94 06 4f 	jmp	0x9e0c	; 0x9e0c <__fp_inf>
    9ba4:	51 11       	cpse	r21, r1
    9ba6:	0c 94 b7 4f 	jmp	0x9f6e	; 0x9f6e <__fp_szero>
    9baa:	0c 94 0c 4f 	jmp	0x9e18	; 0x9e18 <__fp_nan>

00009bae <__divsf3x>:
    9bae:	0e 94 94 4f 	call	0x9f28	; 0x9f28 <__fp_split3>
    9bb2:	68 f3       	brcs	.-38     	; 0x9b8e <__divsf3+0x8>

00009bb4 <__divsf3_pse>:
    9bb4:	99 23       	and	r25, r25
    9bb6:	b1 f3       	breq	.-20     	; 0x9ba4 <__divsf3+0x1e>
    9bb8:	55 23       	and	r21, r21
    9bba:	91 f3       	breq	.-28     	; 0x9ba0 <__divsf3+0x1a>
    9bbc:	95 1b       	sub	r25, r21
    9bbe:	55 0b       	sbc	r21, r21
    9bc0:	bb 27       	eor	r27, r27
    9bc2:	aa 27       	eor	r26, r26
    9bc4:	62 17       	cp	r22, r18
    9bc6:	73 07       	cpc	r23, r19
    9bc8:	84 07       	cpc	r24, r20
    9bca:	38 f0       	brcs	.+14     	; 0x9bda <__divsf3_pse+0x26>
    9bcc:	9f 5f       	subi	r25, 0xFF	; 255
    9bce:	5f 4f       	sbci	r21, 0xFF	; 255
    9bd0:	22 0f       	add	r18, r18
    9bd2:	33 1f       	adc	r19, r19
    9bd4:	44 1f       	adc	r20, r20
    9bd6:	aa 1f       	adc	r26, r26
    9bd8:	a9 f3       	breq	.-22     	; 0x9bc4 <__divsf3_pse+0x10>
    9bda:	35 d0       	rcall	.+106    	; 0x9c46 <__divsf3_pse+0x92>
    9bdc:	0e 2e       	mov	r0, r30
    9bde:	3a f0       	brmi	.+14     	; 0x9bee <__divsf3_pse+0x3a>
    9be0:	e0 e8       	ldi	r30, 0x80	; 128
    9be2:	32 d0       	rcall	.+100    	; 0x9c48 <__divsf3_pse+0x94>
    9be4:	91 50       	subi	r25, 0x01	; 1
    9be6:	50 40       	sbci	r21, 0x00	; 0
    9be8:	e6 95       	lsr	r30
    9bea:	00 1c       	adc	r0, r0
    9bec:	ca f7       	brpl	.-14     	; 0x9be0 <__divsf3_pse+0x2c>
    9bee:	2b d0       	rcall	.+86     	; 0x9c46 <__divsf3_pse+0x92>
    9bf0:	fe 2f       	mov	r31, r30
    9bf2:	29 d0       	rcall	.+82     	; 0x9c46 <__divsf3_pse+0x92>
    9bf4:	66 0f       	add	r22, r22
    9bf6:	77 1f       	adc	r23, r23
    9bf8:	88 1f       	adc	r24, r24
    9bfa:	bb 1f       	adc	r27, r27
    9bfc:	26 17       	cp	r18, r22
    9bfe:	37 07       	cpc	r19, r23
    9c00:	48 07       	cpc	r20, r24
    9c02:	ab 07       	cpc	r26, r27
    9c04:	b0 e8       	ldi	r27, 0x80	; 128
    9c06:	09 f0       	breq	.+2      	; 0x9c0a <__divsf3_pse+0x56>
    9c08:	bb 0b       	sbc	r27, r27
    9c0a:	80 2d       	mov	r24, r0
    9c0c:	bf 01       	movw	r22, r30
    9c0e:	ff 27       	eor	r31, r31
    9c10:	93 58       	subi	r25, 0x83	; 131
    9c12:	5f 4f       	sbci	r21, 0xFF	; 255
    9c14:	3a f0       	brmi	.+14     	; 0x9c24 <__divsf3_pse+0x70>
    9c16:	9e 3f       	cpi	r25, 0xFE	; 254
    9c18:	51 05       	cpc	r21, r1
    9c1a:	78 f0       	brcs	.+30     	; 0x9c3a <__divsf3_pse+0x86>
    9c1c:	0c 94 06 4f 	jmp	0x9e0c	; 0x9e0c <__fp_inf>
    9c20:	0c 94 b7 4f 	jmp	0x9f6e	; 0x9f6e <__fp_szero>
    9c24:	5f 3f       	cpi	r21, 0xFF	; 255
    9c26:	e4 f3       	brlt	.-8      	; 0x9c20 <__divsf3_pse+0x6c>
    9c28:	98 3e       	cpi	r25, 0xE8	; 232
    9c2a:	d4 f3       	brlt	.-12     	; 0x9c20 <__divsf3_pse+0x6c>
    9c2c:	86 95       	lsr	r24
    9c2e:	77 95       	ror	r23
    9c30:	67 95       	ror	r22
    9c32:	b7 95       	ror	r27
    9c34:	f7 95       	ror	r31
    9c36:	9f 5f       	subi	r25, 0xFF	; 255
    9c38:	c9 f7       	brne	.-14     	; 0x9c2c <__divsf3_pse+0x78>
    9c3a:	88 0f       	add	r24, r24
    9c3c:	91 1d       	adc	r25, r1
    9c3e:	96 95       	lsr	r25
    9c40:	87 95       	ror	r24
    9c42:	97 f9       	bld	r25, 7
    9c44:	08 95       	ret
    9c46:	e1 e0       	ldi	r30, 0x01	; 1
    9c48:	66 0f       	add	r22, r22
    9c4a:	77 1f       	adc	r23, r23
    9c4c:	88 1f       	adc	r24, r24
    9c4e:	bb 1f       	adc	r27, r27
    9c50:	62 17       	cp	r22, r18
    9c52:	73 07       	cpc	r23, r19
    9c54:	84 07       	cpc	r24, r20
    9c56:	ba 07       	cpc	r27, r26
    9c58:	20 f0       	brcs	.+8      	; 0x9c62 <__divsf3_pse+0xae>
    9c5a:	62 1b       	sub	r22, r18
    9c5c:	73 0b       	sbc	r23, r19
    9c5e:	84 0b       	sbc	r24, r20
    9c60:	ba 0b       	sbc	r27, r26
    9c62:	ee 1f       	adc	r30, r30
    9c64:	88 f7       	brcc	.-30     	; 0x9c48 <__divsf3_pse+0x94>
    9c66:	e0 95       	com	r30
    9c68:	08 95       	ret
    9c6a:	29 f4       	brne	.+10     	; 0x9c76 <__divsf3_pse+0xc2>
    9c6c:	16 f0       	brts	.+4      	; 0x9c72 <__divsf3_pse+0xbe>
    9c6e:	0c 94 06 4f 	jmp	0x9e0c	; 0x9e0c <__fp_inf>
    9c72:	0c 94 b6 4f 	jmp	0x9f6c	; 0x9f6c <__fp_zero>
    9c76:	0c 94 0c 4f 	jmp	0x9e18	; 0x9e18 <__fp_nan>

00009c7a <exp>:
    9c7a:	0e 94 9c 4f 	call	0x9f38	; 0x9f38 <__fp_splitA>
    9c7e:	a8 f3       	brcs	.-22     	; 0x9c6a <__divsf3_pse+0xb6>
    9c80:	96 38       	cpi	r25, 0x86	; 134
    9c82:	a0 f7       	brcc	.-24     	; 0x9c6c <__divsf3_pse+0xb8>
    9c84:	07 f8       	bld	r0, 7
    9c86:	0f 92       	push	r0
    9c88:	e8 94       	clt
    9c8a:	2b e3       	ldi	r18, 0x3B	; 59
    9c8c:	3a ea       	ldi	r19, 0xAA	; 170
    9c8e:	48 eb       	ldi	r20, 0xB8	; 184
    9c90:	5f e7       	ldi	r21, 0x7F	; 127
    9c92:	0e 94 4e 50 	call	0xa09c	; 0xa09c <__mulsf3_pse>
    9c96:	0f 92       	push	r0
    9c98:	0f 92       	push	r0
    9c9a:	0f 92       	push	r0
    9c9c:	4d b7       	in	r20, 0x3d	; 61
    9c9e:	5e b7       	in	r21, 0x3e	; 62
    9ca0:	0f 92       	push	r0
    9ca2:	0e 94 04 50 	call	0xa008	; 0xa008 <modf>
    9ca6:	e5 ed       	ldi	r30, 0xD5	; 213
    9ca8:	f1 e0       	ldi	r31, 0x01	; 1
    9caa:	0e 94 0f 4f 	call	0x9e1e	; 0x9e1e <__fp_powser>
    9cae:	4f 91       	pop	r20
    9cb0:	5f 91       	pop	r21
    9cb2:	ef 91       	pop	r30
    9cb4:	ff 91       	pop	r31
    9cb6:	e5 95       	asr	r30
    9cb8:	ee 1f       	adc	r30, r30
    9cba:	ff 1f       	adc	r31, r31
    9cbc:	49 f0       	breq	.+18     	; 0x9cd0 <exp+0x56>
    9cbe:	fe 57       	subi	r31, 0x7E	; 126
    9cc0:	e0 68       	ori	r30, 0x80	; 128
    9cc2:	44 27       	eor	r20, r20
    9cc4:	ee 0f       	add	r30, r30
    9cc6:	44 1f       	adc	r20, r20
    9cc8:	fa 95       	dec	r31
    9cca:	e1 f7       	brne	.-8      	; 0x9cc4 <exp+0x4a>
    9ccc:	41 95       	neg	r20
    9cce:	55 0b       	sbc	r21, r21
    9cd0:	0e 94 ce 4f 	call	0x9f9c	; 0x9f9c <ldexp>
    9cd4:	0f 90       	pop	r0
    9cd6:	07 fe       	sbrs	r0, 7
    9cd8:	0c 94 c2 4f 	jmp	0x9f84	; 0x9f84 <inverse>
    9cdc:	08 95       	ret

00009cde <__fixsfsi>:
    9cde:	0e 94 76 4e 	call	0x9cec	; 0x9cec <__fixunssfsi>
    9ce2:	68 94       	set
    9ce4:	b1 11       	cpse	r27, r1
    9ce6:	0c 94 b7 4f 	jmp	0x9f6e	; 0x9f6e <__fp_szero>
    9cea:	08 95       	ret

00009cec <__fixunssfsi>:
    9cec:	0e 94 9c 4f 	call	0x9f38	; 0x9f38 <__fp_splitA>
    9cf0:	88 f0       	brcs	.+34     	; 0x9d14 <__fixunssfsi+0x28>
    9cf2:	9f 57       	subi	r25, 0x7F	; 127
    9cf4:	98 f0       	brcs	.+38     	; 0x9d1c <__fixunssfsi+0x30>
    9cf6:	b9 2f       	mov	r27, r25
    9cf8:	99 27       	eor	r25, r25
    9cfa:	b7 51       	subi	r27, 0x17	; 23
    9cfc:	b0 f0       	brcs	.+44     	; 0x9d2a <__fixunssfsi+0x3e>
    9cfe:	e1 f0       	breq	.+56     	; 0x9d38 <__fixunssfsi+0x4c>
    9d00:	66 0f       	add	r22, r22
    9d02:	77 1f       	adc	r23, r23
    9d04:	88 1f       	adc	r24, r24
    9d06:	99 1f       	adc	r25, r25
    9d08:	1a f0       	brmi	.+6      	; 0x9d10 <__fixunssfsi+0x24>
    9d0a:	ba 95       	dec	r27
    9d0c:	c9 f7       	brne	.-14     	; 0x9d00 <__fixunssfsi+0x14>
    9d0e:	14 c0       	rjmp	.+40     	; 0x9d38 <__fixunssfsi+0x4c>
    9d10:	b1 30       	cpi	r27, 0x01	; 1
    9d12:	91 f0       	breq	.+36     	; 0x9d38 <__fixunssfsi+0x4c>
    9d14:	0e 94 b6 4f 	call	0x9f6c	; 0x9f6c <__fp_zero>
    9d18:	b1 e0       	ldi	r27, 0x01	; 1
    9d1a:	08 95       	ret
    9d1c:	0c 94 b6 4f 	jmp	0x9f6c	; 0x9f6c <__fp_zero>
    9d20:	67 2f       	mov	r22, r23
    9d22:	78 2f       	mov	r23, r24
    9d24:	88 27       	eor	r24, r24
    9d26:	b8 5f       	subi	r27, 0xF8	; 248
    9d28:	39 f0       	breq	.+14     	; 0x9d38 <__fixunssfsi+0x4c>
    9d2a:	b9 3f       	cpi	r27, 0xF9	; 249
    9d2c:	cc f3       	brlt	.-14     	; 0x9d20 <__fixunssfsi+0x34>
    9d2e:	86 95       	lsr	r24
    9d30:	77 95       	ror	r23
    9d32:	67 95       	ror	r22
    9d34:	b3 95       	inc	r27
    9d36:	d9 f7       	brne	.-10     	; 0x9d2e <__fixunssfsi+0x42>
    9d38:	3e f4       	brtc	.+14     	; 0x9d48 <__fixunssfsi+0x5c>
    9d3a:	90 95       	com	r25
    9d3c:	80 95       	com	r24
    9d3e:	70 95       	com	r23
    9d40:	61 95       	neg	r22
    9d42:	7f 4f       	sbci	r23, 0xFF	; 255
    9d44:	8f 4f       	sbci	r24, 0xFF	; 255
    9d46:	9f 4f       	sbci	r25, 0xFF	; 255
    9d48:	08 95       	ret

00009d4a <__floatunsisf>:
    9d4a:	e8 94       	clt
    9d4c:	09 c0       	rjmp	.+18     	; 0x9d60 <__floatsisf+0x12>

00009d4e <__floatsisf>:
    9d4e:	97 fb       	bst	r25, 7
    9d50:	3e f4       	brtc	.+14     	; 0x9d60 <__floatsisf+0x12>
    9d52:	90 95       	com	r25
    9d54:	80 95       	com	r24
    9d56:	70 95       	com	r23
    9d58:	61 95       	neg	r22
    9d5a:	7f 4f       	sbci	r23, 0xFF	; 255
    9d5c:	8f 4f       	sbci	r24, 0xFF	; 255
    9d5e:	9f 4f       	sbci	r25, 0xFF	; 255
    9d60:	99 23       	and	r25, r25
    9d62:	a9 f0       	breq	.+42     	; 0x9d8e <__floatsisf+0x40>
    9d64:	f9 2f       	mov	r31, r25
    9d66:	96 e9       	ldi	r25, 0x96	; 150
    9d68:	bb 27       	eor	r27, r27
    9d6a:	93 95       	inc	r25
    9d6c:	f6 95       	lsr	r31
    9d6e:	87 95       	ror	r24
    9d70:	77 95       	ror	r23
    9d72:	67 95       	ror	r22
    9d74:	b7 95       	ror	r27
    9d76:	f1 11       	cpse	r31, r1
    9d78:	f8 cf       	rjmp	.-16     	; 0x9d6a <__floatsisf+0x1c>
    9d7a:	fa f4       	brpl	.+62     	; 0x9dba <__floatsisf+0x6c>
    9d7c:	bb 0f       	add	r27, r27
    9d7e:	11 f4       	brne	.+4      	; 0x9d84 <__floatsisf+0x36>
    9d80:	60 ff       	sbrs	r22, 0
    9d82:	1b c0       	rjmp	.+54     	; 0x9dba <__floatsisf+0x6c>
    9d84:	6f 5f       	subi	r22, 0xFF	; 255
    9d86:	7f 4f       	sbci	r23, 0xFF	; 255
    9d88:	8f 4f       	sbci	r24, 0xFF	; 255
    9d8a:	9f 4f       	sbci	r25, 0xFF	; 255
    9d8c:	16 c0       	rjmp	.+44     	; 0x9dba <__floatsisf+0x6c>
    9d8e:	88 23       	and	r24, r24
    9d90:	11 f0       	breq	.+4      	; 0x9d96 <__floatsisf+0x48>
    9d92:	96 e9       	ldi	r25, 0x96	; 150
    9d94:	11 c0       	rjmp	.+34     	; 0x9db8 <__floatsisf+0x6a>
    9d96:	77 23       	and	r23, r23
    9d98:	21 f0       	breq	.+8      	; 0x9da2 <__floatsisf+0x54>
    9d9a:	9e e8       	ldi	r25, 0x8E	; 142
    9d9c:	87 2f       	mov	r24, r23
    9d9e:	76 2f       	mov	r23, r22
    9da0:	05 c0       	rjmp	.+10     	; 0x9dac <__floatsisf+0x5e>
    9da2:	66 23       	and	r22, r22
    9da4:	71 f0       	breq	.+28     	; 0x9dc2 <__floatsisf+0x74>
    9da6:	96 e8       	ldi	r25, 0x86	; 134
    9da8:	86 2f       	mov	r24, r22
    9daa:	70 e0       	ldi	r23, 0x00	; 0
    9dac:	60 e0       	ldi	r22, 0x00	; 0
    9dae:	2a f0       	brmi	.+10     	; 0x9dba <__floatsisf+0x6c>
    9db0:	9a 95       	dec	r25
    9db2:	66 0f       	add	r22, r22
    9db4:	77 1f       	adc	r23, r23
    9db6:	88 1f       	adc	r24, r24
    9db8:	da f7       	brpl	.-10     	; 0x9db0 <__floatsisf+0x62>
    9dba:	88 0f       	add	r24, r24
    9dbc:	96 95       	lsr	r25
    9dbe:	87 95       	ror	r24
    9dc0:	97 f9       	bld	r25, 7
    9dc2:	08 95       	ret

00009dc4 <__fp_cmp>:
    9dc4:	99 0f       	add	r25, r25
    9dc6:	00 08       	sbc	r0, r0
    9dc8:	55 0f       	add	r21, r21
    9dca:	aa 0b       	sbc	r26, r26
    9dcc:	e0 e8       	ldi	r30, 0x80	; 128
    9dce:	fe ef       	ldi	r31, 0xFE	; 254
    9dd0:	16 16       	cp	r1, r22
    9dd2:	17 06       	cpc	r1, r23
    9dd4:	e8 07       	cpc	r30, r24
    9dd6:	f9 07       	cpc	r31, r25
    9dd8:	c0 f0       	brcs	.+48     	; 0x9e0a <__fp_cmp+0x46>
    9dda:	12 16       	cp	r1, r18
    9ddc:	13 06       	cpc	r1, r19
    9dde:	e4 07       	cpc	r30, r20
    9de0:	f5 07       	cpc	r31, r21
    9de2:	98 f0       	brcs	.+38     	; 0x9e0a <__fp_cmp+0x46>
    9de4:	62 1b       	sub	r22, r18
    9de6:	73 0b       	sbc	r23, r19
    9de8:	84 0b       	sbc	r24, r20
    9dea:	95 0b       	sbc	r25, r21
    9dec:	39 f4       	brne	.+14     	; 0x9dfc <__fp_cmp+0x38>
    9dee:	0a 26       	eor	r0, r26
    9df0:	61 f0       	breq	.+24     	; 0x9e0a <__fp_cmp+0x46>
    9df2:	23 2b       	or	r18, r19
    9df4:	24 2b       	or	r18, r20
    9df6:	25 2b       	or	r18, r21
    9df8:	21 f4       	brne	.+8      	; 0x9e02 <__fp_cmp+0x3e>
    9dfa:	08 95       	ret
    9dfc:	0a 26       	eor	r0, r26
    9dfe:	09 f4       	brne	.+2      	; 0x9e02 <__fp_cmp+0x3e>
    9e00:	a1 40       	sbci	r26, 0x01	; 1
    9e02:	a6 95       	lsr	r26
    9e04:	8f ef       	ldi	r24, 0xFF	; 255
    9e06:	81 1d       	adc	r24, r1
    9e08:	81 1d       	adc	r24, r1
    9e0a:	08 95       	ret

00009e0c <__fp_inf>:
    9e0c:	97 f9       	bld	r25, 7
    9e0e:	9f 67       	ori	r25, 0x7F	; 127
    9e10:	80 e8       	ldi	r24, 0x80	; 128
    9e12:	70 e0       	ldi	r23, 0x00	; 0
    9e14:	60 e0       	ldi	r22, 0x00	; 0
    9e16:	08 95       	ret

00009e18 <__fp_nan>:
    9e18:	9f ef       	ldi	r25, 0xFF	; 255
    9e1a:	80 ec       	ldi	r24, 0xC0	; 192
    9e1c:	08 95       	ret

00009e1e <__fp_powser>:
    9e1e:	df 93       	push	r29
    9e20:	cf 93       	push	r28
    9e22:	1f 93       	push	r17
    9e24:	0f 93       	push	r16
    9e26:	ff 92       	push	r15
    9e28:	ef 92       	push	r14
    9e2a:	df 92       	push	r13
    9e2c:	7b 01       	movw	r14, r22
    9e2e:	8c 01       	movw	r16, r24
    9e30:	68 94       	set
    9e32:	06 c0       	rjmp	.+12     	; 0x9e40 <__fp_powser+0x22>
    9e34:	da 2e       	mov	r13, r26
    9e36:	ef 01       	movw	r28, r30
    9e38:	0e 94 4b 50 	call	0xa096	; 0xa096 <__mulsf3x>
    9e3c:	fe 01       	movw	r30, r28
    9e3e:	e8 94       	clt
    9e40:	a5 91       	lpm	r26, Z+
    9e42:	25 91       	lpm	r18, Z+
    9e44:	35 91       	lpm	r19, Z+
    9e46:	45 91       	lpm	r20, Z+
    9e48:	55 91       	lpm	r21, Z+
    9e4a:	a6 f3       	brts	.-24     	; 0x9e34 <__fp_powser+0x16>
    9e4c:	ef 01       	movw	r28, r30
    9e4e:	0e 94 f2 4c 	call	0x99e4	; 0x99e4 <__addsf3x>
    9e52:	fe 01       	movw	r30, r28
    9e54:	97 01       	movw	r18, r14
    9e56:	a8 01       	movw	r20, r16
    9e58:	da 94       	dec	r13
    9e5a:	69 f7       	brne	.-38     	; 0x9e36 <__fp_powser+0x18>
    9e5c:	df 90       	pop	r13
    9e5e:	ef 90       	pop	r14
    9e60:	ff 90       	pop	r15
    9e62:	0f 91       	pop	r16
    9e64:	1f 91       	pop	r17
    9e66:	cf 91       	pop	r28
    9e68:	df 91       	pop	r29
    9e6a:	08 95       	ret

00009e6c <__fp_pscA>:
    9e6c:	00 24       	eor	r0, r0
    9e6e:	0a 94       	dec	r0
    9e70:	16 16       	cp	r1, r22
    9e72:	17 06       	cpc	r1, r23
    9e74:	18 06       	cpc	r1, r24
    9e76:	09 06       	cpc	r0, r25
    9e78:	08 95       	ret

00009e7a <__fp_pscB>:
    9e7a:	00 24       	eor	r0, r0
    9e7c:	0a 94       	dec	r0
    9e7e:	12 16       	cp	r1, r18
    9e80:	13 06       	cpc	r1, r19
    9e82:	14 06       	cpc	r1, r20
    9e84:	05 06       	cpc	r0, r21
    9e86:	08 95       	ret
    9e88:	0c 94 0c 4f 	jmp	0x9e18	; 0x9e18 <__fp_nan>

00009e8c <__fp_rempio2>:
    9e8c:	0e 94 9c 4f 	call	0x9f38	; 0x9f38 <__fp_splitA>
    9e90:	d8 f3       	brcs	.-10     	; 0x9e88 <__fp_pscB+0xe>
    9e92:	e8 94       	clt
    9e94:	e0 e0       	ldi	r30, 0x00	; 0
    9e96:	bb 27       	eor	r27, r27
    9e98:	9f 57       	subi	r25, 0x7F	; 127
    9e9a:	f0 f0       	brcs	.+60     	; 0x9ed8 <__fp_rempio2+0x4c>
    9e9c:	2a ed       	ldi	r18, 0xDA	; 218
    9e9e:	3f e0       	ldi	r19, 0x0F	; 15
    9ea0:	49 ec       	ldi	r20, 0xC9	; 201
    9ea2:	06 c0       	rjmp	.+12     	; 0x9eb0 <__fp_rempio2+0x24>
    9ea4:	ee 0f       	add	r30, r30
    9ea6:	bb 0f       	add	r27, r27
    9ea8:	66 1f       	adc	r22, r22
    9eaa:	77 1f       	adc	r23, r23
    9eac:	88 1f       	adc	r24, r24
    9eae:	28 f0       	brcs	.+10     	; 0x9eba <__fp_rempio2+0x2e>
    9eb0:	b2 3a       	cpi	r27, 0xA2	; 162
    9eb2:	62 07       	cpc	r22, r18
    9eb4:	73 07       	cpc	r23, r19
    9eb6:	84 07       	cpc	r24, r20
    9eb8:	28 f0       	brcs	.+10     	; 0x9ec4 <__fp_rempio2+0x38>
    9eba:	b2 5a       	subi	r27, 0xA2	; 162
    9ebc:	62 0b       	sbc	r22, r18
    9ebe:	73 0b       	sbc	r23, r19
    9ec0:	84 0b       	sbc	r24, r20
    9ec2:	e3 95       	inc	r30
    9ec4:	9a 95       	dec	r25
    9ec6:	72 f7       	brpl	.-36     	; 0x9ea4 <__fp_rempio2+0x18>
    9ec8:	80 38       	cpi	r24, 0x80	; 128
    9eca:	30 f4       	brcc	.+12     	; 0x9ed8 <__fp_rempio2+0x4c>
    9ecc:	9a 95       	dec	r25
    9ece:	bb 0f       	add	r27, r27
    9ed0:	66 1f       	adc	r22, r22
    9ed2:	77 1f       	adc	r23, r23
    9ed4:	88 1f       	adc	r24, r24
    9ed6:	d2 f7       	brpl	.-12     	; 0x9ecc <__fp_rempio2+0x40>
    9ed8:	90 48       	sbci	r25, 0x80	; 128
    9eda:	0c 94 f9 50 	jmp	0xa1f2	; 0xa1f2 <__fp_mpack_finite>

00009ede <__fp_round>:
    9ede:	09 2e       	mov	r0, r25
    9ee0:	03 94       	inc	r0
    9ee2:	00 0c       	add	r0, r0
    9ee4:	11 f4       	brne	.+4      	; 0x9eea <__fp_round+0xc>
    9ee6:	88 23       	and	r24, r24
    9ee8:	52 f0       	brmi	.+20     	; 0x9efe <__fp_round+0x20>
    9eea:	bb 0f       	add	r27, r27
    9eec:	40 f4       	brcc	.+16     	; 0x9efe <__fp_round+0x20>
    9eee:	bf 2b       	or	r27, r31
    9ef0:	11 f4       	brne	.+4      	; 0x9ef6 <__fp_round+0x18>
    9ef2:	60 ff       	sbrs	r22, 0
    9ef4:	04 c0       	rjmp	.+8      	; 0x9efe <__fp_round+0x20>
    9ef6:	6f 5f       	subi	r22, 0xFF	; 255
    9ef8:	7f 4f       	sbci	r23, 0xFF	; 255
    9efa:	8f 4f       	sbci	r24, 0xFF	; 255
    9efc:	9f 4f       	sbci	r25, 0xFF	; 255
    9efe:	08 95       	ret

00009f00 <__fp_sinus>:
    9f00:	ef 93       	push	r30
    9f02:	e0 ff       	sbrs	r30, 0
    9f04:	07 c0       	rjmp	.+14     	; 0x9f14 <__fp_sinus+0x14>
    9f06:	a2 ea       	ldi	r26, 0xA2	; 162
    9f08:	2a ed       	ldi	r18, 0xDA	; 218
    9f0a:	3f e0       	ldi	r19, 0x0F	; 15
    9f0c:	49 ec       	ldi	r20, 0xC9	; 201
    9f0e:	5f eb       	ldi	r21, 0xBF	; 191
    9f10:	0e 94 f2 4c 	call	0x99e4	; 0x99e4 <__addsf3x>
    9f14:	0e 94 6f 4f 	call	0x9ede	; 0x9ede <__fp_round>
    9f18:	0f 90       	pop	r0
    9f1a:	03 94       	inc	r0
    9f1c:	01 fc       	sbrc	r0, 1
    9f1e:	90 58       	subi	r25, 0x80	; 128
    9f20:	ed ef       	ldi	r30, 0xFD	; 253
    9f22:	f1 e0       	ldi	r31, 0x01	; 1
    9f24:	0c 94 0c 51 	jmp	0xa218	; 0xa218 <__fp_powsodd>

00009f28 <__fp_split3>:
    9f28:	57 fd       	sbrc	r21, 7
    9f2a:	90 58       	subi	r25, 0x80	; 128
    9f2c:	44 0f       	add	r20, r20
    9f2e:	55 1f       	adc	r21, r21
    9f30:	59 f0       	breq	.+22     	; 0x9f48 <__fp_splitA+0x10>
    9f32:	5f 3f       	cpi	r21, 0xFF	; 255
    9f34:	71 f0       	breq	.+28     	; 0x9f52 <__fp_splitA+0x1a>
    9f36:	47 95       	ror	r20

00009f38 <__fp_splitA>:
    9f38:	88 0f       	add	r24, r24
    9f3a:	97 fb       	bst	r25, 7
    9f3c:	99 1f       	adc	r25, r25
    9f3e:	61 f0       	breq	.+24     	; 0x9f58 <__fp_splitA+0x20>
    9f40:	9f 3f       	cpi	r25, 0xFF	; 255
    9f42:	79 f0       	breq	.+30     	; 0x9f62 <__fp_splitA+0x2a>
    9f44:	87 95       	ror	r24
    9f46:	08 95       	ret
    9f48:	12 16       	cp	r1, r18
    9f4a:	13 06       	cpc	r1, r19
    9f4c:	14 06       	cpc	r1, r20
    9f4e:	55 1f       	adc	r21, r21
    9f50:	f2 cf       	rjmp	.-28     	; 0x9f36 <__fp_split3+0xe>
    9f52:	46 95       	lsr	r20
    9f54:	f1 df       	rcall	.-30     	; 0x9f38 <__fp_splitA>
    9f56:	08 c0       	rjmp	.+16     	; 0x9f68 <__fp_splitA+0x30>
    9f58:	16 16       	cp	r1, r22
    9f5a:	17 06       	cpc	r1, r23
    9f5c:	18 06       	cpc	r1, r24
    9f5e:	99 1f       	adc	r25, r25
    9f60:	f1 cf       	rjmp	.-30     	; 0x9f44 <__fp_splitA+0xc>
    9f62:	86 95       	lsr	r24
    9f64:	71 05       	cpc	r23, r1
    9f66:	61 05       	cpc	r22, r1
    9f68:	08 94       	sec
    9f6a:	08 95       	ret

00009f6c <__fp_zero>:
    9f6c:	e8 94       	clt

00009f6e <__fp_szero>:
    9f6e:	bb 27       	eor	r27, r27
    9f70:	66 27       	eor	r22, r22
    9f72:	77 27       	eor	r23, r23
    9f74:	cb 01       	movw	r24, r22
    9f76:	97 f9       	bld	r25, 7
    9f78:	08 95       	ret

00009f7a <__gesf2>:
    9f7a:	0e 94 e2 4e 	call	0x9dc4	; 0x9dc4 <__fp_cmp>
    9f7e:	08 f4       	brcc	.+2      	; 0x9f82 <__gesf2+0x8>
    9f80:	8f ef       	ldi	r24, 0xFF	; 255
    9f82:	08 95       	ret

00009f84 <inverse>:
    9f84:	9b 01       	movw	r18, r22
    9f86:	ac 01       	movw	r20, r24
    9f88:	60 e0       	ldi	r22, 0x00	; 0
    9f8a:	70 e0       	ldi	r23, 0x00	; 0
    9f8c:	80 e8       	ldi	r24, 0x80	; 128
    9f8e:	9f e3       	ldi	r25, 0x3F	; 63
    9f90:	0c 94 c3 4d 	jmp	0x9b86	; 0x9b86 <__divsf3>
    9f94:	0c 94 06 4f 	jmp	0x9e0c	; 0x9e0c <__fp_inf>
    9f98:	0c 94 f7 50 	jmp	0xa1ee	; 0xa1ee <__fp_mpack>

00009f9c <ldexp>:
    9f9c:	0e 94 9c 4f 	call	0x9f38	; 0x9f38 <__fp_splitA>
    9fa0:	d8 f3       	brcs	.-10     	; 0x9f98 <inverse+0x14>
    9fa2:	99 23       	and	r25, r25
    9fa4:	c9 f3       	breq	.-14     	; 0x9f98 <inverse+0x14>
    9fa6:	94 0f       	add	r25, r20
    9fa8:	51 1d       	adc	r21, r1
    9faa:	a3 f3       	brvs	.-24     	; 0x9f94 <inverse+0x10>
    9fac:	91 50       	subi	r25, 0x01	; 1
    9fae:	50 40       	sbci	r21, 0x00	; 0
    9fb0:	94 f0       	brlt	.+36     	; 0x9fd6 <ldexp+0x3a>
    9fb2:	59 f0       	breq	.+22     	; 0x9fca <ldexp+0x2e>
    9fb4:	88 23       	and	r24, r24
    9fb6:	32 f0       	brmi	.+12     	; 0x9fc4 <ldexp+0x28>
    9fb8:	66 0f       	add	r22, r22
    9fba:	77 1f       	adc	r23, r23
    9fbc:	88 1f       	adc	r24, r24
    9fbe:	91 50       	subi	r25, 0x01	; 1
    9fc0:	50 40       	sbci	r21, 0x00	; 0
    9fc2:	c1 f7       	brne	.-16     	; 0x9fb4 <ldexp+0x18>
    9fc4:	9e 3f       	cpi	r25, 0xFE	; 254
    9fc6:	51 05       	cpc	r21, r1
    9fc8:	2c f7       	brge	.-54     	; 0x9f94 <inverse+0x10>
    9fca:	88 0f       	add	r24, r24
    9fcc:	91 1d       	adc	r25, r1
    9fce:	96 95       	lsr	r25
    9fd0:	87 95       	ror	r24
    9fd2:	97 f9       	bld	r25, 7
    9fd4:	08 95       	ret
    9fd6:	5f 3f       	cpi	r21, 0xFF	; 255
    9fd8:	ac f0       	brlt	.+42     	; 0xa004 <ldexp+0x68>
    9fda:	98 3e       	cpi	r25, 0xE8	; 232
    9fdc:	9c f0       	brlt	.+38     	; 0xa004 <ldexp+0x68>
    9fde:	bb 27       	eor	r27, r27
    9fe0:	86 95       	lsr	r24
    9fe2:	77 95       	ror	r23
    9fe4:	67 95       	ror	r22
    9fe6:	b7 95       	ror	r27
    9fe8:	08 f4       	brcc	.+2      	; 0x9fec <ldexp+0x50>
    9fea:	b1 60       	ori	r27, 0x01	; 1
    9fec:	93 95       	inc	r25
    9fee:	c1 f7       	brne	.-16     	; 0x9fe0 <ldexp+0x44>
    9ff0:	bb 0f       	add	r27, r27
    9ff2:	58 f7       	brcc	.-42     	; 0x9fca <ldexp+0x2e>
    9ff4:	11 f4       	brne	.+4      	; 0x9ffa <ldexp+0x5e>
    9ff6:	60 ff       	sbrs	r22, 0
    9ff8:	e8 cf       	rjmp	.-48     	; 0x9fca <ldexp+0x2e>
    9ffa:	6f 5f       	subi	r22, 0xFF	; 255
    9ffc:	7f 4f       	sbci	r23, 0xFF	; 255
    9ffe:	8f 4f       	sbci	r24, 0xFF	; 255
    a000:	9f 4f       	sbci	r25, 0xFF	; 255
    a002:	e3 cf       	rjmp	.-58     	; 0x9fca <ldexp+0x2e>
    a004:	0c 94 b7 4f 	jmp	0x9f6e	; 0x9f6e <__fp_szero>

0000a008 <modf>:
    a008:	fa 01       	movw	r30, r20
    a00a:	dc 01       	movw	r26, r24
    a00c:	aa 0f       	add	r26, r26
    a00e:	bb 1f       	adc	r27, r27
    a010:	9b 01       	movw	r18, r22
    a012:	ac 01       	movw	r20, r24
    a014:	bf 57       	subi	r27, 0x7F	; 127
    a016:	28 f4       	brcc	.+10     	; 0xa022 <modf+0x1a>
    a018:	22 27       	eor	r18, r18
    a01a:	33 27       	eor	r19, r19
    a01c:	44 27       	eor	r20, r20
    a01e:	50 78       	andi	r21, 0x80	; 128
    a020:	20 c0       	rjmp	.+64     	; 0xa062 <modf+0x5a>
    a022:	b7 51       	subi	r27, 0x17	; 23
    a024:	90 f4       	brcc	.+36     	; 0xa04a <modf+0x42>
    a026:	ab 2f       	mov	r26, r27
    a028:	00 24       	eor	r0, r0
    a02a:	46 95       	lsr	r20
    a02c:	37 95       	ror	r19
    a02e:	27 95       	ror	r18
    a030:	01 1c       	adc	r0, r1
    a032:	a3 95       	inc	r26
    a034:	d2 f3       	brmi	.-12     	; 0xa02a <modf+0x22>
    a036:	00 20       	and	r0, r0
    a038:	71 f0       	breq	.+28     	; 0xa056 <modf+0x4e>
    a03a:	22 0f       	add	r18, r18
    a03c:	33 1f       	adc	r19, r19
    a03e:	44 1f       	adc	r20, r20
    a040:	b3 95       	inc	r27
    a042:	da f3       	brmi	.-10     	; 0xa03a <modf+0x32>
    a044:	0e d0       	rcall	.+28     	; 0xa062 <modf+0x5a>
    a046:	0c 94 da 4c 	jmp	0x99b4	; 0x99b4 <__subsf3>
    a04a:	61 30       	cpi	r22, 0x01	; 1
    a04c:	71 05       	cpc	r23, r1
    a04e:	a0 e8       	ldi	r26, 0x80	; 128
    a050:	8a 07       	cpc	r24, r26
    a052:	b9 46       	sbci	r27, 0x69	; 105
    a054:	30 f4       	brcc	.+12     	; 0xa062 <modf+0x5a>
    a056:	9b 01       	movw	r18, r22
    a058:	ac 01       	movw	r20, r24
    a05a:	66 27       	eor	r22, r22
    a05c:	77 27       	eor	r23, r23
    a05e:	88 27       	eor	r24, r24
    a060:	90 78       	andi	r25, 0x80	; 128
    a062:	30 96       	adiw	r30, 0x00	; 0
    a064:	21 f0       	breq	.+8      	; 0xa06e <modf+0x66>
    a066:	20 83       	st	Z, r18
    a068:	31 83       	std	Z+1, r19	; 0x01
    a06a:	42 83       	std	Z+2, r20	; 0x02
    a06c:	53 83       	std	Z+3, r21	; 0x03
    a06e:	08 95       	ret

0000a070 <__mulsf3>:
    a070:	0e 94 4b 50 	call	0xa096	; 0xa096 <__mulsf3x>
    a074:	0c 94 6f 4f 	jmp	0x9ede	; 0x9ede <__fp_round>
    a078:	0e 94 36 4f 	call	0x9e6c	; 0x9e6c <__fp_pscA>
    a07c:	38 f0       	brcs	.+14     	; 0xa08c <__mulsf3+0x1c>
    a07e:	0e 94 3d 4f 	call	0x9e7a	; 0x9e7a <__fp_pscB>
    a082:	20 f0       	brcs	.+8      	; 0xa08c <__mulsf3+0x1c>
    a084:	95 23       	and	r25, r21
    a086:	11 f0       	breq	.+4      	; 0xa08c <__mulsf3+0x1c>
    a088:	0c 94 06 4f 	jmp	0x9e0c	; 0x9e0c <__fp_inf>
    a08c:	0c 94 0c 4f 	jmp	0x9e18	; 0x9e18 <__fp_nan>
    a090:	11 24       	eor	r1, r1
    a092:	0c 94 b7 4f 	jmp	0x9f6e	; 0x9f6e <__fp_szero>

0000a096 <__mulsf3x>:
    a096:	0e 94 94 4f 	call	0x9f28	; 0x9f28 <__fp_split3>
    a09a:	70 f3       	brcs	.-36     	; 0xa078 <__mulsf3+0x8>

0000a09c <__mulsf3_pse>:
    a09c:	95 9f       	mul	r25, r21
    a09e:	c1 f3       	breq	.-16     	; 0xa090 <__mulsf3+0x20>
    a0a0:	95 0f       	add	r25, r21
    a0a2:	50 e0       	ldi	r21, 0x00	; 0
    a0a4:	55 1f       	adc	r21, r21
    a0a6:	62 9f       	mul	r22, r18
    a0a8:	f0 01       	movw	r30, r0
    a0aa:	72 9f       	mul	r23, r18
    a0ac:	bb 27       	eor	r27, r27
    a0ae:	f0 0d       	add	r31, r0
    a0b0:	b1 1d       	adc	r27, r1
    a0b2:	63 9f       	mul	r22, r19
    a0b4:	aa 27       	eor	r26, r26
    a0b6:	f0 0d       	add	r31, r0
    a0b8:	b1 1d       	adc	r27, r1
    a0ba:	aa 1f       	adc	r26, r26
    a0bc:	64 9f       	mul	r22, r20
    a0be:	66 27       	eor	r22, r22
    a0c0:	b0 0d       	add	r27, r0
    a0c2:	a1 1d       	adc	r26, r1
    a0c4:	66 1f       	adc	r22, r22
    a0c6:	82 9f       	mul	r24, r18
    a0c8:	22 27       	eor	r18, r18
    a0ca:	b0 0d       	add	r27, r0
    a0cc:	a1 1d       	adc	r26, r1
    a0ce:	62 1f       	adc	r22, r18
    a0d0:	73 9f       	mul	r23, r19
    a0d2:	b0 0d       	add	r27, r0
    a0d4:	a1 1d       	adc	r26, r1
    a0d6:	62 1f       	adc	r22, r18
    a0d8:	83 9f       	mul	r24, r19
    a0da:	a0 0d       	add	r26, r0
    a0dc:	61 1d       	adc	r22, r1
    a0de:	22 1f       	adc	r18, r18
    a0e0:	74 9f       	mul	r23, r20
    a0e2:	33 27       	eor	r19, r19
    a0e4:	a0 0d       	add	r26, r0
    a0e6:	61 1d       	adc	r22, r1
    a0e8:	23 1f       	adc	r18, r19
    a0ea:	84 9f       	mul	r24, r20
    a0ec:	60 0d       	add	r22, r0
    a0ee:	21 1d       	adc	r18, r1
    a0f0:	82 2f       	mov	r24, r18
    a0f2:	76 2f       	mov	r23, r22
    a0f4:	6a 2f       	mov	r22, r26
    a0f6:	11 24       	eor	r1, r1
    a0f8:	9f 57       	subi	r25, 0x7F	; 127
    a0fa:	50 40       	sbci	r21, 0x00	; 0
    a0fc:	9a f0       	brmi	.+38     	; 0xa124 <__mulsf3_pse+0x88>
    a0fe:	f1 f0       	breq	.+60     	; 0xa13c <__mulsf3_pse+0xa0>
    a100:	88 23       	and	r24, r24
    a102:	4a f0       	brmi	.+18     	; 0xa116 <__mulsf3_pse+0x7a>
    a104:	ee 0f       	add	r30, r30
    a106:	ff 1f       	adc	r31, r31
    a108:	bb 1f       	adc	r27, r27
    a10a:	66 1f       	adc	r22, r22
    a10c:	77 1f       	adc	r23, r23
    a10e:	88 1f       	adc	r24, r24
    a110:	91 50       	subi	r25, 0x01	; 1
    a112:	50 40       	sbci	r21, 0x00	; 0
    a114:	a9 f7       	brne	.-22     	; 0xa100 <__mulsf3_pse+0x64>
    a116:	9e 3f       	cpi	r25, 0xFE	; 254
    a118:	51 05       	cpc	r21, r1
    a11a:	80 f0       	brcs	.+32     	; 0xa13c <__mulsf3_pse+0xa0>
    a11c:	0c 94 06 4f 	jmp	0x9e0c	; 0x9e0c <__fp_inf>
    a120:	0c 94 b7 4f 	jmp	0x9f6e	; 0x9f6e <__fp_szero>
    a124:	5f 3f       	cpi	r21, 0xFF	; 255
    a126:	e4 f3       	brlt	.-8      	; 0xa120 <__mulsf3_pse+0x84>
    a128:	98 3e       	cpi	r25, 0xE8	; 232
    a12a:	d4 f3       	brlt	.-12     	; 0xa120 <__mulsf3_pse+0x84>
    a12c:	86 95       	lsr	r24
    a12e:	77 95       	ror	r23
    a130:	67 95       	ror	r22
    a132:	b7 95       	ror	r27
    a134:	f7 95       	ror	r31
    a136:	e7 95       	ror	r30
    a138:	9f 5f       	subi	r25, 0xFF	; 255
    a13a:	c1 f7       	brne	.-16     	; 0xa12c <__mulsf3_pse+0x90>
    a13c:	fe 2b       	or	r31, r30
    a13e:	88 0f       	add	r24, r24
    a140:	91 1d       	adc	r25, r1
    a142:	96 95       	lsr	r25
    a144:	87 95       	ror	r24
    a146:	97 f9       	bld	r25, 7
    a148:	08 95       	ret

0000a14a <sin>:
    a14a:	9f 93       	push	r25
    a14c:	0e 94 46 4f 	call	0x9e8c	; 0x9e8c <__fp_rempio2>
    a150:	0f 90       	pop	r0
    a152:	07 fc       	sbrc	r0, 7
    a154:	ee 5f       	subi	r30, 0xFE	; 254
    a156:	0c 94 80 4f 	jmp	0x9f00	; 0x9f00 <__fp_sinus>
    a15a:	19 f4       	brne	.+6      	; 0xa162 <sin+0x18>
    a15c:	16 f4       	brtc	.+4      	; 0xa162 <sin+0x18>
    a15e:	0c 94 0c 4f 	jmp	0x9e18	; 0x9e18 <__fp_nan>
    a162:	0c 94 f7 50 	jmp	0xa1ee	; 0xa1ee <__fp_mpack>

0000a166 <sqrt>:
    a166:	0e 94 9c 4f 	call	0x9f38	; 0x9f38 <__fp_splitA>
    a16a:	b8 f3       	brcs	.-18     	; 0xa15a <sin+0x10>
    a16c:	99 23       	and	r25, r25
    a16e:	c9 f3       	breq	.-14     	; 0xa162 <sin+0x18>
    a170:	b6 f3       	brts	.-20     	; 0xa15e <sin+0x14>
    a172:	9f 57       	subi	r25, 0x7F	; 127
    a174:	55 0b       	sbc	r21, r21
    a176:	87 ff       	sbrs	r24, 7
    a178:	0e 94 05 51 	call	0xa20a	; 0xa20a <__fp_norm2>
    a17c:	00 24       	eor	r0, r0
    a17e:	a0 e6       	ldi	r26, 0x60	; 96
    a180:	40 ea       	ldi	r20, 0xA0	; 160
    a182:	90 01       	movw	r18, r0
    a184:	80 58       	subi	r24, 0x80	; 128
    a186:	56 95       	lsr	r21
    a188:	97 95       	ror	r25
    a18a:	28 f4       	brcc	.+10     	; 0xa196 <sqrt+0x30>
    a18c:	80 5c       	subi	r24, 0xC0	; 192
    a18e:	66 0f       	add	r22, r22
    a190:	77 1f       	adc	r23, r23
    a192:	88 1f       	adc	r24, r24
    a194:	20 f0       	brcs	.+8      	; 0xa19e <sqrt+0x38>
    a196:	26 17       	cp	r18, r22
    a198:	37 07       	cpc	r19, r23
    a19a:	48 07       	cpc	r20, r24
    a19c:	30 f4       	brcc	.+12     	; 0xa1aa <sqrt+0x44>
    a19e:	62 1b       	sub	r22, r18
    a1a0:	73 0b       	sbc	r23, r19
    a1a2:	84 0b       	sbc	r24, r20
    a1a4:	20 29       	or	r18, r0
    a1a6:	31 29       	or	r19, r1
    a1a8:	4a 2b       	or	r20, r26
    a1aa:	a6 95       	lsr	r26
    a1ac:	17 94       	ror	r1
    a1ae:	07 94       	ror	r0
    a1b0:	20 25       	eor	r18, r0
    a1b2:	31 25       	eor	r19, r1
    a1b4:	4a 27       	eor	r20, r26
    a1b6:	58 f7       	brcc	.-42     	; 0xa18e <sqrt+0x28>
    a1b8:	66 0f       	add	r22, r22
    a1ba:	77 1f       	adc	r23, r23
    a1bc:	88 1f       	adc	r24, r24
    a1be:	20 f0       	brcs	.+8      	; 0xa1c8 <sqrt+0x62>
    a1c0:	26 17       	cp	r18, r22
    a1c2:	37 07       	cpc	r19, r23
    a1c4:	48 07       	cpc	r20, r24
    a1c6:	30 f4       	brcc	.+12     	; 0xa1d4 <sqrt+0x6e>
    a1c8:	62 0b       	sbc	r22, r18
    a1ca:	73 0b       	sbc	r23, r19
    a1cc:	84 0b       	sbc	r24, r20
    a1ce:	20 0d       	add	r18, r0
    a1d0:	31 1d       	adc	r19, r1
    a1d2:	41 1d       	adc	r20, r1
    a1d4:	a0 95       	com	r26
    a1d6:	81 f7       	brne	.-32     	; 0xa1b8 <sqrt+0x52>
    a1d8:	b9 01       	movw	r22, r18
    a1da:	84 2f       	mov	r24, r20
    a1dc:	91 58       	subi	r25, 0x81	; 129
    a1de:	88 0f       	add	r24, r24
    a1e0:	96 95       	lsr	r25
    a1e2:	87 95       	ror	r24
    a1e4:	08 95       	ret

0000a1e6 <square>:
    a1e6:	9b 01       	movw	r18, r22
    a1e8:	ac 01       	movw	r20, r24
    a1ea:	0c 94 38 50 	jmp	0xa070	; 0xa070 <__mulsf3>

0000a1ee <__fp_mpack>:
    a1ee:	9f 3f       	cpi	r25, 0xFF	; 255
    a1f0:	31 f0       	breq	.+12     	; 0xa1fe <__fp_mpack_finite+0xc>

0000a1f2 <__fp_mpack_finite>:
    a1f2:	91 50       	subi	r25, 0x01	; 1
    a1f4:	20 f4       	brcc	.+8      	; 0xa1fe <__fp_mpack_finite+0xc>
    a1f6:	87 95       	ror	r24
    a1f8:	77 95       	ror	r23
    a1fa:	67 95       	ror	r22
    a1fc:	b7 95       	ror	r27
    a1fe:	88 0f       	add	r24, r24
    a200:	91 1d       	adc	r25, r1
    a202:	96 95       	lsr	r25
    a204:	87 95       	ror	r24
    a206:	97 f9       	bld	r25, 7
    a208:	08 95       	ret

0000a20a <__fp_norm2>:
    a20a:	91 50       	subi	r25, 0x01	; 1
    a20c:	50 40       	sbci	r21, 0x00	; 0
    a20e:	66 0f       	add	r22, r22
    a210:	77 1f       	adc	r23, r23
    a212:	88 1f       	adc	r24, r24
    a214:	d2 f7       	brpl	.-12     	; 0xa20a <__fp_norm2>
    a216:	08 95       	ret

0000a218 <__fp_powsodd>:
    a218:	9f 93       	push	r25
    a21a:	8f 93       	push	r24
    a21c:	7f 93       	push	r23
    a21e:	6f 93       	push	r22
    a220:	ff 93       	push	r31
    a222:	ef 93       	push	r30
    a224:	9b 01       	movw	r18, r22
    a226:	ac 01       	movw	r20, r24
    a228:	0e 94 38 50 	call	0xa070	; 0xa070 <__mulsf3>
    a22c:	ef 91       	pop	r30
    a22e:	ff 91       	pop	r31
    a230:	0e 94 0f 4f 	call	0x9e1e	; 0x9e1e <__fp_powser>
    a234:	2f 91       	pop	r18
    a236:	3f 91       	pop	r19
    a238:	4f 91       	pop	r20
    a23a:	5f 91       	pop	r21
    a23c:	0c 94 38 50 	jmp	0xa070	; 0xa070 <__mulsf3>

0000a240 <__mulsi3>:
    a240:	db 01       	movw	r26, r22
    a242:	8f 93       	push	r24
    a244:	9f 93       	push	r25
    a246:	0e 94 8d 51 	call	0xa31a	; 0xa31a <__muluhisi3>
    a24a:	bf 91       	pop	r27
    a24c:	af 91       	pop	r26
    a24e:	a2 9f       	mul	r26, r18
    a250:	80 0d       	add	r24, r0
    a252:	91 1d       	adc	r25, r1
    a254:	a3 9f       	mul	r26, r19
    a256:	90 0d       	add	r25, r0
    a258:	b2 9f       	mul	r27, r18
    a25a:	90 0d       	add	r25, r0
    a25c:	11 24       	eor	r1, r1
    a25e:	08 95       	ret

0000a260 <__divmodhi4>:
    a260:	97 fb       	bst	r25, 7
    a262:	07 2e       	mov	r0, r23
    a264:	16 f4       	brtc	.+4      	; 0xa26a <__divmodhi4+0xa>
    a266:	00 94       	com	r0
    a268:	07 d0       	rcall	.+14     	; 0xa278 <__divmodhi4_neg1>
    a26a:	77 fd       	sbrc	r23, 7
    a26c:	09 d0       	rcall	.+18     	; 0xa280 <__divmodhi4_neg2>
    a26e:	0e 94 a1 51 	call	0xa342	; 0xa342 <__udivmodhi4>
    a272:	07 fc       	sbrc	r0, 7
    a274:	05 d0       	rcall	.+10     	; 0xa280 <__divmodhi4_neg2>
    a276:	3e f4       	brtc	.+14     	; 0xa286 <__divmodhi4_exit>

0000a278 <__divmodhi4_neg1>:
    a278:	90 95       	com	r25
    a27a:	81 95       	neg	r24
    a27c:	9f 4f       	sbci	r25, 0xFF	; 255
    a27e:	08 95       	ret

0000a280 <__divmodhi4_neg2>:
    a280:	70 95       	com	r23
    a282:	61 95       	neg	r22
    a284:	7f 4f       	sbci	r23, 0xFF	; 255

0000a286 <__divmodhi4_exit>:
    a286:	08 95       	ret

0000a288 <__udivmodsi4>:
    a288:	a1 e2       	ldi	r26, 0x21	; 33
    a28a:	1a 2e       	mov	r1, r26
    a28c:	aa 1b       	sub	r26, r26
    a28e:	bb 1b       	sub	r27, r27
    a290:	fd 01       	movw	r30, r26
    a292:	0d c0       	rjmp	.+26     	; 0xa2ae <__udivmodsi4_ep>

0000a294 <__udivmodsi4_loop>:
    a294:	aa 1f       	adc	r26, r26
    a296:	bb 1f       	adc	r27, r27
    a298:	ee 1f       	adc	r30, r30
    a29a:	ff 1f       	adc	r31, r31
    a29c:	a2 17       	cp	r26, r18
    a29e:	b3 07       	cpc	r27, r19
    a2a0:	e4 07       	cpc	r30, r20
    a2a2:	f5 07       	cpc	r31, r21
    a2a4:	20 f0       	brcs	.+8      	; 0xa2ae <__udivmodsi4_ep>
    a2a6:	a2 1b       	sub	r26, r18
    a2a8:	b3 0b       	sbc	r27, r19
    a2aa:	e4 0b       	sbc	r30, r20
    a2ac:	f5 0b       	sbc	r31, r21

0000a2ae <__udivmodsi4_ep>:
    a2ae:	66 1f       	adc	r22, r22
    a2b0:	77 1f       	adc	r23, r23
    a2b2:	88 1f       	adc	r24, r24
    a2b4:	99 1f       	adc	r25, r25
    a2b6:	1a 94       	dec	r1
    a2b8:	69 f7       	brne	.-38     	; 0xa294 <__udivmodsi4_loop>
    a2ba:	60 95       	com	r22
    a2bc:	70 95       	com	r23
    a2be:	80 95       	com	r24
    a2c0:	90 95       	com	r25
    a2c2:	9b 01       	movw	r18, r22
    a2c4:	ac 01       	movw	r20, r24
    a2c6:	bd 01       	movw	r22, r26
    a2c8:	cf 01       	movw	r24, r30
    a2ca:	08 95       	ret

0000a2cc <__divmodsi4>:
    a2cc:	05 2e       	mov	r0, r21
    a2ce:	97 fb       	bst	r25, 7
    a2d0:	1e f4       	brtc	.+6      	; 0xa2d8 <__divmodsi4+0xc>
    a2d2:	00 94       	com	r0
    a2d4:	0e 94 7d 51 	call	0xa2fa	; 0xa2fa <__negsi2>
    a2d8:	57 fd       	sbrc	r21, 7
    a2da:	07 d0       	rcall	.+14     	; 0xa2ea <__divmodsi4_neg2>
    a2dc:	0e 94 44 51 	call	0xa288	; 0xa288 <__udivmodsi4>
    a2e0:	07 fc       	sbrc	r0, 7
    a2e2:	03 d0       	rcall	.+6      	; 0xa2ea <__divmodsi4_neg2>
    a2e4:	4e f4       	brtc	.+18     	; 0xa2f8 <__divmodsi4_exit>
    a2e6:	0c 94 7d 51 	jmp	0xa2fa	; 0xa2fa <__negsi2>

0000a2ea <__divmodsi4_neg2>:
    a2ea:	50 95       	com	r21
    a2ec:	40 95       	com	r20
    a2ee:	30 95       	com	r19
    a2f0:	21 95       	neg	r18
    a2f2:	3f 4f       	sbci	r19, 0xFF	; 255
    a2f4:	4f 4f       	sbci	r20, 0xFF	; 255
    a2f6:	5f 4f       	sbci	r21, 0xFF	; 255

0000a2f8 <__divmodsi4_exit>:
    a2f8:	08 95       	ret

0000a2fa <__negsi2>:
    a2fa:	90 95       	com	r25
    a2fc:	80 95       	com	r24
    a2fe:	70 95       	com	r23
    a300:	61 95       	neg	r22
    a302:	7f 4f       	sbci	r23, 0xFF	; 255
    a304:	8f 4f       	sbci	r24, 0xFF	; 255
    a306:	9f 4f       	sbci	r25, 0xFF	; 255
    a308:	08 95       	ret

0000a30a <__tablejump2__>:
    a30a:	ee 0f       	add	r30, r30
    a30c:	ff 1f       	adc	r31, r31
    a30e:	88 1f       	adc	r24, r24
    a310:	8b bf       	out	0x3b, r24	; 59
    a312:	07 90       	elpm	r0, Z+
    a314:	f6 91       	elpm	r31, Z
    a316:	e0 2d       	mov	r30, r0
    a318:	19 94       	eijmp

0000a31a <__muluhisi3>:
    a31a:	0e 94 b5 51 	call	0xa36a	; 0xa36a <__umulhisi3>
    a31e:	a5 9f       	mul	r26, r21
    a320:	90 0d       	add	r25, r0
    a322:	b4 9f       	mul	r27, r20
    a324:	90 0d       	add	r25, r0
    a326:	a4 9f       	mul	r26, r20
    a328:	80 0d       	add	r24, r0
    a32a:	91 1d       	adc	r25, r1
    a32c:	11 24       	eor	r1, r1
    a32e:	08 95       	ret

0000a330 <__subdi3>:
    a330:	2a 19       	sub	r18, r10
    a332:	3b 09       	sbc	r19, r11
    a334:	4c 09       	sbc	r20, r12
    a336:	5d 09       	sbc	r21, r13
    a338:	6e 09       	sbc	r22, r14
    a33a:	7f 09       	sbc	r23, r15
    a33c:	80 0b       	sbc	r24, r16
    a33e:	91 0b       	sbc	r25, r17
    a340:	08 95       	ret

0000a342 <__udivmodhi4>:
    a342:	aa 1b       	sub	r26, r26
    a344:	bb 1b       	sub	r27, r27
    a346:	51 e1       	ldi	r21, 0x11	; 17
    a348:	07 c0       	rjmp	.+14     	; 0xa358 <__udivmodhi4_ep>

0000a34a <__udivmodhi4_loop>:
    a34a:	aa 1f       	adc	r26, r26
    a34c:	bb 1f       	adc	r27, r27
    a34e:	a6 17       	cp	r26, r22
    a350:	b7 07       	cpc	r27, r23
    a352:	10 f0       	brcs	.+4      	; 0xa358 <__udivmodhi4_ep>
    a354:	a6 1b       	sub	r26, r22
    a356:	b7 0b       	sbc	r27, r23

0000a358 <__udivmodhi4_ep>:
    a358:	88 1f       	adc	r24, r24
    a35a:	99 1f       	adc	r25, r25
    a35c:	5a 95       	dec	r21
    a35e:	a9 f7       	brne	.-22     	; 0xa34a <__udivmodhi4_loop>
    a360:	80 95       	com	r24
    a362:	90 95       	com	r25
    a364:	bc 01       	movw	r22, r24
    a366:	cd 01       	movw	r24, r26
    a368:	08 95       	ret

0000a36a <__umulhisi3>:
    a36a:	a2 9f       	mul	r26, r18
    a36c:	b0 01       	movw	r22, r0
    a36e:	b3 9f       	mul	r27, r19
    a370:	c0 01       	movw	r24, r0
    a372:	a3 9f       	mul	r26, r19
    a374:	70 0d       	add	r23, r0
    a376:	81 1d       	adc	r24, r1
    a378:	11 24       	eor	r1, r1
    a37a:	91 1d       	adc	r25, r1
    a37c:	b2 9f       	mul	r27, r18
    a37e:	70 0d       	add	r23, r0
    a380:	81 1d       	adc	r24, r1
    a382:	11 24       	eor	r1, r1
    a384:	91 1d       	adc	r25, r1
    a386:	08 95       	ret

0000a388 <do_rand>:
    a388:	8f 92       	push	r8
    a38a:	9f 92       	push	r9
    a38c:	af 92       	push	r10
    a38e:	bf 92       	push	r11
    a390:	cf 92       	push	r12
    a392:	df 92       	push	r13
    a394:	ef 92       	push	r14
    a396:	ff 92       	push	r15
    a398:	cf 93       	push	r28
    a39a:	df 93       	push	r29
    a39c:	ec 01       	movw	r28, r24
    a39e:	68 81       	ld	r22, Y
    a3a0:	79 81       	ldd	r23, Y+1	; 0x01
    a3a2:	8a 81       	ldd	r24, Y+2	; 0x02
    a3a4:	9b 81       	ldd	r25, Y+3	; 0x03
    a3a6:	61 15       	cp	r22, r1
    a3a8:	71 05       	cpc	r23, r1
    a3aa:	81 05       	cpc	r24, r1
    a3ac:	91 05       	cpc	r25, r1
    a3ae:	21 f4       	brne	.+8      	; 0xa3b8 <do_rand+0x30>
    a3b0:	64 e2       	ldi	r22, 0x24	; 36
    a3b2:	79 ed       	ldi	r23, 0xD9	; 217
    a3b4:	8b e5       	ldi	r24, 0x5B	; 91
    a3b6:	97 e0       	ldi	r25, 0x07	; 7
    a3b8:	2d e1       	ldi	r18, 0x1D	; 29
    a3ba:	33 ef       	ldi	r19, 0xF3	; 243
    a3bc:	41 e0       	ldi	r20, 0x01	; 1
    a3be:	50 e0       	ldi	r21, 0x00	; 0
    a3c0:	0e 94 66 51 	call	0xa2cc	; 0xa2cc <__divmodsi4>
    a3c4:	49 01       	movw	r8, r18
    a3c6:	5a 01       	movw	r10, r20
    a3c8:	9b 01       	movw	r18, r22
    a3ca:	ac 01       	movw	r20, r24
    a3cc:	a7 ea       	ldi	r26, 0xA7	; 167
    a3ce:	b1 e4       	ldi	r27, 0x41	; 65
    a3d0:	0e 94 8d 51 	call	0xa31a	; 0xa31a <__muluhisi3>
    a3d4:	6b 01       	movw	r12, r22
    a3d6:	7c 01       	movw	r14, r24
    a3d8:	ac ee       	ldi	r26, 0xEC	; 236
    a3da:	b4 ef       	ldi	r27, 0xF4	; 244
    a3dc:	a5 01       	movw	r20, r10
    a3de:	94 01       	movw	r18, r8
    a3e0:	0e 94 7c 52 	call	0xa4f8	; 0xa4f8 <__mulohisi3>
    a3e4:	dc 01       	movw	r26, r24
    a3e6:	cb 01       	movw	r24, r22
    a3e8:	8c 0d       	add	r24, r12
    a3ea:	9d 1d       	adc	r25, r13
    a3ec:	ae 1d       	adc	r26, r14
    a3ee:	bf 1d       	adc	r27, r15
    a3f0:	b7 ff       	sbrs	r27, 7
    a3f2:	03 c0       	rjmp	.+6      	; 0xa3fa <do_rand+0x72>
    a3f4:	01 97       	sbiw	r24, 0x01	; 1
    a3f6:	a1 09       	sbc	r26, r1
    a3f8:	b0 48       	sbci	r27, 0x80	; 128
    a3fa:	88 83       	st	Y, r24
    a3fc:	99 83       	std	Y+1, r25	; 0x01
    a3fe:	aa 83       	std	Y+2, r26	; 0x02
    a400:	bb 83       	std	Y+3, r27	; 0x03
    a402:	9f 77       	andi	r25, 0x7F	; 127
    a404:	df 91       	pop	r29
    a406:	cf 91       	pop	r28
    a408:	ff 90       	pop	r15
    a40a:	ef 90       	pop	r14
    a40c:	df 90       	pop	r13
    a40e:	cf 90       	pop	r12
    a410:	bf 90       	pop	r11
    a412:	af 90       	pop	r10
    a414:	9f 90       	pop	r9
    a416:	8f 90       	pop	r8
    a418:	08 95       	ret

0000a41a <rand_r>:
    a41a:	0c 94 c4 51 	jmp	0xa388	; 0xa388 <do_rand>

0000a41e <rand>:
    a41e:	80 e0       	ldi	r24, 0x00	; 0
    a420:	92 e0       	ldi	r25, 0x02	; 2
    a422:	0c 94 c4 51 	jmp	0xa388	; 0xa388 <do_rand>

0000a426 <srand>:
    a426:	a0 e0       	ldi	r26, 0x00	; 0
    a428:	b0 e0       	ldi	r27, 0x00	; 0
    a42a:	80 93 00 02 	sts	0x0200, r24	; 0x800200 <__DATA_REGION_ORIGIN__>
    a42e:	90 93 01 02 	sts	0x0201, r25	; 0x800201 <__DATA_REGION_ORIGIN__+0x1>
    a432:	a0 93 02 02 	sts	0x0202, r26	; 0x800202 <__DATA_REGION_ORIGIN__+0x2>
    a436:	b0 93 03 02 	sts	0x0203, r27	; 0x800203 <__DATA_REGION_ORIGIN__+0x3>
    a43a:	08 95       	ret

0000a43c <memset>:
    a43c:	dc 01       	movw	r26, r24
    a43e:	01 c0       	rjmp	.+2      	; 0xa442 <memset+0x6>
    a440:	6d 93       	st	X+, r22
    a442:	41 50       	subi	r20, 0x01	; 1
    a444:	50 40       	sbci	r21, 0x00	; 0
    a446:	e0 f7       	brcc	.-8      	; 0xa440 <memset+0x4>
    a448:	08 95       	ret

0000a44a <eeprom_read_block>:
    a44a:	dc 01       	movw	r26, r24
    a44c:	cb 01       	movw	r24, r22

0000a44e <eeprom_read_blraw>:
    a44e:	fc 01       	movw	r30, r24
    a450:	f9 99       	sbic	0x1f, 1	; 31
    a452:	fe cf       	rjmp	.-4      	; 0xa450 <eeprom_read_blraw+0x2>
    a454:	06 c0       	rjmp	.+12     	; 0xa462 <eeprom_read_blraw+0x14>
    a456:	f2 bd       	out	0x22, r31	; 34
    a458:	e1 bd       	out	0x21, r30	; 33
    a45a:	f8 9a       	sbi	0x1f, 0	; 31
    a45c:	31 96       	adiw	r30, 0x01	; 1
    a45e:	00 b4       	in	r0, 0x20	; 32
    a460:	0d 92       	st	X+, r0
    a462:	41 50       	subi	r20, 0x01	; 1
    a464:	50 40       	sbci	r21, 0x00	; 0
    a466:	b8 f7       	brcc	.-18     	; 0xa456 <eeprom_read_blraw+0x8>
    a468:	08 95       	ret

0000a46a <eeprom_read_byte>:
    a46a:	f9 99       	sbic	0x1f, 1	; 31
    a46c:	fe cf       	rjmp	.-4      	; 0xa46a <eeprom_read_byte>
    a46e:	92 bd       	out	0x22, r25	; 34
    a470:	81 bd       	out	0x21, r24	; 33
    a472:	f8 9a       	sbi	0x1f, 0	; 31
    a474:	99 27       	eor	r25, r25
    a476:	80 b5       	in	r24, 0x20	; 32
    a478:	08 95       	ret

0000a47a <eeprom_read_word>:
    a47a:	a8 e1       	ldi	r26, 0x18	; 24
    a47c:	b0 e0       	ldi	r27, 0x00	; 0
    a47e:	42 e0       	ldi	r20, 0x02	; 2
    a480:	50 e0       	ldi	r21, 0x00	; 0
    a482:	0c 94 27 52 	jmp	0xa44e	; 0xa44e <eeprom_read_blraw>

0000a486 <eeprom_update_block>:
    a486:	dc 01       	movw	r26, r24
    a488:	a4 0f       	add	r26, r20
    a48a:	b5 1f       	adc	r27, r21
    a48c:	41 50       	subi	r20, 0x01	; 1
    a48e:	50 40       	sbci	r21, 0x00	; 0
    a490:	48 f0       	brcs	.+18     	; 0xa4a4 <eeprom_update_block+0x1e>
    a492:	cb 01       	movw	r24, r22
    a494:	84 0f       	add	r24, r20
    a496:	95 1f       	adc	r25, r21
    a498:	2e 91       	ld	r18, -X
    a49a:	0e 94 54 52 	call	0xa4a8	; 0xa4a8 <eeprom_update_r18>
    a49e:	41 50       	subi	r20, 0x01	; 1
    a4a0:	50 40       	sbci	r21, 0x00	; 0
    a4a2:	d0 f7       	brcc	.-12     	; 0xa498 <eeprom_update_block+0x12>
    a4a4:	08 95       	ret

0000a4a6 <eeprom_update_byte>:
    a4a6:	26 2f       	mov	r18, r22

0000a4a8 <eeprom_update_r18>:
    a4a8:	f9 99       	sbic	0x1f, 1	; 31
    a4aa:	fe cf       	rjmp	.-4      	; 0xa4a8 <eeprom_update_r18>
    a4ac:	92 bd       	out	0x22, r25	; 34
    a4ae:	81 bd       	out	0x21, r24	; 33
    a4b0:	f8 9a       	sbi	0x1f, 0	; 31
    a4b2:	01 97       	sbiw	r24, 0x01	; 1
    a4b4:	00 b4       	in	r0, 0x20	; 32
    a4b6:	02 16       	cp	r0, r18
    a4b8:	39 f0       	breq	.+14     	; 0xa4c8 <eeprom_update_r18+0x20>
    a4ba:	1f ba       	out	0x1f, r1	; 31
    a4bc:	20 bd       	out	0x20, r18	; 32
    a4be:	0f b6       	in	r0, 0x3f	; 63
    a4c0:	f8 94       	cli
    a4c2:	fa 9a       	sbi	0x1f, 2	; 31
    a4c4:	f9 9a       	sbi	0x1f, 1	; 31
    a4c6:	0f be       	out	0x3f, r0	; 63
    a4c8:	08 95       	ret

0000a4ca <eeprom_update_word>:
    a4ca:	01 96       	adiw	r24, 0x01	; 1
    a4cc:	27 2f       	mov	r18, r23
    a4ce:	0e 94 54 52 	call	0xa4a8	; 0xa4a8 <eeprom_update_r18>
    a4d2:	0c 94 53 52 	jmp	0xa4a6	; 0xa4a6 <eeprom_update_byte>

0000a4d6 <eeprom_write_byte>:
    a4d6:	26 2f       	mov	r18, r22

0000a4d8 <eeprom_write_r18>:
    a4d8:	f9 99       	sbic	0x1f, 1	; 31
    a4da:	fe cf       	rjmp	.-4      	; 0xa4d8 <eeprom_write_r18>
    a4dc:	1f ba       	out	0x1f, r1	; 31
    a4de:	92 bd       	out	0x22, r25	; 34
    a4e0:	81 bd       	out	0x21, r24	; 33
    a4e2:	20 bd       	out	0x20, r18	; 32
    a4e4:	0f b6       	in	r0, 0x3f	; 63
    a4e6:	f8 94       	cli
    a4e8:	fa 9a       	sbi	0x1f, 2	; 31
    a4ea:	f9 9a       	sbi	0x1f, 1	; 31
    a4ec:	0f be       	out	0x3f, r0	; 63
    a4ee:	01 96       	adiw	r24, 0x01	; 1
    a4f0:	08 95       	ret

0000a4f2 <__mulshisi3>:
    a4f2:	b7 ff       	sbrs	r27, 7
    a4f4:	0c 94 8d 51 	jmp	0xa31a	; 0xa31a <__muluhisi3>

0000a4f8 <__mulohisi3>:
    a4f8:	0e 94 8d 51 	call	0xa31a	; 0xa31a <__muluhisi3>
    a4fc:	82 1b       	sub	r24, r18
    a4fe:	93 0b       	sbc	r25, r19
    a500:	08 95       	ret

0000a502 <_exit>:
    a502:	f8 94       	cli

0000a504 <__stop_program>:
    a504:	ff cf       	rjmp	.-2      	; 0xa504 <__stop_program>
